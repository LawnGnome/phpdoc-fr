<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
 <chapter id="features.http-auth">
  <title>Authentification HTTP avec PHP</title>
  <simpara>
     Les fonctions d'authentification <acronym>HTTP</acronym> de PHP ne sont disponibles
     que si PHP est ex&eacute;cut&eacute; comme module Apache, et non
     pas sous la forme d'un CGI. Sous cette forme, il est possible
     d'utiliser la fonction <function>header</function> pour demander
     une authentification ("Authentication Required" ) au client,
     g&eacute;n&eacute;rant ainsi l'apparition d'une fen&ecirc;tre
     de demande d'utilisateur et de mot de passe. Une fois que les
     champs ont &eacute;t&eacute; remplis, l'URL sera de nouveau
     appel&eacute;e, avec les variables <varname>$PHP_AUTH_USER</varname>,
     <varname>$PHP_AUTH_PW</varname> et  <varname>$PHP_AUTH_TYPE</varname>
     contenant respectivement le nom d'utilisateur, le mot de passe et
     le type d'authentification. Actuellement, seule l'authentification
     simple ("Basic") est support&eacute;e. Reportez-vous &agrave; la fonction
     <function>header</function> pour plus d'informations.
   </simpara>

  <note>
   <title>Note sur les versions de PHP</title>
   <para>
    Les <link linkend="language.variables.superglobals">auto-globales</link>, 
    telles que <link linkend="reserved.variables.server">$_SERVER</link>, ont &eacute;t&eacute;
    ajout&eacute;e en &php; &agrave; partir de la version 
    <ulink url="&url.php.release4.1.0;">4.1.0</ulink>. 
    <varname>$HTTP_SERVER_VARS</varname> est disponible depuis PHP 3.
   </para>
  </note>

  <para>
   Voici un exemple de script qui force l'authentification du client
   pour acc&eacute;der &agrave; une page :
   <example>
    <title>Exemple d'authentification HTTP</title>
    <programlisting role="php">
<![CDATA[
<?php
  if (!isset($_SERVER['PHP_AUTH_USER'])) {
    header('WWW-Authenticate: Basic realm="My Realm"');
    header('HTTP/1.0 401 Unauthorized');
    echo 'Texte utilis&eacute; si le visiteur utilise le bouton d\'annulation';
    exit;
  } else {
    echo "<p>Bonjour, {$_SERVER['PHP_AUTH_USER']}.</p>";
    echo "<p>Votre mot de passe est {$_SERVER['PHP_AUTH_PW']}.</p>";
  }
?>
]]>
    </programlisting>
   </example>
   </para>

  <note>
   <title>Note de compatibilit&eacute;</title>
   <para>
    Soyez bien prudent lorsque vous utilisez des ent&ecirc;tes HTTP avec &php;. Afin de
    garantir un maximum de compatibilit&eacute; entre les navigateurs, le mot cl&eacute; 
    "Basic" doit &ecirc;tre &eacute;crit avec un B majuscule, et le texte de pr&eacute;sentation
    doit &ecirc;tre plac&eacute; entre guillemets simples, et exactement un espace doit
    pr&eacute;c&eacute;der le code <emphasis>401</emphasis> dans l'ent&ecirc;te
    <emphasis>HTTP/1.0 401</emphasis>.
   </para>
  </note>

  <para>
     Au lieu d'afficher simplement les variables globales <varname>$PHP_AUTH_USER</varname>
     et <varname>$PHP_AUTH_PW</varname>, vous pr&eacute;f&eacute;rerez s&ucirc;rement
     v&eacute;rifier la validit&eacute; du nom d'utilisateur et du mot de passe.
     Par exemple, en envoyant ces informations &agrave; une base de donn&eacute;es,
     ou en recherchant dans un fichier dbm.
  </para>
  <para>
    M&eacute;fiez-vous des navigateurs bugg&eacute;s, tels que Internet Explorer.
    Ils semblent tr&egrave;s susceptibles concernant l'ordre des en-t&ecirc;tes.
    Envoyer l'en-t&ecirc;te d'authentification (<emphasis>WWW-Authenticate</emphasis>)
    avant le code de <errorcode>HTTP/1.0 401</errorcode> semble lui convenir
    jusqu'&agrave; pr&eacute;sent.
  </para>
  <simpara>
    Pour &eacute;viter que quelqu'un &eacute;crive un script qui
    r&eacute;v&egrave;le les mots de passe d'une page, &agrave; la
    quelle on a acc&eacute;d&eacute; par une authentification traditionnelle,
    les variables globales PHP_AUTH ne seront pas assign&eacute;es si
    l'authentification externe a &eacute;t&eacute; activ&eacute;e pour
    cette page. Dans ce cas, la variable <varname>REMOTE_USER</varname> peut &ecirc;tre
    utilis&eacute;e pour identifier l'utilisateur &agrave; l'ext&eacute;rieur.
    De m&ecirc;me que <varname>$_SERVER['REMOTE_USER']</varname>.
  </simpara>
  <note>
   <title>Note de configuration</title>
   <para>
    &php; utilise la pr&eacute;sence de la directive <literal>AuthType</literal>
    pour d&eacute;terminer si une authentification externe est activ&eacute;.
    ƒvitez donc cette directive de contexte si vous voulez utiliser
    l'authentification de &php; (sinon, les deux authentifications
    se contrediront, et &eacute;choueront).
   </para>
  </note>

  <simpara>
    Notez cependant que les manipulations ci-dessus n'emp&ecirc;chent
    pas quiconque poss&egrave;de une page non authentifi&eacute;e
    de voler les mots de passe des pages prot&eacute;g&eacute;es,
    sur le m&ecirc;me serveur.
  </simpara>
  <simpara>
   Netscape et Internet Explorer effaceront le cache d'authentification client
   s'ils recoivent une r&eacute;ponse 401. Cela permet de d&eacute;connecter
   un utilisateur, pour le forcer &agrave; r&eacute;-entrer son nom de compte
   et son mot de passe. Certains programmeurs l'utilisent pour donner un
   d&eacute;lai d'expiration, ou alors, fournissent un bouton de d&eacute;connexion.
  </simpara>
  <example>
   <title>
    Authentification HTTP avec nom d'utilisateur/mot de passe forc&eacute;
   </title>
   <programlisting role="php">
<![CDATA[
<?php
  function authenticate() {
    header('WWW-Authenticate: Basic realm="Test Authentication System"');
    header('HTTP/1.0 401 Unauthorized');
    echo "You must enter a valid login ID and password to access this resource\n";
    exit;
  }
 
  if (!isset($_SERVER['PHP_AUTH_USER']) || ($_POST['SeenBefore'] == 1 && $_POST['OldAuth'] == $_SERVER['PHP_AUTH_USER'])) {
   authenticate();
  } 
  else {
   echo "<p>Welcome: {$_SERVER['PHP_AUTH_USER']}<br>";
   echo "Old: {$_REQUEST['OldAuth']}";
   echo "<form action='{$_SERVER['PHP_SELF']}' METHOD='POST'>\n";
   echo "<input type='hidden' name='SeenBefore' value='1'>\n";
   echo "<input type='hidden' name='OldAuth' value='{$_SERVER['PHP_AUTH_USER']}'>\n";
   echo "<input type='submit' value='Re Authenticate'>\n";
   echo "</form></p>\n";
  }
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Ce comportement n'est pas n&eacute;cessaire par le standard
   d'authentification HTTP Basic. Les tests avec Lynx ont montr&eacute;
   qu'il n'affectait pas les informations de session lors de la
   r&eacute;ception d'un message de type 401. Ce qui fait que presser la
   touche "retour" (back) &agrave; un client lynx pr&eacute;c&eacute;demment authentifi&eacute;
   donnera l'acc&egrave;s direct &agrave; la ressource. Cependant,
   l'utilisateur peut utiliser la touche '_' pour d&eacute;truire
   les anciennes authentifications.
  </simpara>
  <simpara>
   Notez aussi que tout ceci ne fonctionne pas sous Microsoft IIS et que les
   limitations de PHP en version CGI sont dues aux limitations de IIS.
  </simpara>
  <note>
   <para>
    Si le &safemode; est activ&eacute;, l'uid du script es ajout&eacute; automatiquement
    dans l'ent&ecirc;te <literal>realm</literal>, comme faisant partie de l'ent&ecirc;te
    <literal>WWW-Authenticate</literal>.
   </para>
  </note>

 </chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
