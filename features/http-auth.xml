<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.40 $ -->
<!-- EN-Revision: 1.49 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: yes -->

 <chapter xml:id="features.http-auth" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Identification HTTP avec &php;</title>

  <simpara>
   Les fonctions d'identification <acronym>HTTP</acronym> de &php; ne sont disponibles
   que si &php; est exécuté comme module Apache, et non
   pas sous la forme d'un CGI. Sous cette forme, il est possible
   d'utiliser la fonction <function>header</function> pour demander
   une identification (<literal>"Authentication Required"</literal>) au client,
   générant ainsi l'apparition d'une fenêtre
   de demande d'utilisateur et de mot de passe. Une fois que les
   champs ont été remplis, l'URL sera de nouveau
   appelée, avec les variables <varname>PHP_AUTH_USER</varname>,
   <varname>PHP_AUTH_PW</varname> et  <varname>AUTH_TYPE</varname>
   contenant respectivement le nom d'utilisateur, le mot de passe et
   le type d'identification. Ces variables prédéfinies sont trouvées dans les tableaux
   <link linkend="reserved.variables.server">$_SERVER</link> et
   <varname>$HTTP_SERVER_VARS</varname>.
   Les méthodes d'identification simple ("Basic") et de type "Digest" (depuis PHP 5.1.0)
   sont supportées. Reportez-vous à la fonction
   <function>header</function> pour plus d'informations.
  </simpara>

  <note>
   <title>Note sur les versions de &php;</title>
   <para>
    Les <link linkend="language.variables.superglobals">superglobales</link>,
    telles que <link linkend="reserved.variables.server">$_SERVER</link>,
    ont été ajoutées en &php; à partir de la version 
    <link xlink:href="&url.php.release4.1.0;">4.1.0</link>. 
    <varname>$HTTP_SERVER_VARS</varname> est disponible depuis &php; 3.
   </para>
  </note>

  <para>
   Voici un exemple de script qui force l'identification du client
   pour accéder à une page :
  </para>
  <para>
   <example>
    <title>Exemple d'identification HTTP simple</title>
    <programlisting role="php">
<![CDATA[
<?php
if (!isset($_SERVER['PHP_AUTH_USER'])) {
    header('WWW-Authenticate: Basic realm="My Realm"');
    header('HTTP/1.0 401 Unauthorized');
    echo 'Texte utilisé si le visiteur utilise le bouton d\'annulation';
    exit;
} else {
    echo "<p>Bonjour, {$_SERVER['PHP_AUTH_USER']}.</p>";
    echo "<p>Votre mot de passe est {$_SERVER['PHP_AUTH_PW']}.</p>";
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Exemple d'identification HTTP Digest</title>
    <para>
     Cet exemple montre comment appliquer l'utilisation d'un script
     d'identification HTTP de type "Digest". Pour plus d'informations,
     lisez la documentation <link xlink:href="&url.rfc;2617">RFC 2617</link>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$realm = 'Restricted area';

//utilisateur => mot de passe
$users = array('admin' => 'mypass', 'guest' => 'guest');


if (empty($_SERVER['PHP_AUTH_DIGEST'])) {
    header('HTTP/1.1 401 Unauthorized');
    header('WWW-Authenticate: Digest realm="'.$realm.
           '",qop="auth",nonce="'.uniqid().'",opaque="'.md5($realm).'"');

    die('Texte utilisé si le visiteur utilise le bouton d\'annulation');
}

// analyse la variable PHP_AUTH_DIGEST
if (!($data = http_digest_parse($_SERVER['PHP_AUTH_DIGEST'])) ||
    !isset($users[$data['username']]))
    die('Mauvaise Pièce d\'identité!');


// Génération de réponse valide
$A1 = md5($data['username'] . ':' . $realm . ':' . $users[$data['username']]);
$A2 = md5($_SERVER['REQUEST_METHOD'].':'.$data['uri']);
$valid_response = md5($A1.':'.$data['nonce'].':'.$data['nc'].':'.$data['cnonce'].':'.$data['qop'].':'.$A2);

if ($data['response'] != $valid_response)
    die('Mauvaise Pièce d\'identité!');

// ok, utilisateur & mot de passe valide
echo 'Vous êtes identifié en tant que : ' . $data['username'];

 
// fonction pour analyser l'en-tête http auth
function http_digest_parse($txt)
{
    // protection contre les données manquantes
    $needed_parts = array('nonce'=>1, 'nc'=>1, 'cnonce'=>1, 'qop'=>1, 'username'=>1, 'uri'=>1, 'response'=>1);
    $data = array();

    preg_match_all('@(\w+)=(?:([\'"])([^\2]+)\2|([^\s,]+))@', $txt, $matches, PREG_SET_ORDER);

    foreach ($matches as $m) {
        $data[$m[1]] = $m[3] ? $m[3] : $m[4];
        unset($needed_parts[$m[1]]);
    }

    return $needed_parts ? false : $data;
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <title>Note de compatibilité</title>
   <para>
    Soyez bien prudent lorsque vous utilisez des en-têtes HTTP avec &php;. Afin de
    garantir un maximum de compatibilité entre les navigateurs, le mot clé 
    "Basic" doit être écrit avec un B majuscule, et le texte de présentation
    doit être placé entre guillemets simples, et exactement un espace doit
    précéder le code <emphasis>401</emphasis> dans l'en-tête
    <emphasis>HTTP/1.0 401</emphasis>. Les paramètres d'authentification doivent
    être séparés par des virgules comme montré dans l'exemple ci-haut.
   </para>
  </note>

  <para>
   Au lieu d'afficher simplement les variables globales <varname>PHP_AUTH_USER</varname>
   et <varname>PHP_AUTH_PW</varname>, vous préférerez sûrement
   vérifier la validité du nom d'utilisateur et du mot de passe.
   Par exemple, en envoyant ces informations à une base de données,
   ou en recherchant dans un fichier dbm.
  </para>

  <para>
   Méfiez-vous des navigateurs bogués, tels qu'Internet Explorer.
   Ils semblent très susceptibles en ce qui concerne l'ordre des en-têtes.
   Envoyer l'en-tête d'identification (<literal>WWW-Authenticate</literal>)
   avant le code de <literal>HTTP/1.0 401</literal> semble lui convenir
   jusqu'à présent.
  </para>

  <simpara>
   Pour éviter que quelqu'un écrive un script qui
   révèle les mots de passe d'une page, à laquelle
   on a accédé par une identification traditionnelle,
   les variables globales PHP_AUTH ne seront pas assignées si
   l'identification externe a été activée pour
   cette page. Dans ce cas, la variable <varname>REMOTE_USER</varname> peut être
   utilisée pour identifier l'utilisateur à l'extérieur.
   De même que <varname>$_SERVER['REMOTE_USER']</varname>.
  </simpara>

  <note>
   <title>Note de configuration</title>
   <para>
    &php; utilise la présence de la directive <literal>AuthType</literal>
    pour déterminer si une identification externe est activée.
    Évitez donc cette directive de contexte si vous voulez utiliser
    l'identification de &php; (sinon, les deux identifications se contrediront, 
    et échoueront).
   </para>
  </note>

  <simpara>
   Notez cependant que les manipulations ci-dessus n'empêchent
   pas quiconque possède une page non identifiée
   de voler les mots de passe des pages protégées,
   sur le même serveur.
  </simpara>
  <simpara>
   Netscape et Internet Explorer effaceront le cache d'identification client
   s'ils reçoivent une réponse 401. Cela permet de déconnecter
   un utilisateur, pour le forcer à saisir à nouveau son nom de compte
   et son mot de passe. Certains programmeurs l'utilisent pour donner un
   délai d'expiration ou, alors, fournissent un bouton de déconnexion.
  </simpara>
  <para>
   <example>
    <title>Identification HTTP avec nom d'utilisateur/mot de passe forcé</title>
    <programlisting role="php">
<![CDATA[
<?php
function authenticate() {
    header('WWW-Authenticate: Basic realm="Test Authentication System"');
    header('HTTP/1.0 401 Unauthorized');
    echo "Vous devez entrer un identifiant et un mot de passe valides pour accéder
    à cette ressource.\n";
    exit;
}

if ( !isset($_SERVER['PHP_AUTH_USER']) || 
     ($_POST['SeenBefore'] == 1 && $_POST['OldAuth'] == $_SERVER['PHP_AUTH_USER'])) {
    authenticate();
} else {
    echo "<p>Bienvenue : {$_SERVER['PHP_AUTH_USER']}<br />";
    echo "Ancien : {$_REQUEST['OldAuth']}";
    echo "<form action='{$_SERVER['PHP_SELF']}' METHOD='post'>\n";
    echo "<input type='hidden' name='SeenBefore' value='1' />\n";
    echo "<input type='hidden' name='OldAuth' value='{$_SERVER['PHP_AUTH_USER']}' />\n";
    echo "<input type='submit' value='Re Authenticate' />\n";
    echo "</form></p>\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   Ce comportement n'est pas nécessaire par le standard
   d'identification <literal>HTTP Basic</literal>. Les tests avec 
   <literal>Lynx</literal> ont montré qu'il n'affectait 
   pas les informations de session lors de la réception d'un 
   message de type 401. Ce qui fait que presser la touche "retour" 
   (<literal>back</literal>) à un client <literal>Lynx</literal> 
   précédemment identifié donnera l'accès direct à 
   la ressource. Cependant, l'utilisateur peut utiliser la touche 
   <literal>'_'</literal> pour détruire les anciennes identifications.
  </simpara>
  <simpara>
   Notez également qu'avant &php; 4.3.3, l'identification HTTP ne fonctionne
   pas sous le serveur Mircosoft IIS avec la version CGI de &php; à cause d'une
   limitation de IIS. Pour que cela fonctionne en &php; 4.3.3+, vous devez éditer
   votre configuration de IIS "<literal>Directory Security</literal>". Cliquez
   sur "<literal>Edit</literal>" et activez uniquement 
   "<literal>Anonymous Access</literal>", tous les autres champs doivent
   être laissés non actifs.
  </simpara>
  <simpara>
   Une autre limitation si vous utilisez le module IIS (ISAPI) et &php; 4, vous ne devez 
   pas utiliser les variables <literal>PHP_AUTH_*</literal> mais à la place,
   la variable <literal>HTTP_AUTHORIZATION</literal> est disponible. Par exemple,
   utilisez le code suivant : <literal>list($user, $pw) = explode(':',  
   base64_decode(substr($_SERVER['HTTP_AUTHORIZATION'], 6)));</literal>
  </simpara>
  <note>
   <title>Note pour les utilisateurs de IIS :</title>
   <simpara>
    Pour que l'identification HTTP fonctionne avec IIS, la directive &php; 
    <link linkend="ini.cgi.rfc2616-headers">cgi.rfc2616_headers</link> 
    doit être définie à &zero; (la valeur par défaut).
   </simpara>
  </note>
  <note>
   <para>
    Si le <link linkend="ini.safe-mode">safe mode</link> est activé, le 
    <literal>uid</literal> de ce script est ajouté à la partie 
    <literal>realm</literal> des en-têtes 
    <literal>WWW-Authenticate</literal>.
   </para>
  </note>

 </chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
