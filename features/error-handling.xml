<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.15 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: partial -->
 <chapter id="features.error-handling">
  <title>Gestion des erreurs</title>
  <para>
   Il y a plusieurs types d'erreur et d'alerte.
   <table>
    <title>Types d'erreur PHP</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>Valeur</entry>
       <entry>Constante</entry>
       <entry>Description</entry>
       <entry>Note</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1</entry>
       <entry>E_ERROR</entry>
       <entry>Erreur fatale d'exécution</entry>
       <entry></entry>
      </row>
      <row>
       <entry>2</entry>
       <entry>E_WARNING</entry>
       <entry>Alerte d'exécution ( erreur non-fatale )</entry>
       <entry></entry>
      </row>
      <row>
       <entry>4</entry>
       <entry>E_PARSE</entry>
       <entry>Erreur de compilation</entry>
       <entry></entry>
      </row>
      <row>
       <entry>8</entry>
       <entry>E_NOTICE</entry>
       <entry>
        Notes d'exécution (moins critique que les alertes)
       </entry>
       <entry></entry>
      </row>
      <row>
       <entry>16</entry>
       <entry>E_CORE_ERROR</entry>
       <entry>Erreurs qui surviennent lors de l'initialisation de PHP</entry>
       <entry>PHP 4 seulement</entry>
      </row>
      <row>
       <entry>32</entry>
       <entry>E_CORE_WARNING</entry>
       <entry>
        Alertes qui surviennent lors de l'initialisation de PHP
       </entry>
       <entry>PHP 4 seulement</entry>
      </row>
      <row>
       <entry>64</entry>
       <entry>E_COMPILE_ERROR</entry>
       <entry>Erreur fatale de compilation</entry>
       <entry>PHP 4 seulement</entry>
      </row>
      <row>
       <entry>128</entry>
       <entry>E_COMPILE_WARNING</entry>
       <entry>Alerte de compilation (erreur non fatale)</entry>
       <entry>PHP 4 seulement</entry>
      </row>
      <row>
       <entry>256</entry>
       <entry>E_USER_ERROR</entry>
       <entry>Erreur générée par l'utilisateur</entry>
       <entry>PHP 4 seulement</entry>
      </row>
      <row>
       <entry>512</entry>
       <entry>E_USER_WARNING</entry>
       <entry>Alerte générée par l'utilisateur</entry>
       <entry>PHP 4 seulement</entry>
      </row>
      <row>
       <entry>1024</entry>
       <entry>E_USER_NOTICE </entry>
       <entry>Note générée par l'utilisateur</entry>
       <entry>PHP 4 seulement</entry>
      </row>
      <row>
       <entry></entry>
       <entry>E_ALL</entry>
       <entry>Toutes les erreurs ci-dessus</entry>
       <entry></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   Les valeurs ci-dessus (numériques ou symboliques) sont
   utilisées pour construire un champ de bit, qui spécifie
   quelles erreurs rapporter. Vous pouvez utiliser les
   <link linkend="language.operators.bitwise">opérateurs de bits</link>
   pour combiner ces valeurs et conserver uniquement celle qui vous
   intéresse. Notez que seuls, '|', '~', '!', et '&' seront
   utilisables dans &php.ini;, et qu'aucun opérateur
   ne sera utilisable dans <filename>php3.ini</filename>.
  </para>
  <para>
   En PHP 4, la valeur par défaut de
   <link linkend="ini.error-reporting">error_reporting</link> est à
   <literal>E_ALL & ~E_NOTICE</literal>, ce qui signifie que toutes les
   erreurs et alertes seront affichées, mais pas les notes. En PHP 3,
   la valeur par défaut est <literal>(E_ERROR | E_WARNING |
   E_PARSE)</literal>,
   c'est-à-dire la même chose. Notez bien que ces constantes ne
   sont pas supportées dans le fichier <filename>php3.ini</filename> de
   PHP 3, la valeur de <link
   linkend="ini.error-reporting">error_reporting</link>
   doit être numérique, c'est-à-dire <literal>7</literal>.
  </para>
  <para>
   La valeur initiale peut être modifiée dans le fichier &php.ini;,
   avec la directive
   <link linkend="ini.error-reporting">error_reporting</link>,
   dans le fichier de configuration d'Apache
   &httpd.conf;, avec la directive
   php_error_reporting (php3_error_reporting pour PHP 3),
   et enfin, dans le script même, en utilisant la fonction
   <function>error_reporting</function>.
  </para>
  <warning>
   <para>
    Lorsque vous portez votre code ou vos serveurs de PHP 3 en PHP 4
    vous devez vérifier les options et les appels à
    <function>error_reporting</function>. Sinon, vous courrez le risque
    de désactiver certains types d'erreurs et notamment E_COMPILE_ERROR.
    Cela peut conduire à des documents vides, sans aucun retour d'erreur.
   </para>
  </warning>
  <para>
   Toutes les <link linkend="language.expressions">expressions PHP</link>
   peuvent être appelées avec le préfixe "&#64;",
   qui annule le rapport d'erreur
   pour cette expression en particulier. Si une erreur survient durant une
   telle expression, et que l'option de
   <link linkend="ini.track-errors">suivi des erreurs </link> est activée,
   vous pourrez trouver le message d'erreur dans la variable globale,
   <varname>$php_errormsg</varname>.
  </para>
  <note>
   <para>
    Le préfixe opérateur <link linkend="language.operators.errorcontrol">&#64;</link>
    ne supprimera pas les messages liés aux erreurs d'analyse.
   </para>
  </note>
  <warning>
   <para>
    Actuellement, le préfixe <link linkend="language.operators.errorcontrol">&#64;</link>,
    opérateur de rapport d'erreur désactive tous les rapports,
    y compris les erreurs critiques qui interrompent le script. Entre autre,
    cela signifie que que si vous utilisez
    <link linkend="language.operators.errorcontrol">&#64;</link> pour supprimer
    des erreurs dans une fonction qui n'existe pas, ou qui a été mal
    orthographiée, le script sera terminé sans aucune indication.
   </para>
  </warning>
  <para>
   Ci-dessous, voici un exemple de gestion des erreurs avec PHP.
   On définit une fonction de gestion des erreurs qui enregistre les
   informations dans un fichier (au format XML), et envoie un email au développeur
   en cas d'erreur critique.
   <example>
    <title>Utiliser le contrôle d'erreur dans un script</title>
    <programlisting role="php">
<![CDATA[
<?php
// Nous effectuons nous-même notre contrôle d'erreur.
error_reporting(0);
// Fonction de gestion des erreurs utilisateur
function usererrorhandler($errno, $errmsg, $filename, $linenum, $vars) {
    // timestamp pour dater l'erreur
    $dt = date("Y-m-d H:i:s (T)");
    // definit un tableau associatif avec les chaînes d'erreur
    // en réalité, les seules entrées que nous considérerons
    // seront 2,8,256,512 et 1024
    $errortype = array(
                1   =>  "Erreur",
                2   =>  "Alerte",
                4   =>  "Erreur d'analyse",
                8   =>  "Note",
                16  =>  "Erreur interne",
                32  =>  "Alerte interne",
                64  =>  "Erreur de compilation",
                128 =>  "Alerte  de compilation",
                256 =>  "Erreur utilisateur",
                512 =>  "Alerte utilisateur",
                1024=>  "Note utilisateur"
                );
    // ensemble d'erreur pour lesquelles une trace sera conservée
    $user_errors = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);
    $err = "<errorentry>\n";
    $err .= "\t<datetime>".$dt."</datetime>\n";
    $err .= "\t<errornum>".$errno."</errnumber>\n";
    $err .= "\t<errortype>".$errortype[$errno]."</errortype>\n";
    $err .= "\t<errormsg>".$errmsg."</errormsg>\n";
    $err .= "\t<scriptname>".$filename."</scriptname>\n";
    $err .= "\t<scriptlinenum>".$linenum."</scriptlinenum>\n";
    if (in_array($errno, $user_errors))
        $err .= "\t<vartrace>".wddx_serialize_value($vars,"Variables")."</vartrace>\n";
    $err .= "</errorentry>\n\n";
    // pour test
    // echo $err;
    // sauve l'erreur dans le fichier, et emaile moi si l'erreur est critique
    error_log($err, 3, "/usr/local/php4/error.log");
    if ($errno == E_USER_ERROR)
        mail("phpdev@mydomain.com","Critical User Error",$err);
}

function distance($vect1, $vect2) {
    if (!is_array($vect1) || !is_array($vect2)) {
        trigger_error("Paramètres incorrects : arrays attendus", E_USER_ERROR);
        return NULL;
    }
    if (count($vect1) != count($vect2)) {
        trigger_error("Les vecteurs doivent être de la même taille", E_USER_ERROR);
        return NULL;
    }
    for ($i=0; $i&lt;count($vect1); $i++) {
        $c1 = $vect1[$i]; $c2 = $vect2[$i];
        $d = 0.0;
        if (!is_numeric($c1)) {
            trigger_error("La coordonnée $i du vecteur 1 n'est pas un nombre. Remplacée par zéro",
                            E_USER_WARNING);
            $c1 = 0.0;
        }
        if (!is_numeric($c2)) {
            trigger_error("La coordonnée $i du vecteur 2 n'est pas un nombre. Remplacée par zéro",
                            E_USER_WARNING);
            $c2 = 0.0;
        }
        $d += $c2*$c2 - $c1*$c1;
    }
    return sqrt($d);
}

$old_error_handler = set_error_handler("userErrorHandler");
// Constante indéfinie, génère une alerte
$t = I_AM_NOT_DEFINED;
// definition de quelques "vecteurs"
$a = array(2,3,"bla");
$b = array(5.5, 4.3, -1.6);
$c = array(1,-3);
// génère une erreur utilisateur
$t1 = distance($c,$b)."\n";
// génère une autre erreur utilisateur
$t2 = distance($b,"Je ne suis pas un tableau")."\n";
// génère une alerte
$t3 = distance($a,$b)."\n";
?>
]]>
    </programlisting>
   </example>
   Ceci est un exemple simple, qui montre comment utiliser les fonctions
   de <link linkend="ref.errorfunc">Gestions des erreurs</link>.
  </para>
  <para>
   Voir aussi 
   <function>error_reporting</function>,
   <function>error_log</function>,
   <function>set_error_handler</function>,
   <function>restore_error_handler</function>,
   <function>trigger_error</function> et
   <function>user_error</function>
  </para>
 </chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
