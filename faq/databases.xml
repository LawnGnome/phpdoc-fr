<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.27 Maintainer: gui Status: ready -->
 <chapter id="faq.databases">
  <title>Considérations sur les bases de données</title>
  <titleabbrev>Considérations sur les bases de données</titleabbrev>

  <para>
   Cette section traite de questions relatives aux relations entre &php; et
   les base de données. Oui, &php; peut accéder virtuellement à
   n'importe quelle base de données disponible aujourd'hui.
  </para>

  <qandaset>
   <qandaentry id="faq.databases.mssql">
    <question>
     <para>
      J'ai entendu dire qu'il était possible d'accéder à Microsoft SQL Server
      à partir de &php;. Comment est-ce possible?
     </para>
    </question>
    <answer>
     <para>
      Sur une machine Windows, vous pouvez tout simplement utiliser le support
      ODBC inclus avec le pilote ODBC adéquat.
     </para>
     <para>
      Sur des machines Unix, vous pouvez utiliser le pilote Sybase-CT pour
      accéder à Microsoft SQL Server car il est (en grande partie) compatible.
      Sybase a fourni une <ulink url="&url.sybase.ctlib;">version libre des
      bibliothèques nécessaires pour Linux</ulink>. Pour les autres systèmes
      Unix, vous devez contacter Sybase pour obtenir les bibliothèques adéquates.
      Jetez aussi un oeil à la réponse à la question suivante.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.databases.access">
    <question>
     <para>Puis-je accéder à des bases Microsoft Access</para>
    </question>
    <answer>
     <para>
      Oui. Vous avez déjà tous les outils nécessaires si vous utilisez
      uniquement Windows 9x/Me, ou NT/2000, et que vous utilisez ODBC avec les
      pilotes ODBC pour Microsoft Access.
     </para>
     <para>
      Si vous utilisez &php; sur une machine Unix et que vous voulez vous
      connecter à une base Access sur une machine Windows, vous aurez besoin
      des drivers ODBC Unix.
      <ulink url="&url.openlink;">OpenLink Software</ulink> fournit des
      pilotes ODBC pour Unix qui peuvent le faire. Il y a un système de pilote
      libre ou vous pouvez télécharger une version d'évaluation non limitée
      dans le temps et une version commerciale avec support à partir de 675$.
     </para>
     <para>
      Une autre solution consiste à utiliser un server SQL qui a des pilotes
      ODBC Windows et l'utiliser pour stocker les données, que vous pouvez
      utiliser à partir de Microsoft Access (en utilisant ODBC) et &php; (en
      utilisant les pilotes inclus), ou bien utiliser un format de fichier
      intermédiaire que Access et &php; peuvent traiter tous les deux, comme
      des fichier bruts ou des bases de données dBase. A ce sujet, Tim Hayes
      de Openlink software écrit :
      <blockquote>
       <para>
        Utiliser une autre base de données comme intermédiaire n'est pas une
        bonne idée lorsque vous pouvez utiliser ODBC de &php; directement vers
        vos bases de données - par exemple avec les pilotes Openlink. Si vous
        avez besoin d'un format de fichier intermédiaire, Openlink a publié
        Virtuoso (un moteur de base de données virtuel) pour NT, Linux et
        d'autres plates-formes Unix. Visitez notre <ulink
        url="&url.openlink;">site</ulink> pour un téléchargement gratuit.
       </para>
      </blockquote>
     </para>
     <para>
      Une solution qui a fait ses preuves est d'utiliser MySQL et ses drivers
      ODBC sous Windows et de synchroniser les bases de données. Steve
      Lawrence écrit :
     </para>
     <para>
      <itemizedlist>
       <listitem>
        <simpara>
         Installez MySQL sur votre plate-forme conformément aux instructions
         de MySQL. Vous pouvez l'obtenir sur <ulink
         url="&url.mysql;">www.mysql.com</ulink> (utilisez un miroir!). Aucune
         configuration particulière n'est nécessaire, mis à part que lorsque
         vous configurez une base de données et un compte utilisateur, il
         faille spécifier % dans le champ host, ou bien le nom de la machine
         Windows avec laquelle vous voulez accéder à MySQL. Notez bien votre
         nom de serveur, d'utilisateur et votre mot de passe.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Téléchargez les pilotes MyODBC pour Windows à partir du site de
         MySQL. La dernière version est myodbc-2_50_19-win95.zip (la version
         NT est aussi disponible, de même que le code source). Installez les
         sur votre machine Windows. Vous pouvez tester votre installation avec
         les utilitaires fournis avec les pilotes.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Créez un utilisateur ou une source de données système dans votre
         administration ODBC, dans le panneau de configuration. Donnez un nom
         de source de données dsn, entrez votre nom d'hôte, identifiant, mot
         de passe, port, etc pour la base de données configurée à l'étape 1.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Installez Access avec une installation complète pour être sûr d'avoir
         tous les composants nécessaires... Vous aurez besoin d'au moins le
         support ODBC et le gestionnaire de tables liées.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Maintenant, la partie amusante! Créez un accès à une base de données.
         Dans la fenêtre de la table, cliquez droit et sélectionner Lier les
         Tables, ou, dans le menu Fichier, sélectionnez Obtenir des données
         externes et alors Lier les Tables.
         Quand la fenêtre de gestion de fichiers apparaît, sélectionnez les
         fichiers de type : ODBC. Sélectionnez dsn Système et le nom de votre
         dsn créée à l'étape 3. Sélectionnez la table à lier, cliquez sur OK,
         et voilà! Vous pouvez maintenant ouvrir la table et
         ajouter/supprimer/éditer des données sur votre serveur MySQL! Vous
         pouvez ainsi exécuter des requêtes, importer/exporter des tables vers
         MySQL, construire des formulaires et des rapports, etc.
        </simpara>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      Trucs et astuces :
      <itemizedlist>
       <listitem>
        <simpara>
         Vous pouvez construire vos tables dans Access et les exporter dans
         MySQL, puis les lier de nouveau. Cela rend la création de table très
         rapide.
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         Lorsque vous créez des tables dans Access, vous devez avoir une clé
         primaire définie pour avoir accès en écriture à la table. Assurez
         vous que vous avez bien créé une clé primaire dans MySQL avant de
         lier le tout à Access
        </simpara>
       </listitem>
       <listitem>
        <simpara>
         SI vous changez une table dans MySQL, vous devez la lier de nouveau à
         Access. Allez dans Outils&gt;suppléments&gt;gestionnaire de tables
         liées, cherchez votre DSN ODBC, et séletionnez la table à lier de
         nouveau. Vous pouvez aussi changer votre source dsn à partir de là,
         en cliquant sur l'option toujours demander pour un nouvel emplacement
         avant de presser OK.
        </simpara>
       </listitem>
      </itemizedlist>
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.databases.upgraded">
    <question>
     <para>
      J'ai mis à jour vers &php; 4, et maintenant MySQL me dit toujours
      "Warning: MySQL: Unable to save result set in ...". Que se passe-t-il?
     </para>
    </question>
    <answer>
     <para>
      Il est quasiment sûr que &php; 4 a été compilé avec l'option
      <option role="configure">--with-mysql</option> sans donner le
      chemin vers MySQL. Cela signifie que &php;
      utilise sa bibliothèque cliente MySQL incluse. Si votre système exécute des
      applications qui utilisent d'autres versions de clients MySQL, comme
      &php; 3 en module Apache concurrent, ou auth-mysql, il y a un conflit
      entre les deux versions de ces bibliothèques clientes.
     </para>
     <para>
      Recompiler &php; 4 et ajouter le chemin vers MySQL avec l'option
      '<link linkend="mysql.configure">--with-mysql=/votre/chemin/vers/mysql</link>'
      résoud généralement le problème.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.databases.mysql.php5">
    <question>
     <para>
      &php; 5 n'inclut plus les bibliothèques clientes MySQL, qu'est ce que ça
      implique pour moi? Puis-je toujours utiliser MySQL avec &php;? J'essaie
      d'utiliser MySQL, mais j'obtiens des erreurs "undefined function".
     </para>
    </question>
    <answer>
     <para>
      Oui. &php; supportera toujours MySQL, d'une façon ou d'une autre. Le
      seul changement avec &php; 5 est que nous ne compilons plus la bibliothèque
      cliente en elle-même. En voici en vrac quelques justifications :
     </para>
     <itemizedlist>
      <listitem>
       <para>
        La plupart des systèmes incluent maintenant les bibliothèques clientes.
       </para>
      </listitem>
      <listitem>
       <para>
        Ainsi, avoir plusieurs versions des bibliothèques peut être gênant. Par
        exemple, si vous liez mod_auth_mysql à une version et &php; à une
        autre, et que vous les activez tous les deux dans Apache, vous obtenez
        un joli plantage. Ainsi, la bibliothèque cliente incluse avec &php; ne
        fonctionnait pas toujours bien. Le symptôme le plus gênant était que
        le chemin vers le socket Unix mysql.sock n'était pas le bon.
       </para>
      </listitem>
      <listitem>
       <para>
        La maintenane en était lourde et le devenait de plus en plus au fur et
        à mesure des versions.
       </para>
      </listitem>
      <listitem>
       <para>
        Les versions futures de la bibliothèque seront publiées sous license GPL et
        nous ne pouvons pas inclure une telle bibliothèque car sa license n'est
        pas compatible avec un projet sous license de type BSD/Apache. Un tel
        changement dans &php; 5 semble être la meilleure solution.
       </para>
      </listitem>
     </itemizedlist>
     <para>
      Ceci n'affectera pas tant que ça les utilisateurs. Les utilisateurs
      d'Unix, au moins ceux qui savent ce qu'ils font, ont tendance à compiler
      &php; avec les bibliothèques déjà installées sur leur système, simplement
      en spécifiant <option role="configure">--with-mysql=/usr lors</option>
      de la configuration de &php;.
      Les utilisateurs de Windows peuvent activer l'extension
      <filename>php_mysql.dll</filename> dans leur &php.ini;. Ainsi, assurez-vous que
      <filename>libmysql.dll</filename> est disponible dans le PATH du système.
      Pour plus de détails sur cela, lisez la FAQ sur
      <link linkend="faq.installation.addtopath">la configuration du PATH sur les systèmes
      Windows</link>. Comme <filename>libmysql.dll</filename> (et plusieurs fichiers
      relatifs à &php;) existe dans le dossier de &php;, il est recommandé
      d'ajouter le dossier de &php; à votre PATH système.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.databases.shared-mysql">
    <question>
     <para>
      Après avoir ajouté le support partagé de MySQL, Apache plante dès que
      libphp4.so est chargé. Comment résoudre ce problème?
     </para>
    </question>
    <answer>
     <para>
      Ceci arrive quand vos bibliothèques MySQL sont liées à pthreads. Vérifiez
      que vous utilisez ldd. Sinon, téléchargez les sources de MySQL et
      compilez les ou bien refaites un paquet RPM à partir des sources en
      enlevant l'option qui active le client threadé dans le fichier de spec.
      L'une ou l'autre de ces solutions corrigera le problème. Recompilez
      alors &php; avec les nouvelles bibliothèques MySQL.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.databases.mysqlresource">
    <question>
     <para>
      Pourquoi est ce que j'obtiens une erreur comme celle-ci :
      "Warning: 0 is not a MySQL result index in &lt;file&gt;
      on line &lt;x&gt;" ou "Warning: Supplied argument is not
      a valid MySQL result resource in &lt;file&gt; on line &lt;x&gt;?
     </para>
    </question>
    <answer>
     <para>
      Vous essayez d'utiliser un identifiant de résultat qui vaut 0. Le 0
      indique que votre requête a échoué pour une quelconque raison. Vous
      devez alors chercher les erreurs après avoir exécuté une requête et
      avant même de vouloir traiter le résultat. Une façon propre de le faire
      est de coder comme ceci :
      <programlisting role="php">
<![CDATA[
<?php

$result = mysql_query("SELECT * FROM tables_priv");
if (!$result) {
    echo mysql_error();
    exit;
}
?>
]]>
      </programlisting>
      ou
      <programlisting role="php">
<![CDATA[
<?php

$result = mysql_query("SELECT * FROM tables_priv")
    or die("Bad query: " . mysql_error());
?>
]]>
      </programlisting>
     </para>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
