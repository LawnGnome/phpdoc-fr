<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.14 Maintainer: gui Status: ready -->
 <chapter id="faq.languages">
  <title>&php; et les autres langages</title>
  <titleabbrev>&php; et les autres langages</titleabbrev>

  <para>
   &php; est le meilleur langage pour la programmation web, mais qu'en est-il
   des autres langages?
  </para>

  <qandaset>
   <qandaentry id="faq.languages.asp">
    <question>
     <para>&php; contre ASP?</para>
    </question>
    <answer>
     <para>
      ASP n'est pas vraiment un langage en lui-même, c'est l'acronyme de
      Active Server Pages, le langage courant pour programmer en ASP étant le
      Visual Basic ou le JScript. Le plus gros inconvénient de ASP est que
      c'est un système propriétaire utilisé nativement sur Microsoft Internet
      Information Server (IIS). Celà limite sa disponibilité aux seules
      plate-formes Win32. Il existe cependant des projets pour utiliser ASP
      dans d'autres environnements et avec d'autres serveurs web :
      <ulink url="&url.instantasp;">InstantASP</ulink>
      de <ulink url="&url.halcyon;">Halcyon</ulink> (commercial),
      Chili!Soft ASP de 
      <ulink url="&url.chilisoft;">Chili!Soft</ulink> (commercial).
      ASp est connu pour être un langage plus lent et plus lourd que &php;,
      mais aussi moins stable. Les gens favorables à ASP prétenderont que
      comme il utilise de base VBScript, c'est un langage facile à apprendre
      si vous connaissez déjà Visual Basic. Le support de ASP est activé par
      défaut dans IIS, e rendant facile à mettre en oeuvre et à utiliser. Les
      composants inclus de base dans ASP sont vraiment limités, et si vous
      devez utiliser des fonictionnalités "avancées" comme l'interaction avec
      des serveurs FTP, vous devrez acheter des composants supplémentaires.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.languages.aspconverter">
    <question>
     <para>Existe-t-il un convertisseur de ASP vers &php;?</para>
    </question>
    <answer>
     <para>
      Oui, le programme côté serveur <ulink
      url="&url.asp2php;">asp2php</ulink> est le plus fréquemment utilisé, de
      même que cette option <ulink url="&url.asptranslator;">côté
      client</ulink>.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.languages.coldfusion">
    <question>
     <para>&php; contre Cold Fusion?</para>
    </question>
    <answer>
     <para>
      &php; est réputé pour être plus rapide et plus efficace pour la
      programmation complexe et pour tester de nouvelles idées. &php; est
      aussi plus stable et consomme moins de ressources. Cold Fusion a une
      meilleure gestion des erreurs, une meilleure abstraction de bases de
      données et une meilleure gestion des dates, bien que l'abstraction de
      bases de données soit chose possible en &php; 4. Un autre point réputé
      pour être une des forces de Cold Fusion est sont excellent moteur de
      recherche, mais il peut paraitre absurde d'intégrer un moteur de
      recherche dans un langage de script Web. &php; fonctionne sur nombre de
      plate-formes alors que Cold Fusion ne supporte que Win32, Solaris, Linux
      et HP/UX. Cold Fusion intègre un bon environnement de développement
      (IDE) et il est facile à apprendre, alors que &php; requiert davantage
      de connaissances en programmation. Cold Fusion est pensé pour des
      non-développeurs, alors que &php; est pensé pour les développeurs.
     </para>
     <para>
      Un excellent résumé de Michael J Sheldon sur ce sujet à été posté sur la
      liste de diffusion &php;. Une copie du message peut être trouvé sur
      <ulink url="&url.coldfusion.summary;">&url.coldfusion.summary;</ulink>.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.languages.perl">
    <question>
     <para>&php; contre Perl?</para>
    </question>
    <answer>
     <para>
      Le plus grand avantage de &php; par rapport à Perl est que &php; a été
      pensé pour la programmation Web alors que Perl a été pensé pour faire
      des choses bien plus diversifiées, ce qui le rend bien plus compliqué.
      La complexité / flexibilité de Perl rnd l'écriture de script plus
      facile, mais en rend la lecture par un autre auteur / codeur beaucoup
      moins aisée. &php; est plus facile que Perl à intégrer dans du HTML.
      &php; a toutes les "bonnes" fonctionnalités de Perl : la construction,
      la syntaxe... sans pour autant être aussi compliqué que Perl. Perl est
      un véritable langage bien testé, du fait de son existence depuis la fin
      des années 80, mais &php; devient mature très rapidement.
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
