<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 328095 Maintainer: gui Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="faq.languages" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>PHP et les autres langages</title>
 <titleabbrev>PHP et les autres langages</titleabbrev>
 
 <para>
  PHP est le meilleur langage pour la programmation web, mais qu'en est-il
  des autres langages ?
 </para>
 
 <qandaset>
  <qandaentry xml:id="faq.languages.asp">
   <question>
    <para>PHP contre ASP ?</para>
   </question>
   <answer>
    <para>
     ASP n'est pas vraiment un langage en lui-même, c'est l'acronyme de
     Active Server Pages, les langages courants pour programmer en ASP étant
     Visual Basic Script, JScript et C#, entre autres. Le plus gros inconvénient de ASP est que
     c'est un système propriétaire utilisé nativement sur Microsoft Internet
     Information Server (IIS). Cela limite sa disponibilité aux seules
     plates-formes Win32. Il existe cependant des projets pour utiliser ASP
     dans d'autres environnements et avec d'autres serveurs web :
     <link xlink:href="&url.instantasp;">InstantASP</link>
     de <link xlink:href="&url.halcyon;">Halcyon</link> (commercial),
     Chili!Soft ASP de 
     <link xlink:href="&url.chilisoft;">Chili!Soft</link> (commercial) et
     <link xlink:href="&url.mono;">Mono</link> (open-source).
     ASP est connu pour être un langage plus lent et plus lourd que PHP,
     mais aussi généralement moins stable. Les gens favorables à ASP prétendront que
     comme ils utilisent de base VBScript, c'est un langage facile à apprendre
     si vous connaissez déjà Visual Basic. Le support de ASP est activé par
     défaut dans IIS, le rendant facile à mettre en oeuvre et à utiliser. Les
     composants inclus de base dans ASP sont vraiment limités, et si vous
     devez utiliser des fonctionnalités "avancées" comme l'interaction avec
     des serveurs FTP, vous devrez acheter des composants supplémentaires.
    </para>
   </answer>
  </qandaentry>
  
  <qandaentry xml:id="faq.languages.coldfusion">
   <question>
    <para>PHP contre Cold Fusion ?</para>
   </question>
   <answer>
    <para>
     Si PHP est réputé pour être plus rapide et plus efficace pour la
     programmation complexe et pour tester de nouvelles idées, il est aussi réputé
     plus stable et moins consommateur de ressources. Bien que Cold Fusion ait eu une
     meilleure gestion des erreurs, une meilleure abstraction de bases de
     données et une meilleure gestion des dates,  le retard en terme d'abstraction de
     bases de données a été comblé depuis PHP 4. Un autre point réputé
     pour être une des forces de Cold Fusion est sont excellent moteur de
     recherche, mais il peut paraître absurde d'intégrer un moteur de
     recherche dans un langage de script Web. PHP fonctionne sur quasiment toutes les
     plate-formes modernes alors que Cold Fusion ne supporte que Windows, Solaris, Linux, MacOS
     et AIX. Cold Fusion intègre un bon environnement de développement
     (IDE) et il est facile à apprendre, alors que PHP requiert davantage
     de connaissances en programmation. Cold Fusion est pensé pour des
     non-développeurs, alors que PHP est pensé pour les développeurs.
    </para>
   </answer>
  </qandaentry>
  
  <qandaentry xml:id="faq.languages.perl">
   <question>
    <para>PHP contre Perl ?</para>
   </question>
   <answer>
    <para>
     Le plus grand avantage de PHP par rapport à Perl est que PHP a été
     pensé pour la programmation Web alors que Perl a été pensé pour faire
     des choses bien plus diversifiées, ce qui le rend bien plus compliqué.
     La complexité / flexibilité de Perl rend difficile la collaboration entre 
     développeurs de niveaux différents. PHP a un formalisme moins confus et plus
     structuré sans pour autant perdre en flexibilité. PHP est aussi plus facile 
     que Perl à intégrer dans du HTML. De façon générale, PHP a toutes les "bonnes" 
     fonctionnalités de Perl : la construction, la syntaxe... sans pour autant être
     aussi compliqué que Perl. De plus, l'interpréteur en ligne de commande (CLI) de 
     PHP est assez puissant pour faire les mêmes tâches de haut-niveau que celles pour 
     lesquelles Perl était d'habitude utilisé. Perl est un véritable langage bien éprouvé, fidèle
     à ses bases depuis la fin des années 80, mais PHP est devenu mature et a évolué 
     très rapidement, et continue encore de faire des progrès fantastiques.
    </para>
   </answer>
  </qandaentry>
  
 </qandaset>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
