<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 313349 Maintainer: jpauli Status: ready -->
<!-- Reviewed: no -->

 <chapter xml:id="faq.passwords" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Hashage de mots de passe sûr</title>
  <titleabbrev>Hashage de mots de passe</titleabbrev>
  
  <para>
   Cette section explique pourquoi utiliser des fonctions de hashage pour les
   mots de passe, ainsi que comment le faire efficacement.
  </para>
  
  <qandaset>
   <qandaentry xml:id="faq.passwords.hashing">
    <question>
     <para>
      Pourquoi devrai-je hasher les mots de passe envoyés par les utilisateurs de mon application ?
     </para>
    </question>
    <answer>
     <para>
      Le hashage de mot de passe est l'une des pratiques de sécurité les plus
      basiques qui doit être effectuée. Sans ça, chaque mot de passe stocké
      peut être volé si le support de stockage (typiquement une base de données)
      est compromis, et il peut être immédiatement utilisé pour violer votre
      application ou plus, si l'utilisateur utilise le même mot de passe ailleurs.
     </para>
     <para>
      En appliquant un hashage sur le mot de passe avant de le stocker, vous rendez
      la tâche d'un attaquant très difficile pour connaitre le mot de passe original,
      et vous avez toujours la possibilité de comparer le mot de passe hashé à une chaine
      reçue.
     </para>
     <para>
      Il est important de noter que le hashage ne fait que protéger les mots de passe
      dans la base, pas leur éventuelle interception alors qu'ils sont envoyés à
      l'application par l'utilisateur, via du code malicieux injecté dans l'application,
      par exemple.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.fasthash">
    <question>
     <para>
      Pourquoi les fonctions traditionnelles de hashage comme <function>md5</function> et
      <function>sha1</function> sont-elles inappropriées aux mots de passe?
     </para>
    </question>
    <answer>
     <para>
      Les algorithmes de hashage comme MD5, SHA1 et SHA256 sont destinés à être rapides et
      efficaces. Avec les équipements informatiques modernes, il est devenu facile d'attaquer
      par force brute la sortie de ces algorithmes pour retrouver la chaine originale.
     </para>
     <para>
      C'est la raison pour laquelle de nombreux experts en sécurité considèrent ces algorithmes
      comme faibles et les déconseillent fortement pour hasher un mot de passe utilisateur.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.bestpractice">
    <question>
     <para>
      Comment alors hasher mes mots de passe ?
     </para>
    </question>
    <answer>
     <para>
      Lorsqu'on hash des mots de passe, les 2 considérations les plus importantes sont le temps
      de traitement, et le grain de sel. Plus la puissance de traitement requise est élevée, plus
      il faudra du temps pour casser le mot de passe en analysant sa sortie.
     </para>
     <para>
      Il existe deux fonctions fournies dans PHP pour hasher avec des algorithmes précis. 
     </para>
     <para>
      La première fonction de hashage est <function>crypt</function>, elle supporte nativement
      plusieurs algorithmes. Lorsque vous utilisez cette fonction, vous êtes sûr que
      l'algorithme que vous choisissez est disponible, car PHP en contient des implémentations
      natives dans le cas où votre système ne les supporterait pas.
     </para>
     <para>
      La deuxième fonction de hashage est <function>hash</function>, elle supporte beaucoup
      plus d'algorithmes et de variantes que <function>crypt</function>, mais elle n'en
      supporte pas certains que <function>crypt</function> supporte.
      L'extension Hash est fournie avec PHP, mais elle peut être désactivée à la compilation,
      ainsi il n'est pas certain qu'elle soit présente, alors que <function>crypt</function>
      l'est obligatoirement.
     </para>
     <para>
      L'algorithme recommandé pour hasher des mots de passe est Blowfish, car il est
      beaucoup plus couteux et intéressant que MD5 ou SHA1, tout en étant scalable.
     </para>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.salt">
    <question>
     <para>
      Qu'est ce que le grain de sel?
     </para>
    </question>
    <answer>
     <para>
      Un grain de sel, en cryptographie, est appliqué durant le processus de hashage pour
      éliminer la possibilité d'attaques par dictionnaires (hashages enregistrés dans
      une grande liste et comparés).
     </para>
     <para>
      En d'autres termes, un grain de seul est une petite donnée additionnelle qui
      renforce significativement la puissance du hashage pour le rendre beaucoup plus
      difficile à cracker. Il existe tant de services en ligne qui proposent des
      dictionnaires géants de mots de passe avec leur hash. L'iutilisation d'un
      grain de sel rend ces dictionnaires inutiles.
     </para>
    </answer>
   </qandaentry>
  </qandaset>
  
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
