<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297645 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="security.apache" xmlns="http://docbook.org/ns/docbook">
 <title>Installé en tant que module Apache</title>
 <simpara>
  Lorsque <acronym>PHP</acronym> est compilé en tant que module Apache, ce module hérite des
  permissions accordées à l'utilisateur faisant tourner Apache (par défaut,
  l'utilisateur "nobody"). Cela à plusieurs impacts sur la sécurité et
  les autorisations.
  Par exemple, si vous utilisez <acronym>PHP</acronym> pour accéder à une base de données, à
  moins que la base n'ait un système de droits d'accès interne, vous devrez
  rendre la base accessible à l'utilisateur "nobody". Cela signifie qu'un
  script mal intentionné peut accéder à la base, la modifier sans
  identification. Il est aussi possible qu'un robot accède à la page
  d'administration, et détruise toutes les pages. Vous devez aussi protéger
  vos bases de données avec les autorisations Apache, ou définir votre
  propre modèle d'accès avec LDAP, &htaccess;, etc. et inclure ce code
  dans tous vos scripts : <acronym>PHP</acronym>.
 </simpara>
 <simpara>
  Souvent, lorsqu'on a établi les droits de l'utilisateur <acronym>PHP</acronym> (ici,
  l'utilisateur Apache) pour minimiser les risques, on s'aperçoit que
  <acronym>PHP</acronym> ne peut plus écrire de virus dans les fichiers des utilisateurs.
  Ou encore, modifier une base de données privée. Il est aussi incapable
  de modifier des fichiers qu'il devrait pouvoir modifier, ou effectuer
  certaines transactions.
 </simpara>
 <simpara>
  Une erreur fréquente de sécurité est de donner à l'utilisateur Apache
  les droits de superadministrateur ou d'améliorer les possibilités d'Apache
  d'une autre façon.
 </simpara>
 <simpara>
  Donner de telles permissions à l'utilisateur Apache est extrêmement
  dangereux, et peut compromettre tout le système, telle que l'utilisation
  des <literal>sudo</literal> ou du <literal>chroot</literal>.
  Pour les novices de la sécurité, une telle utilisation est à exclure
  d'office.
 </simpara>
 <simpara>
  Il existe des solutions plus simples. En utilisant
  <link linkend="ini.open-basedir">open_basedir</link> vous pouvez contrôler et restreindre
  l'accès à certains dossiers qui pourront être utilisés par <acronym>PHP</acronym>. Vous pouvez
  aussi créer des aires de restrictionsApache, pour restreindre les activités
  anonymes liées aux internautes.
 </simpara>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
