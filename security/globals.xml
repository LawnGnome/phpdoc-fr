<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.18 $ -->
<!-- EN-Revision: 1.8 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

  <chapter xml:id="security.globals" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>Utilisation des variables super-globales</title>
   &warn.deprecated.removed-6-0-0;
   <para>
    L'une des évolutions les plus controversées de &php; a été
    le changement de valeur par défaut de la directive &php;
    <link linkend="ini.register-globals">register_globals</link>, qui est
    passée de On à Off en &php;
    <link xlink:href="&url.php.release4.2.0;">4.2.0</link>.
    Beaucoup d'applications dépendaient de cette directive, et de nombreux
    programmeurs ne savaient même pas qu'elle existait, et supposait
    que c'était le fonctionnement normal de &php;. Cette page explique
    comment on peut écrire du code peu sécuritaire en utilisant
    cette directive. Gardez bien en tête que cette directive,
    par elle-même, n'est pas un trou de sécurité, mais qu'elle
    facilite leur création.
   </para>
   <para>
    Lorsqu'elle est activée, register_globals
    va injecter vos scripts avec toutes sortes de variables,
    comme les variables issues des formulaires HTML. Ceci, couplé au fait
    que &php; ne requiert pas d'initialisation de variable signifie que la
    programmation de script peu sûr est possible. Ce fut une décision
    difficile de la communauté &php;, mais finalement, il a été décidé
    de désactiver par défaut cette variable. Lorsqu'elle est active,
    le programmeur ne sait pas exactement d'où provient le contenu de la
    variable, et ne peut que faire des suppositions. Les variables internes
    définies dans le script sont mélangées avec les données envoyées par les
    utilisateurs, et en désactivant register_globals,
    on empêche cela. Voyons avec un exemple le fonctionnement de
    register_globals :
   </para>
   <para>
    <example>
     <title>Exemple de mésutilisation de register_globals = on</title>
     <programlisting role="php">
<![CDATA[
<?php
// $authorized = true uniquement si l'utilisateur est identifié
if (authenticated_user()) {
    $authorized = true;
}

// Comme nous n'avons pas initialisé $authorized avec false, cette dernière
// peut être définie via register_globals, comme avec l'URL GET auth.php?authorized=1
// Tout le monde peut facilement être reconnu comme identifié!
if ($authorized) {
    include "/donnees/critiques/data.php";
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Lorsque register_globals est activé, la logique ci-dessus peut être prise
    en défaut. Lorsque register_globals est désactivée
    <varname>$authorized</varname> ne peut plus être assignée via la requête, et
    le script est maintenant sûr, même s'il reste recommandé de toujours
    initialiser ses variables. Par exemple, dans notre programme ci-dessus, nous
    pourrions ajouter <literal>$authorized = false</literal>.  En faisant cela,
    le script peut fonctionner avec register_globals on ou off, car les
    utilisateurs seront par défaut non-identifiés.
   </para>
   <para>
    Un autre exemple implique les <link linkend="ref.session">sessions</link>.
    Lorsque register_globals est activé, on peut aussi utiliser
    <varname>$username</varname> dans notre exemple, mais, encore une fois, vous
    devez garder en tête que <varname>$username</varname> peut aussi provenir
    d'autres biais, tels que GET (via l'URL).
   </para>
   <para>
    <example>
     <title>Exemple d'abus de sessions avec register_globals on ou off</title>
     <programlisting role="php">
<![CDATA[
<?php
// Nous ne savons pas d'où provient $username mais nous savons que
// $_SESSION contient les données de session
if (isset($_SESSION['username'])) {

    echo "Bonjour <strong>{$_SESSION['username']}</strong>";

} else {

    echo "Bonjour <strong>visiteur</strong><br />";
    echo "Voulez-vous vous identifier?";

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Il est même possible de prendre des mesures préventives, pour
    être alerté lorsqu'une tentative d'usurpation est faite. Si vous savez
    à l'avance de quelle variable le nom d'utilisateur doit provenir, vous
    pouvez vérifier si les données que vous manipulez sont d'une origine
    contrôlée. Même si cela ne garantit pas que les données ne puissent être
    falsifiées, cela complique la tache du faussaire. Si vous ne vous
    préoccupez pas de l'origine des données, vous pouvez utiliser la variable
    <varname>$_REQUEST</varname> qui contient un mélange de données GET, POST
    et COOKIE. Voyez aussi la section du manuel concernant les
    <link linkend="language.variables.external">variables externes à
    &php;</link>.
   </para>
   <para>
    <example>
     <title>Détection simple de fausses variables</title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['MAGIC_COOKIE'])) {

    // MAGIC_COOKIE provient d'un cookie.
    // Assurez-vous de valider les données du cookie!

} elseif (isset($_GET['MAGIC_COOKIE']) || isset($_POST['MAGIC_COOKIE'])) {

   mail("admin@example.com", "Tentative possible d'attaque", $_SERVER['REMOTE_ADDR']);
   echo "Alerte sécurité, l'admin a été prévenu.";
   exit;

} else {

   // MAGIC_COOKIE ne provient pas de REQUEST

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Bien sur, désactiver l'option register_globals ne signifie pas que votre
    code est sécuritaire. Pour chaque donnée reçu, vous devez appliquer un
    maximum de validations. Vérifiez toujours les données de votre visiteur,
    et initialisez vos variables! Pour vérifier les variables non-initialisées,
    voyez la fonction <function>error_reporting</function>, qui peut afficher
    les erreurs de niveau <constant>E_NOTICE</constant>.
   </para>

   <para>
    Pour des informations sur l'émulation de register_globals
    On ou Off, voyez la <link linkend="faq.misc.registerglobals">FAQ</link>.
   </para>

   &note.superglobals;
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->