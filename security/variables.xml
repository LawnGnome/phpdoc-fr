<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297645 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="security.variables" xmlns="http://docbook.org/ns/docbook">
 <title>Données transmises par les internautes</title>
 <para>
  Les plus grandes faiblesses de nombreux programmes <acronym>PHP</acronym> ne viennent pas
  du langage lui-même, mais de son utilisation en omettant les
  caractéristiques de sécurité. Pour cette raison,
  vous devez toujours prendre le temps de prendre en compte les implications
  d'une fonction, et de cerner toutes les applications d'une utilisation
  exotiques des paramètres.
  <example>
   <title>Utilisation dangereuse de variables</title>
   <programlisting role="php">
<![CDATA[
<?php
// efface un fichier à la racine d'un utilisateur... ou peut être
// de quelqu'un d'autre?
unlink($evil_var);
// Note l'accès de ce fichier ... ou pas?
fputs($fp, $evil_var);
// Exécute une commande triviale... ou ajoute une entrée dans /etc/password ?
system($evil_var);
exec($evil_var);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Il est vivement recommandé d'examiner minutieusement votre code
  pour vous assurer qu'il n'y a pas de variables envoyées par le
  client web, et qui ne sont pas suffisamment vérifiées avant utilisation.
  <itemizedlist>
   <listitem>
    <simpara>
     Est-ce que ce script n'affectera que les fichiers prévus?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Est-il possible que des valeurs incohérentes soient exploitées ici?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Est-ce que ce script peut être utilisé dans un but différent?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Est-ce que ce script peut être utilisé malicieusement,
     en conjonction avec d'autres?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Est-ce que toutes les actions seront notées?
    </simpara>
   </listitem>
  </itemizedlist>
 </para>
 <para>
  En répondant de manière adéquate à ces questions
  lors de l'écriture de vos scripts (plutôt qu'après), vous
  éviterez une réécriture inopportune pour raison de
  sécurité. En commençant vos projets avec ces recommandations
  en tête, vous ne garantirez pas la sécurité de votre
  système, mais vous contribuerez à l'améliorer.
 </para>
 <para>
  Vous pouvez aussi envisager de supprimer l'acquisition automatique des
  variables d'environnement, les guillemets magiques (magic_quotes),
  ou encore toute option qui pourrait vous conduire à vous tromper sur 
  la validité, la source ou la valeur d'une variable. En travaillant avec
  avec <acronym>PHP</acronym> en error_reporting(E_ALL), vous pouvez être
  averti que certaines variables sont utilisées avant d'être exploitées, ou
  vérifiées (et donc, vous pourrez traiter des valeurs exotiques
  à la source).
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->