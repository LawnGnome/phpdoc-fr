<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336809 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Les constantes</title>
 <simpara>
  Une constante est un identifiant (un nom) qui représente une valeur
  simple. Comme son nom le suggère, cette valeur ne peut jamais être
  modifiée durant l'exécution du script (sauf les
  <link linkend="language.constants.predefined">constantes magiques</link>).
  Par défaut, le nom d'une constante est sensible à la casse. Par convention,
  les constantes sont toujours en majuscules.
 </simpara>
 <para>
  Les noms de constantes suivent les mêmes règles que n'importe
  quel nom en PHP. Un nom de constante valide commence par une
  lettre ou un souligné, suivi d'un nombre
  quelconque de lettres, chiffres ou soulignés. Sous forme d'expression
  régulière, cela peut s'exprimer comme ceci :
  <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
 </para>
 &tip.userlandnaming;
 <para>
  <example>
   <title>Noms valides et invalides pour les constantes</title>
   <programlisting role="php">
<![CDATA[
<?php
// Noms valides
define("FOO",     "something");
define("FOO2",    "something else");
define("FOO_BAR", "something more");

// Noms invalides
define("2FOO",    "something");

// Ce nom est valide, mais évitez-le:
// PHP peut un jour fournir une constante magique nommée
// ainsi, ce qui va corrompre vos scripts.
define("__FOO__", "something");

?>
]]>
    </programlisting>
   </example>
 </para>
 <note>
  <simpara>
   Dans cette documentation, une lettre peut être un des caractères
   suivants : de a à z, de A à Z et tous les caractères ASCII
   de 127 à 255 (<literal>0x7f-0xff</literal>).
  </simpara>
 </note>
 <simpara>
  Tout comme les &link.superglobals;, les constantes sont
  accessibles de manière globale. Vous pouvez les définir
  n'importe où, et y accéder depuis n'importe quelle fonction.
  Pour plus d'informations sur le contexte, lisez la section
  du manuel sur la <link linkend="language.variables.scope">portée
  des variables</link>.
 </simpara>
 
 <sect1 xml:id="language.constants.syntax">
  <title>Syntaxe</title>
  <simpara>
   Vous pouvez définir une constante en utilisant la fonction
   <function>define</function> ou en utilisant le mot-clé 
   <literal>const</literal> en dehors d'une définition de classe à partir 
   de PHP 5.3.0. Une fois qu'une constante est définie,
   elle ne peut jamais être modifiée, ou détruite.
  </simpara>
  <simpara>
   En PHP 5.5 et antérieurs, seuls les types de données scalaires peuvent
   être placés dans une constante : c'est à dire les types booléen, entier,
   double et chaîne de caractères (soit <type>bool</type>, &integer;,
   <type>double</type> et <type>string</type>). Avec PHP 5.6 et suivants,
   il est possible de définir une constante comme une expression scalaire, 
   il est également possible de définir une constante de type tableau.
   Il est possible de définir des constantes en tant que 
   <type>resource</type>, mais cet usage est déconseillé, car il peut mener à des résultats inattendus.
  </simpara>
  <simpara>
   Vous pouvez accéder à la valeur d'une constante en spécifiant simplement
   son nom. Contrairement aux variables, vous ne devez <emphasis>PAS</emphasis> préfixer
   le nom de la constante avec <literal>$</literal>.
   Vous pouvez aussi utiliser la fonction <function>constant</function>, pour
   lire dynamiquement la valeur d'une constante, dont vous obtenez le nom
   dynamiquement (retour de fonction, par exemple).
   Utilisez la fonction <function>get_defined_constants</function> pour connaître
   la liste de toutes les constantes définies.
  </simpara>
  <note>
   <simpara>
    Les constantes et les variables globales utilisent deux espaces de
    noms différents. Ce qui implique que &true; et
    <varname>$TRUE</varname> sont généralement différents (en tous cas, ils
    peuvent avoir des valeurs différentes).
   </simpara>
  </note>
  <simpara>
   Si vous utilisez une constante non définie, PHP considère que vous souhaitez
   uniquement le nom de la constante elle-même, comme si vous l'appeliez
   comme étant une &string; (CONSTANT vs "CONSTANT"). Une alerte de type
   <link linkend="ref.errorfunc">E_NOTICE</link> sera émise lorsque ce
   cas se produit. Lisez également l'entrée du manuel qui explique pourquoi
   <link linkend="language.types.array.foo-bar">$foo[bar]</link> est faux
   (tant que vous ne définissez pas <literal>bar</literal> comme étant une
   constante). Si vous voulez simplement vérifier qu'une constante est définie,
   utilisez la fonction <function>defined</function>.
  </simpara>
  <para>
   Il y a des différences entre les constantes et les variables :
   <itemizedlist>
    <listitem>
     <simpara>
      Les constantes ne commencent pas par le signe (<literal>$</literal>).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Avant PHP 5.3, les constantes ne pouvaient être définies qu'en utilisant la fonction
      <function>define</function>, pas par simple assignement.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Les constantes sont définies et accessibles à tout endroit du code,
      globalement.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Les constantes ne peuvent pas être redéfinies ou indéfinies
      une fois qu'elles ont été définies.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Les constantes ne peuvent contenir que des scalaires.
      Depuis PHP 5.6, il est possible de définir des constantes de tableaux
      en utilisant le mot clé <literal>const</literal> et,
      depuis PHP 7, les constantes de tableaux peuvent aussi être définies
      en utilisant <function>define</function>. Vous pouvez
      utiliser des tableaux dans les expressions scalaires des
      constantes (par exemple, <literal>const FOO = array(1,2,3)[0];</literal>),
      mais le résultat final doit être une valeur scalaire de type autorisé.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  
  <para>
   <example>
    <title>Définir une constante</title>
    <programlisting role="php">
<![CDATA[
<?php
  define("CONSTANTE", "Bonjour le monde.");
  echo CONSTANTE; // affiche "Bonjour le monde."
  echo Constante; // affiche "Constante" et une notice.
?>
]]>
     </programlisting>
    </example>
   </para>
   
   <para>
    <example>
     <title>Définir des constantes en utilisant le mot-clé <literal>const</literal></title>
     <programlisting role="php">
<![CDATA[
<?php
// Fonctionne depuis PHP 5.3.0
const CONSTANT = 'Bonjour le monde !';

echo CONSTANT;

// Fonctionne depuis PHP 5.6.0
const ANOTHER_CONST = CONSTANT.'; Aurevoir le monde !';
echo ANOTHER_CONST;

const ANIMALS = array('chien', 'chat', 'oiseaux');
echo ANIMALS[1]; // affiche "chat"

// Fonctione depuis PHP 7
define('ANIMALS', array(
    'chien',
    'chat',
    'oiseaux'
));
echo ANIMALS[1]; // affiche "chat"
?>
]]>
     </programlisting>
    </example>
   </para>
   
   <note>
    <para>
     Contrairement aux constantes définies en utilisant l'instruction
     <function>define</function>, les constantes définies en utilisant
     le mot-clé <literal>const</literal> doivent être déclarées
     au plus haut niveau du contexte, car elles seront définies au moment
     de la compilation. Cela signifie qu'elles ne peuvent être déclarées
     à l'intérieur de fonctions, boucles, instructions
     <literal>if</literal> ou blocs <literal>try</literal>/<literal>catch</literal>.
    </para>
   </note>
   
   <simpara>
    Voir aussi
    les <link linkend="language.oop5.constants">constantes de classe</link>.
   </simpara>
 </sect1>
 
 <sect1 xml:id="language.constants.predefined">
  <title>Constantes magiques</title>
  <simpara>
   PHP fournit un grand nombre de <link
   linkend="reserved.constants">constantes magiques</link>. Certaines
   constantes sont définies par différentes extensions, et ne seront
   présentes que si ces extensions sont compilées avec PHP, ou bien
   si l'extension a été chargée dynamiquement.
  </simpara>
  
  <para>
   Il y a huit constantes magiques qui changent suivant l'emplacement où
   elles sont utilisées.
   Par exemple, la valeur de <constant>__LINE__</constant> dépend
   de la ligne où vous l'utilisez dans votre script.
   Ces constantes spéciales sont insensibles à la casse.
  </para>
  <para>
   <table>
    <title>Quelques constantes PHP magiques</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Nom</entry>
       <entry>Description</entry>
      </row>
     </thead>
     <tbody>
      <row xml:id="constant.line">
       <entry><constant>__LINE__</constant></entry>
       <entry>
        La ligne courante dans le fichier.
       </entry>
      </row>
      <row xml:id="constant.file">
       <entry><constant>__FILE__</constant></entry>
       <entry>
        Le chemin complet et le nom du fichier courant avec les
        liens symboliques résolus. Si utilisé pour une
        inclusion, le nom du fichier inclus est retourné.
       </entry>
      </row>
      <row xml:id="constant.dir">
       <entry><constant>__DIR__</constant></entry>
       <entry>
        Le dossier du fichier. Si utilisé dans une inclusion, le dossier
        du fichier inclus sera retourné. C'est l'équivalent de
        <literal>dirname(__FILE__)</literal>. Ce nom de dossier ne contiendra pas
        de slash final, sauf si c'est le dossier racine.
       </entry>
      </row>
      <row xml:id="constant.function">
       <entry><constant>__FUNCTION__</constant></entry>
       <entry>
        Le nom de la fonction.
       </entry>
      </row>
      <row xml:id="constant.class">
       <entry><constant>__CLASS__</constant></entry>
       <entry>
        Le nom de la classe courante. Le nom de la
        classe contient l'espace de nom dans lequel cette classe
        a été déclarée (i.e. <literal>Foo\Bar</literal>).
        Notez que depuis PHP 5.4, __CLASS__ fonctionne aussi dans les traits.
        Lorsqu'elle est utilisée dans une méthode de trait, __CLASS__ est le nom
        de la classe dans laquelle le trait est utilisé.
       </entry>
      </row>
      <row xml:id="constant.trait">
       <entry><constant>__TRAIT__</constant></entry>
       <entry>
        Le nom du trait. Le nom du trait inclut l'espace de nom
        dans lequel il a été déclaré (e.g. <literal>Foo\Bar</literal>).
       </entry>
      </row>
      <row xml:id="constant.method">
       <entry><constant>__METHOD__</constant></entry>
       <entry>
        Le nom de la méthode courante.
       </entry>
      </row>
      <row xml:id="constant.namespace">
       <entry><constant>__NAMESPACE__</constant></entry>
       <entry>
        Le nom de l'espace de noms courant.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <para>
   Voir aussi
   <function>get_class</function>,
   <function>get_object_vars</function>,
   <function>file_exists</function>&listendand;
   <function>function_exists</function>.
  </para>
   
   <sect2 xml:id="language.constants.predefined.changelog">
    &reftitle.changelog;

    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>5.4.0</entry>
         <entry>
          Ajout de la constante <constant>__TRAIT__</constant>
         </entry>
        </row>
        <row>
         <entry>5.3.0</entry>
         <entry>
          Ajout des constantes <constant>__DIR__</constant> et
          <constant>__NAMESPACE__</constant>
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          Ajout de la constante <constant>__METHOD__</constant>
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          Avant cette version, les valeurs de quelques constantes magiques
          étaient toujours en minuscule. Toutes sont désormais insensibles
          à la casse (contiennent les noms tels qu'ils ont été déclarés).
         </entry>
        </row>
        <row>
         <entry>4.3.0</entry>
         <entry>
          Ajout des constantes <constant>__FUNCTION__</constant>
          et <constant>__CLASS__</constant>
         </entry>
        </row>
        <row>
         <entry>4.0.2</entry>
         <entry>
          La constante <constant>__FILE__</constant> contient toujours un
          chemin absolu avec les liens sympboliques résolus, alors que dans les
          anciennes versions et dans quelques circonstances, elle pouvait
          contenir un chemin relatif
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
