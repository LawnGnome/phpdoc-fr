<chapter id="language.constants">
   <title>Les constantes</title>
  <simpara>
   Une constante est un identifiant (un nom) qui repr&eacute;sente une valeur
   simple. Comme leur nom le sugg&egrave;re, cette valeur ne peut jamais &ecirc;tre
   modifi&eacute;e durant l'ex&eacute;cution du script (les constantes magiques
   <constant>__FILE__</constant> et
   <constant>__LINE__</constant> sont les seules exception). Le nom d'une constante
   est sensible &agrave; la casse, apr d&eacute;faut. Par convention, les constantes sont
   toujours en majuscules.
  </simpara>
  <para>
   Les noms de constantes suivent les m&ecirc;mes r&egrave;gles que n'importe
   quel nom en PHP. Un nom de constante valide commence par une
   lettre ou un soulign&eacute; (<literal>_</literal>), suivi d'un nombre
   quelconque de lettre, chiffres ou soulign&eacute;s. Sous forme d'expression
   r&eacute;guli&egrave;re, cela peut s'exprimer comme ceci :
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  <note>
   <simpara>
    Dans cette documentation, une lettre peut &ecirc;tre un des caract&egrave;res
    suivants : de a &agrave; z, de A &agrave; Z et tous les caract&egrave;res ASCII
    de 127 &agrave; 255 (0x7f-0xff).
   </simpara>
  </note>
  <simpara>
   Les constantes sont accessibles de mani&egrave;re globale.
  </simpara>
  <sect1 id="language.constants.syntax">
   <title>Syntaxe</title>
   <simpara>
    Vous pouvez d&eacute;finir une constante en utilisant la fonction
    <function>define</function>. Une fois qu'une constante est d&eacute;finie,
    elle ne peut jamais &ecirc;tre modifi&eacute;e, ou d&eacute;truite.
   </simpara>
   <simpara>
    Seuls les types de donn&eacute;es scalaires peuvent &ecirc;tre plac&eacute;s dans une
    constante : c'est &agrave; dire les types bool&eacute;en, entier, double et
    cha&icirc;ne de caract&egrave;res (soit <type>boolean</type>, <type>integer</type>,
    <type>double</type> et <type>string</type>).
   </simpara>
   <simpara>
    Vous povuez acc&eacute;der &agrave; la valeur d'une constante en sp&eacute;cifiant simplement
    son nom. Contrairement aux variables, vous ne devez <emphasis>PAS</emphasis> pr&eacute;fixer
    le nom de la constante avec <literal>$</literal>.
    Vous pouvez aussi utiliser la fonction  <function>constant</function>, pour
    lire dynamiquement la valeur d'une constante, si vous obtenez le nom
    de cette constante dynamiquement (retour de fonction, par exemple).
    Utilisez la fonction <function>get_defined_constants</function> pour conna&icirc;tre
    la liste de toutes les fonctions d&eacute;finies.
   </simpara>
   <note>
    <simpara>
     Les constantes et les variables globales utilisent deux espaces de
     noms diff&eacute;rents. Ce qui implique que &true; et
     <varname>$TRUE</varname> sont g&eacute;n&eacute;ralement diff&eacute;rents (en tous cas, ils
     peuvent avoir des valeurs diff&eacute;rentes).
    </simpara>
   </note>
   <simpara>
    Lorsque vous utilisez une constante non d&eacute;finie, PHP suppose que vous utilisez
    le nom de la constante. Une
    <link linkend="features.error-handling">note</link> sera g&eacute;n&eacute;r&eacute;e. Utilisez la
    fonction <function>defined</function> pour savoir si une constante existe ou pas.
   </simpara>
   <para>
    Il y a des diff&eacute;rences entre les constantes et les variables :
     <itemizedlist>
      <listitem>
       <simpara>
    Les constantes ne commencent pas par le signe (<literal>$</literal>);
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    Les constantes sont d&eacute;finies et accessibles &agrave; tout endroit du code,
    globalement.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    Les constantes ne peuvent pas &ecirc;tre red&eacute;finies ou ind&eacute;finies une fois qu'elles
    ont &eacute;t&eacute; d&eacute;finies.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
    Les constantes ne peuvent contenir que des scalaires.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   <para>
    <example>
     <title>Definir une constante</title>
     <programlisting>
&lt;?php
  define("CONSTANTE", "Bonjour le monde.");
  echo CONSTANTE; // affiche "Bonjour le monde."
  echo Constante; // affiche "Constante" et une note.
?&gt;
     </programlisting>
    </example>
   </para>
  </sect1>
  <sect1 id="language.constants.predefined">
   <title>Constantes pr&eacute;d&eacute;finies</title>
  <para>
   Les constantes pr&eacute;d&eacute;finies sont toujours disponibles. En voici la liste :
	<variablelist>
	 <varlistentry>
	  <term>__FILE__  (insensible &agrave; la casse)</term>
	  <listitem>
	   <simpara>
		Le nom du fichier qui est actuellement ex&eacute;cut&eacute;.
		Si cette constante est utilis&eacute;e dans le cadre d'un fichier
		"inclus" (apr&egrave;s utilisation de <function>require</function>),
		alors le nom du fichier inclus est renvoy&eacute;e, et non le nom
		du fichier parent.
	   </simpara>
	  </listitem>
	 </varlistentry>
	 <varlistentry>
	  <term>__LINE__ (insensible &agrave; la casse)</term>
	  <listitem>
	   <simpara>
        Le num&eacute;ro de la ligne qui est actuellement ex&eacute;cut&eacute;e.
        Si cette constante est utilis&eacute;e dans le cadre d'un fichier
        "inclus" (apr&egrave;s utilisation de <function>require</function>),
        c'est la position dans le fichier inclus qui est renvoy&eacute;.
	   </simpara>
	  </listitem>
	 </varlistentry>
	 <varlistentry>
	  <term>PHP_VERSION</term>
	  <listitem>
	   <simpara>
        La cha&icirc;ne de caract&egrave;res de pr&eacute;sentation de la
        version du PHP qui est actuellement utilis&eacute;e. Par exemple '4.0.0'.
	   </simpara>
	  </listitem>
	 </varlistentry>
	 <varlistentry>
	  <term>PHP_OS</term>
	  <listitem>
	   <simpara>
         Nom du syst&egrave;me d'exploitation qui est utilis&eacute; par
         la machine qui fait tourner le PHP. Parmi les valeurs possibles :
         "AIX", "Darwin" (MacOS), "Linux", "SunOS", "WIN32", "WINNT".
         Note : cette liste n'est pas exhaustive.
	   </simpara>
	  </listitem>
	 </varlistentry>
	 <varlistentry>
	  <term>&true;</term>
	  <listitem>
	   <simpara>
		La valeur vraie bool&eacute;enne, &true;.
	   </simpara>
	  </listitem>
	 </varlistentry>
	 <varlistentry>
	  <term>&false;</term>
	  <listitem>
	   <simpara>
		La valeur faux bool&eacute;enne, &false;.
	   </simpara>
	  </listitem>
	 </varlistentry>
	 <varlistentry>
	  <term>E_ERROR</term>
	  <listitem>
	   <simpara>
		D&eacute;note une erreur autre qu'une erreur d'analyse ("parse error")
        qu'il n'est pas possible de corriger.
	   </simpara>
	  </listitem>
	 </varlistentry>
	 <varlistentry>
	  <term>E_WARNING</term>
	  <listitem>
	   <simpara>
        D&eacute;note un contexte dans lequel le PHP trouve que quelque chose
        ne va pas. Mais l'ex&eacute;cution se poursuit tout de m&ecirc;me.
        Ces alertes-l&agrave; peuvent &ecirc;tre r&eacute;cup&eacute;r&eacute;es
        par le script lui-m&ecirc;me. Un exemple serait une expression
        r&eacute;guli&egrave;re (regexp) invalide dans la fonction
        <function>ereg</function>.
	   </simpara>
	  </listitem>
	 </varlistentry>
	 <varlistentry>
	  <term>E_PARSE</term>
	  <listitem>
	   <simpara>
         L'analyseur a rencontr&eacute; une forme syntaxique invalide
         dans le script. Correction de l'erreur impossible.
	   </simpara>
	  </listitem>
	 </varlistentry>
	 <varlistentry>
	  <term>E_NOTICE</term>
	  <listitem>
	   <simpara>
        Quelque chose s'est produit, qui peut &ecirc;tre ou non une erreur.
        L'ex&eacute;cution continue. Par exemple, le cas de guillemets doubles (")
        non referm&eacute;s, ou bien la tentative d'acc&eacute;der &agrave;
        une variable qui n'est pas encore affect&eacute;e.
	   </simpara>
	  </listitem>
	 </varlistentry>
	</variablelist>
   <variablelist>
   <varlistentry>
     <term>E_ALL</term>
     <listitem>
      <simpara>
       Toutes les constantes E_* rassembl&eacute;es en une seule. Si vous l'utilisez
       avec <function>error_reporting</function>, toutes les erreurs et les
       probl&egrave;mes que PHP rencontrera seront notifi&eacute;s.
      </simpara>
     </listitem>
    </varlistentry>
  </variablelist>
  </para>
  <para>
    Les constantes E_* sont g&eacute;n&eacute;ralement utilis&eacute;es
    avec la fonction <function>error_reporting</function>.
   </para>
   <para>
    Vous pouvez d&eacute;finir d'autres constantes en utilisant la fonction
    <function>define</function>.
   </para>
   <para>
     Il est &agrave; noter que ce sont des constantes, et non pas des macros
     comme en C. Seulement les donn&eacute;es scalaires peuvent &ecirc;tre
     repr&eacute;sent&eacute;es par des constantes.
    <example>
     <title>D&eacute;finition de constantes </title>
     <programlisting role="php">
&lt;?php
define("CONSTANTE", "Bonjour le monde.");
echo CONSTANTE;
// affiche "Bonjour le monde."
?&gt;
     </programlisting>
    </example>
    <example>
     <title>Utilisation des constantes __FILE__ et __LINE__ </title>
     <programlisting role="php">
&lt;?php
function rapport_erreur($file, $line, $message) {
    echo "Une erreur est survenue dans le fichier $file &agrave; la ligne $line: $message.";
}
rapport_erreur(__FILE__,__LINE__, "Y a un probl&egrave;me!");
?&gt;
     </programlisting>
    </example>
   </para>
  </sect1>
 </chapter>
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
