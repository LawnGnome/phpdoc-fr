<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.35 $ -->
<!-- EN-Revision: 1.39 Maintainer: dams Status: ready -->
<chapter id="language.constants">
 <title>Les constantes</title>
  <simpara>
   Une constante est un identifiant (un nom) qui représente une valeur
   simple. Comme son nom le suggère, cette valeur ne peut jamais être
   modifiée durant l'exécution du script (les constantes magiques
   <constant>__FILE__</constant> et <constant>__LINE__</constant> sont 
   les seules exceptions). Le nom d'une constante est sensible à la 
   casse, par défaut. Par convention, les constantes sont toujours en
   majuscules.
  </simpara>
  <para>
   Les noms de constantes suivent les mêmes règles que n'importe
   quel nom en &php;. Un nom de constante valide commence par une
   lettre ou un souligné (<literal>_</literal>), suivi d'un nombre
   quelconque de lettre, chiffres ou soulignés. Sous forme d'expression
   régulière, cela peut s'exprimer comme ceci :
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  <para>
   <example>
    <title>Noms valides et invalides pour les constantes</title>
    <programlisting role="php">
<![CDATA[
<?php
// Noms valides
define("FOO",     "something");
define("FOO2",    "something else");
define("FOO_BAR", "something more")

// Noms invalides
define("2FOO",    "something");

// Ce nom est valide, mais évitez-le:
// PHP peut un jour fournir une constante magique nommée
// ainsi, ce qui va corrompre vos scripts.
define("__FOO__", "something"); 

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Dans cette documentation, une lettre peut être un des caractères
    suivants : de a à z, de A à Z et tous les caractères ASCII
    de 127 à 255 (<literal>0x7f-0xff</literal>).
   </simpara>
  </note>
  <simpara>
   Tous comme les &link.superglobals;, les constantes sont 
   accessibles de manière globale. Vous pouvez la définir
   n'importe où, et y accéder depuis n'importe quelle fonction.
  </simpara>
  <sect1 id="language.constants.syntax">
   <title>Syntaxe</title>
   <simpara>
    Vous pouvez définir une constante en utilisant la fonction
    <function>define</function>. Une fois qu'une constante est définie,
    elle ne peut jamais être modifiée, ou détruite.
   </simpara>
   <simpara>
    Seuls les types de données scalaires peuvent être placés dans une
    constante : c'est à dire les types booléen, entier, double et
    chaîne de caractères (soit <type>bool</type>, &integer;,
    <type>double</type> et <type>string</type>).
   </simpara>
   <simpara>
    Vous pouvez accéder à la valeur d'une constante en spécifiant simplement
    son nom. Contrairement aux variables, vous ne devez <emphasis>PAS</emphasis> préfixer
    le nom de la constante avec <literal>$</literal>.
    Vous pouvez aussi utiliser la fonction <function>constant</function>, pour
    lire dynamiquement la valeur d'une constante, dont vous obtenez le nom
    dynamiquement (retour de fonction, par exemple).
    Utilisez la fonction <function>get_defined_constants</function> pour connaître
    la liste de toutes les constantes définies.
   </simpara>
   <note>
    <simpara>
     Les constantes et les variables globales utilisent deux espaces de
     noms différents. Ce qui implique que &true; et
     <varname>$TRUE</varname> sont généralement différents (en tous cas, ils
     peuvent avoir des valeurs différentes).
    </simpara>
   </note>
   <simpara>
    Lorsque vous utilisez une constante non définie, &php; suppose que vous utilisez
    le nom de la constante. Une <link linkend="ref.errorfunc">note</link> 
    sera générée. Utilisez la
    fonction <function>defined</function> pour savoir si une constante existe ou pas.
   </simpara>
   <para>
    Il y a des différences entre les constantes et les variables :
     <itemizedlist>
      <listitem>
       <simpara>
        Les constantes ne commencent pas par le signe (<literal>$</literal>);
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Les constantes sont définies et accessibles à tout endroit du code,
        globalement.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Les constantes ne peuvent pas être redéfinies ou indéfinies 
        une fois qu'elles ont été définies.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Les constantes ne peuvent contenir que des scalaires.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   <para>
    <example>
     <title>Définir une constante</title>
     <programlisting>
<![CDATA[
<?php
  define("CONSTANTE", "Bonjour le monde.");
  echo CONSTANTE; // affiche "Bonjour le monde."
  echo Constante; // affiche "Constante" et une note.
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect1>
  <sect1 id="language.constants.predefined">
   <title>Constantes magiques</title>
   <simpara>
    &php; fournit un grand nombre de <link
    linkend="reserved.constants">constantes magiques</link>. Certaines
    constantes sont définies par différentes extensions, et ne seront
    présentes que si ces extensions sont compilées avec &php;, ou bien
    si l'extension a été chargée dynamiquement.
   </simpara>
   
   <para>
    Il y a cinq constantes magiques qui changent suivant l'emplacement où
    elles sont utilisées.
    Par exemple, la valeur de <constant>__LINE__</constant> dépend
    de la ligne où vous l'utilisez dans votre script.
    Ces constantes spéciales sont insensibles à la casse.
   </para>
   
   <para>
    <table>
     <title>Quelques constantes &php; magiques</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Nom</entry>
        <entry>Description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><constant>__LINE__</constant></entry>
        <entry>
         La ligne courante dans le fichier.
        </entry>
       </row>
       <row>
        <entry><constant>__FILE__</constant></entry>
        <entry>
         Le chemin complet et le nom du fichier courant. Si utilisé dans un include,
         le nom du fichier inclus est retourné.
        </entry>
       </row>
       <row>
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         Le nom de la fonction. (Ajouté en &php; 4.3.0) Depuis &php; 5, cette constante
         retourne le nom de la fonction comme il a été déclaré (sensible à la casse). En &php; 4,
         cette valeur est toujours en minuscule.
        </entry>
       </row>
       <row>
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         Le nom de la classe courante. (Ajouté en &php; 4.3.0) Depuis &php; 5, cette constante
         retourne le nom de la classe comme il a été déclaré (sensible à la casse). En &php; 4,
         cette valeur est toujours en minuscule.
        </entry>
       </row>
       <row>
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         Le nom de la méthode courante. (Ajouté en &php; 5.0.0) Le nom de la méthode est
         retourné comme il a été déclaré (sensible à la casse).
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Voir aussi
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>
  </sect1>
 </chapter>
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
