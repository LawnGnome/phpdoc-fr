<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.14 $ -->
 <chapter id="language.expressions">
   <title>Les expressions</title>
   <simpara>
    Les expressions sont la partie la plus importante du &php;. En &php;, presque tout
    ce que vous &eacute;crivez est une expression. La mani&egrave;re la plus simple
    de d&eacute;finir une expression est : "tout ce qui a une valeur".
   </simpara>
   <simpara>
    Les formes les plus simples d'expressions sont les constantes et les variables.
    Lorsque vous &eacute;crivez "<varname>$a</varname> = 5", vous assignez la valeur '5' &agrave; la
    variable <varname>$a</varname>. Bien &eacute;videmment, '5' vaut 5 ou, en d'autres termes, '5'
    est une expression avec pour valeur 5 (dans ce cas, '5' est un entier constant).
   </simpara>
   <simpara>
    Apr&egrave;s cette assignation, vous pouvez consid&eacute;rer que <varname>$a</varname>
    a pour valeur 5 et donc, &eacute;crire <varname>$b</varname> = <varname>$a</varname>,
    revient &agrave; &eacute;crire <varname>$b</varname> = 5.
    En d'autres termes, <varname>$a</varname> est une expression avec une valeur de 5.
    Si tout fonctionne correctement, c'est exactement ce qui arrive.
   </simpara>
   <para>
    Un exemple plus complexe concerne les fonctions. Par exemple, consid&eacute;rons
    la fonction suivante :
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo () {
    return 5;
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Consid&eacute;rant que vous &ecirc;tes familier avec le concept de fonction,
    (si ce n'est pas le cas, jetez un oeil au chapitre concernant les fonctions),
    vous serez d'accord que <literal>$c = foo()</literal> est &eacute;quivalent 
    &agrave; <literal>$c = 5</literal>, et
    vous aurez tout &agrave; fait raison. Les fonctions sont des expressions qui
    ont la valeur de leur "valeur de retour". Si <literal>foo()</literal> renvoie 5,
    la valeur de l'expression '<literal>foo()</literal>' est 5. Habituellement, 
    les fonctions ne font pas que
    renvoyer une valeur constante mais r&eacute;alisent des traitements.
   </simpara>
   <simpara>
    Bien s&ucirc;r, les valeurs en &php; n'ont pas &agrave; &ecirc;tre des
    valeurs num&eacute;riques, comme c'est souvent le cas. &php; supporte 3
    types de variables scalaires : les valeurs enti&egrave;res, les nombres
    &agrave; virgule flottante et les cha&icirc;nes de caract&egrave;res
    (une variable scalaire est une variable que vous ne pouvez pas scinder en
    morceaux, au contraire des tableaux par exemple). &php; supporte aussi deux
    types compos&eacute;s : les tableaux et les objets. Chacun de ces types
    de variables peut &ecirc;tre affect&eacute; ou renvoy&eacute; par une
    fonction.
   </simpara>
   <simpara>
    Les utilisateurs de &php;/FI 2 ne verront aucun changement. Malgr&eacute; tout,
    &php; va plus loin dans la gestion des expressions, comme le font d'autres
    langages. &php; est un langage orient&eacute; expression, dans le sens o&ugrave;
    presque tout est une expression. Consid&eacute;rons l'exemple dont nous avons
    d&eacute;j&agrave; parl&eacute;, '<varname>$a</varname> = 5'. Il est facile de voir qu'il y a
    deux valeurs qui entrent en jeu ici, la valeur num&eacute;rique constante '5'
    et la valeur de la variable <varname>$a</varname> qui est mise &agrave; jour &agrave; la valeur 5.
    Mais, la v&eacute;rit&eacute; est qu'il y a une autre valeur qui entre en jeu ici
    et c'est la valeur de l'assignation elle-m&ecirc;me. L'assignation elle-m&ecirc;me
    est assign&eacute;e &agrave; une valeur, dans ce cas-l&agrave; 5. En pratique,
    cela signifie que '<varname>$a</varname> = 5' est une expression qui a pour valeur 5. Donc,
    &eacute;crire '<varname>$b</varname> = (<varname>$a</varname> = 5)' revient &agrave; &eacute;crire '<varname>$a</varname> = 5; <varname>$b</varname> = 5;'
    (un point virgule marque la fin d'une instruction). Comme les assignations sont
    analys&eacute;es de droite &agrave; gauche, vous pouvez aussi bien &eacute;crire
    '<varname>$b</varname> = <varname>$a</varname> = 5'.
   </simpara>
   <simpara>
    Un autre bon exemple du langage orient&eacute; expression est la
    pr&eacute;-incr&eacute;mentation et la post-incr&eacute;mentation, (ainsi que
    la d&eacute;cr&eacute;mentation). Les utilisateurs de &php;/FI 2
    et ceux de nombreux autres langages sont habitu&eacute;s &agrave;
    la notation "<literal>variable++</literal>" et "<literal>variable--</literal>".
    Ce sont les op&eacute;rateurs
    d'incr&eacute;mentation et de d&eacute;cr&eacute;mentation. En &php;/FI 2,
    l'instruction '<varname>$a</varname>++' n'a aucune valeur (c'est-&agrave;-dire que ce n'est pas
    une expression) et vous ne pouvez donc pas l'utiliser. &php; ajoute les
    possibilit&eacute;s d'incr&eacute;mentation et de d&eacute;cr&eacute;mentation
    comme c'est le cas dans le langage C. En &php;, comme en C, il y a deux types
    d'op&eacute;rateurs d'incr&eacute;mentation (pr&eacute;-incr&eacute;mentation et
    post-incr&eacute;mentation). Les deux types d'op&eacute;rateur
    d'incr&eacute;mentation jouent le m&ecirc;me r&ocirc;le (c'est-&agrave;-dire qu'ils
    incr&eacute;mentent la variable). La diff&eacute;rence vient de la valeur de
    l'op&eacute;rateur d'incr&eacute;mentation. L'op&eacute;rateur de
    pr&eacute;-incr&eacute;mentation, qui s'&eacute;crit '++<varname>$variable</varname>', &eacute;value
    la valeur incr&eacute;ment&eacute;e (&php; incr&eacute;mente la variable
    avant de lire la valeur de cette variable, d'o&ugrave; le nom de
    'pr&eacute;-incr&eacute;mentation'). L'op&eacute;rateur de post-incr&eacute;mentation,
    qui s'&eacute;crit '<varname>$variable</varname>++', &eacute;value la valeur de la variable
    avant de l'incr&eacute;menter (&php; incr&eacute;mente la variable apr&egrave;s
    avoir lu sa valeur, d'o&ugrave; le nom de 'post-incr&eacute;mentation').
   </simpara>
   <simpara>
    Un type d'expression tr&egrave;s commun est l'expression de comparaison. Ces expressions
    sont &eacute;valu&eacute;es &agrave; 0 ou 1, autrement dit &false;ou &true; (respectivement). &php; supporte
    les op&eacute;rateurs de comparaison &gt; (plus grand que), =&gt;  (plus grand ou &eacute;gal),
    == (&eacute;gal &agrave;), &lt; (plus petit que), &lt;= (plus petit ou &eacute;gal). Ces expressions sont
    utilis&eacute;es de mani&egrave;re courante dans les instructions conditionnelles, comme l'instruction
    <literal>if</literal>.
   </simpara>
   <simpara>
    Pour le dernier exemple d'expression, nous allons parler des combinaisons
    d'op&eacute;rateurs/assignation. Vous savez que si vous voulez incr&eacute;menter la variable
    <varname>$a</varname> d'une unit&eacute;, vous devez simplement &eacute;crire '<varname>$a</varname>++'. Mais si vous voulez ajouter
    la valeur '3' &agrave; votre variable ? Vous pouvez &eacute;crire plusieurs fois '<varname>$a</varname>++', mais ce
    n'est pas la meilleure des m&eacute;thodes. Un pratique plus courante est d'&eacute;crire
    '<varname>$a</varname> = <varname>$a</varname> + 3'. L'expression '<varname>$a</varname> + 3' correspond &agrave; la valeur <varname>$a</varname> plus 3, et est
    de nouveau assign&eacute;e &agrave; la variable <varname>$a</varname>. Donc, le r&eacute;sultat est
    l'incr&eacute;mentation de 3 unit&eacute;s. En &php;, comme dans de nombreux autres
    langages comme le C, vous pouvez &eacute;crire cela de mani&egrave;re plus concise,
    mani&egrave;re qui avec le temps se r&eacute;v&eacute;lera plus claire et plus rapide
    &agrave; comprendre. Ajouter 3 &agrave; la valeur de la variable <varname>$a</varname>
    peut s'&eacute;crire '<varname>$a</varname> += 3'. Cela signifie pr&eacute;cis&eacute;ment : "on prend la valeur
    de la variable <varname>$a</varname>, on ajoute la valeur 3 et on assigne cette valeur &agrave;
    la variable <varname>$a</varname>". Et pour &ecirc;tre plus concis et plus clair, cette expression est
    plus rapide. La valeur de l'expression '<varname>$a</varname> += 3', comme l'assignation d'une valeur
    quelconque, est la valeur assign&eacute;e. Il est &agrave; noter que ce n'est pas 3 mais la
    combinaison de la valeur de la variable <varname>$a</varname> plus la valeur 3. (c'est la valeur qui
    est assign&eacute;e &agrave; la variable <varname>$a</varname>). N'importe quel op&eacute;rateur binaire
    peut utiliser ce type d'assignation, par exemple '<varname>$a</varname> -= 5' (soustraction de 5 de
    la valeur de la variable <varname>$a</varname>), '<varname>$b</varname> *= 7' (multiplication de la valeur de la variable <varname>$b</varname> par 7).
   </simpara>
   <para>
    Il y a une autre expression qui peut para&icirc;tre complexe si vous ne l'avez pas
    vue dans d'autres langages, l'op&eacute;rateur conditionnel ternaire :
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
  $first ? $second : $third
?>
]]>
    </programlisting>
   </informalexample>
    Si la valeur de la premi&egrave;re sous-expression est vraie
    (diff&eacute;rente de 0), alors la deuxi&egrave;me sous-expression est
    &eacute;valu&eacute;e et constitue le r&eacute;sultat de l'expression
    conditionnelle. Sinon, c'est la troisi&egrave;me sous-expression qui est
    &eacute;valu&eacute;e et qui constitue le r&eacute;sultat de l'expression.
   </para>
   <para>
    Les exemples suivants devraient vous permettre de mieux comprendre 
    la pr&eacute;-incr&eacute;mentation, la post-incr&eacute;mentation
    et le concept des expressions en g&eacute;n&eacute;ral :
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function double($i) {
    return $i*2;
}

$b = $a = 5;        /* assigne la valeur 5 aux variables $a et $b  */
$c = $a++;          /* post-incr&eacute;mentation de la variable $a et assignation de
                       la valeur &agrave; la variable $c */
$e = $d = ++$b;     /* Pr&eacute;-incr&eacute;mentation, et assignation de la valeur aux
                       variables $d et $e  */
/* &agrave; ce niveau, les variables $d et $e sont &eacute;gales &agrave; 6 */
$f = double($d++);  /* assignation du double de la valeur de $d &agrave; la variable $f ($f vaut 12),
                       puis incr&eacute;mentation de la valeur de $d  */
$g = double(++$e);  /* assigne deux fois la valeur de $e <emphasis>apr&egrave;s</emphasis>
                       incr&eacute;mentation, 2*7 = 14 to $g */
$h = $g += 10;      /* Tout d'abord, $g est incr&eacute;ment&eacute;e de 10, et donc $g vaut 24.
                       Ensuite, la valeur de $g, (24) est assign&eacute;e &agrave; la variable $h,
                       qui vaut donc elle aussi 24. */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Au d&eacute;but de ce chapitre, nous avons dit que nous allions d&eacute;crire les
    diff&eacute;rents types d'instructions, et donc, comme promis, nous allons voir que
    les expressions peuvent &ecirc;tre des instructions. Mais, attention, toutes les
    expressions ne sont pas des instructions. Dans ce cas-l&agrave;, une instruction
    est de la forme '<literal>expr ;</literal>', c'est-&agrave;-dire, une expression 
    suivie par un point-virgule.
    L'expression <literal>'$b = $a = 5;', '$a = 5'</literal> est valide, 
    mais ce n'est pas une instruction en elle-m&ecirc;me. 
    <literal>'$b = $a = 5'</literal> est une instruction valide.
   </simpara>
   <simpara>
    La derni&egrave;re chose qui m&eacute;rite d'&ecirc;tre mentionn&eacute;e est
    la v&eacute;ritable valeur des expressions. Lorsque vous faites des tests
    sur une variable, dans une boucle conditionnelle par exemple, cela ne vous
    int&eacute;resse pas de savoir quelle est la valeur exacte de l'expression.
    Mais vous voulez seulement savoir si le r&eacute;sultat signifie &true; ou &false;
    (&php; n'a pas de type bool&eacute;en). La v&eacute;ritable valeur d'une
    expression en &php; est calcul&eacute;e de la m&ecirc;me mani&egrave;re qu'en Perl.
    Toute valeur num&eacute;rique diff&eacute;rente de 0 est consid&eacute;r&eacute;e
    comme &eacute;tant &true;. Une cha&icirc;ne de caract&egrave;res vide et la cha&icirc;ne
    de caract&egrave;re 0 sont consid&eacute;r&eacute;es comme &false;. Toutes les autres
    valeurs sont vraies. Avec les types de variables non-scalaires (les tableaux et les objets),
    s'ils ne contiennent aucun &eacute;l&eacute;ment, renvoient &false;, sinon,
    ils renvoient &true;.
   </simpara>
   <simpara>
    &php; propose une impl&eacute;mentation compl&egrave;te et d&eacute;taill&eacute;e des
    expressions. &php; documente toutes ses expressions dans le manuel que vous &ecirc;tes
    en train de lire. Les exemples qui vont suivre devraient vous donner une bonne
    id&eacute;e de ce qu'est une expression et comment construire vos propres expressions.
    Dans tout ce qui va suivre, nous &eacute;crirons <literal>expr</literal> pour
    indiquer toute expression &php; valide.
   </simpara>
  </chapter>
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
