<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 306693 Maintainer: jpauli Status: ready -->
<!-- Reviewed: no -->

 <sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
  <title>Syntaxe de base</title>
  <sect2 xml:id="language.oop5.basic.class">
   <title>classes</title>
   <para>
    Une définition de classe basique commence par le mot-clé
    <literal>class</literal>, suivi par le nom de la classe.
    Suit une paire d'accolades contenant la définition des propriétés et des
    méthodes.
   </para>
   <para>
    Le nom de la classe peut être quelconque à condition que ce ne soit pas un
    <link linkend="reserved">mot réservé</link> en PHP. Un nom de classe valide commence
    par une lettre ou un underscore, suivi de nombres ou de lettres ou d'underscores.
    Si on devait l'exprimer sous forme d'expression régulière, il s'agirait de
    <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>.
   </para>
   <para>
    Une classe peut contenir ses propres <link linkend="language.oop5.constants">constantes</link>,
    <link linkend="language.oop5.properties">variables</link>
    (appelées "propriétés" ou "attributs"), et fonctions (appelées "méthodes").
   </para>
   <example>
    <title>Définition typique d'une classe</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // déclaration des propriétés
    public $var = 'a default value';

    // déclaration des méthodes
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
    </programlisting>
   </example>
   <para>    
    Une pseudo-variable <varname>$this</varname> est disponible
    lorsqu'une méthode est appelée depuis un contexte objet.
    <varname>$this</varname> est une référence à l'objet appelé (habituellement,
    l'objet auquel la méthode appartient, mais ce peut être un autre objet si
    la méthode est appelée de manière
    <link linkend="language.oop5.static">statique</link> depuis le
    contexte d'un autre objet).
   </para>
   <para>
    <example>
     <title>Quelques exemples de la pseudo-variable <varname>$this</varname></title>
     <programlisting role="php">
<![CDATA[
<?php
class A
{
  function toto()
  {
    if (isset($this)) {
      echo '$this est définie (';
      echo get_class($this);
      echo ")\n";
    } else {
      echo "\$this n'est pas définie.\n";
    }
  }
}

class B
{
  function titi()
  {
    // Note: la ligne suivante émet une erreur si E_STRICT est activé.
    A::toto();
  }
}

$a = new A();
$a->toto();

// Note: la ligne suivante émet une erreur si E_STRICT est activé.
A::toto();
$b = new B();
$b->titi();

// Note: la ligne suivante émet une erreur si E_STRICT est activé.
B::titi();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
$this est définie (A)
$this n'est pas définie.
$this est définie (B)
$this n'est pas définie.
]]>
     </screen>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.basic.new">
   <title>Le mot-clé <literal>new</literal></title>
   <para>
    Pour créer une instance d'une classe, le mot-clé <literal>new</literal> doit être
    utilisé. Un objet sera alors crée à moins qu'il ait un
    <link linkend="language.oop5.decon">constructeur</link>
    défini qui lance une  <link linkend="language.exceptions">exception</link>
    en cas d'erreur. Les classes doivent être définies avant l'instanciation (dans
    certains cas, c'est impératif).
   </para>
   <para>
    Si une <type>chaine</type> contenant un nom de classe est utilisée avec
    <literal>new</literal>, une nouvelle instance de cette classe sera créee. Si elle
    est dans un espace de noms, son nom pleinement qualifié doit être utilisé.
   </para>
   <example>
    <title>Création d'une instance</title>
    <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass();

// Ceci peut également être réalisé avec une variable :
$className = 'Foo';
$instance = new $className(); // Foo()
?>
]]>
    </programlisting>
   </example>
   <para>
    Dans le contexte de la classe, il est possible de créer un nouvel objet
    avec <literal>new self</literal> et <literal>new parent</literal>.
   </para>
   <para>
    Lors de l'assignation d'une instance déjà créée d'une classe à une variable,
    la nouvelle variable accédera à la même instance de l'objet assigné.
    Ce comportement est le même que lors du passage d'une instance à une fonction.
    Une copie d'un objet déjà créé peut être effectuée par
    <link linkend="language.oop5.cloning">clonage</link>.
   </para>
   <example>
    <title>Assignation d'un objet</title>
    <programlisting role="php">
<![CDATA[
<?php

$instance = new SimpleClass();

$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned aura cette valeur';

$instance = null; // $instance et $reference deviennent null

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned aura cette valeur"
}
]]>
    </screen>
   </example>
   <para>
    PHP 5.3.0 a introduit de nouvelles manières de créer des objets:
   </para>
   <example>
    <title>Créer de nouveaux objets</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    static public function getNew()
    {
        return new static;
    }
}

class Child extends Test
{}

$obj1 = new Test();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew();
var_dump($obj3 instanceof Test);

$obj4 = Child::getNew();
var_dump($obj4 instanceof Child);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.extends">
   <title>Le mot-clé <literal>extends</literal></title>
   <para>
    Une classe peut hériter des méthodes et des membres d'une autre classe en
    utilisant le mot-clé <literal>extends</literal> dans la déclaration.
    Il n'est pas possible d'étendre de multiples classes : une classe peut
    uniquement hériter d'une seule classe de base.
   </para>
   <para>
    Les méthodes et membres hérités peuvent être surchargés en les redéclarant avec le
    même nom que dans la classe parente. Cependant, si la classe parente a défini
    la méthode comme <link linkend="language.oop5.final">final</link>, alors celle-ci
    ne sera pas surchargeable. Il est possible d'accéder à une
    méthode ou un membre parent avec l'opérateur
    <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>
   </para>
   <para>
    Lors de la surcharge de méthodes, la signature devrait rester la même sinon
    PHP génèrera une erreur de niveau <constant>E_STRICT</constant>. Ceci ne s'applique pas
    au constructeur, qui accepte la surcharge avec des paramètres différents.
   </para>
   <example>
    <title>Héritage d'une classe simple</title>
    <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
  // Redéfinition de la méthode parent
  function displayVar()
  {
    echo "Classe étendue\n";
    parent::displayVar();
  }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Classe étendue
une valeur par défaut
]]>
    </screen>
   </example>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
