<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.8 Maintainer: yannick Status: ready -->
 <sect1 id="language.oop5.interfaces">
  <title>Interfaces</title>
  <para>
   Les interfaces objet vous permettent de créer du code qui spécifie quelles
   méthodes et variables une classe peut implémenter, sans avoir à définir
   comment ces méthodes seront gérées.
  </para>
  <para>
   Les interfaces sont définies en utilisant le mot clé <literal>interface</literal>,
   de la même façon qu'une classe standard mais sans aucun contenu de méthode.
  </para>
  <para>
   Toutes les méthodes déclarées dans une interface doivent être publiques.
  </para>
  <sect2>
   <title><literal>implements</literal></title>
   <para>
    Pour implémenter une interface, l'opérateur <literal>implements</literal>
    est utilisé. Toutes les méthodes de l'interface doivent être implémentées dans une
    classe ; si ce n'est pas le cas, une erreur fatale sera émise. Les classes peuvent
    implémenter plus d'une interface en séparant chaque interface par une virgule.
   </para>
   <note>
    <para>
     Une classe ne peut implémenter deux interfaces qui partagent des noms de
     fonctions, puisque cela causerait une ambiguïté.
    </para>
   </note>
  </sect2>
  <sect2>
   &reftitle.examples;
   <example>
   <title>Exemple d'interface</title>
    <programlisting role="php">
<![CDATA[
<?php
// Declaration de l'interface 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implémentation de l'interface
// Ceci va fonctionner
class Template implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }

    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }

        return $template;
    }
}

// Ceci ne fonctionnera pas
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Voir aussi l'opérateur
   <link linkend="language.operators.type">instanceof</link>.
  </simpara>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
