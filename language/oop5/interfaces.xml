<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

 <sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook">
  <title>Interfaces</title>
  <para>
   Les interfaces objet permettent de créer du code qui spécifie quelles
   méthodes une classe doit implémenter.
  </para>
  <para>
   Les interfaces sont définies en utilisant le mot-clé <literal>interface</literal>,
   de la même façon qu'une classe standard mais sans aucun contenu de méthode.
  </para>
  <para>
   Toutes les méthodes déclarées dans une interface doivent être publiques.
  </para>
  <sect2 xml:id="language.oop5.interfaces.implements">
   <title><literal>implements</literal></title>
   <para>
    Pour implémenter une interface, l'opérateur <literal>implements</literal>
    est utilisé. Toutes les méthodes de l'interface doivent être implémentées dans une
    classe ; si ce n'est pas le cas, une erreur fatale sera émise. Les classes peuvent
    implémenter plus d'une interface en séparant chaque interface par une virgule.
   </para>
   <note>
    <para>
     Une classe ne peut implémenter deux interfaces qui partagent des noms de
     fonctions, puisque cela causerait une ambiguïté.
    </para>
   </note>
   <note>
    <para>
     Les interfaces peuvent être étendues comme des classes en utilisant l'opérateur
     <link linkend="language.oop5.inheritance">extends</link>.
    </para>
   </note>
   <note>
    <para>
     La classe implémentant l'interface doit utiliser la même méthode
     de signature que celle définie dans l'interface. Si vous ne le faîtes
     pas, une erreur fatale sera émise.
     </para>
    </note>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.constants">
   <title><literal>Les constantes</literal></title>
   <para>
    Les interfaces peuvent contenir des constantes. Les constantes d'interfaces fonctionnent exactement
    comme les <link linkend="language.oop5.constants">constantes de classe</link>. Elles ne peuvent pas
    être écrasées par des classes ou des interfaces qui en héritent.
   </para>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.interfaces.examples.ex1">
   <title>Exemple d'interface</title>
    <programlisting role="php">
<![CDATA[
<?php

// Declaration de l'interface 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implémentation de l'interface
// Ceci va fonctionner
class Template implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }

    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }

        return $template;
    }
}

// Ceci ne fonctionnera pas
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}
?>
]]>
   </programlisting>
  </example>
   <example xml:id="language.oop5.interfaces.examples.ex2">
    <title>Les interfaces extensibles</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b extends a
{
    public function baz(Baz $baz);
}

// Ceci fonctionnera
class c implements b
{
    public function foo()
    {
    }

    public function baz(Baz $baz)
    {
    }
}

// Ceci ne fonctionnera pas et soulèvera une erreur fatale
class d implements b
{
    public function foo()
    {
    }

    public function baz(Foo $foo)
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex3">
    <title>L'héritage de plusieurs interfaces</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b
{
    public function bar();
}

interface c extends a, b
{
    public function baz();
}

class d implements c
{
    public function foo()
    {
    }

    public function bar()
    {
    }

    public function baz()
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex4">
    <title>Les interfaces avec des constantes</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    const b = 'Constante de l\'interface';
}

// Affiche: Constante de l'interface
echo a::b;


// Ceci ne fonctionnera pas de toutes façons vu qu'il n'est pas autorisé
// d'écraser des constantes. C'est le même principe qu'avec les constantes
// de classe
class b implements a
{
    const b = 'Constante de classe';
}
?>
]]>
     </programlisting>
   </example>
   <para>
    Une interface, avec le typage, fournit une bonne façon de vous assurer
    qu'un objet particulier contient des méthodes particulières.
    Repportez-vous à l'opérateur
    <link linkend="language.operators.type">instanceof</link> et au
    <link linkend="language.oop5.typehinting">typage</link>.
   </para>
 </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
