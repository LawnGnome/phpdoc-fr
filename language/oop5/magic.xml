<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.13 $ -->
<!-- EN-Revision: 1.13 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

 <sect1 id="language.oop5.magic">
  <title>Méthodes magiques</title>
  <para>
   Les noms de fonction 
   <literal>__construct</literal>,
   <literal>__destruct</literal>
   (voir les <link linkend="language.oop5.decon">Constructeurs et Destructeurs</link>),
   <literal>__call</literal>,
   <literal>__get</literal>,
   <literal>__set</literal>,
   <literal>__isset</literal>,
   <literal>__unset</literal>
   (voir la <link linkend="language.oop5.overloading">surcharge</link>),
   <literal>__sleep</literal>,
   <literal>__wakeup</literal>,
   <literal>__toString</literal>,
   <literal>__set_state</literal>,
   <link linkend="language.oop5.cloning">__clone</link> et
   <link linkend="language.oop5.autoload">__autoload</link>
   sont magiques dans les classes &php;. Vous ne pouvez pas utiliser ces noms de fonction
   dans aucune de vos classes sauf si vous voulez modifier
   le comportement associé à ces fonctions magiques.
  </para>

  <caution>
   <simpara>
    &php; réserve tous les noms de fonctions commençant par __ pour
    les fonctions magiques. Il est recommandé de ne pas utiliser de noms 
    de fonctions commençant par __ sauf si vous voulez des fonctionnalités magiques
    documentées.
   </simpara>
  </caution>

  <sect2 id="language.oop5.magic.sleep">
   <title><literal>__sleep</literal> et <literal>__wakeup</literal></title>
   <para>
    La fonction <function>serialize</function> vérifie si votre classe a une fonction
    avec le nom magique <literal>__sleep</literal>. Si c'est le cas, cette fonction
    sera exécutée avant toute linéarisation. Elle peut nettoyer l'objet et elle est 
    supposée retourner un tableau avec les noms de toutes les variables de l'objet 
    qui doivent être linéarisées.
   </para>
   <para>
    Le but avoué de <literal>__sleep</literal> est de clore toutes les
    connexions aux bases de données que l'objet peut avoir, valider 
    les données en attente ou effectuer des tâches de nettoyage.
    De plus, cette fonction est utile si vous avez de très gros objets
    qui n'ont pas besoin d'être sauvegardés en totalité.
   </para>
   <para>
    Réciproquement, la fonction <function>unserialize</function> vérifie
    la présence d'une fonction dont le nom est le nom magique
    <literal>__wakeup</literal>. Si elle est présente, cette fonction
    peut reconstruire toute ressource que l'objet possède.
   </para>
   <para>
    Le but avoué de <literal>__wakeup</literal> est de rétablir
    toute connexion base de données qui aurait été perdue
    durant la linéarisation et d'effectuer des tâches de réinitialisation.
   </para>
   <example>
    <title>Utilisation de Sleep et de wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection {
    protected $link;
    private $server, $username, $password, $db;

    public function __construct($server, $username, $password, $db)
    {
        $this->server = $server;
        $this->username = $username;
        $this->password = $password;
        $this->db = $db;
        $this->connect();
    }

    private function connect()
    {
        $this->link = mysql_connect($this->server, $this->username, $this->password);
        mysql_select_db($this->db, $this->link);
    }

    public function __sleep()
    {
        mysql_close($this->link);
    }

    public function __wakeup()
    {
        $this->connect();
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 id="language.oop5.magic.tostring">
   <title><literal>__toString</literal></title>
   <para>
    La méthode <literal>__toString</literal> détermine comment la classe
    doit réagir lorsqu'elle est convertie en chaîne de caractères.
   </para>
   <example>
    <title>Exemple simple</title>
    <programlisting role="php">
<![CDATA[
<?php
// Déclaration d'une classe simple
class ClasseTest
{
    public $foo;

    public function __construct($foo) {
        $this->foo = $foo;
    }

    public function __toString() {
        return $this->foo;
    }
}

$class = new ClasseTest('Bonjour');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Bonjour
]]>
    </screen>
   </example>
   <para>
    Il est important de noter qu'avant &php; 5.2.0, la méthode
    <literal>__toString</literal> n'était appelée que si elle était
    directement combinée avec <function>echo</function> ou
    <function>print</function>.
   </para>
  </sect2>

  <sect2 id="language.oop5.magic.set-state">
   <title><literal>__set_state</literal></title>
   <para>
    Cette méthode <link linkend="language.oop5.static">statique</link> est appelée
    pour les classes exportées par la fonction <function>var_export</function>
    depuis &php; 5.1.0.
   </para>
   <para>
    Le seul paramètre de cette méthode est un tableau contenant les propriétés
    exportées sous la forme <literal>array('propriété' => valeur, ...)</literal>.
   </para>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->