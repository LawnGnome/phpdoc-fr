<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->
 <sect1 id="language.oop5.paamayim-nekudotayim">
  <title>::</title>

  <para>
   Le Paamayim Nekudotayim est le symble double deux points (::).
   Il fournit un moyen d'accéder aux membres
   <link linkend="language.oop5.static">static</link>, <link
   linkend="language.oop5.constants">constant</link> ou encore aux
   méthodes redéfinies par la classe.
  </para>

  <para>
   Paamayim Nekudotayim peut sembler un choix étrange pour un double deux
   points. Cependant, au moment de l'écriture du Zend Engine 0.5 (fournit 
   avec &php; 3), c'est le nom choisi par Andi et Zeev.
   Actuellement, celà signifie un double deux points... en Hébreu ! 
   Pendant la progression du développement de &php;, ce nom n'a tout simplement
   jamais changé.
  </para>

  <para>
   Lorsque vous référencez ces éléments en dehors de la définition de la
   classe, vous utilisez le nom de la classe.
  </para>


  <example>
   <title>:: en dehors de la définition de la classe</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass {
  const CONST_VALUE = 'Une valeur constante';
}
echo MyClass::CONST_VALUE;
?>
]]>
   </programlisting>
  </example>

  <para>
   Deux mots clés spéciaux <varname>self</varname> et <varname>parent</varname>
   sont utilisés pour accéder aux membres ou aux méthodes depuis la définition
   de la classe.
  </para>

  <example>
   <title>:: depuis la définition de la classe</title>
   <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass {
  public static $my_static = 'variable statique';

  public static function doubleColon() {
     echo parent::CONST_VALUE . "\n";
     echo self::$my_static . "\n";
  }
}

OtherClass::doubleColon();
?>
]]>
   </programlisting>
  </example>

  <para>
   Lorsqu'une classe étendue redéfinit une méthode de la classe parente, &php;
   n'appelera pas la méthode d'origine. Il appartient à la méthode dérivée 
   d'appeler la méthode d'origine en cas de besoin. Celà est également valable
   pour les définitions des <link
   linkend="language.oop5.decon">constructeurs et des destructeurs</link>, 
   les <link linkend="language.oop5.overloading">surcharges</link> et les
   méthodes <link linkend="language.oop5.magic">magiques</link>.
  </para>

  <example>
   <title>Appel d'une méthode parent</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass {

  protected function myFunc() {
    echo "MyClass::myFunc()\n";
  }
}

class OtherClass extends MyClass {

  /* Dépassement de la définition parent */
  public function myFunc() {

    /* Mais appel de la fonction parent */
    parent::myFunc();
    echo "OtherClass::myFunc()\n";
  }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
