<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.18 $ -->
<!-- EN-Revision: 1.14 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

 <sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
  <title>L'opérateur de résolution de portée (::)</title>

  <para>
   L'opérateur de résolution de portée (aussi appelé Paamayim Nekudotayim) ou,
   en termes plus simples, le symbole &quot;double deux points&quot; (::),
   fournit un moyen d'accéder aux membres
   <link linkend="language.oop5.static">statiques</link> ou <link
   linkend="language.oop5.constants">constants</link> ainsi qu'aux
   éléments redéfinis par la classe.
  </para>

  <para>
   Lorsque vous référencez ces éléments en dehors de la définition de la
   classe, utilisez le nom de la classe.
  </para>

  <para>
   Depuis &php; 5.3.0, il est possible de référencer une classe en utilisant
   une variable. La valeur de la variable ne peut être un mot clé (e.g. <literal>self</literal>,
   <literal>parent</literal> et <literal>static</literal>).
  </para>

  <para>
   Paamayim Nekudotayim peut sembler un choix étrange pour un double deux
   points. Cependant, au moment de l'écriture du Zend Engine 0.5 (fourni
   avec &php; 3), c'est le nom choisi par le groupe Zend.
   En fait, cela signifie un double deux points... en hébreu !
  </para>

  <example>
   <title>:: en dehors de la définition de la classe</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'Une valeur constante';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE; // Depuis PHP 5.3.0

echo MyClass::CONST_VALUE;
?>
]]>
   </programlisting>
  </example>

  <para>
   Deux mots-clé spéciaux, <varname>self</varname> et <varname>parent</varname>,
   sont utilisés pour accéder aux membres ou aux méthodes depuis la définition
   de la classe.
  </para>

  <example>
   <title>:: depuis la définition de la classe</title>
   <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'variable statique';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

$classname = 'OtherClass';
echo $classname::doubleColon(); // Depuis PHP 5.3.0

OtherClass::doubleColon();
?>
]]>
   </programlisting>
  </example>

  <para>
   Lorsqu'une classe étendue redéfinit une méthode de la classe parente, &php;
   n'appellera pas la méthode d'origine. Il appartient à la méthode dérivée
   d'appeler la méthode d'origine en cas de besoin. Cela est également valable
   pour les définitions des <link
   linkend="language.oop5.decon">constructeurs et destructeurs</link>,
   les <link linkend="language.oop5.overloading">surcharges</link> et les
   <link linkend="language.oop5.magic">méthodes magiques</link>.
  </para>

  <example>
   <title>Appel d'une méthode parente</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
  }
}

class OtherClass extends MyClass
{
    // Dépassement de la définition parent
    public function myFunc() {

      // Mais appel de la fonction parent
      parent::myFunc();
      echo "OtherClass::myFunc()\n";
  }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
   </programlisting>
  </example>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
