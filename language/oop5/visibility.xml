<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 311569 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

 <sect1 xml:id="language.oop5.visibility" xmlns="http://docbook.org/ns/docbook">
  <title>Visibilité</title>
  <para>
   La visibilité d'une propriété ou d'une méthode peut être définie en préfixant
   la déclaration avec un mot-clé : <emphasis>public</emphasis>,
   <emphasis>protected</emphasis> ou <emphasis>private</emphasis>.
   Les éléments déclarés publics peuvent être utilisés par n'importe quelle partie
   du programme. L'accès aux éléments protégés est limité aux classes et parents
   hérités (et à la classe qui a défini l'élément).
   L'accès aux éléments privés est uniquement réservé à la classe qui les a définis.
  </para>
  
  <sect2 xml:id="language.oop5.visiblity-members">
   <title>Visibilité des propriétés</title>
   <para>
    Les propriétés des classes doivent être définies comme
    publiques, protégées ou privées. Si la propriété est déclarée avec le mot
    <emphasis>var</emphasis>, elle sera alors définie de façon publique.
   </para>
   <para>
    <example>
     <title>Déclaration des propriétés</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Définition de MyClass
 */
class MyClass
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello()
    {
        echo $this->public;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Fonctionne
echo $obj->protected; // Erreur fatale
echo $obj->private; // Erreur fatale
$obj->printHello(); // Affiche Public, Protected et Private


/**
 * Définition de MyClass2
 */
class MyClass2 extends MyClass
{
    // On peut redéclarer les éléments publics ou protégés, mais pas ceux privés
    protected $protected = 'Protected2';

    function printHello()
    {
      echo $this->public;
      echo $this->protected;
      echo $this->private;
   }
}

$obj2 = new MyClass2();
echo $obj2->public; // Fonctionne
echo $obj2->private; // Indéfini
echo $obj2->protected; // Erreur fatale
$obj2->printHello(); // Affiche Public, Protected2 et Indéfini

?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <simpara>
     La méthode de déclaration de variable en PHP 4 avec le mot-clé
     <emphasis>var</emphasis> est toujours supportée pour
     des raisons de compatibilité (en tant que synonyme du mot-clé public).
     Avant PHP 5.1.3, son utilisation génère une erreur de niveau
     <constant>E_STRICT</constant>.
    </simpara>
   </note>
  </sect2>
  
  <sect2 xml:id="language.oop5.visiblity-methods">
   <title>Visibilité des méthodes</title>
   <para>
    Les méthodes des classes peuvent être définies en tant que
    publiques, privées ou protégées. Les méthodes sans déclaration
    seront automatiquement définies comme étant publiques.
   </para>
   <para>
    <example>
     <title>Déclaration d'une méthode</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Définition de MyClass
 */
class MyClass
{
    // Déclare un contructeur public
    public function __construct() { }

    // Déclaration d'une méthode publique
    public function MyPublic() { }

    // Déclaration d'une méthode protégée
    protected function MyProtected() { }

    // Déclaration d'une méthode privée
    private function MyPrivate() { }

    // Celle-ci sera publique
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Fonctionne
$myclass->MyProtected(); // Erreur fatale
$myclass->MyPrivate(); // Erreur fatale
$myclass->Foo(); // Public, Protected et Private fonctionnent


/**
 * Définition de MyClass2
 */
class MyClass2 extends MyClass
{
    // Celle-ci sera publique
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Erreur fatale
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Fonctionne
$myclass2->Foo2(); // Public et Protected fonctionnent, non pas Private

class Bar
{
    public function test() {
        $this->testPrivate();
        $this->testPublic();
    }

    public function testPublic() {
        echo "Bar::testPublic\n";
    }

    private function testPrivate() {
        echo "Bar::testPrivate\n";
    }
}

class Foo extends Bar
{
    public function testPublic() {
        echo "Foo::testPublic\n";
    }

    private function testPrivate() {
        echo "Foo::testPrivate\n";
    }
}

$myFoo = new foo();
$myFoo->test(); // Bar::testPrivate
                // Foo::testPublic
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.visibility-other-objects">
   <title>Visibilité depuis d'autres objets</title>
   <para>
    Les objets de même type ont un accès aux membres privés et protégés
    même s'ils ne sont pas dans la même instance. Ceci est dû au fait que
    les détails spécifiques de l'implémentation sont déjà connus en interne
    par ces objets.
   </para>
   <example>
    <title>Accès aux membres privés d'un type d'objet identique</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    private $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    private function bar()
    {
        echo 'Accès à la méthode privée.';
    }

    public function baz(Test $other)
    {
        // Nous pouvons modifier la propriété privée :
        $other->foo = 'Bonjour';
        var_dump($other->foo);

        // Nous pouvons également appeler la méthode privée :
        $other->bar();
    }
}

$test = new Test('test');

$test->baz(new Test('other'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(5) "Bonjour"
Accès à la méthode privée.
]]>
    </screen>
   </example>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->