<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
 <sect1 id="language.oop5.visibility">
  <title>Visibilité</title>
  <para>
   La visibilité d'un membre ou d'une méthode peut être définiée en préfixant
   la déclaration avec le mot clé : public, protected ou private. 
   Les éléments déclarés publiques peuvent être accéder par n'importe quelles appeleurs.
   Les protégés limitent l'accès aux classes non héritées uniquement.
   Les privés limitent la visibilité à la classe qui les a définie, uniquement.
  </para>
  <sect2 id="language.oop5.visiblity-members">
   <title>Visiblité des membres</title>
   <para>
    Les classes membres peuvent être définies en publiques, protégées ou privées.
   </para>
    <example>
     <title>Déclaration des membres</title>
     <programlisting role="php">
<![CDATA[
<?php

class MyClass {
   public    $public     = "MyClass::public!\n";
   protected $protected  = "MyClass::Protected!\n";
   protected $protected2 = "MyClass::Protected2!\n";
   private   $private    = "MyClass::private!\n";

   function printHello() {
      print "MyClass::printHello() " . $this->private;
      print "MyClass::printHello() " . $this->protected;
      print "MyClass::printHello() " . $this->protected2;
   }
}

class MyClass2 extends MyClass {
   protected $protected = "MyClass2::protected!\n";

   function printHello() {

      MyClass::printHello();    

      print "MyClass2::printHello() " . $this->public; 
      print "MyClass2::printHello() " . $this->protected; 
      print "MyClass2::printHello() " . $this->protected2;

      /* Fera une erreur fatale : */
      //print "MyClass2::printHello() " . $this->private; /* Erreur fatale */

   }
}

$obj = new MyClass();

print "Main:: " . $obj->public;
//print $obj->private; /* Erreur fatale */
//print $obj->protected;  /* Erreur fatale */
//print $obj->protected2;  /* Erreur fatale */

$obj->printHello(); /* doit s'afficher */

$obj2 = new MyClass2();
print "Main:: " . $obj2->private; /* Indéfini */ 

//print $obj2->protected;   /* Erreur fatale */ 
//print $obj2->protected2;  /* Erreur fatale */ 

$obj2->printHello();
?> 
]]>
     </programlisting>
    </example>
   <note>
    <simpara>
     La déclaration de variables avec le mot clé 'var' en &php; 4 n'est plus supportée
     pour les objets &php; 5. Pour des raisons de compatibilité, une variable déclarée en &php;
     aura automatiquement une visibilité publique et un niveau d'erreur E_STRICT.
    </simpara>
   </note>
  </sect2>
  <sect2 id="language.oop5.visiblity-methods">
   <title>Visibilité des méthodes</title>
   <para>
    .
   </para>
  </sect2>


 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
