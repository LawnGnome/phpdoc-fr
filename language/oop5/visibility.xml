<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.8 Maintainer: yannick Status: ready -->
 <sect1 id="language.oop5.visibility">
  <title>Visibilité</title>
  <para>
   La visibilité d'une propriété ou d'une méthode peut être définie en préfixant
   la déclaration avec un mot-clé : <literal>public</literal>,
   <literal>protected</literal> ou <literal>private</literal>. 
   Les éléments déclarés publics (<literal>public</literal>)
   peuvent être utilisés par n'importe quelle partie
   du programme. L'accès aux éléments protégés (<literal>protected</literal>)
   est limité aux classes et parents hérités (et à la classe qui a défini l'élément).
   L'accès aux éléments privés (<literal>private</literal>) est uniquement réservé
   à la classe qui les a définis.
  </para>
  <sect2 id="language.oop5.visiblity-members">
   <title>Visibilité des membres</title>
   <para>
    Les classes membres doivent être définies comme 
    publiques, protégées ou privées.
   </para>
   <para>
    <example>
     <title>Déclaration des membres</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Définition de MyClass
 */
class MyClass 
{
    public $public = 'Public';
    protected $protected = 'Protected';
    private $private = 'Private';

    function printHello() 
    {
        echo $this->private;
        echo $this->protected;
        echo $this->private;
    }
}

$obj = new MyClass();
echo $obj->public; // Fonctionne
echo $obj->protected; // Erreur fatale
echo $obj->private; // Erreur fatale
$obj->printHello(); // Affiche Public, Protected et Private


/**
 * Définition de MyClass2
 */
class MyClass2 extends MyClass 
{
    // On peut redéclarer les éléments publics ou protégés, mais pas les privés
    protected $protected = 'Protected2';

    function printHello() 
    {
      echo $this->public; 
      echo $this->protected; 
      echo $this->private;
   }
}

$obj2 = new MyClass2();
echo $obj->public; // Fonctionne
echo $obj2->private; // Indéfini
echo $obj2->protected; // Erreur fatale
$obj2->printHello(); // Affiche Public, Protected2 et non Private

?> 
]]>
     </programlisting>
    </example>
   </para>
   <note>
   
    <simpara>
     La méthode de déclaration de variable en &php; 4 avec le mot
     clé <emphasis>var</emphasis> n'est plus valide
     pour les objets en &php; 5. Pour des raisons de compatibilité, 
     une variable déclarée ainsi aura automatiquement une visibilité 
     publique et une erreur de niveau <constant>E_STRICT</constant> sera
     générée.
    </simpara>
    
   </note>
  </sect2>
  <sect2 id="language.oop5.visiblity-methods">
   <title>Visibilité des méthodes</title>
   <para>
    Les méthodes des classes doivent être définies en tant que
    publiques, privées ou protégées. Les méthodes sans déclaration
    seront automatiquement définies comme étant publiques.
   </para>
   <para>
    <example>
     <title>Déclaration d'une méthode</title>
     <programlisting role="php">
<![CDATA[
<?php
/**
 * Définition de MyClass
 */
class MyClass
{
    // Les contructeurs doivent être publics
    public function __construct() { }

    // Déclaration d'une méthode publique
    public function MyPublic() { }

    // Déclaration d'une méthode protégée
    protected function MyProtected() { }

    // Déclaration d'une méthode privée
    private function MyPrivate() { }

    // Celle-ci sera publique
    function Foo()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate();
    }
}

$myclass = new MyClass;
$myclass->MyPublic(); // Fonctionne
$myclass->MyProtected(); // Erreur fatale
$myclass->MyPrivate(); // Erreur fatale
$myclass->Foo(); // Public, Protected et Private fonctionnent


/**
 * Définition de MyClass2
 */
class MyClass2 extends MyClass
{
    // Celle-ci sera publique
    function Foo2()
    {
        $this->MyPublic();
        $this->MyProtected();
        $this->MyPrivate(); // Erreur fatale
    }
}

$myclass2 = new MyClass2;
$myclass2->MyPublic(); // Fonctionne
$myclass2->Foo2(); // Public et Protected fonctionnent, non pas Private
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
