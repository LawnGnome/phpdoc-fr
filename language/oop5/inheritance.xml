<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288440 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.oop5.inheritance" xmlns="http://docbook.org/ns/docbook">
 <title>Héritage</title>
 <para>
  L'héritage fait partie des principes de la programmation orientée objet, et 
  PHP l'implémente dans son modèle objet. L'héritage affecte les relations entre
  les classes et les objets.
 </para>
 <para>
  L'héritage s'utilise avec le mot-clé extends et les notions de classe mère
  et de classe fille. La classe fille hérite ou "étend" (grâce au mot-clé extends 
  dans sa définition) sa classe mère et hérite de toutes les méthodes et 
  propriétés de sa classe mère, à condition qu'elles soient publiques ou protégées. 
  Suivant le principe de l'encapsulation, le niveau de visibilité privé n'est donc 
  pas accessible (voir la <link linkend="language.oop5.visibility">visibilité</link>).
  A moins que la classe fille ne redéfinisse les méthodes ou propriétés définies
  dans sa classe mère, celles-ci conservent leurs valeurs et fonctionnalités
  originales, c'est à dire telles qu'elles ont été définies dans la classe 
  mère.
 </para>
 <para>
  L'héritage est donc très utile pour définir et abstraire certaines fonctionnalités
  communes à plusieurs classes, plusieurs objets, tout en permettant l'ajout de 
  fonctionnalités propres dans les classes enfants sans réimplémenter en leur sein
  les fonctionnalités communes.
 </para>
 <para>
  <note>
   Le modèle objet de PHP5 utilise l'héritage simple, vous ne pouvez donc pas
   faire hériter votre classe fille de plus d'une classe.
  </note>
 </para>
 <sect2 xml:id="language.oop5.inheritance.examples">
  <example xml:id="language.oop5.inheritance.examples.ex1">
   <title>Exemple d'héritage</title>
    <programlisting role="php">
<![CDATA[
<?php

class foo
{
    public function printItem($string)
    {
        echo 'Foo: ' . $string . PHP_EOL;
    }
    
    public function printPHP()
    {
        echo 'PHP est super' . PHP_EOL;
    }
}

class bar extends foo
{
    public function printItem($string)
    {
        echo 'Bar: ' . $string . PHP_EOL;
    }
}

$foo = new foo();
$bar = new bar();
$foo->printItem('baz'); // Affiche: 'Foo: baz'
$foo->printPHP();       // Affiche: 'PHP est super' 
$bar->printItem('baz'); // Affiche: 'Bar: baz'
$bar->printPHP();       // Affiche: 'PHP est super'

?>
]]>
   </programlisting>
  </example>
 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
