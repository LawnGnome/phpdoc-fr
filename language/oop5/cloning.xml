<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.1 Maintainer: yannick Status: ready -->
 <sect1 id="language.oop5.cloning">
  <title>Duplication d'objets</title>
  
  <para>
   Le fait de créer une copie de l'objet possédant exactement les mêmes propriétés
   n'est pas toujours le comportement que l'on souhaite. Un bon exemple pour illustrer le besoin
   d'un constructeur de copie : Si vous avez un objet qui représente une fenêtre GTK
   et que l'objet contient la ressource représentant cette fenêtre GTK, lorsque vous créez une copie,
   vous voudriez créer une nouvelle fenêtre avec les mêmes propriétés et le nouvel objet
   doit contenir la ressource représentant la nouvelle fenêtre. Un autre exemple :
   Si votre objet contient une référence à un autre objet qui est utilisé, lorsque
   vous copiez l'objet parent, vous voulez créer une nouvelle instance de cette autre objet
   pour que cette copie possède sa propre copie.
  </para>

  <para>
   Une copie d'objet est créée en utilisant le mot clé '<literal>clone</literal>' (qui fait appel
   à la méthode <function>__clone</function> de l'objet si possible).
   Une méthode <function>__clone</function> d'un objet ne peut pas
   être appelée directement.
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
$copy_of_object = clone $object;
]]>
   </programlisting>
  </informalexample>

  <para>
   Lorsque le développeur demande à créer une nouvelle copie d'un objet, &php; 5
   vérifira si une méthode <function>__clone</function> a été définie ou non.
   Si elle n'a pas été définie, il appellera une méthode <function>__clone</function>
   par défaut qui copiera toutes les propriétés de l'objet.
   Si une méthode <function>__clone</function> est définie, alors le développeur est
   responsable dans la définition des propriétés nécessaires dans la création de l'objet.
   Par convenance, le moteur appelera une fonction qui importera toutes les propriétés
   depuis l'objet source,  donc, il pourra commencer avec une réplication octet par octet
   de l'objet source et effacera uniquement les propriétés qui doivent être modifiées.
  </para>

    <example>
     <title>Exemple de duplication d'objets</title>
     <programlisting role="php">
<![CDATA[
<?php
class MyCloneable {
   static $id = 0;

   function MyCloneable() {
       $this->id = self::$id++;
   }

   function __clone() {
       $this->address = "New York";
       $this->id = self::$id++;
   }
}

$obj = new MyCloneable();

$obj->name = "Bonjour";
$obj->address = "Tel-Aviv";

print $obj->id . "\n";

$obj_cloned = clone $obj;

print $obj_cloned->id . "\n";
print $obj_cloned->name . "\n";
print $obj_cloned->address . "\n";
?> 
]]>
     </programlisting>
    </example>



 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
