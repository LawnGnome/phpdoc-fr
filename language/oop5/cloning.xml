<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.2 Maintainer: yannick Status: ready -->
 <sect1 id="language.oop5.cloning">
  <title>Duplication d'objets</title>
  
  <para>
   Le fait de créer une copie d'un objet possédant exactement les mêmes
   propriétés n'est pas toujours le comportement que l'on souhaite. 
   Un bon exemple pour illustrer le besoin d'un constructeur de copie : 
   Si vous avez un objet qui représente une fenêtre GTK et que l'objet 
   contient la ressource représentant cette fenêtre GTK, lorsque vous 
   créez une copie, vous pouvez vouloir créer une nouvelle fenêtre avec
   les mêmes propriétés, mais le nouvel objet devra contenir une ressource
   représentant la nouvelle fenêtre.
  </para>
  <para>
   Un autre exemple : Si votre objet <varname>$a</varname> contient une
   référence vers un autre objet <varname>$b</varname> qui est en cours 
   d'utilisation, lorsque vous copiez l'objet parent (<varname>$a</varname>),
   vous voulez créer une nouvelle instance de <varname>$b</varname> pour que
   votre copie possède sa propre instance.
  </para>

  <para>
   Une copie d'objet est créée en utilisant le mot clé 
   <literal>clone</literal> (qui fait appel à la méthode 
   <function>__clone</function> de l'objet, si elle a été définie).
   La méthode <function>__clone</function> d'un objet ne peut
   être appelée directement.
  </para>

  <informalexample>
   <programlisting role="php5">
<![CDATA[
<?php

$copy_of_object = clone $object;

?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Lorsque le développeur demande à créer une nouvelle copie d'un objet, 
   &php; 5 vérifiera si une méthode <function>__clone</function> a été 
   définie ou non.
   Si elle n'a pas été définie, il appellera une méthode
   <function>__clone</function> interne qui copiera toutes les propriétés de
   l'objet.
   Si une méthode <function>__clone</function> est définie, alors le
   développeur est responsable de la définition des propriétés nécessaires
   à la création de l'objet.
   Par convenance, le moteur appellera une fonction qui importera toutes
   les propriétés depuis l'objet source, donc, il pourra commencer avec une
   réplication octet par octet de l'objet source et effacera uniquement les
   propriétés qui doivent être modifiées.
  </para>

  <example>
   <title>Exemple de duplication d'objets</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyCloneable {
   static $id = 0;

   function MyCloneable() {
       $this->id = self::$id++;
   }

   function __clone() {
       $this->address = "New York";
       $this->id = self::$id++;
   }
}

$obj = new MyCloneable();

$obj->name = "Bonjour";
$obj->address = "Tel-Aviv";

echo $obj->id . "\n";

$obj_cloned = clone $obj;

echo $obj_cloned->id . "\n";
echo $obj_cloned->name . "\n";
echo $obj_cloned->address . "\n";
?> 
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
