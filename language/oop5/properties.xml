<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Propriétés</title>

 <para>
  Les variables au sein d'une classe sont appellées "propriétés". On peut
  également les retrouver sous la dénomination "attributs" ou "champs",
  mais nous conservervons l'appellation "propriété" pour cette documentation.
  Elles sont définies en utilisant un des mot-clé <literal>public</literal>,
  <literal>protected</literal> ou <literal>private</literal>, suivi d'une
  déclaration classique de variable. Cette déclaration peut être une 
  initialisation, alors elle doit être initialisée à une valeur constante, 
  c'est à dire que cette valeur doit pouvoir être évaluée durant
  la compilation et ne pas dépendre de l'exécution du code pour pouvoir
  être évaluée.
 </para>
 <para>
  Voir <xref linkend="language.oop5.visibility" /> pour plus d'informations
  sur la signification <literal>public</literal>, <literal>protected</literal>
  et <literal>private</literal>.
 </para>
 <note>
  <para>
   Afin de maintenir la rétrocompatibilité avec PHP 4, PHP 5 continue d'accepter 
   l'usage du mot-clé <literal>var</literal> pour la déclaration de propriété en
   remplacement de (ou avec) <literal>public</literal>, <literal>protected</literal>
   et <literal>private</literal>. Cependant, <literal>var</literal> n'est plus requis
   par le modèle objet de PHP 5. Des versions PHP 5.0 à 5.1.3, l'usage de
   <literal>var</literal> était considéré comme déprécié et déclenchait un
   avertissement de niveau <constant>E_STRICT</constant>, mais depuis PHP 5.1.3
   l'usage n'est plus déprécié et ne déclenche plus d'avertissement.
  </para>
  <para>
   Si vous déclarez une propriété en utilisant <literal>var</literal> au lieu
   de <literal>public</literal>, <literal>protected</literal> ou 
   <literal>private</literal>, alors PHP 5 traitera la propriété comme
   <literal>public</literal>.
  </para>
 </note>
 <para>
  Au sein des méthodes de classes, les propriétés, constantes et méthodes peuvent
  être appellées en utilisant la forme <varname>$this-&gt;property</varname>
  (ou <literal>property</literal> est le nom de la propriété), à moins que
  l'appel se fasse sur une propriété statique dans une méthode de classe statique,
  auquel cas l'accès se fait en utilisant la forme <varname>self::$property</varname>.
  Voir <link linkend="language.oop5.static">Statique</link> pour plus d'informations.
 </para>
 <para>
  La pseudo-variable <varname>$this</varname> est disponible au sein de n'importe
  quelle méthode lorsque cette méthode est appellée depuis un objet. 
  <varname>$this</varname> est une référence à l'objet appellant (en général l'objet
  auquel la méthode appartient, ou un autre objet si la méthode est appellé de façon
  <link linkend="language.oop5.static">statique</link> depuis un autre objet).
 </para>
 
 <para>
  <example>
   <title>Déclarations de propriété</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // Déclarations invalides de propriété:
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Déclarations valides de propriété;
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // Autorisé depuis PHP 5.3.0
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
   </programlisting>   
  </example>
 </para>

 <note>
  <para>
   Il existe des fonctions qui permettent de gérer des classes et des objets.
   Voir <link linkend="ref.classobj">Fonctions Classes/Objets</link>.
  </para>
 </note>
 
 <para>
  Contrairement à la syntaxe 
  <link linkend="language.types.string.syntax.heredoc">heredoc</link>, 
  la syntaxe <link linkend="language.types.string.syntax.nowdoc">nowdoc</link>
  peut être utilisée dans n'importe quel contexte statique, y compris la
  déclaration de propriété.
  <example>
   <title>Exemple d'utilisation de la syntaxe nowdoc pour initialiser une propriété</title>
   <programlisting role="php">
<![CDATA[
<?php
class foo {
   // Depuis PHP 5.3.0
   public $bar = <<<'EOT'
bar
EOT;
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <para>
   Le support de la syntaxe nowdoc à été ajouté à PHP 5.3.0.
  </para>
 </note>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
