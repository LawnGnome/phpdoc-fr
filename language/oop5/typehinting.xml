<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.2 Maintainer: dams Status: ready -->
 <sect1 id="language.oop5.typehinting">
  <title>Typage optionnel des paramètres</title>
  <para>
   &php; 5 dispose pour la première fois du typage optionnel des paramètres
   (littéralement, <literal>Type Hinting</literal>). Les fonctions sont maintenant
   capables d'imposer les aux paramètres d'êtres d'un certains type, grâce 
   au prototype de la fonction.
  </para>
  
  <example>
   <title>Exemple de typage d'objets</title>
    <programlisting role="php">
<![CDATA[
<?php
// Un exemple de classe
class MaClasse
{
    /**
     * Fonction de test
     *
     * Le premier paramètre doit être un objet de type AutreClasse
     */
    public function test(AutreClasse $otherclass) {
        echo $otherclass->var;
    }
}

// Une autre classe d'exemple
class AutreClasse {
    public $var = 'Bonjour le monde!';
}
?>
]]>
   </programlisting>
   <para>
    Si le paramètre ne satisfait pas les conditions imposées,
    une erreur fatale est émise.
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Une instance de chaque classe
$maclasse = new MaClasse;
$autreclasse = new AutreClasse;

// Fatal Error: Argument 1 must be an object of class OtherClass
$myclass->test('hello');

// Fatal Error: Argument 1 must be an instance of OtherClass
$foo = new stdClass;
$myclass->test($foo);

// Fatal Error: Argument 1 must not be null
$myclass->test(null);

// Fonctionne : Affiche 'Bonjour le monde!'
$myclass->test($otherclass);
?>
]]>
   </programlisting>
   <para>
    Le typage d'objet fonctionne aussi avec les fonctions : 
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Une classe d'exemple 
class MaClasse {
    public $var = 'Bonjour le monde!';
}

/**
 * Fonction de test
 *
 * Le premier paramètre doit être un objet de type MaClasse
 */
function MaFonction (MaClasse $foo) {
    echo $foo->var;
}

// Fonctionne
$maclasse = new MaClasse;
MaFonction($maclasse);
?>
]]>
   </programlisting>
  </example>
  <para>
   Le typage de paramètre ne fonctionne qu'avec les variables de type
   <type>object</type>. Le typage avec les types traditionnels tels
   que <type>int</type> et <type>string</type> ne sont pas supportés.
  </para>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
