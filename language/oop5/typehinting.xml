<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331202 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

 <sect1 xml:id="language.oop5.typehinting" xmlns="http://docbook.org/ns/docbook">
  <title>Typage objet</title>
  <para>
   PHP 5 introduit le typage objet implicite (littéralement,
   <literal>Type Hinting</literal>). Les fonctions peuvent maintenant
   imposer aux paramètres d'être des objets (en spécifiant le nom de la classe
   dans le prototype de la fonction), des interfaces, des tableaux (depuis PHP 5.1),
   ou de type <type>callable</type> (depuis PHP 5.4).
   Cependant, si <type>NULL</type> est utilisé en tant que valeur par défaut
   du paramètre, il sera autorisé comme argument pour tous les futurs appels.
  </para>
  
  <para>
   Si une classe ou une interface est spécifiée comme type, alors toutes les classes
   en héritant ou ses implémentations seront aussi autorisées.
  </para>
  
  <para>
   La spécification d'un type ne peut être utilisée avec les types scalaires
   comme <type>int</type> ou <type>string</type>.
   Les <link linkend="language.types.resource">ressources</link> et les
   <link linkend="language.oop5.traits">Traits</link> ne sont pas non plus autorisés.
  </para>

  <example>
   <title>Exemples de typage d'objets</title>
    <programlisting role="php">
<![CDATA[
<?php
// Un exemple de classe
class MaClasse
{
    /**
     * Fonction de test
     *
     * Le premier paramètre doit être un objet de type AutreClasse
     */
    public function test(AutreClasse $autreclasse) {
        echo $autreclasse->var;
    }


    /**
    * Une autre fonction de test
    *
    * Le premier paramètre doit être un tableau
    */
    public function test_array(array $input_array) {
        print_r($input_array);
    }
    
    /**
     * Le premier paramètre doit être un itérateur
     */
    public function test_interface(Traversable $iterator) {
        echo get_class($iterator);
    }
    
    /**
     * Le premier paramètre doit être une fonction de rappel (callable)
     */
    public function test_callable(callable $callback, $data) {
        call_user_func($callback, $data);
    }
}

// Un autre exemple de classe
class AutreClasse {
    public $var = 'Bonjour le monde!';
}
?>
]]>
   </programlisting>
   <para>
    Si un paramètre ne satisfait pas les conditions imposées, une erreur fatale
    (qui peut être attrapée) est émise.
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Une instance de chaque classe
$maclasse = new MaClasse;
$autreclasse = new AutreClasse;

// Erreur fatale : Argument 1 doit être un objet de la classe AutreClasse
$maclasse->test('salut');

// Erreur fatale : Argument 1 doit être une instance de AutreClasse
$foo = new stdClass;
$maclasse->test($foo);

// Erreur fatale : Argument 1 ne doit pas être null
$maclasse->test(null);

// Fonctionne : Affiche 'Bonjour le monde!'
$maclasse->test($autreclasse);

// Erreur fatale : Argument 1 doit être un tableau
$maclasse->test_array('a string');

// Fonctionne : Affiche le tableau
$maclasse->test_array(array('a', 'b', 'c'));

// Fonctionne : Affiche ArrayObject
$maclasse->test_interface(new ArrayObject(array()));

// Fonctionne : Affiche int(1)
$maclasse->test_callable('var_dump', 1);
?>
]]>
   </programlisting>
   <para>
    Le typage fonctionne aussi avec les fonctions :
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Un exemple de classe
class MaClasse {
    public $var = 'Bonjour le monde!';
}

/**
 * Fonction de test
 *
 * Le premier paramètre doit être un objet de type MaClasse
 */
function maFonction(MaClasse $foo) {
    echo $foo->var;
}

// Fonctionne
$maclasse = new MaClasse;
maFonction($maclasse);
?>
]]>
   </programlisting>
   <para>
    Le typage objet autorise la valeur NULL :
   </para>
    <programlisting role="php">
<![CDATA[
<?php

/* On accepte la valeur NULL */
function test(stdClass $obj = NULL) {

}

test(NULL);
test(new stdClass);

?>
]]>
   </programlisting>
  </example>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->