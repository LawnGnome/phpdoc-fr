<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->
<sect1 id="language.oop5.patterns">
 <title>Masques</title>
 <para>
  Les masques sont des façons de décrire les meilleures pratiques 
  et les bonnes conceptions.
  Ils procurent une solution flexible face aux problèmes habituels de 
  programmation.
 </para>

 <sect2 id="language.oop5.patterns.factory">
  <title>Usine</title>
  <para>
   Le masque d'usine permet l'instantiation d'objets durant l'exécution.
   Il est appelé "masque d'usine" puisqu'il est responsable de la "fabrication" 
   d'un objet.
  </para>
  <example>
   <title>Méthode d'usine</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // La méthode d'usine
    function &factory($type)
    {
        if (include_once 'Drivers/' . $type . '.php') {
            $classname = 'Driver_' . $type;
            return new $classname;
        } else {
            throw new Exception ('Driver non trouvé');
        }
    }
}
?>
]]>
   </programlisting>
   <para>
    Définir cette méthode dans une classe permet de charger à la volé un driver.
    Si la classe <literal>Example</literal> était une classe d'abstraction de base de données,
    le chargement des drivers <literal>MySQL</literal> et
    <literal>SQLite</literal> pourrait être effectué comme suit :
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Chargement du driver MySQL
$mysql = Example::factory('MySQL');

// Chargement du driver SQLite
$sqlite = Example::factory('SQLite');
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 id="language.oop5.patterns.singleton">
  <title>Singleton</title>
  <para>
   Le masque singleton est appliqué aux situations qui nécessitent
   d'être une seule instance d'une classe.
   L'exemple le plus commun de celà est une connexion à une base de données.
   L'implémentation de ce masque permet au développeur de rendre
   cette seule instance facielement accessible par beaucoup d'autres objets.
  </para>
  <example>
   <title>Fonction Singleton</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // instance de la classe
    private static $instance;
    
    // Un constructeur privé
    private function __construct() 
    {
        echo 'Je suis construit';
    }

    // La méthode singleton
    public static function singleton() 
    {
        if (!isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }
    
    // Exemple d'une méthode
    public function bark()
    {
        echo 'Woof!';
    }
}

?>
]]>
   </programlisting>
   <para>
    Celà autorise une seule instance de la classe <literal>Example</literal>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Celà échoura car le constructeur est privé
$test = new Example;

// Celà récupèrera toujours une seule instance de la classe
$test = Example::singleton();
$test->bark();

?>
]]>
   </programlisting>
  </example>
 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
