<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 313054 Maintainer: jpauli Status: ready -->
<!-- Reviewed: no -->

 <sect1 xml:id="language.oop5.traits" xmlns="http://docbook.org/ns/docbook">
  <title>Traits</title>
  
  <para>
   Les traits sont un mécanisme de réutilisation de code dans un langage à héritage simple
   tel que PHP. Un trait tente de réduire certaines limites de l'héritage simple en autorisant
   le développeur à réutiliser un certain nombre de méthodes dans des classes indépendantes.
   La sémantique entre les classes et les traits réduit la complexité et évite les problèmes
   typiques de l'héritage multiple et des Mixins.
  </para>
  <para>
   Un trait est semblable à une classe, mais il ne sert qu'à grouper des fonctionnalités d'une
   manière intéressante. C'est un ajout à l'héritage traditionnel qui autorise la composition
   horizontale de comportements, c'est à dire l'utilisation de méthodes de classe sans besoin
   d'héritage.
  </para>
  
  <sect2 xml:id="language.oop5.traits.precedence">
   <title>Précédence</title>
   <para>
    Une méthode héritée de classe est écrasée par une méthode issue d'un Trait.
    L'ordre de précédence fait en sorte que les méthodes de la classe courante
    surchargent les méthodes issues d'un Trait, elles-mêmes surchargeant les méthodes héritées.
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.multiple">
   <title>Multiples Traits</title>
   <para>
    Une classe peut utiliser de multiples Traits en les déclarant avec le mot-clé use, séparés
    par des virgules.
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.conflict">
   <title>Résolution des conflits</title>
   <para>
    Si deux Traits insèrent une méthode avec le même nom, une erreur fatale est levée si le conflit n'est
    pas explicitement résolu.
   </para>
   <para>
    Pour résoudre un conflit de nommage dans les Traits, on peut utiliser l'opérateur
    <literal>insteadof</literal> pour explicitement définir la précédence entre les Traits. Aussi, on peut
    utiliser l'opérateur <literal>as</literal> pour créer un alias du nom conflictuel.
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.traits.examples.ex1">
    <title>Exemple d'utilisation de Trait</title>
    <programlisting role="php">
<![CDATA[
<?php
trait ezcReflectionReturnInfo {
    function getReturnType() { /*1*/ }
    function getReturnDescription() { /*2*/ }
}

class ezcReflectionMethod extends ReflectionMethod {
    use ezcReflectionReturnInfo;
    /* ... */
}

class ezcReflectionFunction extends ReflectionFunction {
    use ezcReflectionReturnInfo;
    /* ... */
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex2">
    <title>Exemple avec l'ordre de précédence</title>
    <para>
     La méthode héritée depuis la classe de base est écrasée par celle provenant
     du Trait. Ce n'est pas le cas des méthodes réelles, écrites dans la classe de base.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
  public function sayHello() {
    echo 'Hello ';
  }
}

trait SayWorld {
  public function sayHello() {
    parent::sayHello();
    echo 'World!';
  }
}

class MyHelloWorld extends Base {
  use SayWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex3">
    <title>Exemple avec l'ordre de précédence #2</title>
    <programlisting role="php">
<![CDATA[
<?php
trait HelloWorld {
  public function sayHello() {
    echo 'Hello World!';
  }
}

class TheWorldIsNotEnough {
  use HelloWorld;
  public function sayHello() {
    echo 'Hello Universe!';
  }
}

$o = new TheWorldIsNotEnough();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello Universe!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex4">
    <title>Utilisation de plusieurs Traits</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
  public function sayHello() {
    echo 'Hello ';
  }
}

trait World {
  public function sayWorld() {
    echo ' World';
  }
}

class MyHelloWorld {
  use Hello, World;
  public function sayExclamationMark() {
    echo '!';
  }
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
$o->sayExclamationMark();>
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex5">
    <title>Résolution des conflits</title>
    <programlisting role="php">
<![CDATA[
<?php
trait A {
  public function smallTalk() {
    echo 'a';
  }
  public function bigTalk() {
    echo 'A';
  }
}

trait B {
  public function smallTalk() {
    echo 'b';
  }
  public function bigTalk() {
    echo 'B';
  }
}

class Talker {
  use A, B {
    B::smallTalk insteadof A;
    A::bigTalk insteadof B;
  }
}

class Aliased_Talker {
  use A, B {
    B::smallTalk insteadof A;
    A::bigTalk insteadof B;
    B::bigTalk as talk;
  }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex6">
    <title>Traits Composés depuis d'autres Traits</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
  public function sayHello() {
    echo 'Hello ';
  }
}

trait World {
  public function sayWorld() {
    echo 'World!';
  }
}

trait HelloWorld {
  use Hello, World;
}

class MyHelloWorld {
  use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex7">
    <title>Obligations requises par les méthodes abstraites</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
  public function sayHelloWorld() {
    echo 'Hello'.$this->getWorld();
  }
  abstract public function getWorld();
}

class MyHelloWorld {
  private $world;
  use Hello;
  public function getWorld() {
    return $this->world;
  }
  public function setWorld($val) {
    $this->world = $val;
  }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex8">
    <title>Variables statiques</title>
    <programlisting role="php">
<![CDATA[
<?php
  trait Counter {
    public function inc() {
      static $c = 0;
      $c = $c + 1;
      echo "$c\n";
    }
  }

  class C1 {
    use Counter;
  }

  class C2 {
    use Counter;
  }

  $o = new C1(); $o->inc(); // echo 1
  $p = new C2(); $p->inc(); // echo 1
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex9">
    <title>Méthodes statiques</title>
    <programlisting role="php">
<![CDATA[
<?php
  trait Singleton {
    public static function getInstance() { ... }
  }

  class MySingleton extends SomeUnrelatedSuperClass {
    use Singleton;
  }

  MySingleton::getInstance();
?>
]]>
    </programlisting>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
