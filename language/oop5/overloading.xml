<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.24 $ -->
<!-- EN-Revision: 1.21 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

 <sect1 xml:id="language.oop5.overloading" xmlns="http://docbook.org/ns/docbook">
  <title>Surcharge</title>
  <para>
   Les appels de méthodes et l'accès aux membres peuvent être surchargés
   via les méthodes <function>__call</function>, <function>__get</function>
   et <function>__set</function>. Ces méthodes ne seront
   déclenchées que si votre objet, hérité ou non, ne contient pas
   le membre <modifier>public</modifier> ou la méthode auquel vous tentez d'accéder.
   Toutes les méthodes surchargées ne doivent pas être définies en
   tant que <link linkend="language.oop5.static">static</link>.
   Toutes les méthodes surchargées doivent être définies en tant que
   <link linkend="language.oop5.visibility">public</link>.
  </para>
  <para>
   Depuis &php; 5.1.0, il est également possible de surcharger les fonctions
   <function>isset</function> et <function>unset</function> via, respectivement,
   les méthodes __isset et __unset.
   La méthode __isset est également appelée avec la fonction <function>empty</function>.
  </para>

  <sect2 xml:id="language.oop5.overloading.members">
   <title>Surcharge de membre</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__get</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>bool</type><methodname>__isset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>void</type><methodname>__unset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>

   <para>
    Les membres d'une classe peuvent être surchargés afin d'exécuter un code
    spécial contenu dans vos méthodes <function>__set</function> et
    <function>__get</function>.
    Le paramètre <varname>$name</varname> est le nom de la variable
    qui doit être définie ou recherchée.
    Le paramètre <varname>$valeur</varname> de la méthode
    <function>__set</function> spécifie la nouvelle valeur à donner à
    la variable <varname>$name</varname>.
   </para>

   <note>
    <para>
     La méthode <literal>__set()</literal> ne peut pas prendre d'arguments par référence.
    </para>
   </note>

   <example>
    <title>Exemple de surcharge avec  __get, __set, __isset et __unset</title>
    <programlisting role="php">
<![CDATA[
<?php
class Setter
{
  public $n;
  private $x = array("a" => 1, "b" => 2, "c" => 3);

  public function __get($nm)
  {
    echo "Récupération de [$nm]\n";

    if (isset($this->x[$nm])) {
      $r = $this->x[$nm];
      echo "Retour : $r\n";
      return $r;
    } else {
      echo "Rien!\n";
    }
  }

  public function __set($nm, $val)
  {
    echo "Définition de [$nm] à $val\n";

    if (isset($this->x[$nm])) {
      $this->x[$nm] = $val;
      echo "OK!\n";
    } else {
      echo "Pas OK!\n";
    }
   }

  public function __isset($nm)
  {
    echo "Vérifie si $nm est défini\n";

    return isset($this->x[$nm]);
  }

  public function __unset($nm)
  {
    echo "Libération de $nm\n";

    unset($this->x[$nm]);
  }
}

$foo = new Setter();
$foo->n = 1;
$foo->a = 100;
$foo->a++;
$foo->z++;
var_dump($foo);

var_dump(isset($foo->a)); //true
unset($foo->a);
var_dump(isset($foo->a)); //false

// ceci ne passera pas via la méthode __isset()
// parce que 'n' est une propriété publique
var_dump(isset($foo->n));

var_dump($foo);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Définition de [a] à 100
OK!
Récupération de [a]
Retour : 100
Définition de [a] à 101
OK!
Récupération de [z]
Rien!
Définition de [z] à 1
Pas OK!

Vérifie si a est défini
bool(true)
Libération de a
Vérifie si a est défini
bool(false)
bool(true)

object(Setter)#1 (2) {
  ["n"]=>
  int(1)
  ["x":"Setter":private]=>
  array(2) {
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
]]>
    </screen>

   </example>
  </sect2>

  <sect2 xml:id="language.oop5.overloading.methods">
   <title>Surcharge de méthode</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>

   <para>
    La méthode magique <function>__call</function> permet la capture
    des appels à des méthodes inexistantes. De cette façon,
    <function>__call</function> peut être utilisée pour implémenter
    un gestionnaire de méthodes défini par l'utilisateur qui dépend du nom de
    la méthode réellement appelée. Ceci est particulièrement pratique
    pour implémenter une classe proxy, par exemple. Les arguments qui sont passés
    à la fonction devront être définis dans un tableau via le paramètre
    <varname>$arguments</varname>. La valeur retournée par la méthode
    <function>__call</function> sera retournée à la méthode appelante.
   </para>

   <example>
    <title>Exemple de surcharge avec <function>__call</function></title>
    <programlisting role="php">
  <![CDATA[
<?php
class Caller
{
  private $x = array(1, 2, 3);

  public function __call($m, $a)
  {
    print "Méthode $m appelée :\n";
    var_dump($a);
    return $this->x;
  }
}

$foo = new Caller();
$a = $foo->test(1, "2", 3.4, true);
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[

Méthode test appelée :
array(4) {
  [0]=>
  int(1)
  [1]=>
  string(1) "2"
  [2]=>
  float(3.4)
  [3]=>
  bool(true)
}
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </example>

  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
