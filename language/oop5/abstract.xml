<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 316911 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<sect1 xml:id="language.oop5.abstract" xmlns="http://docbook.org/ns/docbook">
 <title>Abstraction de classes</title>
 
 <para>
  PHP 5 propose les classes et les méthodes abstraites.
  Les classes définies comme abstraites ne doivent pas être
  instanciées, et toutes les classes contenant au moins une
  méthode abstraite doivent aussi être abstraites. Les méthodes
  définies comme abstraites déclarent simplement la signature
  de la méthode - elles ne peuvent définir leur implémentation.
 </para>
 
 <para>
  Lors de l'héritage d'une classe abstraite, toutes les méthodes
  marquées comme abstraites dans la déclaration de la classe parente
  doivent être définies par l'enfant ; de plus, ces méthodes doivent être
  définies avec la même <link linkend="language.oop5.visibility">visibilité</link>,
  ou une visibilité moins restreinte. Par exemple, si la méthode abstraite 
  est définie comme protégée, l'implémentation de la fonction doit être 
  définie comme protégée ou publique, mais non privée. Par ailleurs, les signatures
  de ces méthodes doivent correspondre, i.e. leurs types et le nombre
  d'arguments requis doivent être les mêmes. Ceci s'applique aussi aux constructeurs
  depuis PHP 5.4.0. Avant la version 5.4.0., les signatures des constructeurs
  pouvaient être différentes.
 </para>
 
 <example>
  <title>Exemple de classe abstraite</title>
  <programlisting role="php">
<![CDATA[
<?php
abstract class AbstractClass 
{
    // Force la classe étendue à définir cette méthode
    abstract protected function getValue();
    abstract protected function prefixValue($prefix);

    // méthode commune
    public function printOut() {
        print $this->getValue() . "\n";
   }
}

class ConcreteClass1 extends AbstractClass 
{
     protected function getValue() {
       return "ConcreteClass1";
     }

     public function prefixValue($prefix) {
       return "{$prefix}ConcreteClass1";
    }
}

class ConcreteClass2 extends AbstractClass 
{
     public function getValue() {
       return "ConcreteClass2";
     }

     public function prefixValue($prefix) {
       return "{$prefix}ConcreteClass2";
    }
}

$class1 = new ConcreteClass1;
$class1->printOut();
echo $class1->prefixValue('FOO_') ."\n";

$class2 = new ConcreteClass2;
$class2->printOut();
echo $class2->prefixValue('FOO_') ."\n";
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
  </screen>
 </example>
 
 <para>
  L'ancien code qui n'a pas de classes définies par l'utilisateur
  ou de fonctions nommées 'abstract' peut continuer de fonctionner
  dans modification.
 </para>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
