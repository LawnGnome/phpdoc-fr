<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.103 $ -->
<!-- EN-Revision: 1.198 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="language.types" xmlns="http://docbook.org/ns/docbook">
 <title>Les types</title>

 <sect1 xml:id="language.types.intro">
  &reftitle.intro;

  <simpara>
   &php; supporte les huit types basiques suivants :
  </simpara>

  <para>
   &php; supporte quatre types scalaires :

   <itemizedlist>

    <listitem>
     <simpara>
      &boolean;
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      &integer;
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      &float;
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      &string;
     </simpara>
    </listitem>

   </itemizedlist>

   &php; supporte deux types composés :

   <itemizedlist>

    <listitem>
     <simpara>
      &array;
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      &object;
     </simpara>
    </listitem>

   </itemizedlist>

   &php; supporte deux types spéciaux :

   <itemizedlist>

    <listitem>
     <simpara>
      &resource;
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      &null;
     </simpara>
    </listitem>

   </itemizedlist>

   Ce manuel introduit également quelques
   <link linkend="language.pseudo-types">pseudo-types</link>
   pour des raisons de lisibilité :

   <itemizedlist>

    <listitem>
     <simpara>
      <type>mixed</type>
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      <type>nombre</type>
     </simpara>
    </listitem>

    <listitem>
     <simpara>
      <type>callback</type>
     </simpara>
    </listitem>

   </itemizedlist>
   Et la pseudo-variable <parameter>$...</parameter>.
  </para>
  <simpara>
   Vous pouvez également trouver quelques références au type "double".
   Considérez le type "double" comme le type "float" (nombres décimaux), les deux noms
   existent uniquement pour des raisons historiques.
  </simpara>

  <simpara>
   Habituellement, le type d'une variable n'est pas déclaré
   par le programmeur. Il est décidé au moment de
   l'exécution par &php;, en fonction du contexte dans
   lequel la variable est utilisée.
  </simpara>
  <note>
   <simpara>
    Si vous voulez vérifier le type et la valeur d'une variable
    ou d'une <link linkend="language.expressions">expression</link>, utilisez
    la fonction <function>var_dump</function>.
   </simpara>
   <para>
    Si vous souhaitez simplement une représentation lisible pour du débogage,
    utilisez la fonction <function>gettype</function>. Pour vérifier la présence
    de certains types, <emphasis>n'utilisez pas</emphasis>
    <function>gettype</function>, mais plutôt les fonctions
    <literal>is_<replaceable>type</replaceable></literal>.
    Par exemple :
    <example>
     <title>Exemples de vérification de type de variable</title>
     <programlisting role="php">
<![CDATA[
<?php
$a_bool = TRUE;   // un booléen
$a_str  = 'foo';  // une chaîne de caractères
$a_str2 = 'foo';  // une chaîne de caractères
$an_int  = 12;     // un entier

echo gettype($a_bool); // affiche "boolean"
echo gettype($a_str);  // affiche "string"

// Ceci est un entier, on l'incrémente de 4
if (is_int($an_int)) {
    $an_int += 4;
}

// Si $bool est une chaîne, l'afficher
// (Ne pas imprimer n'importe quoi).
if (is_string($a_bool)) {
    echo 'Chaîne : ' . $a_bool;
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
  <simpara>
   Si vous voulez forcer une variable à être convertie
   en un certain type, vous devez transtyper
   (<link linkend="language.types.typecasting">cast</link>) la
   variable ou utiliser la fonction <function>settype</function>.
  </simpara>
  <simpara>
   Il est à noter qu'une variable peut se comporter de
   manière différente suivant les situations, en
   fonction du type qui lui est affecté.
   Pour plus d'informations, voir le paragraphe sur le
   <link linkend="language.types.type-juggling">transtypage</link>.
   Vous pouvez également être intéressé par la
   <link linkend="types.comparisons">table de comparaison des types</link>,
   qui vous montrent des exemples variés concernant les relations de
   comparaison des types.
  </simpara>
 </sect1>

 &language.types.boolean;
 &language.types.integer;
 &language.types.float;
 &language.types.string;
 &language.types.array;
 &language.types.object;
 &language.types.resource;
 &language.types.null;
 &language.types.pseudo-types;
 &language.types.type-juggling;

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->