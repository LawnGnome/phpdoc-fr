<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: dams Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.types.type-juggling">
 <title>Manipulation des types</title>

 <simpara>
  PHP n'impose pas de définir explicitement le type d'une variable lors
  de sa déclaration ; le type d'une variable est déterminé par son contexte
  d'utilisation. Si une valeur de type <type>string</type> est assignée à
  la variable <varname>$var</varname>, <varname>$var</varname> devient de type
  <type>string</type>. Si une valeur de type <type>integer</type> est ensuite
  assignée à cette variable <varname>$var</varname>, alors, son type devient
  <type>integer</type>.
 </simpara>

 <para>
  Un exemple de conversion de type automatique avec PHP est l'ajout de l'opérateur
  '+'. Si une des opérandes est de type <type>float</type>, alors toutes les opérandes
  seront évaluées comme de types <type>float</type>, et le résultat sera de type
  <type>float</type>. Sinon, les opérandes seront interprétées comme
  <type>integer</type>s, et le résultat sera également de type <type>integer</type>.
  Noter que cela ne modifie <emphasis>pas</emphasis> le type des opérandes ;
  la seule modification est la façon dont les opérandes sont évaluées et le type
  de l'expression elle-même.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$foo = "0";                     // $foo est une chaîne de caractères (ASCII 48)
$foo += 2;                      // $foo est maintenant un entier (2)
$foo = $foo + 1.3;              // $foo est maintenant un nombre à virgule flottante (3.3)
$foo = 5 + "10 Little Piggies"; // $foo est un entier (15)
$foo = 5 + "10 Small Pigs";     // $foo est un entier (15)
?>
]]>
<!-- bad example, no real operator (must be used with variable, modifies it too)
$foo++;      // $foo is the string "1" (ASCII 49)

TODO: explain ++/- - behaviour with strings

examples:

++'001' = '002'
++'abc' = 'abd'
++'xyz' = 'xza'
++'9.9' = '9.0'
++'-3'  = '-4'
- -'9'   = 8 (integer!)
- -'5.5' = '5.5'
- -'-9'  = -10 (integer)
- -'09'  = 8 (integer)
- -'abc' = 'abc'

-->
  </programlisting>
 </informalexample>

 <simpara>
  Si les 2 derniers exemples vous semblent compliqués, reportez-vous à
  la section sur les
  <link linkend="language.types.string.conversion">conversions de chaînes en
  nombres</link>.
 </simpara>

 <simpara>
  Pour forcer une variable à être évaluée en un certain type, reportez-vous
  à la section sur le
  <link linkend="language.types.typecasting">transtypage</link>. Pour changer
  le type d'une variable, reportez-vous à la fonction
  <function>settype</function>.
 </simpara>

 <para>
  Pour tester les exemples de cette section, utilisez la fonction
  <function>var_dump</function>.
 </para>

 <note>
  <para>
   Le comportement d'une conversion automatique en tableau est actuellement
   non-défini.
  </para>

  <para>
   De plus, vu que PHP supporte l'indexation des chaînes de caractères
   via des positions en utilisant la même syntaxe que pour les tableaux,
   l'exemple suivant est correct pour tous les versions de PHP :
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$a    = 'car'; // $a est une chaîne de caractères
$a[0] = 'b';   // $a est toujours une chaîne de caractères
echo $a;       // bar
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Reportez-vous à la section sur l'<link linkend="language.types.string.substr">accès
   aux chaînes par ces caractères</link> pour plus d'informations.
  </para>
 </note>

 <sect2 xml:id="language.types.typecasting">
  <title>Modification de types</title>

  <para>
   La modification de types en PHP fonctionne de la même façon qu'en C : le nom
   du type désiré est écrit entre parenthèses avant la variable à traiter.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = 10;               // $foo est un entier
$bar = (boolean) $foo;   // $bar est un booléen
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Les préfixes autorisés sont :
  </para>

  <itemizedlist>
   <listitem>
    <simpara>(int), (integer) : modification en <type>integer</type></simpara>
   </listitem>
   <listitem>
    <simpara>(bool), (boolean) : modification en <type>boolean</type></simpara>
   </listitem>
   <listitem>
    <simpara>(float), (double), (real) : modification en <type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara>(string) : modification en <type>string</type></simpara>
   </listitem>
   <listitem>
    <simpara>(binary) : modification en <type>string</type> binaire (PHP 6)</simpara>
   </listitem>
   <listitem>
    <simpara>(array) : modification en <type>array</type></simpara>
   </listitem>
   <listitem>
    <simpara>(object) : modification en <type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara>(unset) : modification en <type>NULL</type> (PHP 5)</simpara>
   </listitem>
  </itemizedlist>

  <para>
   La modification en binaire et le préfixe b ont été ajoutés en
   PHP 5.2.1
  </para>

  <para>
   Notez que les tabulations et les espaces sont autorisés dans les
   parenthèses. Les exemples suivants sont fonctionnellement équivalents :
  </para>
   
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$foo = (int) $bar;
$foo = ( int ) $bar;
?>
]]>
   </programlisting>

   <para>
    Modification d'une chaîne littérale et de variables en chaînes binaires :
   </para>

   <programlisting role="php">
<![CDATA[
<?php
$binary = (binary) $string;
$binary = b"binary string";
?>
]]>
   </programlisting>
  </informalexample>

  <note>
   <para>
    Au lieu de modifier une variable en chaîne, il est également possible
    d'entourer la variable de doubles guillemets.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = 10;            // $foo est un entier
$str = "$foo";        // $str est une chaîne
$fst = (string) $foo; // $fst est également une chaîne

// Ceci affichera "ils sont identiques"
if ($fst === $str) {
    echo "ils sont identiques";
}
?>
]]>
    </programlisting>
   </informalexample>
  </note>
   
  <para>
   Le comportement d'une modification de type n'est pas toujours identique
   suivant les types. Pour plus d'informations, reportez-vous à ces sections :
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara>
     <link linkend="language.types.boolean.casting">Conversion en booléen</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.integer.casting">Conversion en entier</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.float.casting">Conversion en nombre à virgule flottante</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.string.casting">Conversion en chaîne de caractères</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.array.casting">Conversion en tableau</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.object.casting">Conversion en objet</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.resource.casting">Conversion en ressource</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="language.types.null.casting">Conversion en valeur NULL</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <link linkend="types.comparisons">Les tables de comparaison de type</link>
    </simpara>
   </listitem>
  </itemizedlist>

 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
