<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.3 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.pseudo-types">
 <title>Variables et pseudo-types utilisés dans cette documentation</title> 

 <sect2 xml:id="language.types.mixed">
  <title>mixed</title>

  <para>
   <literal>mixed</literal> indique qu'un paramètre peut accepter plusieurs
   (mais pas nécessairement tous) types.
  </para>

  <para>
   <function>gettype</function> par exemple, accepte tous les types PHP,
   alors que <function>str_replace</function> accepte les chaînes et les
   tableaux.
  </para>

 </sect2>

 <sect2 xml:id="language.types.number">
  <title>number</title>

  <para>
   <literal>number</literal> indique qu'un paramètre peut être soit un nombre entier, 
   soit un nombre décimal (&float;).
  </para>

 </sect2>

 <sect2 xml:id="language.types.callback">
  <title>callback</title>

  <para>
   Quelques fonctions comme <function>call_user_func</function> ou
   <function>usort</function> acceptent des fonctions de rappel définies par
   l'utilisateur comme paramètre. Les fonctions de rappel peuvent ne pas être
   de simples fonctions, mais aussi des méthodes d'objets, incluant des
   méthodes statiques.
  </para>

  <para>
   Une fonction PHP est passée par son nom, comme une chaîne. N'importe quelle
   fonction interne ou définie par l'utilisateur peut être passée, excepté
   les constructeurs de langage comme :
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>, 
   <function>exit</function>, <function>isset</function>, 
   <function>list</function>, <function>print</function> ou
   <function>unset</function>.
  </para>

  <para>
   Une méthode d'un objet instancié est passée comme étant un tableau,
   contenant un objet à l'index 0 et le nom de la méthode à l'index 1.
  </para>

  <para>
   Les méthodes de classe statique peuvent également être passées sans
   instanciation de l'objet, en passant le nom de la classe au lieu de l'objet
   à l'index 0.
  </para>

  <para>
   Mise à part des fonctions définies par l'utilisateur, <function>create_function</function>
   peut également être utilisée pour créer des fonctions de rappel anonymes.
  </para>

  <example>
   <title>
    Exemples de fonctions de rappel
   </title>
   <programlisting role="php">
<![CDATA[
<?php 

// Un exemple de fonction de rappel
function ma_fonction_callback() {
    echo 'Bonjour le monde !';
}

// Un exemple de méthode de rappel
class MaClasse {
    static function maMethodeCallback() {
        echo 'Bonjour le monde !';
    }
}

// Type 1 : Rappel simple
call_user_func('ma_fonction_callback'); 

// Type 2 : Appel d'une méthode de classe statique
call_user_func(array('MaClasse', 'maMethodeCallback')); 

// Type 3 : Appel d'une méthode d'objet
$obj = new MaClasse();
call_user_func(array($obj, 'maMethodeCallback'));

// Type 4 : Appel d'une méthode de classe statique (Depuis PHP 5.2.3)
call_user_func('MaClasse::maMethodeCallback');

// Type 5 : Appel d'une méthode de classe statique relative (Depuis PHP 5.3.0)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A
?>
]]>
   </programlisting>
  </example>

  <note>
   <simpara>
    En PHP 4, il est nécessaire d'utiliser une référence pour créer une fonction
    de rappel qui pointe vers un objet, et non une copie de celui-ci. Pour plus
    de détails, reportez-vous à la section
    "<link linkend="language.references">Explication sur les références</link>".
   </simpara>
  </note>

 </sect2>

 <sect2 xml:id="language.types.void">
  <title>void</title>

  <para>
   <literal>void</literal> comme type retourné signifie que la valeur retournée
   est inutile. <literal>void</literal> dans une liste de paramètre signifie que
   la fonction n'accepte aucun paramètre.
  </para>

 </sect2>

 <sect2 xml:id="language.types.dotdotdot">
  <title>...</title>

  <para>
   <parameter>$...</parameter> dans le prototype d'une fonction signifie
   "<literal>et bien plus...</literal>". Ce nom de variable est utilisé
   lorsqu'une fonction peut prendre un nombre indéfini d'arguments.
  </para>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->