<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331135 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes Maintainer: mikaelkael -->

<sect1 xml:id="language.types.integer">
 <title>Les entiers</title>

 <simpara>
  Un &integer; est un nombre appartenant à la classe
  &#8484; = {..., -2, -1, 0, 1, 2, ...}.
 </simpara>

 <para>
  Voir aussi :
 </para>

 <itemizedlist>
  <listitem>
   <simpara>
    <link linkend="ref.gmp">Les entiers de longueur arbitraire / GMP</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="language.types.float">Les nombres à virgule flottante</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="ref.bc">Les précisions arbitraires / BCMath</link>
   </simpara>
  </listitem>
 </itemizedlist>

 <sect2 xml:id="language.types.integer.syntax">
  <title>Syntaxe</title>

  <simpara>
   Les entiers peuvent être spécifiés en notation décimale (base 10), hexadécimale
   (base 16), octale (base 8), ou binaire (base 2) optionnellement précédée d'un signe (- ou +).
  </simpara>

  <para>
   Les entiers littéraux binaires sont disponibles depuis
   PHP 5.4.0.
  </para>

  <para>
   Pour utiliser la notation octale, précédez le nombre d'un <literal>0</literal> (zéro).
   Pour utiliser la notation hexadécimale, précédez le nombre d'un <literal>0x</literal>.
   Pour utiliser la notation binaire, précédez le nombre d'un <literal>0b</literal>.
  </para>

  <example>
   <title>Les entiers littéraux</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1234; // un nombre décimal
$a = -123; // un nombre négatif
$a = 0123; // un nombre octal (équivalent à 83 décimales)
$a = 0x1A; // un nombre héxadecimal (équivalent à 26 décimales)
?>
]]>
   </programlisting>
  </example>

  <para>
   Formellement, la structure d'un entier littéral est :
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
decimal     : [1-9][0-9]*
            | 0

hexadecimal : 0[xX][0-9a-fA-F]+

octal       : 0[0-7]+

integer     : [+-]?decimal
            | [+-]?hexadecimal
            | [+-]?octal
            | [+-]?binary
]]>
   </programlisting>
  </informalexample>

  <para>
   La taille d'un entier est dépendant de la plate-forme, cependant,
   une valeur maximale d'environ 2 milliards est habituelle (cela correspond
   à 32 bits signés). Les plateformes 64-bit ont habituellement une valeur
   maximale d'environ 9E18. PHP ne supporte pas les entiers non-signés. La taille
   d'un entier peut être déterminée en utilisant la constante
   <constant>PHP_INT_SIZE</constant>, et la valeur maximale, en utilisant
   la constante <constant>PHP_INT_MAX</constant> depuis PHP 4.4.0 et PHP 5.0.5.
  </para>

  <warning>
   <para>
    Si un nombre invalide est fourni dans un entier octal (i.e. 8 ou 9),
    le reste du nombre est ignoré.
   </para>

   <example>
    <title>Bizarrerie avec les valeurs octales</title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(01090); // 010 octal = 8 décimales
?>
]]>
    </programlisting>
   </example>
  </warning>
 </sect2>

 <sect2 xml:id="language.types.integer.overflow">
  <title>Débordement d'entier</title>

  <para>
   Si PHP rencontre un nombre supérieur au maximal d'un entier, il sera interprété
   comme un &float;. De la même façon, une opération qui résulte en un nombre
   supérieur au nombre maximal d'un entier, retournera un &float;.
  </para>

  <example>
   <title>Dépassement d'entier sur un système 32-bit</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 2147483647;
var_dump($large_number);                     // int(2147483647)

$large_number = 2147483648;
var_dump($large_number);                     // float(2147483648)

$million = 1000000;
$large_number =  50000 * $million;
var_dump($large_number);                     // float(50000000000)
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Dépassement d'entier sur un système 64-bit</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 9223372036854775807;
var_dump($large_number);                     // int(9223372036854775807)

$large_number = 9223372036854775808;
var_dump($large_number);                     // float(9.2233720368548E+18)

$million = 1000000;
$large_number =  50000000000000 * $million;
var_dump($large_number);                     // float(5.0E+19)
?>
]]>
   </programlisting>
  </example>
  
  <para>
   Il n'y a pas d'opérateur de division entière en PHP.
   <literal>1/2</literal> contient en fait, <type>float</type>(<literal>0.5</literal>).
   La valeur peut être convertie en un entier en l'arrondissant, en utilisant
   la fonction <function>round</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(25/7);         // float(3.5714285714286) 
var_dump((int) (25/7)); // int(3)
var_dump(round(25/7));  // float(4) 
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.integer.casting">
  <title>Conversion en entier</title>

  <simpara>
   Pour convertir explicitement une valeur en un entier, utilisez soit
   le mot-clé <literal>(int)</literal>, soit <literal>(integer)</literal>.
   Cependant, dans la plupart des cas, ce mot-clé n'est pas nécessaire
   vu qu'une valeur sera automatiquement convertie si un opérateur, une
   fonction ou une structure de contrôle demande un entier en guise
   d'argument. Une valeur peut également être convertie en un entier
   en utilisant la fonction <function>intval</function>.
  </simpara>

  <simpara>
   Voir aussi <link linkend="language.types.type-juggling">le transtypage</link>.
  </simpara>

  <sect3 xml:id="language.types.integer.casting.from-boolean">
   <title>Depuis un <link linkend="language.types.boolean">booléen</link></title>

   <simpara>
    &false; correspond à <literal>0</literal> (zéro), et &true; correspond à
    <literal>1</literal> (un).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-float">
   <title>
    Depuis <link linkend="language.types.float">un nombre à virgule flottante</link>
   </title> 

   <simpara>
    Lorsque l'on convertit un &float; en un &integer;, le nombre sera arrondi
    <emphasis>vers zéro</emphasis>.
   </simpara>

   <para>
    Si le nombre à virgule flottante est au delà des limites des entiers (habituellement,
    <literal>+/- 2.15e+9 = 2^31</literal> sur les plate-formes 32-bit et
    <literal>+/- 9.22e+18 = 2^63</literal> sur les plate-formes 64-bit), le résultat sera indéfini, sachant que le
    nombre à virgule flottante n'a pas une précision suffisante pour donner un résultat
    entier exact. Aucune alerte n'est émise lorsque ce comportement survient !
   </para>

   <warning>
    <para>
     Ne convertissez jamais une fraction inconnue en un entier, ceci peut
     engendrer un résultat inattendu.
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo (int) ( (0.1+0.7) * 10 ); // Affiche 7 !
?>
]]>
     </programlisting>
    </informalexample>

    <para>
     Voir aussi la section sur <link linkend="warn.float-precision">les alertes
     concernant la précision des nombres à virgule flottante</link>.
    </para>
   </warning>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-string">
   <title>Depuis des chaînes de caractères</title>

   <simpara>
    Voir la section sur la <link linkend="language.types.string.conversion">conversion des chaînes
    en nombres</link>
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-other">
   <title>Depuis d'autres types</title>

   <caution>
    <simpara>
     Le comportement de la conversion en un entier est indéfini depuis les autres types.
     Ne rapporter <emphasis>aucun</emphasis> comportement observé, sachant qu'ils peuvent
     changer sans avertissement.
    </simpara>
   </caution>
  </sect3>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->