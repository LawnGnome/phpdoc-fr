<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.types.float">
 <title>Noombres à virgule flottante</title>

 <para>
  Les nombres à virgule flottante (aussi connus comme "floats", "doubles", ou "real numbers")
  peuvent être spécifiés en utilisant les syntaxes suivantes :
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$a = 1.234;
$b = 1.2e3;
$c = 7E-10;
?>
]]>
  </programlisting>
 </informalexample>

 <para>
  Formellement :
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
LNUM          [0-9]+
DNUM          ([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*)
EXPONENT_DNUM (({LNUM} | {DNUM}) [eE][+-]? {LNUM})
]]>
  </programlisting>
 </informalexample>

 <para>
  La taille d'un &float; est dépendant de la plateforme, cependant,
  un nombre maximal de ~1.8e308 avec une précision sur 14 chiffres est
  une valeur commune (format 64 bits IEEE).
 </para>

 <warning xml:id="warn.float-precision">
  <title>Précision des nombres à virgule flottante</title>

  <para>
   Typiquement, une simple fraction décimale comme <literal>0.1</literal> ou
   <literal>0.7</literal> ne peut être convertie en sa représentation binaire interne
   sans perte de précision. Ceci peut porter à confusion : par exemple,
   <literal>floor((0.1+0.7)*10)</literal> retournera <literal>7</literal>
   au lieu de <literal>8</literal> comme cela pourrait se prévoir,
   car la représentation interne serait quelque chose comme
   <literal role="infdec">7.9</literal>.
  </para>

  <para>
   Ceci est dû au fait qu'il est impossible d'exprimer quelques
   fractions en une notation décimale avec une infinité de chiffres.
   Actuellement, <literal>1/3</literal>, en décimal, devient
   <literal role="infdec">0.3</literal>.
  </para>

  <para>
   Ainsi, ne faite jamais confiance aux derniers chiffres d'un nombre à virgule
   flottante, mais aussi, ne comparez jamais l'égalité de 2 nombres à virgule
   flottante. Si vous avez besoin d'une haute précision,
   les <link linkend="ref.bc">fonctions mathématiques de précision</link> et les
   <link linkend="ref.gmp">fonctions gmp</link> sont disponibles.
  </para>
 </warning>

 <sect2 xml:id="language.types.float.casting">
  <title>Convertion en un nombre à virgule flottante</title>

  <para>
   Pour plus d'informations sur la convertion de chaînes en nombres à virgule
   flottante, voir la section sur la
   <link linkend="language.types.string.conversion">convertion de chaînes en
   nombres à virgule flottante</link>. Pour les valeurs d'autres types, la convertion
   est effectuée en convertissant tout d'abord la valeur en un entier, puis, en &float;.
   Voir la section sur la
   <link linkend="language.types.integer.casting">convertion en entier</link> pour plus
   d'informations. Depuis PHP 5, une notice est émise si un &objet; est converti en &float;.
  </para>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->