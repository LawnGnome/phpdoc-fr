<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338501 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<sect1 xml:id="control-structures.continue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>continue</literal></title>
 <?phpdoc print-version-for="continue"?>
 <simpara>
  L'instruction <literal>continue</literal> est utilisée
  dans une boucle afin d'éluder les instructions de
  l'itération courante et de continuer l'exécution à la condition de
  l'évaluation et donc, de commencer la prochaine itération.
 </simpara>
 <note>
  <simpara>
   En PHP, la structure
   <link linkend="control-structures.switch"><literal>switch</literal></link>
   est considérée comme une boucle par <literal>continue</literal>.
   <literal>continue</literal> se comporte comme <literal>break</literal>
   (lorsqu'aucun argument n'est passé). Si un <literal>switch</literal> se
   trouve à l'intérieur d'une boucle, <literal>continue 2</literal> va continuer
   sur la prochaine itération de la boucle externe.
  </simpara>
 </note>
 <simpara>
  <literal>continue</literal> accepte un argument numérique
  optionnel qui vous indiquera combien de structures
  emboîtées doivent être éludées. La valeur par défaut
  est <literal>1</literal>, ce qui revient à aller directement
  à la fin de la boucle courante.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
while (list($key, $value) = each($arr)) {
    if (!($key % 2)) { // évite les membres pairs
        continue;
    }
    do_something_odd($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Dehors<br />\n";
    while (1) {
        echo "Milieu<br />\n";
        while (1) {
            echo "Intérieur<br />\n";
            continue 3;
        }
        echo "Ceci n'est jamais atteint.<br />\n";
    }
    echo "Ceci non plus.<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Oublier le point virgule après <literal>continue</literal> peut porter
  à confusion. Voici un exemple de ce que vous ne devez pas faire :
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
for ($i = 0; $i < 5; ++$i) {
    if ($i == 2)
        continue
    print "$i\n";
}
?>
]]>
   </programlisting>
   <para>
    On peut s'attendre à ce que le résultat soit :
   </para>
   <screen>
<![CDATA[
0
1
3
4
]]>
   </screen>
   <para>
    mais, dans les versions antérieur à PHP 5.4.0, ce script affichera :
   </para>
   <screen>
<![CDATA[
2
]]>
   </screen>
   <para>
    car le commande complète <literal>continue print "$i\n";</literal>
    est évaluée comme une seule expression, et ainsi, la fonction
    <function>print</function>
    est appelée uniquement lorsque <literal>$i == 2</literal> est vrai.
    (La valeur retournée de <literal>print</literal> est passée à
    <literal>continue</literal> comme argument numérique.)
   </para>
   <note>
    <para>
     Depuis PHP 5.4.0, l'exemple précédent lèvera une erreur 
     <constant>E_COMPILE_ERROR</constant>.
    </para>
   </note>
  </informalexample>
 </para>
 <para>
  <table>
   <title>Historique pour <literal>continue</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>5.4.0</entry>
      <entry>
       <literal>continue 0;</literal> n'est plus valide.
       Dans les précédentes versions, il était interprété
       de la même façon que <literal>continue 1;</literal>.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Supprime la possibilité de passer des variables
       (i.e., <literal>$num = 2; continue $num;</literal>)
       comme argument numérique.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
