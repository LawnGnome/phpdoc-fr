<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<sect1 xml:id="control-structures.switch" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>switch</literal></title>
 <simpara>
  L'instruction <literal>switch</literal> équivaut à une série d'instructions
  <literal>if</literal>. En de nombreuses occasions, vous aurez besoin de
  comparer la même variable (ou expression) avec un grand nombre de valeurs
  différentes, et d'exécuter différentes parties de code suivant la valeur
  à laquelle elle est égale. C'est exactement à cela que sert l'instruction
  <literal>switch</literal>.
 </simpara>
 <note>
  <simpara>
   Notez que contrairement à d'autres langages, la structure
   <link linkend="control-structures.continue">continue</link> s'applique
   aux structures <literal>switch</literal> et se comporte de la même manière
   que <literal>break</literal>.
   Si vous avez un <literal>switch</literal> dans une boucle, et que vous
   souhaitez continuer jusqu'à la prochaine itération de la boucle extérieure,
   vous devez utiliser <literal>continue 2</literal>.
  </simpara>
 </note>
 <note>
  <para>
   Notez que switch/case provoque une
   <link linkend="types.comparisions-loose">perte de comparaison</link>.
  </para>
 </note>
 <para>
  Les deux exemples suivants sont deux manières
  différentes d'écrire la même chose,
  l'une en utilisant une séries de <literal>if</literal>,
  et l'autre en utilisant l'instruction <literal>switch</literal> :
  <example>
   <title>Instruction <literal>switch</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
if ($i == 0) {
    echo "i égal 0";
} elseif ($i == 1) {
    echo "i égal 1";
} elseif ($i == 2) {
    echo "i égal 2";
}

switch ($i) {
    case 0:
        echo "i égal 0";
        break;
    case 1:
        echo "i égal 1";
        break;
    case 2:
        echo "i égal 2";
        break;
}
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Instruction <literal>switch</literal> utilisant une chaîne de caractères</title>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case "apple":
        echo "i est une tarte";
        break;
    case "bar":
        echo "i est une barre";
        break;
    case "cake":
        echo "i est un gateau";
        break;
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Il est important de comprendre que l'instruction
  <literal>switch</literal> exécute chacune des
  clauses dans l'ordre. L'instruction <literal>switch</literal>
  est exécutée ligne par ligne. Au début,
  aucun code n'est exécuté. Seulement
  lorsqu'un <literal>case</literal> est vérifié,
  PHP exécute alors les instructions correspondantes.
  PHP continue d'exécuter les instructions jusqu'à
  la fin du bloc d'instructions du <literal>switch</literal>,
  ou bien dès qu'il trouve l'instruction <literal>break</literal>.
  Si vous ne pouvez pas utiliser l'instruction
  <literal>break</literal> à la fin de l'instruction
  <literal>case</literal>, PHP continuera à exécuter
  toutes les instructions qui suivent. Par exemple :
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
        echo "i égal 0";
    case 1:
        echo "i égal 1";
    case 2:
        echo "i égal 2";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Dans cet exemple, si <varname>$i</varname> est égal à 0, PHP va
  exécuter quand même toutes les instructions qui
  suivent! Si <varname>$i</varname> est égal à 1, PHP exécutera
  les deux dernières instructions. Et seulement si <varname>$i</varname> est
  égal à 2, vous obtiendrez le résultat
  escompté, c'est-à-dire, l'affiche de
  "i égal 2". Donc, l'important est de ne pas oublier
  l'instruction <literal>break</literal> (même s'il est
  possible que vous l'omettiez dans certaines circonstances).
 </simpara>
 <simpara>
  Dans une commande <literal>switch</literal>, une condition n'est
  évaluée qu'une fois, et le résultat est
  comparé à chaque <literal>case</literal>.
  Dans une structure <literal>elseif</literal>, les conditions sont
  évaluées à chaque comparaison. Si votre
  condition est plus compliquée qu'une simple
  comparaison, ou bien fait partie d'une boucle,
  <literal>switch</literal> sera plus rapide.
 </simpara>
 <para>
  La liste de commandes d'un <literal>case</literal> peut
  être vide, auquel cas PHP utilisera la liste de
  commandes du cas suivant.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
case 0:
case 1:
case 2:
    echo "i est plus petit que 3 mais n'est pas négatif";
    break;
case 3:
    echo "i égal 3";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Un cas spécial est <literal>default</literal>. Ce cas est utilisé lorsque tous
  les autres cas ont échoué. Par exemple :
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i) {
    case 0:
        echo "i égal 0";
        break;
    case 1:
        echo "i égal 1";
        break;
    case 2:
        echo "i égal 2";
        break;
    default:
       echo "i n'est ni égal à 2, ni à 1, ni à 0.";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Une autre chose à mentionner est que la valeur du
  <literal>case</literal> peut être toute expression de
  type scalaire, c'est-à-dire nombre entier, nombre
  à virgule flottante et chaîne de caractères.
  Les tableaux sont sans intérêt dans ce contexte-là.
 </para>
 <para>
  La syntaxe alternative pour cette structure de contrôle est
  la suivante : (pour plus d'informations, voir
  <link linkend="control-structures.alternative-syntax">syntaxes
  alternatives</link>).
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch ($i):
    case 0:
        echo "i égal 0";
        break;
    case 1:
        echo "i égal 1";
        break;
    case 2:
        echo "i égal 2";
        break;
    default:
        echo "i n'est ni égal à 2, ni à 1, ni à 0";
endswitch;
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Il est possible d'utiliser un point-virgule plutôt que deux points après
  un case, comme ceci :
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch($beer)
{
    case 'leffe';
    case 'grimbergen';
    case 'guinness';
        echo 'Bon choix';
    break;
    default;
        echo 'Merci de faire un choix...';
    break;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
