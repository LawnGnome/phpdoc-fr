<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.1 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="control-structures.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>while</literal></title>
 <para>
  La boucle <literal>while</literal> est le moyen le plus
  simple d'implémenter une boucle en PHP. Cette boucle
  se comporte de la même manière qu'en C.
  L'exemple le plus simple d'une boucle <literal>while</literal>
  est le suivant :
  <informalexample>
   <programlisting>
<![CDATA[
while (expression)
    commandes
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  La signification d'une boucle <literal>while</literal> est
  très simple. PHP exécute l'instruction tant
  que l'expression de la boucle <literal>while</literal> est
  évaluée comme &true;. La valeur
  de l'expression est vérifiée à chaque
  début de boucle, et, si la valeur change durant
  l'exécution de l'instruction, l'exécution ne
  s'arrêtera qu'à la fin de l'itération
  (chaque fois que PHP exécute l'instruction, on appelle
  cela une itération). De temps en temps, si l'expression du
  <literal>while</literal> est &false; avant la
  première itération, l'instruction ne sera jamais
  exécutée.
 </simpara>
 <para>
  Comme avec le <literal>if</literal>, vous pouvez regrouper
  plusieurs instructions dans la même boucle
  <literal>while</literal> en les regroupant à l'intérieur
  de parenthèses ou en utilisant la syntaxe suivante :
  <informalexample>
   <programlisting>
<![CDATA[
while (expression):
    commandes
    ...
endwhile;
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Les exemples suivants sont identiques et affichent tous les nombres
  de 1 jusqu'à 10 :
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* exemple 1 */

$i = 1;
while ($i <= 10) {
    echo $i++;  /* La valeur affiche est $i avant l'incrémentation
                   (post-incrémentation)  */
}

/* exemple 2 */

$i = 1;
while ($i <= 10):
    echo $i;
    $i++;
endwhile;
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
