<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.1 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="control-structures.do.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>do-while</literal></title>
 <simpara>
  Les boucles <literal>do-while</literal> ressemblent beaucoup
  aux boucles <literal>while</literal>, mais l'expression est
  testée à la fin de chaque itération plutôt
  qu'au début. La principale différence par rapport
  à la boucle <literal>while</literal> est que la
  première itération de la boucle
  <literal>do-while</literal> est toujours exécutée
  (l'expression n'est testée qu'à la fin de
  l'itération), ce qui n'est pas le cas lorsque vous
  utilisez une boucle <literal>while</literal> (l'expression
  est vérifiée au début de chaque itération).
 </simpara>
 <para>
  Il n'y a qu'une syntaxe possible pour les boucles <literal>do-while</literal> :

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$i = 0;
do {
    echo $i;
} while ($i > 0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  La boucle ci-dessus ne va être exécutée
  qu'une seule fois, car lorsque l'expression est
  évaluée, elle vaut &false; (car
  la variable <varname>$i</varname> n'est pas plus grande que 0) et l'exécution
  de la boucle s'arrête.
 </simpara>
 <para>
  Les utilisateurs familiers du C sont habitués à
  une utilisation différente des boucles
  <literal>do-while</literal> , qui permet de stopper
  l'exécution de la boucle au milieu des instructions, en
  l'encapsulant dans un <literal>do-while</literal>(0) la
  fonction <link linkend="control-structures.break"><literal>break</literal></link>.
  Le code suivant montre une utilisation possible :
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
do {
    if ($i < 5) {
        echo "i n'est pas suffisamment grand";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
   echo "i est bon";

    /* ...traitement de i... */

} while (0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Ne vous inquiétez pas si vous ne comprenez
  pas tout correctement. Vous pouvez écrire des scripts
  très très puissants sans utiliser
  cette fonctionnalité.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
