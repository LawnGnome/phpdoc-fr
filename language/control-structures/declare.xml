<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.1 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="control-structures.declare" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>declare</literal></title>
 <para>
  L'élément de langage <literal>declare</literal> sert à ajouter des
  directives d'exécutions dans un bloc de code. La syntaxe de
  <literal>declare</literal> est similaire à la syntaxe des autres
  fonctions de contrôle :
  <informalexample>
   <programlisting>
<![CDATA[
declare (directive)
    commandes
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  L'expression <literal>directive</literal> permet de contrôler l'intervention
  du bloc <literal>declare</literal>. Actuellement, seulement deux directives
  sont reconnues : la directive <literal>ticks</literal> (Voir plus bas pour
  plus de détails sur les 
  <link linkend="control-structures.declare.ticks">ticks</link>) et la directive
  d'encodage <literal>encoding</literal> (Voir plus bas pour plus de détails sur
  la directive
  <link linkend="control-structures.declare.encoding">encoding</link>).
 </para>
 <note>
  <simpara>
   La directive <literal>encoding</literal> a été ajoutée en PHP 5.3.0.
  </simpara>
 </note>
 <para>
  L'expression <literal>commandes</literal> du bloc de
  <literal>declare</literal> sera exécutée. Comment elle sera exécutée,
  et quels effets cela aura dépend de la directive utilisée dans le bloc
  <literal>directive</literal>.
 </para>
 <para>
  La structure <literal>declare</literal> peut aussi être utilisée
  dans le contexte global. Elle affecte alors tout le code qui la suit (même si le fichier avec
  <literal>declare</literal> a été inclus après, ça n'affecte pas le fichier 
  parent).
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Ces déclaration sont identiques.

// Vous pouvez utiliser ceci
declare(ticks=1) {
    // script entier ici
}

// ou ceci
declare(ticks=1);
// script entier ici
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <sect2 xml:id="control-structures.declare.ticks">
  <title>Ticks</title>
  <caution>
   <simpara>
    A partir de PHP 5.3.0, les ticks sont dépréciés et seront supprimés
    en PHP 6.0.0.
   </simpara>
  </caution>
  <para>
   Un tick est un événement qui intervient toutes les <varname>N</varname>
   commandes bas niveau, exécutées par l'analyseur dans le bloc de
   <literal>declare</literal>. La valeur de <varname>N</varname> est spécifiée
   avec la syntaxe <code>ticks=<varname>N</varname></code> dans le bloc de
   directive <literal>declare</literal>.
  </para>
  <para>
   Un événement qui intervient à chaque tick est spécifié avec la fonction
   <function>register_tick_function</function>. Reportez-vous à l'exemple
   ci-dessous pour plus de détails. Notez que plus d'un événement peut
   intervenir par tick.
 </para>
 <para>
  <example>
   <title>Profiler une section de code PHP</title>
   <programlisting role="php">
<![CDATA[
<?php
// Une fonction qui enregistre l'heure à laquelle elle est appelée
function profile($dump = FALSE)
{
    static $profile;

    // Retourne les horaires stockés dans le profile, et l'efface
    if ($dump) {
        $temp = $profile;
        unset($profile);
        return $temp;
    }

    $profile[] = microtime();
}

// Enregistre un gestionnaire de tick
register_tick_function("profile");

// Initialise la fonction avant le bloc de déclaration
profile();

// Exécute un bloc de code, et appele un tick toutes les deux secondes
declare(ticks=2) {
    for ($x = 1; $x < 50; ++$x) {
        echo similar_text(md5($x), md5($x*$x)), "<br />;";
    }
}

// Affiche les données de la variable $profile
print_r(profile(TRUE));
?>
]]>
   </programlisting>
  </example>
  Cet exemple profile le code PHP dans le bloc de déclaration,
  et enregistre l'heure de chaque commande bas niveau. Cette
  information peut être réutilisée pour débusquer les segments
  de code lents. Vous pouvez implémenter d'autres méthodes, mais
  les ticks sont plus rapides et plus efficaces.
 </para>
 <simpara>
  Les ticks sont bien pratiques pour déboguer, pour implémenter un
  système multi-tâches simple, pour gérer des entrées sorties en tâche de
  fond, ou bien d'autres choses, avec PHP.
 </simpara>
 <simpara>
  Voir aussi <function>register_tick_function</function> et
  <function>unregister_tick_function</function>.
 </simpara>
 </sect2>
 <sect2 xml:id="control-structures.declare.encoding">
  <title>L'encodage</title>
  <para>
   L'encodage d'un script peut être spécifié par script en utilisant la
   directive <literal>encoding</literal>.
  <example>
   <title>Déclaration d'un encodage pour un script</title>
    <programlisting role="php">
<![CDATA[
<?php
declare(encoding='ISO-8859-1');
// le code
?>
]]>
    </programlisting>
   </example>
  </para>

  <caution>
   <simpara>
    Combinée avec les espaces de nommage, la seule syntaxe valable pour declare
    est <literal>declare(encoding='...');</literal> où <literal>...</literal>
    est la valeur de l'encodage.  <literal>declare(encoding='...') {}</literal>
    soulèvera une erreur d'interprétation dans le cas des espaces de nommage.
   </simpara>
  </caution>
  <para>
   La valeur d'encodage est ignorée en PHP 5.3 à moins que PHP soit compilé avec
   <literal>--enable-zend-multibyte</literal>.  En PHP 6.0, la directive <literal>encoding</literal>
   sera utilisée pour dire au scanner dans quel encodage le fichier a été créé. Les valeurs
   valables sont des noms d'encodage tels que <literal>UTF-8</literal>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
