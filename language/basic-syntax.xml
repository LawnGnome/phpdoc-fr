<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
  <chapter id="language.basic-syntax">
   <title>La syntaxe de base</title>
   <sect1 id="language.basic-syntax.phpmode">
    <title>Passer du HTML au PHP</title>
    <para>
     Lorsque PHP commence &agrave; traiter un fichier, il ne fait qu'afficher
     le texte qu'il rencontre, jusqu'&agrave; ce qu'il rencontre une balise sp&eacute;ciale
     qui lui indiquera qu'il peut interpr&eacute;ter le code qui suit. L'analyseur
     PHP va alors ex&eacute;cuter ce code, jusqu'&agrave; ce qu'il rencontre une balise
     de fin de code PHP. A ce moment l&agrave;, il retourne en mode texte, et 
     il affiche simplement le contenu. C'est ce m&eacute;canisme qui vous permet
     d'inclure du code PHP dans des pages HTML : tout ce qui est plac&eacute; hors
     des balises PHP est affich&eacute; sans modification, tandis que le contenu
     est ex&eacute;cut&eacute;.
    </para>
     <para>
      Il y a quatre jeux de alises qui servent &agrave; d&eacute;limiter des blocs
      de code PHP. Seules deux d'entre elles sont toujours actives :
      c'est &lt;?php. . .?&gt; et &lt;script
    language="php"&gt;. . .&lt;/script&gt;). Tandis que les autres peuvent
    &ecirc;tre activ&eacute;es est d&eacute;sactiv&eacute;es depuis le fichier de configuration 
    &php.ini;. Les balises courtes et les balises ASP peuvent &ecirc;tre pratiques,
    mais elles ne sont pas aussi portables que les versions longues. De plus,
    si vous envisagez d'inclure du PHP dans des fichiers 
    XML ou XHTML, vous devrez utiliser la forme &lt;?php. . .?&gt; pour vous conformer au XML.
    </para>
    <para>
     <example>
      <title>Le passage du HTML au PHP </title>
      <programlisting role="php">
<![CDATA[
<?php
1.  <?php echo("Si vous voulez afficher du XML ou du XHTML, faites comme ceci.\n"); ?>

2.  <? echo ("Ceci est un exemple d'affichage &agrave; l'&eacute;cran en PHP, sous forme d'expression SGML.\n"); ?>
    <?= expression ?>  Raccourci de "<? echo expression ?>"

3.  <script language="php">
        echo ("Certains &eacute;diteurs HTML (comme FrontPage)
         n'acceptent pas les expressions telles que celle-ci.");
    </script>

4.  <% echo ("Vous pouvez aussi utiliser le style ASP comme d&eacute;limiteur."); %>
    <%= $variable; # ceci est un raccourci pour  "<%%echo .." %>
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     La premi&egrave;re m&eacute;thode est g&eacute;n&eacute;ralement utilis&eacute;e,
     car elle permet une impl&eacute;mentation ais&eacute;e de PHP avec la
     prochaine g&eacute;n&eacute;ration de XHTML.
    </para>
    <para>
     La deuxi&egrave;me forme n'est valable que si vous l'avez activ&eacute;e. 
     Soit en faisant appel &agrave; la fonction
     short_tags() (Uniquement en PHP 3), soit en utilisant l'option
     d'ex&eacute;cution <link linkend="ini.short-open-tag">short_open_tag</link>
     dans le fichier de configuration &php.ini;, soit encore en utilisant 
     l'option de compilation 
     <link linkend="install.configure.disable-short-tags">--enable-short-tags</link>.
     M&ecirc;me si les balises courtes sont activ&eacute;es dans le fichier de configuration
     php.ini-dist, leur utilisation est d&eacute;conseill&eacute;e.
    </para>
    <para>
     La quatri&egrave;me forme est seulement disponible
     si vous l'avez activ&eacute;e en utilisant l'option
     d'ex&eacute;cution <link linkend="ini.asp-tags">asp_tags</link>.
    <note>
     <para>
      Le support des balises ASP, a &eacute;t&eacute; ajout&eacute; en
      PHP 3.0.4.
     </para>
    </note>
   </para>
   <note>
    <para>
     L'utilisation des balises courtes doit &ecirc;tre &eacute;vit&eacute;es lors
     du d&eacute;veloppement d'application et de librairies destin&eacute;es &agrave; &ecirc;tre
     distribu&eacute;es ou d&eacute;ploy&eacute;es sur des serveurs qui sont hors de votre
     contr&ocirc;le, car ces balises ne seront pas forc&eacute;ment support&eacute;es
     par le serveur de destination. Pour rendre vos scripts portables
     et distribuables, &eacute;vitez les balises courtes.
    </para>
   </note>
   <para>
    La marque de fermeture d'un bloc (?&gt;) comprend le caract&egrave;re de nouvelle
    ligne qui le suit imm&eacute;diatement, s'il y en a un. De plus, la balise fermante
    implique un point-virgule. Vous n'&ecirc;tes pas oblig&eacute;s de mettre le point-virgule
    &agrave; la fin d'un bloc de PHP.
    </para>
    <para> <!-- TODO: find a better place for this para -->
     PHP vous permet d'utiliser des structures telles que :
     <example>
      <title>M&eacute;thode avanc&eacute;e</title>
      <programlisting role="php">
<![CDATA[
<?php
  if ( expression-bool&eacute;enne ) {
?>
  <strong>Ceci est vrai.</strong>
<?php
  } else {
?>
<strong>Ceci est faux.</strong>
<?php
  }
?>
]]>
     </programlisting>
    </example>
     Cela fonctionne comme on peut s'y attendre, car PHP affiche le texte
     entre les balises ?&gt; et &lt;?php sans modification. L'exemple ci-dessus
     est tr&egrave;s simple, mais c'est un bon syst&egrave;me &agrave; garder en t&ecirc;te pour 
     afficher de grande quantit&eacute; de texte : c'est m&ecirc;me plus efficace que
     d'utiliser les fonctions <function>echo</function> ou
    <function>print</function>.
    </para>
   </sect1>
   <sect1 id="language.basic-syntax.instruction-separation">
    <title>Le s&eacute;parateur d'instructions</title>
    <simpara>
     Les instructions sont s&eacute;par&eacute;es par un point virgule &agrave; 
     chaque fin d'instruction, comme en langage C ou en Perl.
    </simpara>
    <para>
     La balise de fin (?&gt;) implique la fin d'un instruction, et donc
     ajoute implicitement un point virgule. Les deux exemples suivants
     sont &eacute;quivalents.
     <example>
      <title>Le s&eacute;parateur d'instructions</title>
      <programlisting role="php">
<![CDATA[
<?php
    echo "Ceci est un test";
?>
<?php echo "Ceci est un test" ?>
]]>
       </programlisting>
      </example>
     </para>
    </sect1>
    <sect1 id="language.basic-syntax.comments">
     <title>Commentaires</title>
     <para>
     Le PHP supporte les commentaires comme en C, C++ et Shell Unix. Par exemple:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
    echo "Ceci est un test"; // Ceci est un commentaire sur une ligne comme en C++
    /* Ceci est un commentaire sur plusieurs lignes,
       comme en C et C++  */
    echo "Ceci est encore un test";
    echo "Enfin, le test final"; # Ceci est un commentaire comme en Shell Unix
?>
]]>
     </programlisting>
     </informalexample>
    </para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Ceci est un <?php # echo "simple";?> exemple.</h1>
<p>L'ent&ecirc;te ci-dessus affiche 'Ceci est un exemple'.
]]>
     </programlisting>
    </informalexample>
    <simpara>
     Faites attention &agrave; ne pas embo&icirc;ter les commentaires de type 
     langage C, ce qui arrive de temps en temps lorsque vous voulez commenter 
     une grande partie de code.
    </simpara>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /*
    echo "Ceci est un test"; /* Ce commentaire va poser un probl&egrave;me */
 */
?>
]]>
     </programlisting>
   </informalexample>
    <simpara>
     Les commentaires // commente jusqu'&agrave; la
     fin de la ligne ou bien jusqu'&agrave; la fin du bloc (le premier
     des deux). Cela signifie que du code HTML plac&eacute; apr&egrave;s 
     // ?&gt; sera affich&eacute;, car PHP retourne alors en mode texte
     juste apr&egrave;s la balie ?&gt;.
    </simpara>
  </sect1>
  </chapter>
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
