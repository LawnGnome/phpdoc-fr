<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.32 $ -->
<!-- EN-Revision: 1.41 Maintainer: dams Status: ready -->
 <chapter id="language.basic-syntax">
  <title>La syntaxe de base</title>   
  <sect1 id="language.basic-syntax.phpmode">
   <title>Passer du HTML au &php;</title>
   <para>
    Lorsque &php; traite un fichier, il cherche les balises d'ouvertures et 
    de fermetures, qui délimitent le code qu'il doit interpréter. De cette manière,
    cela permet à &php; d'être présent dans toutes sortes de documents, 
    car tout ce qui se trouve en dehors des balises ouvrantes / fermantes de &php;
    est ignoré. La plupart du temps, vous verez &php; dans des documents HTML,
    comme dans l'exemple ci-dessous.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<p>Ceci sera ignoré.</p>
<?php echo 'Alors que ceci sera analysé par PHP.'; ?>
<p>Ceci sera également ignoré.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Vous pouvez également utiliser des structures plus avancées :
    <example>
     <title>Echappement avancé</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($expression) { 
    ?>
    <strong>Ceci est vrai.</strong>
    <?php 
} else { 
    ?>
    <strong>Ceci est faux.</strong>
    <?php 
}
?>
]]>
     </programlisting>
    </example>
    Ceci fonctionne comme prévu parceque lorsque &php; rencontre
    la balise fermante ?&gt;, il commence simplement à afficher ce qu'il
    rencontre jusqu'à ce qu'il rencontre une autre balise ouvrante. 
    L'exemple ci-dessus est simple, bien sûr, mais pour afficher de gros block
    de textes, la mise à l'écart de ce type de block de l'analyseur de &php; est plus
    efficace que d'envoyer la totalité du texte en utilisant les fonctions
    <function>echo</function> ou <function>print</function>.
   </para>
   <para>
    Il y a quatre paires différentes de balises ouvrantes / fermantes qui
    peuvent être utilisées dans &php;. Deux de ces balises, &lt;?php ?&gt; et
    &lt;script language="php"&gt; &lt;/script&gt;, sont toujours disponibles.
    Les deux autres sont les balises courtes et les balises du style 
    <productname>ASP</productname>, et peuvent être activées ou désactivées
    depuis le fichier de configuration &php.ini;. Cependant, malgré le fait que
    des personnes trouvent les balises courtes et les balises du style 
    <productname>ASP</productname> pratiquent, ils sont moins portables
    et donc, générallement, non recommandées.
    <note>
     <para>
      Notez également que si vous intégrez &php; dans des documents XML
      ou XHTML, vous devez utiliser les balises &lt;?php ?&gt; pour rester
      conforme aux standards.
     </para>
    </note> 
   </para>
   <para>
    <example>
     <title>Balises d'ouvertures et de fermetures &php;</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'Si vous voulez réaliser des documents XHTML ou XML, faîtes comme ceci'; ?>

2.  <script language="php">
        echo 'quelques éditeurs (comme FrontPage)
                 n\'aiment pas ce genre d\'instructions';
    </script>

3.  <? echo 'ceci est le plus simple, une instruction SGML'; ?>
    <?= expression ?> Ceci est la version courte pour "<? echo expression ?>"

4.  <% echo 'Vous pouvez optionnellement utiliser les balises ASP-style'; %>
    <%= $variable; # Ceci est la version courte pour "<% echo . . ." %>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Bien que les balises vues dans les exemples un et deux sont toutes les
    deux disponibles, l'exemple un est le plus communément utilisé
    et le plus recommandé des deux. 
   </para>
   <para>
    Les balises courtes (troisième exemple) ne sont disponibles que s'ils ont
    été activées via la directive <link linkend="ini.short-open-tag">short_open_tag</link> 
    du fichier de configuration &php.ini;, ou si &php; a été configuré
    avec l'option <option>--enable-short-tags</option>.
    <note>
     <para>
      Si vous utilisez &php; 3, vous devez également activer les balises courtes
      via la fonction <function>short_tags</function>. <emphasis>Ceci
      est uniquement disponible en &php; 3 !</emphasis>
     </para>
    </note>
   </para>    
   <para>
    Les balises du style <productname>ASP</productname> (quatrième exemple)
    sont uniquement disponibles lorsqu'elles sont activées via la directive 
    <link linkend="ini.asp-tags">asp_tags</link> du fichier de configuration &php.ini;.
    <note>
     <para>
      Le support des balises style <productname>ASP</productname> 
      a été ajouté en &php; 3.0.4.
     </para>
    </note>
   </para>
   <para>
    <note>
     <para>
      L'utilisation des balises courtes doit être bani lors de développements
      d'applications ou de bibliothèques qui sont destinées à être redistribuées,
      ou déployées sur des serveurs qui ne sont pas sous votre contrôle, car
      les balises courtes peuvent ne pas être supportées sur le serveur cible.
      Pour réaliser du code portable, redistribuable, n'utilisez jamais
      les balises courtes.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 id="language.basic-syntax.instruction-separation">
   <title>Séparation des instructions</title>
   <para>
    Comme en C ou en Perl, &php; requiert que les instructions soient
    séparées par un point-virgule à la fin de chaque instruction. La balise
    fermante d'un block de code &php; implique automatiquement
    un point-virgule ; vous n'avez pas besoin d'utiliser un point-virgule
    pour terminer la dernière ligne d'un block &php;. La balise fermante
    d'un block inclura immédiatement un caractère de nouvelle ligne si un 
    est présent.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Ceci est un test';
?>

<?php echo 'Ceci est un test' ?>
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      La balise fermante d'un block &php; à la fin d'un fichier est optionnel,
      et dans quelques cas, est utile lors de l'utilisation de l'affichage du buffer et 
      des fonctions <function>include</function> ou <function>require</function>.
     </para>
    </note>
   </para> 
  </sect1>
  <sect1 id="language.basic-syntax.comments">
   <title>Commentaires</title>   
   <para>
    &php; supporte les commentaires 'C', 'C++' et Unix shell-style (style Perl). Par exemple :

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Ceci est un test'; // Ceci est un commentaire sur une seule ligne, style c++
    /* Ceci est un commentaire sur
       plusieurs lignes */
    echo 'Ceci est un autre test';
    echo 'Et un test final'; # Ceci est un commentaire style shell
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Les commentaires sur une seule ligne comment jusqu'à la fin
    de la ligne ou le block courant de code &php;, le premier des deux.
    Ceci signifie que le code HTML après <literal>// ?&gt;</literal> SERA affiché :
    ?&gt; stoppe le mode &php; et retourne en mode HTML, et 
    <literal>//</literal> n'influt pas sur ce comportement.
    Si la directive <link linkend="ini.asp-tags">asp_tags</link> est active,
    le comportement sera le même avec <literal>// %&gt;</literal>.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Ceci est un exemple <?php # echo 'simple';?>.</h1>
<p>La ligne ci-dessus affichera 'Ceci est un exemple'.
]]>
     </programlisting>
    </informalexample> 
   </para>
   <simpara>
    Les commentaires style 'C' commentent jursqu'à ce que le premier <literal>*/</literal>
    soit rencontré. Vous devriez faire attention aux commentaires style 'C'
    nichés dans de gros blocks lorsque vous les commentez.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /* 
    echo 'Ceci est un test'; /* Ce commentaire posera un problème */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
