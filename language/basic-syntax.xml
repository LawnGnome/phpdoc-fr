<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325166 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
 <title>La syntaxe de base</title>
 <sect1 xml:id="language.basic-syntax.phptags">
  <title>Balises PHP</title>
  <para>
   Lorsque PHP traite un fichier, il cherche les balises d'ouverture et
   de fermeture (<literal>&lt;?php</literal> et <literal>?&gt;</literal>)
   qui délimitent le code qu'il doit interpréter. De cette
   manière, cela permet à PHP d'être intégré dans toutes sortes de documents,
   car tout ce qui se trouve en dehors des balises ouvrantes / fermantes de
   PHP est ignoré.
  </para>
  <para>
   PHP autorise aussi des balises dites "courtes" (<literal>&lt;?</literal> et
   <literal>?&gt;</literal>) que nous vous conseillons vivement de ne pas
   utiliser car elles ne sont seulement disponibles que lors de l'activation
   de la directive de configuration <link linkend="ini.short-open-tag">short_open_tag</link>
   du &php.ini;, ou si PHP a été configuré avec l'option
   <option>--enable-short-tags</option>.
  </para>
  <para>
   Si un fichier est purement du code PHP, il est préférable de ne pas placer
   la balise de fermeture à la fin du fichier. Ceci permet d'éviter d'oublier
   un espace ou une nouvelle ligne après la balise de fermeture de PHP qui causerait
   des effets non voulus car PHP commencera à afficher la sortie, ce qui n'est
   souvent pas ce qui est désiré.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "Bonjour le monde !";

// ... encore du code

echo "Dernière instruction";

// le script se termine ici, sans la balise de fermeture PHP
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.phpmode">
  <title>Échappement depuis du HTML</title>
  <para>
   Tout ce qui se trouve en dehors d'une paire de balises ouvrantes/fermantes
   est ignoré par l'analyseur PHP, ce qui permet d'avoir des fichiers PHP
   mixant les contenus. Ceci permet à PHP d'être contenu dans des documents
   HTML, pour créer par exemple des templates.
   <example>
    <programlisting role="php">
<![CDATA[
<p>Ceci sera ignoré par PHP et affiché au navigateur.</p>
<?php echo 'Alors que ceci sera analysé par PHP.'; ?>
<p>Ceci sera aussi ignoré par PHP et affiché au navigateur.</p>
]]>
    </programlisting>
   </example>
   Ceci fonctionne comme prévu parce que lorsque l'interpréteur PHP rencontre
   la balise fermante ?&gt;, il commence simplement à afficher ce qu'il
   rencontre (mise à part s'il est immédiatement suivi d'une nouvelle ligne
   : voir l'<link linkend="language.basic-syntax.instruction-separation">instruction
   de séparation</link>) jusqu'à ce qu'il rencontre une autre balise ouvrante
   même si PHP se trouve au milieu d'une instruction conditionnelle, au quel cas,
   l'interpréteur va déterminer la condition à prendre en compte avant de prendre
   une décision sur ce qui doit être afficher.
   Voir le prochain exemple.
  </para>
  <para>
   Utilisation de structures avec des conditions
   <example>
    <title>Echappement avancé en utilisant des conditions</title>
    <programlisting role="php">
<![CDATA[
<?php if ($expression == true): ?>
  Ceci sera affiché si l'expression est vrai.
<?php else: ?>
  Sinon, ceci sera affiché.
<?php endif; ?>
]]>
    </programlisting>
   </example>
   Dans cet exemple, PHP va ignorer les blocs où la condition n'est pas remplie,
   même si ils sont en dehors des balises ouvrantes/fermantes de PHP. PHP
   va les ignorer suivant la condition vu que l'interpréteur PHP va passer
   les blocs contenant ce qui n'est pas remplie par la condition.
  </para>
  <para>
   Pour afficher de gros blocs de texte, il est plus efficace de sortir
   du mode d'analyse de PHP plutôt que d'envoyer le texte via la fonction
   <link linkend="function.echo"><literal>echo</literal></link> ou
   <link linkend="function.print"><literal>print</literal></link>.
  </para>
  <para>
   Il y a quatre paires différentes de balises ouvrantes / fermantes qui
   peuvent être utilisées dans PHP. Deux de ces balises, &lt;?php ?&gt; et
   &lt;script language="php"&gt; &lt;/script&gt;, sont toujours disponibles.
   Les deux autres sont les balises courtes et les balises du style
   <productname>ASP</productname>, et peuvent être activées ou désactivées
   depuis le fichier de configuration &php.ini;. Cependant, malgré le fait que
   des personnes trouvent les balises courtes et les balises du style
   <productname>ASP</productname> pratiques, elles sont moins portables
   et donc, généralement, non recommandées.
   <note>
    <para>
     Notez également que si vous intégrez PHP dans des documents XML
     ou XHTML, vous devez utiliser les balises &lt;?php ?&gt; pour rester
     conforme aux standards.
    </para>
   </note>
  </para>
  <para>
   <example>
    <title>Balises d'ouvertures et de fermetures PHP</title>
    <programlisting role="php">
<![CDATA[
1.  <?php echo 'Si vous voulez réaliser des documents XHTML ou XML, faites comme ceci'; ?>

2.  <script language="php">
        echo 'quelques éditeurs (comme FrontPage)
                 n\'aiment pas ce genre d\'instructions';
    </script>

3.  <? echo 'ceci est le plus simple, une instruction SGML'; ?>
    <?= expression ?> Ceci est la version courte pour "<? echo expression ?>"

4.  <% echo 'Vous pouvez optionnellement utiliser les balises ASP-style'; %>
    <%= $variable; # Ceci est la version courte pour "<% echo . . ." %>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Bien que les balises vues dans les exemples un et deux sont toutes les
   deux disponibles, l'exemple un est le plus communément utilisé
   et le plus recommandé des deux.
  </para>
  <para>
   Les balises courtes (troisième exemple) ne sont disponibles que s'elles ont
   été activées via la directive
   <link linkend="ini.short-open-tag">short_open_tag</link>
   du fichier de configuration &php.ini;, ou si PHP a été configuré
   avec l'option <option>--enable-short-tags</option>.
  </para>
  <para>
   Les balises du style <productname>ASP</productname> (quatrième exemple)
   sont uniquement disponibles lorsqu'elles sont activées via la directive
   <link linkend="ini.asp-tags">asp_tags</link> du fichier de configuration
   &php.ini;.
  </para>
  <para>
   <note>
    <para>
     L'utilisation des balises courtes doit être bannie lors de développements
     d'applications ou de bibliothèques qui sont destinées à être
     redistribuées, ou déployées sur des serveurs qui ne sont pas sous votre
     contrôle, car les balises courtes peuvent ne pas être supportées sur le
     serveur cible. Pour réaliser du code portable, qui peut être redistribué,
     n'utilisez jamais les balises courtes.
    </para>
   </note>
   <note>
    <para>
     En PHP 5.2 et antérieures, l'analyseur n'autorisait pas
     un tag ouvrant <literal>&lt;?php</literal> comme seul
     élément d'une page. Ceci est permis à compter de la version
     5.3 de PHP lorsqu'il y a un ou plusieurs espaces après
     la balise ouvrante.
    </para>
   </note>
   <note>
    <para>
     Depuis PHP 5.4, le tag echo court <literal>&lt;?=</literal> est toujours reconnu
     et valide, suivant la configuration de l'option
     <link linkend="ini.short-open-tag">short_open_tag</link>.
    </para>
   </note>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.instruction-separation">
  <title>Séparation des instructions</title>
  <para>
   Comme en C ou en Perl, PHP requiert que les instructions soient
   terminées par un point-virgule à la fin de chaque instruction. La balise
   fermante d'un bloc de code PHP implique automatiquement
   un point-virgule ; vous n'avez donc pas besoin d'utiliser un point-virgule
   pour terminer la dernière ligne d'un bloc PHP. La balise fermante
   d'un bloc inclura immédiatement un caractère de nouvelle ligne si un
   est présent.
   <example>
    <title>Séparation des instructions</title>
    <programlisting role="php">
<![CDATA[
<?php
    echo 'Ceci est un test';
?>

<?php echo 'Ceci est un test' ?>

<?php echo 'Oubli de la balise fermante';
]]>
    </programlisting>
   </example>
   <note>
    <para>
     La balise fermante d'un bloc PHP à la fin d'un fichier est optionnelle,
     et parfois, il est utile de l'omettre lors de l'utilisation de la fonction
     <link linkend="function.include"><literal>include</literal></link> ou
     de la fonction <link linkend="function.require"><literal>require</literal></link>,
     car les espaces non désirés n'apparaîtront pas à la fin des fichiers, et ainsi,
     vous pourrez toujours ajouter des en-têtes à la réponse plus tard. C'est utile
     également si vous voulez utiliser l'affichage du buffer et que vous ne voulez pas
     voir d'espaces blancs ajoutés à la fin des parties générées par les fichiers
     inclus.
    </para>
   </note>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.comments">
  <title>Commentaires</title>
  <para>
   PHP supporte les commentaires de type C, C++ et Shell Unix (aussi 
   appelé style Perl). Par exemple :
   
   <example>
    <title>Exemple de commentaire</title>
    <programlisting role="php">
<![CDATA[
<?php
    echo 'Ceci est un test'; // Ceci est un commentaire sur une seule ligne, style c++
    /* Ceci est un commentaire sur
       plusieurs lignes */
    echo 'Ceci est un autre test';
    echo 'Et un test final'; # Ceci est un commentaire style shell sur une seule ligne
?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   Les commentaires sur une seule ligne ne commentent que jusqu'à la fin
   de la ligne du bloc PHP courant.
   Ceci signifie que le code HTML après <literal>// ... ?&gt;</literal>
   ou après <literal># ...  ?&gt;</literal> SERA affiché :
   ?&gt; terminera le mode PHP et retournera en mode HTML, et
   <literal>//</literal> ou <literal>#</literal> n'influencera pas cela.
   Si la directive de configuration <link linkend="ini.asp-tags">asp_tags</link>
   est activée, ce comportement sera identique avec <literal>// %&gt;</literal> et
   <literal># %&gt;</literal>.
   Cependant, la balise <literal>&lt;/script&gt;</literal> ne terminera pas le mode PHP dans
   un commentaire d'une seule ligne.
  </simpara>
  <para>
   <example>
    <title>Les commentaires vont jusqu'à la fin de la ligne</title>
    <programlisting role="php">
<![CDATA[
<h1>Ceci est un exemple <?php # echo 'simple';?></h1>
<p>La ligne ci-dessus affichera 'Ceci est un exemple'.</p>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   Les commentaires style 'C' commentent jusqu'à ce que le premier <literal>*/</literal>
   soit rencontré. Vous devriez faire attention aux commentaires style 'C'
   nichés dans de gros blocs lorsque vous les commentez.
  </simpara>
  <para>
   <example>
    <title>Les commentaires de type C</title>
    <programlisting role="php">
<![CDATA[
<?php
 /*
    echo 'Ceci est un test'; /* Ce commentaire posera un problème */
 */
?>
]]>
    </programlisting>
   </example>
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->