<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="install.unix.apache2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Apache 2.x sur les systèmes Unix</title>
 <para>
  Cette section contient les notes et conseils d'installation de PHP avec le serveur
  Apache 2.x sur les systèmes Unix.
 </para>
 
 &warn.apache2.compat;
 
 <para>
  La <link xlink:href="&url.apache2.docs;">Documentation Apache</link>
  est la meilleure source d'informations sur le serveur Apache 2.x.
  La plupart des informations sur les options d'installation d'Apache
  peut y être trouvée.
 </para>
 
 <para>
  La version la plus récente du serveur HTTP Apache peut être obtenue
  depuis la <link xlink:href="&url.apache;">page de téléchargement d'Apache</link>,
  et une version adaptée de PHP depuis les liens ci-dessus.
  Ce guide couvre uniquement les bases de fonctionnement d'Apache 2.x avec PHP.     
  Pour plus d'informations, lisez la
  <link xlink:href="&url.apache2.docs;">documentation Apache</link>.
  Les numéros de version sont omis ici, pour s'assurer que les instructions ne soient
  pas incorrectes. Dans les exemples ci-dessous, 'NN' devra être remplacé
  par la version spécifique d'Apache à utiliser.
 </para>
 
 <para>
  Il y a actuellement 2 versions d'Apache 2.x - 2.0 et 2.2.
  Il y a plusieurs raisons de choisir l'une plutôt que l'autre ; néanmoins, la version
  2.2 est actuellement la dernière versions disponible et c'est aussi celle
  que nous vous recommandons. Cependant, les instructions contenues
  dans ce guide devraient fonctionner pour la version 2.2 comme pour la version 2.0.
 </para>
 
 <orderedlist>
  <listitem>
   <para>
    Téléchargez le serveur HTTP Apache depuis le site ci-dessus et décompressez-le :
   </para>
   
   <example>
    <screen>
<![CDATA[
gzip -d httpd-2_x_NN.tar.gz
tar -xf httpd-2_x_NN.tar
]]>
    </screen>
   </example>
  </listitem>
  
  <listitem>
   <para>
    De la même façon, téléchargez et décompressez les sources de PHP :
   </para>
   
   <example>
    <screen>
<![CDATA[
gunzip php-NN.tar.gz
tar -xf php-NN.tar
]]>
    </screen>
   </example>
  </listitem>
  
  <listitem>
   <para>
    Compilez et installez Apache. Consultez la documentation sur l'installation
    d'Apache pour plus de détails quant à la compilation de ce logiciel.
   </para>
   
   <example>
    <screen>
<![CDATA[
cd httpd-2_x_NN
./configure --enable-so
make
make install
]]>
    </screen>
   </example>
  </listitem>
  
  <listitem>
   <para>
    Maintenant que vous avez Apache 2.x.NN de disponible sous /usr/local/apache2,
    configurez-le avec le support pour le chargement de modules, ainsi que le
    MPM prefork standard. Pour tester votre installation, utilisez la procédure
    normale pour démarrer le serveur Apache, i.e. :
    
    <example>
     <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl start
]]>
     </screen>
    </example>
    et arrêtez-le pour continuer dans la configuration de PHP :
    
    <example>
     <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl stop
]]>
     </screen>
    </example>
   </para>
  </listitem>
  
  <listitem>
   
   <para>
    Maintenant, configurez et compilez PHP. Ce sera à ce moment là
    où vous pourrez personnaliser PHP avec les diverses options disponibles,
    comme la liste des extensions à activer. Dans notre exemple, nous effectuerons
    une configuration simple, avec Apache 2 et le support MySQL.
   </para>
   
   <para>
    Si vous voulez construire Apache depuis les sources, tel que décrit ci-dessus,
    l'exemple suivant devrait être correct concernant les chemins vers les apxs, mais si
    vous avez installez Apache d'une autre façon, vous devrez prendre en compte vos
    spécificités et ajustez les chemins apxs en conséquent. Notez que suivants
    les distributions, vous pourriez être amené à renommer apxs en apxs2.
   </para>
   <example>
    <screen>
<![CDATA[
cd ../php-NN
./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql
make
make install
]]>
    </screen>
   </example>
   
   <para>
    Si vous décidez de modifier les options de configuration après l'installation,
    vous devrez exécuter de nouveau les étapes "configure", "make" et "make install".
    Vous n'aurez alors qu'à redémarrer Apache pour que le nouveau module prenne effet.
    Une re-compilation d'Apache n'est pas nécessaire.
   </para>
   
   <para>
    Notez que, sauf indications contraires, l'étape "make install" installera
    également PEAR, mais aussi divers outils PHP comme phpsize, PHP CLI et
    bien plus encore.
   </para>
   
  </listitem>
  
  <listitem>
   <para>
    Setup your php.ini
   </para>
   
   <example>
    <screen>
<![CDATA[
cp php.ini-development /usr/local/lib/php.ini
]]>
    </screen>
   </example>
   
   <para>
    Vous devez éditer le fichier .ini pour définir les options PHP.
    Si vous préférez bouger ce fichier dans un autre répertoire, utilisez
    l'option <literal>--with-config-file-path=/some/path</literal> à l'étape 5.
   </para>
   
   <para>
    Si vous choisissez le fichier php.ini-production, assurez-vous de lire la liste
    des modifications correspondante car il peut affecter considérablement la façon
    dont PHP fonctionnera.
   </para>
   
  </listitem>
  
  <listitem>
   
   <para>
    Éditez le fichier httpd.conf pour charger le module PHP. Le chemin spécifié
    à droite de la chaîne LoadModule, doit correspondre au chemin système du module
    PHP. L'étape "make install" ci-dessus devrait avoir réalisé cette opération
    à votre place, mais une simple vérification permettra de s'en assurer.
   </para>
   
   <example>
    <programlisting role="apache-conf">
<![CDATA[
LoadModule php5_module modules/libphp5.so
]]>
    </programlisting>
   </example>
   
  </listitem>
  
  <listitem>
   
   <para>
    Dîtes à Apache d'analyser certaines extensions comme étant des scripts PHP.
    Par exemple, laissez Apache passer à PHP les fichiers dont l'extension est
    .php. Au lieu d'utiliser seulement la directive AddType d'Apache,
    nous souhaitons éviter tout risque potentiellement dangereux, lors
    d'un téléchargement de de la création de fichier comme exploit.php.jpg,
    d'exécution PHP. En utilisant cette exemple, vous pouvez avoir n'importe
    quelle extension d'analyser par PHP. Nous avons ajouté .php pour l'exemple.
   </para>
   
   
   <example>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch \.php$>
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </example>
   
   <para>
    Ou, si vous voulez autoriser les fichiers .php, .php2, .php3, .php4, .php5, .php6, et
    .phtml à être analysés par PHP, mais rien d'autre, nous utiliserons ceci :
   </para>
   
   <example>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.ph(p[2-6]?|tml)$">
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </example>
   
   <para>
    Et pour autoriser les fichiers .phps à être gérer par le filtre du code
    source de PHP, et ains, être affichés comme code source avec la coloration
    syntaxique, utilisez ceci :
   </para>
   
   <example>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.phps$">
    SetHandler application/x-httpd-php-source
</FilesMatch>
]]>
    </programlisting>
   </example>
   
   <para>
    mod_rewrite peut être utilisé pour permettre à n'importe quel fichier .php
    d'être affiché comme code source avec coloration syntaxique, sans pour autant
    avoir besoin de le renommer ou de le copier avec une extension .phps. :
   </para>
   
   <example>
    <programlisting role="apache-conf">
<![CDATA[
RewriteEngine On
RewriteRule (.*\.php)s$ $1 [H=application/x-httpd-php-source]
]]>
    </programlisting>
   </example>
   
   <para>
    Le filtre de code source PHP ne devrait pas être actif sur des systèmes de
    production, car il peut exposer du code confidentielle ou des informations
    sensibles contenues dans le code source.
   </para>
   
  </listitem>
  
  <listitem>
   <para>
    Utilisez la procédure normale pour démarrer le serveur Apache, i.e. :
   </para>
   
   <example>
    <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl start
]]>
    </screen>
   </example>
   
   <para>Ou</para>
   
   <example>
    <screen>
<![CDATA[
service httpd restart
]]>
    </screen>
   </example>
   
  </listitem>
 </orderedlist>
 
 <para>
  Si vous avez suivi les étapes précédentes, vous avez maintenant un serveur web
  Apache2 fonctionnel avec le support PHP comme module <literal>SAPI</literal>.
  Bien sûr, il y a une multitude d'autres options de configuration de disponibles
  avec Apache et PHP. Pour plus d'informations, entrez la commande
  <command>./configure --help</command> dans l'arbre source correspondant.
 </para>
 <para>
  Apache devrait être compilé en mode multi-threadé, en sélectionnant
  le MPM <filename>worker</filename>, plutôt que le standard
  MPM <filename>prefork</filename>. Ceci est fait en ajoutant l'option
  suivante à l'argument de la commande "./configure", à l'étape 3 ci-dessus :
 </para>
 <example>
  <screen>
   --with-mpm=worker
  </screen>
 </example>
 <para>
  Cela ne devrait pas être entreprise sans être conscients des conséquences,
  et ayant au moins une juste compréhension de ce que cela implique.
  La documentation Apache concernant
  <link xlink:href="&url.apache2.mpm;">MPM-Modules</link>
  vous apportera d'importantes informations qui vous permettra de prendre
  votre décision.
 </para>
 <note>
  <para>
   La <link linkend="faq.installation.apache.multiviews">FAQ Apache
   MultiViews</link> traite de l'utilisation MultiViews avec PHP.
  </para>
 </note>
 <note>
  <para>
   Pour compilez une version multi-threadée d'Apache, le système cible
   doit supporter les threads. Dans ce cas, PHP doit également être construit
   avec l'expérimental Zend Thread Safety (ZTS). Sous cette configuration,
   toutes les extensions ne seront pas disponibles. Nous vous recommandons
   de compiler Apache avec le <filename>prefork</filename> MPM-Module.
  </para>
 </note>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
