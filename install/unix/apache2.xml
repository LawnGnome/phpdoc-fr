<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.15 $ -->
<!-- EN-Revision: 1.10 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
   <sect1 xml:id="install.unix.apache2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Apache 2.0 sur les systèmes Unix</title>
    <para>
     Cette section contient les notes et conseils d'installation de PHP avec le serveur
     Apache 2.0 sur les systèmes Unix.
    </para>
   
    &warn.apache2.compat;
    
    <para>
     Il est vivement recommandé de lire la
     <link xlink:href="&url.apache2.docs;">documentation Apache</link> pour avoir
     une meilleure connaissance du serveur Web Apache 2.0.
    </para>

    &install.snippet.apache2.compat;

    <para>
     Téléchargez la version la plus récente de <link xlink:href="&url.apache;">Apache 2.0</link>
     et une version appropriée de PHP, tel que décrit ci-dessus. Ce guide rapide
     couvre les manipulations de base, nécessaires à l'installation de Apache 2.0
     et PHP. Pour plus d'informations, lisez la
     <link xlink:href="&url.apache2.docs;">documentation Apache</link>.
     Les numéros de version sont omis ici, pour s'assurer que les instructions ne soient
     pas incorrectes. Il faudra donc remplacer les séquences 'NN' avec les valeurs
     correctes que vous utilisez.
    </para>
    <example>
     <title>
      Instruction d'installation (Module partagé Apache 2)
     </title>
     <screen>
<![CDATA[
1.  gzip -d httpd-2_0_NN.tar.gz
2.  tar xvf httpd-2_0_NN.tar
3.  gunzip php-NN.tar.gz
4.  tar -xvf php-NN.tar
5.  cd httpd-2_0_NN
6.  ./configure --enable-so
7.  make
8.  make install

    Maintenant, vous avez un dossier Apache 2.0.NN installé dans /usr/local/apache2,
    configure avec le support des modules dynamiques, et le prefork standard MPM.
    Pour tester l'installation, utilisez votre procédure standard de démarrage d'Apache :
    /usr/local/apache2/bin/apachectl start
    et pour stopper le serveur, utilisez
    /usr/local/apache2/bin/apachectl stop.

9.  cd ../php-NN

10. Maintenant, configurez votre PHP. C'est le moment où vous configurez PHP
    avec diverses options, comme les extensions qui seront activées. Lancez
    ./configure --help pour une liste des options disponibles. Dans notre exemple,
    nous ferons une configuration assez simple avec uniquement le support de Apache 2 et MySQL.
    Votre chemin vers apxs peut être différent ; en fait, le binaire devrait toujours s'appeler
    apsx2 sur votre système.

      ./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql

11. make
12. make install

    Si vous décidez de changer vos options de configuration après l'installation,
    vous aurez juste besoin de répéter les trois dernières étapes. Vous aurez aussi besoin
    de redémarrer Apache pour que le nouveau module soit chargé. Une recompilation de
    Apache n'est pas nécessaire.

    Notez que, à moins de l'avoir explicitement désactivé, 'make install' installera aussi PEAR,
    et des outils PHP tels que phpize, installera le CLI PHP, etc.
    
13. Configurez votre fichier php.ini :
    
    cp php.ini-dist /usr/local/lib/php.ini

    Vous pouvez éditer votre fichier .ini pour régler certaines options PHP. Si vous souhaitez
    votre php.ini à un autre endroit, utilisez --with-config-file-path=/votre/chemin lors de
    l'étape 10.

    Si vous utilisez plutôt php.ini-recommended, assurez-vous de lire l'ensemble des changements
    qui y sont contenus, car ils modifient le fonctionnement de PHP.

14. Éditez votre httpd.conf afin de charger le module PHP. Le chemin dans la partie droite de la
    directive LoadModule doit pointer vers l'endroit où se trouve le module PHP sur votre système.
    Le make install lancé plus haut l'y aura certainement déjà déposé pour vous, mais assurez-vous en.

    Pour PHP 4 :
  
      LoadModule php4_module modules/libphp4.so
      
    Pour PHP 5:
    
      LoadModule php5_module modules/libphp5.so
 
15. Dites à Apache de faire analyser certaines extensions par PHP. Par exemple,
    faites analyser l'extension .php par PHP. Plutôt que de n'utiliser que la directive Apache AddType,
    nous souhaitons éviter des téléversements dangereux ou que des fichiers créés tels que
    exploit.php.jpg soient intérprétés par PHP. En suivant cet exemple, vous pouvez ajouter n'importe quelle(s)
    extension(s) à parser juste en l'(les)ajoutant à la suite, séparée(s) par un espace.
    Nous ajouterons .phtml dans notre exemple.
            
      <FilesMatch \.php$>
          SetHandler application/x-httpd-php
      </FilesMatch>

    Ou, si nous souhaitons permettre uniquement aux fichiers .php, .php2, .php3, .php4, .php5, .php6 et
    .phtml d'être interprétés par PHP, et à aucun autre, nous utiliserons :

      <FilesMatch "\.ph(p[2-6]?|tml)$">
          SetHandler application/x-httpd-php
      </FilesMatch>
    
    Et pour permettre aux fichiers .phps d'être traités comme du code source PHP colorisé, ajoutez ceci :

      <FilesMatch "\.phps$">
          SetHandler application/x-httpd-php-source
      </FilesMatch>

16. Utilisez votre méthode habituelle pour démarrer le serveur Apache, e.g. :

      /usr/local/apache2/bin/apachectl start

          - OU -

      service httpd restart
   
]]>

      </screen>
     </example>
    <para>
     Suivez les étapes ci-dessus, et vous disposerez d'un serveur Apache 2.0
     avec le support de PHP module comme module <literal>SAPI</literal>. Bien sur, il y a
     bien d'autres options de configuration disponibles pour les deux logiciels,
     Apache et PHP. Pour plus de détails, utilisez la commande
     <command>./configure --help</command> dans le dossier de sources approprié.
     Si vous souhaitez compiler une version multithreadée de Apache 2.0
     vous devrez remplacer le module standard MPM <filename>prefork</filename>
     avec <filename>worker</filename> ou <filename>perchild</filename>.
     Pour ce faire, ajoutez à la ligne de configuration de l'étape 6, l'option
     <option role="configure">--with-mpm=worker</option> ou
     <option role="configure">--with-mpm=perchild</option>. Avant de procéder, soyez conscient des
     conséquences, et comprenez bien ce que vous faites. Pour plus de détails sur
     ce sujet, lisez la documentation Apache sur
     <link xlink:href="&url.apache2.mpm;">le module MPM</link>.
    </para>
    <note>
     <para>
      Si vous voulez utiliser la négociation sur le contenu, lisez la section
      <link linkend="faq.installation.apache.multiviews">FAQ Apache
      MultiViews</link>.
     </para>
    </note>
    <note>
     <para>
      Pour compiler une version multithreadée d'Apache, votre système doit
      supporter les threads. Cela implique aussi de compiler PHP avec le module
      expérimental de Zend Thread Safety (ZTS). Par conséquent, toutes les extensions
      ne seront pas disponibles. La configuration recommandée actuellement est celle
      avec le module standard MPM <filename>prefork</filename>.
     </para>
    </note>
   </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
