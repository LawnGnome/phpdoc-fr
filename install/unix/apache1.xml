<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.5 Maintainer: yannick Status: ready -->

   <sect1 id="install.unix.apache">
    <title>Apache 1.3.x sur les systèmes Unix</title>
    <para>
     Cette section contient des notes spécifiques pour l'installation de &php;
     avec Apache sur les systèmes Unix. Des notes spécifiques
    pour Apache 2 sont aussi disponibles <link linkend="install.unix.apache2">sur une
    page séparée</link>.
    </para>
    <para>
     Vous pouvez sélectionner des options à ajouter au fichier
     <command>configure</command> à la ligne 10 depuis la
     <link linkend="install.configure">liste complète des options de configuration</link>.
     Les numéros de versions ont été omis ici afin de s'assurer que les instructions ne
     soient pas incorrectes. Vous devrez donc remplacer les 'xxx' par les versions
     correctes de vos fichiers.
    </para>

    <example id="install.unix.apache.example">
     <title>
      Instructions d'installation de &php; (en module Apache)
     </title>
     <screen>
<![CDATA[
1.  gunzip apache_xxx.tar.gz
2.  tar -xvf apache_xxx.tar
3.  gunzip php-xxx.tar.gz
4.  tar -xvf php-xxx.tar
5.  cd apache_xxx
6.  ./configure --prefix=/www --enable-module=so
7.  make
8.  make install
9.  cd ../php-xxx

10. Maintenant, configurez votre PHP. C'est l'endroit où vous configurez PHP
    avec diverses options, comme les extensions qui seront activées. Lancez
    ./configure --help pour une liste des options disponibles. Dans notre exemple,
    nous ferons un ./configure assez simple avec uniquement le support Apache et MySQL.
    Votre chemin vers apxs peut être différent de notre exemple.

      ./configure --with-mysql --with-apxs=/www/bin/apxs

11. make
12. make install

    Si vous décidez de changer vos options de configuration après l'installation,
    vous aurez juste besoin de répéter les trois dernières étapes. Vous aurez aussi besoin
    de redémarrer apache pour que le nouveau module soit chargé. Une recompilation de
    Apache n'est pas nécessaire.

    Notez que, à moins de l'avoir explicitement désactivé, 'make install' installera aussi PEAR,
    et des outils PHP tels que phpize, installera le CLI PHP, etc.

13. Configurez votre fichier php.ini :

      cp php.ini-dist /usr/local/lib/php.ini

    Vous pouvez éditer votre fichier .ini pour régler certaines options PHP. Si vous souhaitez
    votre php.ini à un autre endroit, utilisez --with-config-file-path=/votre/chemin lors de
    l'étape 10.

    Si vous utiliez plutôt php.ini-recommended, assurez-vous de lire l'ensemble des changements
    qui y sont contenus, car ils modifient le fonctionnement de PHP.

14. Editez votre httpd.conf afin de charger le module PHP. Le chemin dans la partie droite de la
    directive LoadModule doit pointer vers l'endroit où se trouve le module PHP sur votre système.
    Le make install lancé plus haut l'y aura certainement déjà déposé pour vous, mais assurez le vous.

    Pour PHP 4 :

      LoadModule php4_module libexec/libphp4.so

    Pour PHP 5 :

      LoadModule php5_module libexec/libphp5.so

15. Et dans la section AddModule de httpd.conf, quelque part en dessous de
    ClearModuleList, ajoutez ceci :

    Pour PHP 4 :

      AddModule mod_php4.c

    Pour PHP 5 :

      AddModule mod_php5.c

16. Dites à Apache de faire parser certaines extensions par PHP. Par exemple,
    faites parser l'extension .php par PHP. Vous pouvez ajouter n'importe quelle(s)
    extension(s) à parser juste en les ajoutant à la suite, séparées par un espace.
    Nous ajouterons .phtml dans notre exemple.

      AddType application/x-httpd-php .php .phtml

    Il est assez fréquent de configurer l'extension .phps comme code source PHP colorisé,
    ce qui peut être fait ainsi :

      AddType application/x-httpd-php-source .phps

17. Utilisez votre méthode habituelle pour démarrer le serveur Apache.
    (vous devez l'éteindre et le redémarrer, pas seulement lui envoyer
    un signal HUP ou USR1.)
]]>
      </screen>
     </example>

    <para>
     Alternativement, pour installer &php; en tant qu'objet statique :
    </para>

    <example id="install.unix.apache.example-static">
     <title>
      Instructions d'installation (Installation en tant que module statique d'Apache) de &php;
     </title>
     <screen>
<![CDATA[
1.  gunzip -c apache_1.3.x.tar.gz | tar xf -
2.  cd apache_1.3.x
3.  ./configure
4.  cd ..

5.  gunzip -c php-5.x.y.tar.gz | tar xf -
6.  cd php-5.x.y
7.  ./configure --with-mysql --with-apache=../apache_1.3.x
8.  make
9.  make install

10. cd ../apache_1.3.x

11. ./configure --prefix=/www --activate-module=src/modules/php5/libphp5.a
    (La ligne ci-dessus est correct ! Oui, nous savons que libphp5.a n'existe pas à
    ce moment. On ne le suppose pas non plus. Il sera créé.)

12. make
    (vous devriez avoir maintenant un binaire httpd que vous pouvez copier dans votre
    dossier de binaire Apache ; si c'est votre première installation, vous devez exécuter la
    commande "make install")

13. cd ../php-5.x.y
14. cp php.ini-dist /usr/local/lib/php.ini

15. Vous pouvez éditer le fichier /usr/local/lib/php.ini pour définir les options de PHP.
    Editez votre fichier httpd.conf ou srm.conf et ajoutez :
    AddType application/x-httpd-php .php
]]>
      </screen>
     </example>
     <note>
      <para>
       Remplacez <literal>php-5</literal> par <literal>php-4</literal> et
       <literal>php5</literal> par <literal>php4</literal> en &php; 4.
      </para>
     </note>

     <para>
      Suivant votre installation d'Apache et votre variante d'Unix,
      il existe de nombreuses façons d'arrêter et redémarrer
      Apache. Voici une liste des commandes typiques, pour différentes
      installations. Remplacez <literal>/path/to/</literal> par
      le chemin d'accès à vos applications sur votre système.
     </para>
     <para>
      <example>
       <title>Exemples de commandes pour le redémarrage d'apache</title>
       <programlisting role="shell">
<![CDATA[
1. Nombreuses variantes Linux SysV :
/etc/rc.d/init.d/httpd restart

2. Avec les scripts apachectl :
/path/to/apachectl stop
/path/to/apachectl start

3. httpdctl et httpsdctl (utilisant OpenSSL), similaires à apachectl:
/path/to/httpsdctl stop
/path/to/httpsdctl start

4. En utilisant mod_ssl, ou un autre serveur SSL, vous pouvez vouloir l'arrêter
et le démarrer  manuellement :
/path/to/apachectl stop
/path/to/apachectl startssl
]]>
       </programlisting>
      </example>
     </para>
     <para>
      L'emplacement des exécutables apachectl et http(s)dctl peut
      varier. Si votre système est pourvu des commandes
      <literal>locate</literal>, <literal>whereis</literal> ou
      <literal>which</literal>, elles peuvent vous aider à retrouver vos programmes.
     </para>

     <para>
      Différents exemples de compilation &php; pour Apache suivent :
      <informalexample>
       <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Cette commande va créer une bibliothèque partagée
      <filename>libphp5.so</filename> (ou
      <filename>libphp4.so</filename> en &php; 4)
      qui sera chargée par Apache avec
      une ligne LoadModule dans le fichier &httpd.conf;.
      Le support PostgreSQL est aussi inclut dans cette bibliothèque.
     </para>
     <para>
      <example>
       <title>Compilation de &php; avec le support PostGreSQL</title>
       <programlisting role="shell">
<![CDATA[
./configure --with-apxs --with-pgsql=shared
]]>
       </programlisting>
      </example>
     </para>
     <para>
      Cette commande va créer une bibliothèque partagée <filename>libphp4.so</filename>
      pour Apache, mais va aussi créer la bibliothèque partagée
      <filename>pgsql.so</filename> qui sera chargée dans &php;
      avec une directive du fichier &php.ini; file ou en la
      chargeant explicitement dans le script avec la fonction
      <function>dl</function>.
     </para>
     <para>
      <example>
       <title>Compilation en bibliothèques statiques</title>
       <programlisting role="shell">
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql
]]>
       </programlisting>
      </example>
     </para>
     <para>
      Cette commande va créer une autre bibliothèque partagée
      <filename>libmodphp5.a</filename>, un fichier <filename>mod_php5.c</filename>
      et quelques fichiers associés dans le dossier <literal>src/modules/php4</literal>
      du dossier source Apache. Puis, vous devez compiler Apache avec
      <literal>--activate-module=src/modules/php5/libphp5.a</literal>
      et le système de compilation d'Apache va créer un fichier
      <filename>libphp5.a</filename> et le lier statiquement avec
      <filename>httpd</filename> (remplacez <literal>php5</literal> par
      <literal>php4</literal> en &php; 4). Le support PostgreSQL est alors
      inclus directement dans l'exécutable <filename>httpd</filename>,
      ce qui fait que le résultat final est un fichier unique
      <filename>httpd</filename>, qui inclut Apache et &php;.
     </para>
     <para>
      <example>
       <title>Compilation en bibliothèques partagées</title>
       <programlisting role="shell">
<![CDATA[
./configure --with-apache=/path/to/apache_source --with-pgsql=shared
]]>
       </programlisting>
      </example>
     </para>
     <para>
      Comme précédemment, mais au lieu d'inclure le support PostgreSQL
      directement dans l'exécutable <filename>httpd</filename> final, vous allez obtenir
      une bibliothèque partagée <filename>pgsql.so</filename> que vous pouvez charger
      dans &php; soit grâce au fichier de configuration
      &php.ini; ou dynamiquement avec <function>dl</function>.
     </para>
     <para>
      Lorsque vous faites votre choix entre les différents modes de compilation de &php;,
      vous devez prendre en compte leurs avantages et inconvénients respectifs. Les
      objets partagés permettent de compiler &php; et Apache de manière séparée, et vous
      n'aurez pas à compiler l'ensemble pour faire évoluer &php;. La compilation statique
      permet de charger et d'exécuter plus rapidement &php;. Pour plus
      d'informations, voyez la page web sur le
      <ulink url="&url.apachedso;">support des DSO</ulink>.
     </para>
    <note>
     <para>
      Le &httpd.conf; par défaut de Apache est fourni avec une
      section qui ressemble à ceci :
      <example>
       <title>httpd.conf fournit par Apache</title>
       <programlisting role="apache-conf">
<![CDATA[
User nobody
Group "#-1"
]]>
       </programlisting>
      </example>
      A moins que vous ne changiez cette valeur par "Group nogroup"
      ou quelque chose comme ça ("Group daemon" est aussi classique),
      &php; ne sera pas capable d'ouvrir des fichiers.
     </para>
    </note>
    <note>
     <para>
      Assurez-vous que vous spécifiez la version installée de apxs avec l'option
      <option role="configure">--with-apxs=/path/to/apxs</option>.
      Vous ne devez PAS utiliser la version d'apxs qui est
      dans les sources d'Apache, mais celle qui est réellement installée sur votre
      système.
     </para>
    </note>
   </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->