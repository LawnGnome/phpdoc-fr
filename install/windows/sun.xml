<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

  <sect1 xml:id="install.windows.sun" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>Serveurs Sun, iPlanet et Netscape servers sur Microsoft Windows</title>
   <para>
    Cette section contient les notes et détails spécifiques à l'installation de &php; sur
    des serveurs Sun Java System Web Server, Sun ONE web Server, Netscape et iPlanet, 
    sous Windows.
   </para>
   <para>
    Depuis &php; 4.3.3, vous pouvez utiliser les scripts &php; avec
    le <link linkend="ref.nsapi">module NSAPI</link> pour 
    <link linkend="install.windows.sun.specialpages">gérer des listes de dossiers
    et des pages d'erreurs personnalisées</link>. Des fonctions supplémentaires
    sont disponibles pour assurer la compatibilité avec Apache.
    Pour du support sur les serveurs courants, voyez la 
    <link linkend="install.windows.sun.notes">note sur les sous-requêtes</link>.
   </para>
   
   <sect2 xml:id="install.windows.sun.cgi">
    <title>Configuration en CGI sur les serveurs Sun, iPlanet et Netscape</title> 
    <para>
     Pour installer &php; en CGI, suivez ce qui suit :
    </para>
    <itemizedlist>
     <listitem>
      <simpara>
       Copiez le fichier <filename>php4ts.dll</filename> dans votre dossier principal
       (le dossier où vous avez installé Windows)
      </simpara>
     </listitem>
     <listitem>
      <para>
       Faites un fichier d'association depuis la ligne de commande.
       Tapez les lignes suivantes :
       <programlisting role="shell">
<![CDATA[
assoc .php=PHPScript
ftype PHPScript=c:\php\php.exe %1 %*
]]>
       </programlisting>
      </para>
     </listitem>
     <listitem>
      <simpara>
       Dans le serveur Netscape Enterprise Administration Server,
       créez un dossier shellcgi et supprimez-le aussitôt (cette
       opération crée 5 lignes importantes dans le fichier
       obj.conf et permet au serveur de gérer les scripts CGI).
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Dans le serveur Netscape Enterprise Administration Server, créez un
       nouveau type MIME :
       <literal>Category: type, Content-Type: magnus-internal/shellcgi, File Suffix:php</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Recommencez pour chaque instance de serveur web qui devra exécuter
       &php;.
      </simpara>
     </listitem>
    </itemizedlist>
    <para>
     Plus de détails sur la configuration de &php; comme CGI sont
     disponibles à <link xlink:href="&url.netscape.cgi;">&url.netscape.cgi;</link>
    </para>
   </sect2>
    
   <sect2 xml:id="install.windows.sun.nsapi">
    <title>Configuration NSAPI sur les serveurs Sun, iPlanet et Netscape</title> 
    <para>
     Pour installer &php; avec l'interface NSAPI, faites ceci :
    </para>
    <itemizedlist>
     <listitem>
      <simpara>
       Copiez le fichier <filename>php4ts.dll</filename> dans votre dossier
       systemroot (le dossier où vous avez installé windows)
      </simpara>
     </listitem>
     <listitem>
      <para>
       Faites un fichier d'association depuis la ligne de commande.
       Tapez les lignes suivantes :
       <programlisting role="shell">
<![CDATA[
assoc .php=PHPScript
ftype PHPScript=c:\php\php.exe %1 %*
]]>
       </programlisting>
      </para>
     </listitem>
     <listitem>
      <simpara>
       Dans le serveur Netscape Enterprise Administration Server, créez un
     nouveau type MIME : 
     <literal>Category: type, Content-Type: magnus-internal/shellcgi, File Suffix:php</literal>.
      </simpara>
     </listitem>
     <listitem>
      <para>
        Éditez le fichier <filename>magnus.conf</filename> (pour les serveurs &gt;= 6) ou
        <filename>obj.conf</filename> (pour les serveurs &lt; 6) et ajoutez ce qui suit :
        Vous devez placer ces lignes après <literal>mime types init</literal>.
       <programlisting>
<![CDATA[
Init fn="load-modules" funcs="php4_init,php4_execute,php4_auth_trans" shlib="c:/php/sapi/php4nsapi.dll"
Init fn="php4_init" LateInit="yes" errorString="Failed to initialise PHP!" [php_ini="c:/path/to/php.ini"]
]]>
       </programlisting>
       (&php; &gt;= 4.3.3) Le paramètre <literal>php_ini</literal> est optionnel
       mais si vous le définissez, vous pourez placer votre fichier &php.ini; dans le 
       dossier de configuration de votre serveur web.
      </para>
     </listitem>
     <listitem>
      <para>
       Configurez l'objet par défaut dans le fichier <filename>obj.conf</filename>
       (pour les classes de serveur virtuel [Sun Web Server 6.0+], dans le fichier
       <filename>vserver.obj.conf</filename>) : dans la section
       <literal>&lt;Object name="default"&gt;</literal>, placez cette ligne nécessairement
       avant toutes les lignes 'ObjectType' et après toutes les lignes 'ObjectType' :
       <programlisting>
<![CDATA[
Service fn="php4_execute" type="magnus-internal/x-httpd-php" [inikey=value inikey=value ...]
]]>
       </programlisting>
       (&php; &gt;= 4.3.3) Comme paramètres supplémentaires, vous pouvez ajouter 
       quelques valeurs spéciales du &php.ini;, par exemple, vous pouvez définir un
       <literal>docroot=&quot;/path/to/docroot&quot;</literal> spécifique au contexte
       où <literal>php4_execute</literal> est appelé, non pas 
       <literal>&quot;On&quot;,&quot;Off&quot;,...</literal> (cela ne fonctionnerait pas 
       correctement), e.g. <literal>zlib.output_compression=1</literal> à la place de
       <literal>zlib.output_compression=&quot;On&quot;</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       Cela n'est nécessaire que si vous voulez configurer un dossier qui ne contiendra que
       vos scripts &php; (tout comme un dossier cgi-bin) :
       <programlisting>
<![CDATA[
<Object name="x-httpd-php">
ObjectType fn="force-type" type="magnus-internal/x-httpd-php"
Service fn=php4_execute [inikey=value inikey=value ...]
</Object>
]]>
       </programlisting>
       Après cela, vous pouvez configurer un dossier dans l'administration du serveur
       et lui assigner le style <literal>x-httpd-php</literal>. Tous les fichiers
       s'y trouvant seront exécutés comme étant des scripts &php;.
       Cela peut être pratique pour cacher l'usage de &php; en renommant
       les fichiers en <filename>.html</filename>.
      </para>
     </listitem>
     <listitem>
      <simpara>
       Redémarrez votre serveur web pour que les modifications prennent effet.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Faites cela pour chaque instance du serveur web où vous voulez exécuter &php;.
      </simpara>
     </listitem>
    </itemizedlist>
    <note>
     <para>
      Plus de détails sur la configuration de &php; comme filtre NSAPI peuvent être trouvés
      ici :
      <link xlink:href="&url.netscape.nsapi;">&url.netscape.nsapi;</link>
     </para>
    </note>
    <note>
     <para>
      La taille de la pile que &php; utilise dépend de la 
      configuration du serveur web. Si vous rencontrez des crashs avec
      les grands scripts &php;, il est recommandé d'augmenter la taille de
      la pile avec la console d'administration : dans la section 
      &quot;MAGNUS EDITOR&quot;.
     </para>
    </note>
   </sect2>
   
   <sect2 xml:id="install.windows.sun.phpini">
    <title>Environnement CGI et modifications recommandées du &php.ini;</title>
    <para>
     Il est important de garder en tête que iPlanet/SunONE/Netscape est un serveur web
     multi-threadé. Comme toutes les requêtes se situent dans le même contexte
     (c'est le contexte sur serveur web), et que ce contexte est unique. SI vous voulez
     accéder a des variables comme <literal>PATH_INFO</literal>,
     <literal>HTTP_HOST</literal> etc. il n'est pas recommandé d'y accéder
     à la manière de &php; 3.x, avec la fonction <function>getenv</function> ou une
     autre méthode (register globals, <literal>$_ENV</literal>).
     De cette manière, vous n'aurez que des valeurs d'environnement du serveur,
     et non pas des valeurs correctes pour le CGI.
    </para>
    <note>
     <para>
      Pourquoi est-ce que les variables CGI sont invalides ?
     </para>
     <para>
      C'est lié au faui que le processus du serveur web est lancé par l'administrateur
      du serveur, qui utilise le script de lancement au démarrage. En fait, il aurait fallu
      que vous lanciez vous-même le processus. C'est pour cela que l'environnement
      du serveur web contient des variables d'environnement CGI. Vous pouvez vérifier
      cela en lançant le serveur web depuis un autre endroit que l'administrateur
      du serveur : utilisez la ligne de commande Unix en tant que root : 
      vous verrez alors qu'il n'y a pas de variables d'environnement.
     </para>
    </note>
    <para>
     Changez simplement vos scripts pour lire les variables CGI, en utilisant
     le tableau superglobal <literal>$_SERVER</literal>. Si vous avez d'autres scripts qui
     utilisent encore <literal>$HTTP_HOST</literal> et compagnie,
     il est recommandé d'activer l'option <literal>register_globals</literal> 
     dans le &php.ini; et de changer l'ordre des variables. 
     IMPORTANT : supprimez le <literal>&quot;E&quot;</literal> dans cette option, car
     vous n'en avez pas besoin pour cet environnement.
     <programlisting>
<![CDATA[
variables_order = "GPCS"
register_globals = On
]]>
     </programlisting>
    </para>
   </sect2>
   
   <sect2 xml:id="install.windows.sun.specialpages">
    <title>Utilisation particulière pour les pages d'erreurs ou les 
    listages spécifiques de dossiers (&php; &gt;= 4.3.3)</title>
    <para>
     Vous pouvez utiliser &php; pour générer des pages d'erreurs de type
     <literal>"404 Not Found"</literal> ou apparentée. Ajoutez la ligne
     suivante dans le fichier <filename>obj.conf</filename> pour chaque
     page d'erreur que vous souhaitez remplacer : 
     <programlisting>
<![CDATA[
Error fn="php4_execute" code=XXX script="/path/to/script.php" [inikey=value inikey=value...]
]]>
     </programlisting>
     où <literal>XXX</literal> est le code d'erreur HTTP. Effacez toute autre
     directive <literal>Error</literal> qui pourrait interférer avec la vôtre.
     Si vous voulez utiliser une page pour toutes les erreurs qui existent,
     laissez le paramètre <literal>code</literal> vide. Votre script peut 
     obtenir le code de statut HTTP dans la variable 
     <literal>$_SERVER['ERROR_TYPE']</literal>.
    </para>
    <para>
     Une autre possibilité est de générer une liste de dossiers personnalisée.
     Créez simplement un script &php; qui affiche le contenu du dossier, et 
     remplacez la ligne <literal>Service</literal> par défaut par
     <literal>type=&quot;magnus-internal/directory&quot;</literal> 
     dans <filename>obj.conf</filename> avec ceci :
     <programlisting>
<![CDATA[
Service fn="php4_execute" type="magnus-internal/directory" script="/path/to/script.php" [inikey=value inikey=value...]
]]>
     </programlisting>
     Pour ces deux points, l'URI originale et l'URI traduite sont
     dans les variables <literal>$_SERVER['PATH_INFO']</literal> et
     <literal>$_SERVER['PATH_TRANSLATED']</literal>.
    </para>
   </sect2>
   
   <sect2 xml:id="install.windows.sun.notes">
    <title>Note au sujet de <function>nsapi_virtual</function> et des requêtes (&php; &gt;= 4.3.3)</title>
    <para>
     Le module NSAPI supporte désormais la fonction <function>nsapi_virtual</function>
     (alias : <function>virtual</function>), pour réaliser des sous requêtes au serveur
     web, et inclure le résultat dans une page. Le problème est que cette fonction
     utilise une fonctionnalité non documentée de la bibliothèque
     NSAPI.
    </para>
    <para>
     Sous Unix, ce n'est pas un problème, car le module va automatiquement
     rechercher les fonctions nécessaires, et les utiliser si elles sont
     disponibles. Sinon, <function>nsapi_virtual</function> sera désactivée.
    </para>
    <para>
     Sous Windows, des limitations dans la gestion des DLL impose l'utilisation
     de la plus récente bibliothèque <filename>ns-httpdXX.dll</filename>. Cela a été
     testé pour les serveurs jusqu'à la version 6.0. Si une nouvelle version de
     SunONE server est utilisée, la détection échoue, et 
     <function>nsapi_virtual</function> est désactivée.
    </para>
    <para>
     Dans ce cas, essayez ceci : 
     ajoutez le paramètre suivant à <literal>php4_init</literal> dans
     <filename>magnus.conf</filename>/<filename>obj.conf</filename> :
     <programlisting>
<![CDATA[
Init fn=php4_init ... server_lib="ns-httpdXX.dll"
]]>
     </programlisting>
     où <literal>XX</literal> est le numéro correct de la version de la DLL.
     Pour la connaître, regardez dans le <literal>server-root</literal>
     pour connaître le nom correct de la DLL. La DLL la plus grande en taille
     est la bonne.
    </para>
    <para>
     Vous pouvez vérifier le statut en utilisant la fonction <function>phpinfo</function>.
    </para>
    <note>
     <para>
      Soyez prévenu : le support de <function>nsapi_virtual</function> est expérimental.
     </para>
    </note>
   </sect2>   
  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
