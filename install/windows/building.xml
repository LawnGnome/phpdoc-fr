<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.13 $ -->
<!-- EN-Revision: 1.17 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<sect1 xml:id="install.windows.building" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Compilation des sources</title>
 <para>
  Ce chapitre va vous apprendre à compiler &php; depuis les sources sous Windows,
  en utilisant les utilitaires Microsoft. Pour compiler &php; avec Cygwin, référez-vous
  à <xref linkend="install.unix"/>.
 </para>

 <sect2 xml:id="install.windows.building.quick-guide">
  <title>Guide rapide de compilation sous Windows</title>

  <para>
   Ce guide a été écrit en Mars 2008, en utilisant Windows XP Service Pack 2,
   avec toutes les mises à jour et en compilant PHP 5.2.5 et PHP 5.3.
   Il peut y avoir des modifications à effectuer si vous utilisez des outils différents.
  </para>

  <orderedlist>
   <listitem>
    <para>
     Téléchargez et installez :
    </para>
    <itemizedlist>
     <listitem>
      <simpara>
       <link xlink:href="&url.vc2k8ee;">Microsoft
       Visual C++ 2008 Express Edition</link>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <link xlink:href="&url.win32.sdk;">
       Windows SDK for Windows Server 2008 and .NET Framework 3.5</link>
      </simpara>
     </listitem>
    </itemizedlist>
   </listitem>

   <listitem>
    <simpara>
     Copiez <filename>C:\Program Files\Microsoft SDKs\Windows\6.1\Include\WinResrc.h</filename>
     vers <filename>C:\Program Files\Microsoft SDKs\Windows\6.1\Include\winres.h</filename>.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Créez le dossier <filename>C:\work</filename>.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Téléchargez <link xlink:href="&url.win32.buildtools;">les outils de compilation
      Windows</link> et décompressez le contenu dans <filename>C:\work</filename>.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Créez le dossier <filename>C:\usr\local\lib</filename>. Copiez le fichier
     <filename>C:\work\win32build\bin\bison.simple</filename> dans le nouveau répertoire
     créé précédemment.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Téléchargez <link xlink:href="&url.win32.dnsresolver;">la bibliothèque de
      résolution DNS Windows</link> et décompressez le contenu dans le dossier
     <filename>C:\work</filename>.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Ouvrez <filename>C:\work\bindlib_w32\bindlib.dsw</filename>. Si l'on vous demande
     de mettre à jour le projet, validez. Choisissez soit "Debug", soit "Release configuration"
     dans la barre de menu, puis, choisissez "Build =&gt; Build Solution".
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Récupérez une copie des sources PHP et extrayez la dans le dossier
     <filename>C:\work</filename>. À ce stade, ce dossier doit ressembler
     à quelque chose comme :
    </simpara>
    <screen>
<![CDATA[
+-C:\work
| +-bindlib_w32
| | +-Debug
| | | +-resolv.lib
| | | +-...
| | +-...
| +-win32build
| | +-bin
| | +-include
| | +-lib
| +-php-5.2.5
| | +-build
| | +-win32
| | +-...]]></screen>
   </listitem>

   <listitem>
    <simpara>
     Ouvrez une console en utilisant le raccourci "Visual Studio 2008 Command Prompt"
     dans le menu démarrer.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Éxécutez la commande :
    </simpara>
    <screen>
<![CDATA[
C:\Program Files\Microsoft Visual Studio 9.0\VC> set "PATH=C:\work\win32build\bin;%PATH%"
C:\Program Files\Microsoft Visual Studio 9.0\VC>]]></screen>
   </listitem>

   <listitem>
    <simpara>
     Entrez dans le dossier <filename>C:\work\php-5.2.5</filename>.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Éxécutez la commande <command>cscript /nologo win32\build\buildconf.js</command>.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Éxécutez la commande <command>cscript /nologo configure.js --disable-all --enable-cli
     --enable-cgi --enable-object-out-dir=.. --disable-ipv6</command>. Pour activer le
    débogage, ajoutez <command>--enable-debug</command> à la fin.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Éxécutez la commande <command>nmake</command>.
    </simpara>
   </listitem>

   <listitem>
    <simpara>
     Si tout se passe bien, vous devriez avoir un exécutable PHP CLI exécutable
     <filename>C:\work\Debug_TS\php.exe</filename>, ou
     <filename>C:\work\Release_TS\php.exe</filename>.
    </simpara>
   </listitem>

  </orderedlist>
 </sect2>

 <sect2 xml:id="install.windows.building.environment">
  <title>Environnement de compilation</title>
  <para>
   Pour compiler et construire &php;, vous avez besoin d'un environnement de
   développement Microsoft. Les environnements suivants sont supportés :
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     Microsoft Visual C++ 6.0 (officiel)
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Microsoft Visual C++ .NET
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Microsoft Visual C++ 2005, Windows Platform SDK et .NET Framework SDK (courant)
    </simpara>
   </listitem>
  </itemizedlist>
  <para>
   Malgré le fait que VC6 (Microsoft Visual C++ 6.0) soit utilisé pour construire
   Windows, il ne peut plus être télécharger depuis le site Web de Microsoft. Les nouveaux
   utilisateurs souhaitant construire &php; librement doivent utiliser
   Microsoft Visual C++ 2005 Express Edition et ses composants auxiliaires.
  </para>

  <sect3 xml:id="install.windows.building.environment.express2005">
   <title>Mise en place de Microsoft Visual C++ 2005 Express</title>
   <note>
    <simpara>
     Combiné, ces composants sont très lourds, nécessitant plus d'un giga
     d'espace disque.
    </simpara>
   </note>
   <para>
    La mise en place de Microsoft Visual C++ 2005 Express est triviale et nécessite
    l'installation de 3 paquets différents. Assurez-vous de conserver les chemins
    d'installation de ces programmes. Téléchargez et installez les programmes suivants :
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      <link xlink:href="&url.win32.msvc2005express;">Microsoft Visual C++ 2005 Express</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link xlink:href="&url.win32.platform-sdk;">Microsoft Windows Server 2005 Platform SDK</link>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link xlink:href="&url.win32.net2.0-sdk;">.NET Framework 2.0 Software Development Kit</link>
     </simpara>
    </listitem>
   </itemizedlist>
   <para>
    Il y a quelques étapes supplémentaires à l'issue de l'installation :
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      <link xlink:href="&url.win32.express-and-sdk;">MSVC 2005 Express doit être
      configuré afin d'utiliser Windows Platform SDK</link>. Il n'est pas nécessaire
      d'effectuer la deuxième étape, sachant que &php; n'utilise pas l'interface graphique.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Windows Platform SDK contient un fichier nommé <filename>WinResrc.h</filename>,
      citué normalement dans le dossier <filename>Include</filename> du dossier d'installation
      SDK. Il doit être copier et renommer en <filename>winres.h</filename>, nom utilisé par &php;
      pour ce fichier.
     </simpara>
    </listitem>
   </itemizedlist>
   <para>
    Finallement, lorsque vous utilisez MSVC 2005 Express depuis la ligne de commande,
    diverses variables d'environnement doivent être définies. <filename>vsvars32.bat</filename>
    habituellement citué dans <filename>C:\Program Files\Microsoft Visual Studio 8\Common7\Tools</filename>
    (recherchez ce fichier sinon) contient ces déclarations. Les variables d'environnement
    <varname>PATH</varname>, <varname>INCLUDE</varname> et <varname>LIB</varname>
    doivent correspondre aux dossiers <filename>bin</filename>,
    <filename>include</filename> et <filename>lib</filename> de votre nouvelle installation SDK.
   </para>
   <note>
    <simpara>
     Les chemins .NET SDK doit déjà être présent dans le fichier
     <filename>vsvars32.bat</filename>, vu que ce SDK s'installe dans le
     même dossier que Microsoft Visual C++ 2005 Express.
    </simpara>
   </note>
  </sect3>
 </sect2>

 <sect2 xml:id="install.windows.building.libraries">
  <title>Libraries</title>
  <para>
   Pour extraire les fichiers téléchargés, vous avez également besoin d'un utilitaire
   d'extraction de fichiers ZIP. Windows XP et supérieur inclut en natif cette fonctionnalité.
  </para>
  <para>
   Avant de commencer, vous devez télécharger :
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     les utilitaires de compilation win32 depuis le site &php; sur
     <link xlink:href="&url.win32.buildtools;">&url.win32.buildtools;</link>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     le code source pour l'utilitaire de résolution de nom DN utilisé par &php; sur
     <link xlink:href="&url.win32.dnsresolver;">&url.win32.dnsresolver;</link>. C'est un remplacement
     à la bibliothèque <filename>resolv.lib</filename> incluse dans
     <filename>win32build.zip</filename>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Si vous avez prévu de compiler &php; en tant que module Apache, vous devez également
     avoir les <link xlink:href="&url.apache.source;">sources d'Apache</link>.
    </simpara>
   </listitem>
  </itemizedlist>
  <simpara>
   Finalement, vous avez besoin des sources de &php; elles-mêmes. Vous pouvez
   récupérer la dernière version de développement en utilisant
   le <link xlink:href="&url.php.anoncvs;">CVS anonyme</link>, un
   <link xlink:href="&url.php.snapshots;">snapshot</link> ou la version compressée la plus récente
   des <link xlink:href="&url.php.downloads;">sources</link>.
  </simpara>
 </sect2>

 <sect2 xml:id="install.windows.building.install">
  <title>Compiler tout ensemble</title>
  <para>
   Après avoir téléchargé les paquets requis, vous devez les extraire dans un
   endroit approprié :
   <itemizedlist>
    <listitem>
     <simpara>
      Créez un dossier de travail où vous y placerez tous les fichiers décompressés, e.g :
      <filename class="directory">C:\work</filename>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Créez le dossier <filename>win32build</filename> dans votre dossier de
      travail (<filename class="directory">C:\work</filename>) et décompressez
      le fichier <filename>win32build.zip</filename> dans ce dossier.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Créez un dossier <filename>bindlib_w32</filename> dans votre dossier de
      travail (<filename class="directory">C:\work</filename>) et décompressez
      le fichier <filename>bindlib_w32.zip</filename> dans ce dossier.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Décompressez les sources &php; téléchargées dans votre dossier de travail
      (<filename class="directory">C:\work</filename>).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Construisez les bibliothèques dont vous avez besoin (ou téléchargez les binaires
      s'ils sont disponibles) et placez les en-têtes et les bibliothèques respectivement
      dans les dossiers
      <filename class="directory">C:\work\win32build\include</filename> et
      <filename class="directory">C:\work\win32build\lib</filename>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Si vous n'avez pas cygwin d'installé avec bison et flex, vous devez
      aussi rendre le dossier <filename
      class="directory">C:\work\win32build\bin</filename> disponible dans le
      PATH, alors ces outils peuvent être trouvés par le script de
      configuration.
     </simpara>
    </listitem>
   </itemizedlist>
   Si vous avez correctement suivi les étapes précèdentes, vous devez obtenir la structure suivante :
   <screen>
    <![CDATA[
             +--C:\work
             |  |
             |  +--bindlib_w32
             |  |  |
             |  |  +--arpa
             |  |  |
             |  |  +--conf
             |  |  |
             |  |  +--...
             |  |
             |  +--php-5.x.x
             |  |  |
             |  |  +--build
             |  |  |
             |  |  +--...
             |  |  |
             |  |  +--win32
             |  |  |
             |  |  +--...
             |  |
             |  +--win32build
             |  |  |
             |  |  +--bin
             |  |  |
             |  |  +--include
             |  |  |
             |  |  +--lib
             ]]>
   </screen>
  </para>
  <para>
   Si vous utilisez <link xlink:href="&url.cygwin;">Cygwin</link>, vous devez également créer les dossiers
   <filename class="directory">C:\usr\local\lib</filename>, puis copier le fichier
   <filename>bison.simple</filename> depuis
   <filename class="directory">C:\work\win32build\bin </filename> dans le dossier
   <filename class="directory">C:\usr\local\lib</filename>.
  </para>
  <note>
   <simpara>
    Si vous voulez utiliser PEAR ainsi que son installeur en ligne de commande,
    CLI-SAPI est nécessaire. Pour plus d'informations sur PEAR et son installeur,
    lisez la documentation sur le site web de
    <link xlink:href="&url.php.pear.manual;">PEAR</link>.
   </simpara>
  </note>
 </sect2>

 <sect2 xml:id="install.windows.building.resolvlib">
  <title>Construction de resolv.lib</title>
  <para>
   Vous devez construire la bibliothèque <filename>resolv.lib</filename>.
   Décidez si oui ou non vous voulez de disponible les symboles de débogage
   (bindlib - Win32 Debug) ou pas (bindlib - Win32 Release) ; mais souvenez-vous de
   ce choix, car la construction du débogage ne se lit avec &php; que lorsqu'il est
   également construit en mode débogage.
   Construisez la configuration appropriée :
   <itemizedlist>
    <listitem>
     <simpara>
      Pour les utilisateurs de GUI, lancez VC++ en double-cliquant sur le
      fichier <filename>C:\work\bindlib_w32\bindlib.dsw</filename>. Puis, sélectionnez
      "Build=&gt;Rebuild All".
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Pour les utilisateurs de lignes de commande, assurez-vous d'avoir soit
      les variables d'environnement C++ de disponibles, soit d'avoir exécuté
      <command>vcvars.bat</command>, puis exécutez une des commandes
      suivantes :
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        <command>msdev bindlib.dsp /MAKE "bindlib - Win32 Debug"</command>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <command>msdev bindlib.dsp /MAKE "bindlib - Win32 Release"</command>
       </simpara>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
   À ce point, vous devez avoir une bibliothèque utilisable de <filename>resolv.lib</filename>
   dans le dossier <filename class="directory">C:\work\bindlib_w32\Debug</filename> ou
   dans le sous-dossier <filename>Release</filename>. Copiez ce fichier dans votre dossier
   <filename class="directory">C:\work\win32build\lib</filename> en écrasant le fichier
   portant le même nom.
  </para>
 </sect2>

 <sect2 xml:id="install.windows.building.new">
  <title>Construction de &php; en utilisant le nouveau système de construction [&php; &gt;=5 uniquement]</title>
  <para>
   Ce chapitre explique comment compiler &php; &gt;=5 en utilisant le nouveau
   système de construction, basé sur CLI et extrèmement similaire au système de
   construction Unix pour &php;.
  </para>
  <note>
   <para>
    Ce système de construction n'est pas disponible pour &php; 4. Référez-vous
    plutôt à <xref linkend="install.windows.building.dsw"/>.
   </para>
  </note>
  <para>
   Avant de commencer, assurez-vous d'avoir lu
   <xref linkend="install.windows.building.install"/> et d'avoir construit toutes les bibliothèques
   nécessaire, comme <link xlink:href="&url.libxml;">Libxml</link> ou
   <link xlink:href="&url.icu;">ICU</link> (nécessaire pour &php; &gt;= 6).
  </para>
  <para>
   D'abord, vous devez ouvrir un prompt de commande Visual Studio, qui
   doit être disponible avec le menu Démarrer. Un prompt de commande
   classique ne fonctionnera pas, car il n'aura probablement pas les variables
   d'environnement nécessaires. Puis, tapez quelque chose comme
   <command>cd C:\work\php-5.x.x</command> pour entrer dans le dossier
   contenant les sources de &php;. Maintenant, vous êtes prêt à configurer &php;.
  </para>
  <para>
   La seconde étape consiste à exécuter le fichier <command>buildconf</command>
   afin de lancer le script de configuration, en scannant le dossier à la recherche des fichiers
   <filename>config.w32</filename>. Par défaut, cette commande recherchera également
   dans les dossiers suivants : <filename class="directory">pecl;
    ..\pecl; pecl\rpc; ..\pecl\rpc</filename>. Depuis &php; 5.1.0, vous pouvez changer
   ce comportement en utilisant l'argument <literal>--add-modules-dir</literal>
   (e.g. <command>cscript /nologo win32/build/buildconf.js
    --add-modules-dir=../php-gtk2 --add-modules-dir=../pecl</command>).
  </para>
  <para>
   La troisième étape consiste en la configuration. Pour voir la liste des options de
   configuration, tapez la commande <command>cscript /nologo configure.js
    --help</command>. Après avoir choisi les options à activer ou non, tapez
   quelque chose comme : <command>cscript /nologo configure.js --disable-foo
    --enable-fun-ext</command>. En utilisant l'argument <literal>--enable-foo=shared</literal>,
   vous tenterez de construire l'extension 'foo' en tant que module partagé, dynamiquement
   chargeable.
  </para>
  <para>
   La dernière étape est la compilation. Pour ce faire, entrez simplement la commande
   <command>nmake</command>. Les fichiers générés (e.g. .exe et .dll) seront
   placés soit dans le dossier <filename class="directory">Release_TS</filename>,
   soit dans le dossier <filename class="directory">Debug_TS</filename> (si
   vous avez compilé avec le <literal>Thread safety</literal>), ou sinon, dans le dossier
   <filename class="directory">Release</filename> ou le dossier
   <filename class="directory">Debug</filename>.
  </para>
  <para>
   Optionnellement, vous pouvez vouloir exécuter une suite de tests &php; en tapant
   la commande <command>nmake test</command>. Si vous ne voulez effectuer
   qu'un test précis, vous devez utiliser la variable 'TESTS' (e.g. <command>nmake /D TESTS=ext/sqlite/tests
    test</command> - exécutera que les tests sqlite). Pour effacer les fichiers créés
   pendant la compilation, vous pouvez utiliser la commande <command>nmake
    clean</command>.
  </para>
  <para>
   Une option de configuration vraiement utile pour la construction de snapshots
   est l'option <literal>--enable-snapshot-build</literal>, qui ajoute un nouveau mode
   de compilation (<command>nmake build-snap</command>). Celui-ci tente
   de compiler chaque extension de disponible (en tant que partagée par défaut) en
   ignorant les erreurs de compilation dans les extensions individuelles ou SAPI.
  </para>
 </sect2>

 <sect2 xml:id="install.windows.building.dsw">
  <title>Compilation de &php; en utilisant les fichiers DSW [&php; 4]</title>
  <para>
   La compilation de &php; en utilisant les fichiers DSW n'est plus supportée
   depuis &php; 5 car un <link linkend="install.windows.building.new">système plus
   flexible a été mis à disposition</link>. Malgré tout, vous pouvez continuer à l'utiliser
  mais gardez à l'esprit que ce système n'est plus maintenu régulièrement, vous pourriez
  donc rencontrer des problèmes lors de la compilation. Cependant, pour compiler &php; 4
  sous Windows, il n'y a que ce système de disponible.
  </para>

  <sect3 xml:id="install.windows.building.dsw.configure">
   <title>Configuration de MVC ++</title>
   <para>
    La première étape consiste à la configuration de MVC++ pour la préparation
    à la compilation. Lancez Microsoft Visual C++ et depuis le menu, sélectionnez
    "Tools =&gt; Options". Dans la fenêtre de dialogue, sélectionnez la tabulation
    des dossiers. Séquentiellement, modifier la liste en
    "Executables", "Includes", et "Library files". Votre entrée devrait ressembler à ceci :
    <itemizedlist>
     <listitem>
      <simpara>
       Executable files: <filename
                                  class="directory">C:\work\win32build\bin</filename>, Cygwin users:
       <filename>C:\cygwin\bin</filename>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Include files: <filename
                               class="directory">C:\work\win32build\include</filename>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Library files: <filename
                               class="directory">C:\work\win32build\lib</filename>
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </sect3>

  <sect3 xml:id="install.windows.building.dsw.compile">
   <title>Compilation</title>
   <simpara>
    La meilleure façon de commencer est de compiler la version CGI :
   </simpara>
   <itemizedlist>
    <listitem>
     <simpara>
      Pour les utilisateurs d'interface, lancez VC++, sélectionnez "File =&gt; Open Workspace"
      puis, sélectionnez <filename>C:\work\php-4.x.x\win32\php4ts.dsw</filename>.
      Alors, sélectionnez "Build=&gt;Set Active Configuration" et sélectionnez la configuration
      désirée, soit <literal>php4ts - Win32 Debug_TS</literal>, soit
      <literal>php4ts - Win32 Release_TS</literal>. Et pour finir, sélectionnez
      "Build=&gt;Rebuild All".
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Pour les utilisateurs de la ligne de commande, assurez-vous d'avoir de disponible
      les variables d'environnements C++ ou d'avoir exécuté le fichier
      <command>vcvars.bat</command>, puis, exécutez une des commandes suivantes
      depuis le répertoire <filename class="directory">C:\work\php-4.x.x\win32</filename> :
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        <command>msdev php4ts.dsp /MAKE "php4ts - Win32 Debug_TS"</command>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <command>msdev php4ts.dsp /MAKE "php4ts - Win32 Release_TS"</command>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        À ce stade, vous devez avoir un binaire <filename>php.exe</filename>
        fonctionnel dans le dossier
        <filename class="directory">C:\work\php-4.x.x\Debug_TS</filename> ou dans le sous-dossier
        <filename>Release_TS</filename>.
       </simpara>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
   <simpara>
    Il est possible de faire quelques personnalisations sur le processus de compilation
    en éditant le fichier <filename>main/config.win32.h</filename>. Par exemple,
    vous pouvez modifier le dossier par défaut contenant le &php.ini;, les extensions internes
    et le dossier par défaut de vos extensions.
   </simpara>
   <simpara>
    Puis, vous pourriez vouloir compiler la version CLI qui est destinée à utiliser
    <link linkend="features.commandline">&php; depuis la ligne de commande</link>.
    Les étapes sont les mêmes que pour la compilation de la version CGI, mise à part
    que vous devez sélectionner le fichier de projet <literal>php4ts_cli - Win32 Debug_TS</literal>
    ou <literal>php4ts_cli - Win32 Release_TS</literal>. Après une compilation réussie, vous
    devriez trouver le fichier <filename>php.exe</filename> dans le dossier
    <filename class="directory">Release_TS\cli\</filename> ou dans le dossier
    <filename class="directory">Debug_TS\cli\</filename>.
   </simpara>
   <simpara>
    Pour compiler le module SAPI (<filename>php4isapi.dll</filename>) pour intégrer
    &php; avec Microsoft IIS, définissez votre configuration active à
    <filename>php4isapi-whatever-config</filename> et compilez la bibliothèque dll désirée.
   </simpara>
  </sect3>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
