<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.12 Maintainer: yannick Status: ready -->

<sect1 id="install.windows.building">
 <title>Compilation des sources</title>
 <para>
  Ce chapitre va vous apprendre à compiler &php; depuis les sources sous Windows,
  en utilisant les utilitaires Microsoft. Pour compiler &php; avec Cygwin, référez-vous
  à <xref linkend="install.unix"/>.
 </para>

 <sect2 id="install.windows.building.requirement">
  &reftitle.required;
  <para>
   Pour compiler et construire &php;, vous devez avoir un environnement de développement
   Microsoft Visual C++ 6.0 est recommandé, mais les versions Visual C++ .NET
   fonctionne également. Depuis &php; 5, les utilitaires libres Microsoft .NET sont
   également supportés (vous devez installer Windows Platform SDK, Visual C++ Toolkit et
   .NET Framework SDK).
  </para>
  <para>
   Pour extraire les fichiers téléchargés, vous avez également besoin d'un utilitaire
   d'extraction de fichiers ZIP. Windows XP et supérieur inclut en natif cette fonctionnalité.
  </para>
  <para>
   Avant de commencer, vous devez télécharger :
  </para>
  <itemizedlist>
   <listitem>
    <simpara>
     les utilitaires de compilation win32 depuis le site &php; sur
     <ulink url="&url.win32.buildtools;">&url.win32.buildtools;</ulink>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     le code source pour l'utilitaire de résolution de nom DN utilisé par &php; sur
     <ulink url="&url.win32.dnsresolver;">&url.win32.dnsresolver;</ulink>. C'est un remplacement
     à la bibliothèque <filename>resolv.lib</filename> inclut dans
     <filename>win32build.zip</filename>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Si vous avez prévu de compiler &php; en tant que module Apache, vous devez également
     avoir les <ulink url="&url.apache.source;">sources d'Apache</ulink>.
    </simpara>
   </listitem>
  </itemizedlist>
  <simpara>
   Finalement, vous avez besoin des sources de &php; elles-mêmes. Vous pouvez
   récupérer la dernière version de développement en utilisant
   le <ulink url="&url.php.anoncvs;">CVS anonyme</ulink>, un
   <ulink url="&url.php.snapshots;">snapshot</ulink> ou la version compressée la plus récente
   des <ulink url="&url.php.downloads;">sources</ulink>.
  </simpara>
 </sect2>

 <sect2 id="install.windows.building.install">
  <title>Compiler tout ensemble</title>
  <para>
   Après avoir téléchargés les paquets requis, vous devez les extraire dans un
   endroit approprié :
   <itemizedlist>
    <listitem>
     <simpara>
      Créez un dossier de travail où vous y placerez tous les fichiers décompressés, e.g :
      <filename class="directory">C:\work</filename>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Créez le dossier <filename>win32build</filename> dans votre dossier de
      travail (<filename class="directory">C:\work</filename>) et décompressez
      le fichier <filename>win32build.zip</filename> dans ce dossier.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Créez un dossier <filename>bindlib_w32</filename> dans votre dossier de
      travail (<filename class="directory">C:\work</filename>) et décompressez
      le fichier <filename>bindlib_w32.zip</filename> dans ce dossier.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Décompressez les sources &php; téléchargées dans votre dossier de travail
      (<filename class="directory">C:\work</filename>).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Construisez les bibliothèques dont vous avez besoin (ou téléchargez les binaires
      s'ils sont disponibles) et placez les en-têtes et les bibliothèques respectivement
      dans les dossiers
      <filename class="directory">C:\work\win32build\include</filename> et
      <filename class="directory">C:\work\win32build\lib</filename>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Si vous n'avez pas cygwin d'installé avec bison et flex, vous devez
      aussi rendre le dossier <filename
      class="directory">C:\work\win32build\bin</filename> disponible dans le
      PATH, alors ces outils peuvent être trouvé par le script de
      configuration.
     </simpara>
    </listitem>
   </itemizedlist>
   Si vous avez correctement suivis les étapes précèdentes, vous devez obtenir la structure suivante :
   <screen>
    <![CDATA[
             +--C:\work
             |  |
             |  +--bindlib_w32
             |  |  |
             |  |  +--arpa
             |  |  |
             |  |  +--conf
             |  |  |
             |  |  +--...
             |  |
             |  +--php-5.x.x
             |  |  |
             |  |  +--build
             |  |  |
             |  |  +--...
             |  |  |
             |  |  +--win32
             |  |  |
             |  |  +--...
             |  |
             |  +--win32build
             |  |  |
             |  |  +--bin
             |  |  |
             |  |  +--include
             |  |  |
             |  |  +--lib
             ]]>
   </screen>
  </para>
  <para>
   Si vous utilisez <ulink url="&url.cygwin;">Cygwin</ulink>, vous devez également créer les dossiers
   <filename class="directory">C:\usr\local\lib</filename>, puis copier le fichier
   <filename>bison.simple</filename> depuis
   <filename class="directory">C:\work\win32build\bin </filename> dans le dossier
   <filename class="directory">C:\usr\local\lib</filename>.
  </para>
  <note>
   <simpara>
    Si vous voulez utiliser PEAR ainsi que son installeur en ligne de commande,
    CLI-SAPI est nécessaire. Pour plus d'informations sur PEAR et son installeur,
    lisez la documentation sur le site web de
    <ulink url="&url.php.pear.manual;">PEAR</ulink>.
   </simpara>
  </note>
 </sect2>

 <sect2 id="install.windows.building.resolvlib">
  <title>Construction de resolv.lib</title>
  <para>
   Vous devez construire la bibliothèque <filename>resolv.lib</filename>.
   Décidez si oui ou non vous voulez de disponible les symboles de débogage
   (bindlib - Win32 Debug) ou pas (bindlib - Win32 Release), mais souvenez-vous de
   ce choix, car la construction du débogage ne se lit avec &php; que lorsqu'il est
   également construit en mode débogage.
   Construisez la configuration appropriée :
   <itemizedlist>
    <listitem>
     <simpara>
      Pour les utilisateurs de GUI, lancez VC++ en double-cliquant sur le
      fichier <filename>C:\work\bindlib_w32\bindlib.dsw</filename>. Puis, sélectionnez
      "Build=&gt;Rebuild All".
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Pour les utilisateurs de lignes de commande, assurez-vous d'avoir soit
      les variables d'environnements C++ de disponibles, soit d'avoir exécuté
      <command>vcvars.bat</command>, puis exécutez une des commandes
      suivantes :
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        <command>msdev bindlib.dsp /MAKE "bindlib - Win32 Debug"</command>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <command>msdev bindlib.dsp /MAKE "bindlib - Win32 Release"</command>
       </simpara>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
   À ce point, vous devez avoir une bibliothèque utilisable de <filename>resolv.lib</filename>
   dans le dossier <filename class="directory">C:\work\bindlib_w32\Debug</filename> ou
   dans le sous-dossier <filename>Release</filename>. Copiez ce fichier dans votre dossier
   <filename class="directory">C:\work\win32build\lib</filename> en écrasant le fichier
   portant le même nom.
  </para>
 </sect2>

 <sect2 id="install.windows.building.new">
  <title>Construction de &php; en utilisant le nouveau système de construction [&php; &gt;=5 uniquement]</title>
  <para>
   Ce chapitre explique comment compiler &php; &gt;=5 en utilisant le nouveau
   système de construction, basé sur CLI et extrèmement similaire au système de
   construction Unix pour &php;.
  </para>
  <note>
   <para>
    Ce système de construction n'est pas disponible pour &php; 4. Référez-vous
    plutôt à <xref linkend="install.windows.building.dsw"/>.
   </para>
  </note>
  <para>
   Avant de commencer, assurez-vous d'avoir lu
   <xref linkend="install.windows.building.install"/> et d'avoir construit toutes les bibliothèques
   nécessaire, comme <ulink url="&url.libxml;">Libxml</ulink> ou
   <ulink url="&url.icu;">ICU</ulink> (nécessaire pour &php; &gt;= 6).
  </para>
  <para>
   D'abord, vous devez ouvrir un prompt de commande Visual Studio, qui
   doit être disponible avec le menu Démarrer. Un prompt de commande
   classique ne fonctionnera pas, car il n'aura probablement pas les variables
   d'environnements nécessaires. Puis, tapez quelque chose comme
   <command>cd C:\work\php-5.x.x</command> pour entrer dans le dossier
   contenant les sources de &php;. Maintenant, vous êtes prêt à configurer &php;.
  </para>
  <para>
   La seconde étape consiste à exécuter le fichier <command>buildconf</command>
   afin de lancer le script de configuration, en scannant le dossier à la recherche des fichiers
   <filename>config.w32</filename>. Par défaut, cette commande recherchera également
   dans les dossiers suivants : <filename class="directory">pecl;
    ..\pecl; pecl\rpc; ..\pecl\rpc</filename>. Depuis &php; 5.1.0, vous pouvez changer
   ce comportement en utilisant l'argument <literal>--add-modules-dir</literal>
   (e.g. <command>cscript /nologo win32/build/buildconf.js
    --add-modules-dir=../php-gtk2 --add-modules-dir=../pecl</command>).
  </para>
  <para>
   La troisième étape consiste en la configuration. Pour voir la liste des options de
   configuration, tapez la commande <command>cscript /nologo configure.js
    --help</command>.Après avoir choisies les options à activer ou non, tapez
   quelque chose comme : <command>cscript /nologo configure.js --disable-foo
    --enable-fun-ext</command>. En utilisant l'argument <literal>--enable-foo=shared</literal>,
   vous tenterez de construire l'extension 'foo' en tant que module partagé, dynamiquement
   chargeable.
  </para>
  <para>
   La dernière étape est la compilation. Pour ce faire, entrez simplement la commande
   <command>nmake</command>. Les fichiers générés (e.g. .exe et .dll) seront
   placés soit dans le dossier <filename class="directory">Release_TS</filename>,
   soit dans le dossier <filename class="directory">Debug_TS</filename> (si
   vous avez compilé avec le <literal>Thread safety</literal>), ou sinon, dans le dossier
   <filename class="directory">Release</filename> ou le dossier
   <filename class="directory">Debug</filename>.
  </para>
  <para>
   Optionnellement, vous pouvez vouloir exécuter une suite de test &php; en tapant
   la commande <command>nmake test</command>. Si vous ne voulez effectuer
   qu'un test précis, vous devez utiliser la variable 'TESTS' (e.g. <command>nmake /D TESTS=ext/sqlite/tests
    test</command> - exécutera que les tests sqlite). Pour effacer les fichiers créés
   pendant la compilation, vous pouvez utiliser la commande <command>nmake
    clean</command>.
  </para>
  <para>
   Une option de configuration vraiement utile pour la construction de snapshots
   est l'option <literal>--enable-snapshot-build</literal>, qui ajoute un nouveau mode
   de compilation (<command>nmake build-snap</command>). Celui-ci tente
   de compiler chaque extension de disponible (en tant que partagé par défaut) en
   ignornant les erreurs de compilation dans les extensions individuelles ou SAPI.
  </para>
 </sect2>

 <sect2 id="install.windows.building.dsw">
  <title>Compilation de &php; en utilisant les fichiers DSW [&php; 4]</title>
  <para>
   La compilation de &php; en utilisant les fichiers DSW n'est plus supportée
   depuis &php; 5 car un <link linkend="install.windows.building.new">système plus
   flexible a été mis à disposition</link>. Malgré tout, vous pouvez continuer à l'utiliser
  mais gardez à l'esprit que ce système n'est plus maintenu régulièrement, vous pourriez
  donc rencontrer des problèmes lors de la compilation. Cependant, pour compiler &php; 4
  sous Windows, il n'y a que ce système de disponible.
  </para>

  <sect3 id="install.windows.building.dsw.configure">
   <title>Configuration de MVC ++</title>
   <para>
    La première étape consiste à la configuration de MVC++ pour la préparation
    à la compilation. Lancez Microsoft Visual C++ et depuis le menu, sélectionnez
    "Tools =&gt; Options". Dans la fenêtre de dialogue, sélectionnez la tabulation
    des dossiers. Séquentiellement, modifier la liste en
    "Executables", "Includes", et "Library files". Votre entrée devrait ressembler à ceci :
    <itemizedlist>
     <listitem>
      <simpara>
       Executable files: <filename
                                  class="directory">C:\work\win32build\bin</filename>, Cygwin users:
       <filename>C:\cygwin\bin</filename>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Include files: <filename
                               class="directory">C:\work\win32build\include</filename>
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Library files: <filename
                               class="directory">C:\work\win32build\lib</filename>
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </sect3>

  <sect3 id="install.windows.building.dsw.compile">
   <title>Compilation</title>
   <simpara>
    La meilleure façon de commencer est de compiler la version CGI :
   </simpara>
   <itemizedlist>
    <listitem>
     <simpara>
      Pour les utilisateurs d'interface, lancez VC++, sélectionnez "File =&gt; Open Workspace"
      puis, sélectionnez <filename>C:\work\php-4.x.x\win32\php4ts.dsw</filename>.
      Alors, sélectionnez "Build=&gt;Set Active Configuration" et sélectionnez la configuration
      désirée, soit <literal>php4ts - Win32 Debug_TS</literal>, soit
      <literal>php4ts - Win32 Release_TS</literal>. Et pour finir, sélectionnez
      "Build=&gt;Rebuild All".
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Pour les utilisateurs de la ligne de commande, assurez-vous d'avoir de disponible
      les variables d'environnements C++ ou d'avoir exécuté le fichier
      <command>vcvars.bat</command>, puis, exécutez une des commandes suivantes
      depuis le répertoire <filename class="directory">C:\work\php-4.x.x\win32</filename> :
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        <command>msdev php4ts.dsp /MAKE "php4ts - Win32 Debug_TS"</command>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <command>msdev php4ts.dsp /MAKE "php4ts - Win32 Release_TS"</command>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        À ce stade, vous devez avoir un binaire <filename>php.exe</filename>
        fonctionnel dans le dossier
        <filename class="directory">C:\work\php-4.x.x\Debug_TS</filename> ou dans le sous-dossier
        <filename>Release_TS</filename>.
       </simpara>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
   <simpara>
    Il est possible de faire quelques personnalisations sur le processus de compilation
    en éditant le fichier <filename>main/config.win32.h</filename>. Par exemple,
    vous pouvez modifier le dossier par défaut contenant le &php.ini;, les extensions internes
    et le dossier par défaut de vos extensions.
   </simpara>
   <simpara>
    Puis, vous pourriez vouloir compiler la version CLI qui est destiné à utiliser
    <link linkend="features.commandline">&php; depuis la ligne de commande</link>.
    Les étapes sont les mêmes que pour la compilation de la version CGI, mise à part
    que vous devez sélectionner le fichier de projet <literal>php4ts_cli - Win32 Debug_TS</literal>
    ou <literal>php4ts_cli - Win32 Release_TS</literal>. Après une compilation réussie, vous
    devriez trouver le fichier <filename>php.exe</filename> dans le dossier
    <filename class="directory">Release_TS\cli\</filename> ou dans le dossier
    <filename class="directory">Debug_TS\cli\</filename>.
   </simpara>
   <simpara>
    Pour compiler le module SAPI (<filename>php4isapi.dll</filename>) pour intégrer
    &php; avec Microsoft IIS, définissez votre configuration active à
    <filename>php4isapi-whatever-config</filename> et compilez la bibliothèque dll désirée.
   </simpara>
  </sect3>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
