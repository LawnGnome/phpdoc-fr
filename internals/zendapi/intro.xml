<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.1 Maintainer: yannick Status: ready -->
<sect1 id="zend.intro">
 <title>Introduction</title>
 <abstract>
  <para>Ceux qui savent ne parlent pas.</para>
  <para>Ceux qui parlent ne savent pas.</para>
 </abstract>

 <para>
  Parfois, &php; est simplement "pas assez". Bien que ces cas sont rares pour
  les utilisateurs habituels, les applications professionnelles poussent rapidement
  &php; dans ces derniers retranchements, en terme de rapidité ou de fonctionnalité.
  De nouvelles fonctionnalités ne peuvent pas toujours être implémentées
  nativement à cause des restrictions du langage et des inconvénients
  qu'une bibliothèque supplémentaire au code par défaut apporte au script
  simple, donc, une autre méthode doit être trouvée pour combler ces éventuels
  défauts de &php;.
 </para> 
 <para>
  À ce moment là, il est temps de toucher au coeur de &php; et regarder
  en son corps, le code C dont &php; est fait.
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
