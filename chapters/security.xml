 <chapter id="security">
  <title>S&eacute;curit&eacute;</title>

  <simpara>
	PHP est un langage puissant et l'interpr&eacute;teur, qu'il soit inclus dans le 
	serveur web ou bien compil&eacute; en version CGI, est capable d'acc&eacute;der aux fichiers, 
	d'ex&eacute;cuter des commandes et d'ouvrir des connexions r&eacute;seaux. 
	Toutes ces propri&eacute;t&eacute;s rendent fragilise la s&eacute;curit&eacute; d'un serveur web. 
	Le langage PHP a &eacute;t&eacute; pens&eacute; afin d'&ecirc;tre un langage beaucoup plus s&eacute;curis&eacute; pour 
	&eacute;crire des <acronym>CGI</acronym> que le Perl ou le langage C. De plus une 
	s&eacute;lection rigoureuse des options de compilation et d'ex&eacute;cution vous permettront 
	d'obtenir un &eacute;quilibre parfait entre libert&eacute; et s&eacute;curit&eacute;.
  </simpara>
  <simpara>
	Etant donn&eacute; qu'il y a de nombreux moyens d'utiliser le langage PHP, 
	il y a de nombreuses directives de configuration afin d'en contr&ocirc;ler 
	le comportement. Un grand nombre d'options permettent d'utiliser le PHP 
	dans de nombreuses situations, mais cela signifie aussi qu'il y a certaines 
	combinaisons d'options de compilation et d'ex&eacute;cution qui fragilise la s&eacute;curit&eacute; 
	du serveur. Ce chapitre explique comme les diff&eacute;rentes options de configurations 
	peuvent &ecirc;tre combin&eacute;es, tout en conservant une s&eacute;curit&eacute; maximum.
  </simpara>

  <sect1 id="security.cgi">
   <title>CGI binary</title>

   <sect2 id="security.cgi.attacks">
    <title>Faiblesses connues</title>
    <simpara>
	Utiliser le PHP comme un <acronym>CGI</acronym> ex&eacute;cutable vient la plupart 
	du temps du fait que l'on ne veut pas l'utiliser comme un module du serveur web, 
	(comme Apache), ou bien que l'on souhaite l'utiliser en combinaison d'un 
	<acronym>CGI</acronym> compl&eacute;mentaire, afin de cr&eacute;er un environnement de script 
	s&eacute;curis&eacute; (en utilisant des techniques de chroot ou setuid). Une telle d&eacute;cision 
	signifie habituellement que vous installez votre ex&eacute;cutable dans le r&eacute;pertoire 
	cgi-bin de votre serveur web. <ulink url="&url.cert;">CERT CA-96.11</ulink> 
	recommande effectivement de placer l'interpr&eacute;teur &agrave; l'int&eacute;rieur du r&eacute;pertoire 
	cgi-bin. M&ecirc;me si le binaire PHP peut &ecirc;tre utilis&eacute; comme interpr&eacute;teur ind&eacute;pendant, 
	PHP a &eacute;t&eacute; pens&eacute; afin de rendre impossible les attaques que ce type 
	d'installation induit.
    </simpara>
    <itemizedlist>
     <listitem>
      <simpara>
       Acc&egrave;s au syst&egrave;me de fichier: <filename role="url">http://ma.machine/cgi-bin/php?/etc/passwd</filename>
      </simpara>
      <simpara>
	Lorsque la requ&ecirc;te est pass&eacute;e dans une url, apr&egrave;s le point d'interrogation (?),
	elle est envoy&eacute;e &agrave; l'interpr&eacute;teur comme une ligne de commande par l'interface 
	CGI. Habituellement, l'interpr&eacute;teur ouvre le fichier sp&eacute;cifi&eacute; et l'ex&eacute;cute.
      </simpara>
      <simpara>
	Lorsqu'il est invoqu&eacute; comme ex&eacute;cutable CGI, le PHP refuse d'interpr&eacute;ter les 
	arguments de la ligne de commande.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Acc&egrave;s d'un document web sur le serveur : <filename role="url">http://my.host/cgi-bin/php/secret/doc.html</filename>
      </simpara>
      <simpara>
	Le "path information" dans l'url, situ&eacute; juste apr&egrave;s le nom du binaire PHP, 
  <filename role="uri">/secret/doc.html</filename> est utilis&eacute; par convention 
pour sp&eacute;cifier le nom du fichier qui doit &ecirc;tre ouvert et interpr&eacute;t&eacute; par le programe <acronym>CGI</acronym>.
Habituellement, des directives de configuration du serveur web 
(pour le serveur Apache: Action) sont utilis&eacute;es pour rediriger les requ&ecirc;tes pour 
obtenir un document <filename
       role="url">http://my.host/secret/script.php3</filename> par l'interpr&eacute;teur PHP.
 Dans une telle configuration, le serveur web v&eacute;rifie d'abord si il a acc&egrave;s au 
r&eacute;pertoire <filename role="uri">/secret</filename>, 
et apr&egrave;s cette v&eacute;rification redirige la requ&ecirc;te vers 
<filename role="url">http://my.host/cgi-bin/php/secret/script.php3</filename>. 
Malheureusement, si la requ&ecirc;te 
est faite directement sous cette forme, aucune v&eacute;rification d'acc&egrave;s n'est faite
 par le serveur web pour le fichier <filename role="uri">/secret/script.php3</filename>, mais uniquement pour le 
fichier <filename role="uri">/cgi-bin/php</filename>. De cette mani&egrave;re, n'importe quel utilisateur qui peut 
acc&eacute;der au fichier <filename role="uri">/cgi-bin/php</filename> peut aussi acc&eacute;der au document prot&eacute;g&eacute;s sur 
le serveur web.
      </simpara>
      <simpara>
Avec le PHP, l'option de compilation <link
       linkend="enable-force-cgi-redirect">--enable-force-cgi-redirect</link> et 
les options d'ex&eacute;cution <link
       linkend="ini.doc-root">doc_root</link> et <link
       linkend="ini.user-dir">user_dir</link> peuvent &ecirc;tre utilis&eacute;es pour pr&eacute;venir ce genre d'attaques, si des 
restrictions d'acc&egrave;s sont appliqu&eacute;es sur les documents du serveur. Voir ci-dessous 
pour des explications plus compl&egrave;tes sur les diff&eacute;rentes combinaisons.
      </simpara>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 id="security.cgi.default">
    <title>Cas 1: Tous les fichiers sont publics</title>

    <simpara>
Si votre serveur n'a aucun document dont l'acc&egrave;s est restreint par un mot de passe ou un syst&egrave;me 
de v&eacute;rification de l'adresse IP, vous n'avez aucun besoin de ce type de configuration. Si votre 
serveur web ne permet pas les redirections, ou si votre serveur web n'a aucun besoin de communiquer 
avec le binaire PHP de mani&egrave;re s&eacute;curis&eacute;e, vous pouvez utiliser l'option de compilation 
<link
     linkend="enable-force-cgi-redirect">--disable-force-cgi-redirect</link>.
 Vous devez quand m&ecirc;me v&eacute;rifier qu'aucun script ne fait appel 
au PHP, de mani&egrave;re directe, <filename
     role="php">http://my.host/cgi-bin/php/dir/script.php3</filename> ou bien de mani&egrave;re 
indirecte, par redirection,<filename
     role="php">http://my.host/dir/script.php3</filename>.
    </simpara>
    <simpara>
Les redirections peuvent &ecirc;tre configur&eacute;es dans les fichiers de configuration 
d'Apache en utilisant les directives "AddHandler" et "Action" (voir ci-dessous).
    </simpara>
   </sect2>
      
   <sect2 id="security.cgi.force-redirect">
    <title>Cas 2: Utilisation de la directive de compilation --enable-force-cgi-redirect</title>
    <simpara>
Cette option de compilation pr&eacute;vient quiconque d'appeler directement un script 
avec l'url <filename
     role="php">http://my.host/cgi-bin/php/secretdir/script.php3</filename>. 
Dans ce cas l&agrave;, PHP parsera le fichier uniquement si il y a eu redirection.
    </simpara>
    <simpara>
Habituellement, le serveur web Apache r&eacute;alise une redirection grâce aux directives suivantes :
    </simpara>
    <programlisting role="apache-conf">
Action php3-script /cgi-bin/php
AddHandler php3-script .php3
    </programlisting>
    <simpara>
Cette option a uniquement &eacute;t&eacute; test&eacute;e avec Apache et compte sur Apache pour affecter
 la variable d'environnement non-standart <envar>REDIRECT_STATUS</envar>
 pour les requ&ecirc;tes redirig&eacute;es. Dans le cas o&uacute; votre serveur web ne supporte pas
 le renseignement du PHP, pour savoir si la requ&ecirc;te a &eacute;t&eacute; redirig&eacute;e ou non, 
vous ne pouvez pas utiliser cette option de compilation. Vous devez alors utiliser 
une des autres mani&egrave;res pour utiliser la version binaire CGI du PHP, comme expos&eacute; ci-dessous.
    </simpara>
   </sect2>
      
   <sect2 id="security.cgi.doc-root">
    <title>Cas 3: Utilisation du "doc_root" ou du "user_dir"</title>
    <simpara>
 Ajouter un contenu interactif dans votre serveur web, comme des scripts ou des ex&eacute;cutables, est souvent consid&eacute;r&eacute; comme une pratique non-s&eacute;curis&eacute;e. Si, par erreur, le script n'est pas ex&eacute;cut&eacute; mais affich&eacute; comme une page HTML classique, il peut en r&eacute;sulter un vol de propri&eacute;t&eacute; intellectuelle ou des probl&egrave;mes de s&eacute;curit&eacute; &agrave; propos des mots de passe notamment. Donc, la plupart des administrateurs pr&eacute;f&egrave;rent mettre en place un r&eacute;pertoire sp&eacute;cial pour les scripts qui est uniquement accessible par le biais du binaire CGI du PHP, et donc, tous les fichiers de ce r&eacute;pertoire seront interpr&eacute;t&eacute;s et non affich&eacute;s tels quel.
    </simpara>
    <simpara>
Aussi, si vous ne pouvez pas utiliser la m&eacute;thode pr&eacute;sent&eacute;e ci-dessus, il est n&eacute;cessaire de mettre en place un r&eacute;pertoire "doc_root" diff&eacute;rent de votre r&eacute;pertoire "document root" de votre serveur web.
    </simpara>
    <simpara>
Vous pouvez utiliser la directive <link linkend="ini.doc-root">doc_root</link> dans le <link linkend="configuration.file">fichier de configuration</link>, ou vous 
pouvez affecter la variable d'environnement  <envar>PHP_DOCUMENT_ROOT</envar>. Si cette variable d'environnement 
est affect&eacute;e, le binaire <acronym>CGI</acronym> du PHP construira toujours le nom de fichier &agrave; ouvrir avec <parameter>doc_root</parameter>
 et le "path information" de la requ&ecirc;te, et donc vous serez s&ucirc;r qu'aucun script n'est ex&eacute;cut&eacute; 
en dehors du r&eacute;pertoire pr&eacute;d&eacute;finit. (&agrave; l'exception du r&eacute;pertoire d&eacute;sign&eacute; par la directive <parameter>user_dir</parameter> Voir ci-dessous).
    </simpara>
    <simpara>
Une autre option possible ici est la directive <link
     linkend="ini.user-dir">user_dir</link>. Lorsque la directive n'est pas activ&eacute;e,
 seulement les fichiers contenues dans le r&eacute;pertoire <parameter>doc_root</parameter> peuvent &ecirc;tre ouverts. 
Ouvrir un fichier poss&eacute;dant l'url <filename
     role="url">http://my.host/~user/doc.php3</filename> ne correspond pas 
&agrave; l'ouverture d'un fichier sous le r&eacute;pertoire racine de l'utilisateur mais &agrave; 
l'ouverture du fichier <filename role="uri">~user/doc.php3</filename> sous le repertoire 
"doc_root" (oui, un r&eacute;pertoire comment par un tilde [<literal>~</literal>]).
    </simpara>      
    <simpara>
Si la directive "user_dir" est activ&eacute;e &agrave; la valeur <filename
     role="dir">public_php</filename> par exemple, 
une requ&ecirc;te du type <filename
     role="url">http://my.host/~user/doc.php3</filename> ouvrira un fichier appel&eacute; 
<filename>doc.php3</filename> sous le r&eacute;pertoire appel&eacute; <filename role="dir">public_php</filename>
 sous le r&eacute;pertoire racine de l'utilisateur.
 Si le r&eacute;pertoire racine des utilisateurs est <filename
     role="dir">/home/user</filename>, le fichier ex&eacute;cut&eacute; sera <filename>/home/user/public_php/doc.php3</filename>.
    </simpara>
    <simpara>
 <parameter>user_dir</parameter> et <parameter>doc_root</parameter> sont deux directives totalement 
ind&eacute;pendantes et donc vous pouvez contr&ocirc;ler l'acc&egrave;s au r&eacute;pertoire 
"document root" s&eacute;par&eacute;ment des r&eacute;pertoires "user directory".
    </simpara>
   </sect2>
      
   <sect2 id="security.cgi.shell">
    <title>Cas 4: L'ex&eacute;cutable PHP &agrave; l'ext&eacute;rieur de l'arborescence du serveur</title>
    <para>
 Une solution extr&ecirc;mement s&eacute;curis&eacute;e consiste &agrave; mettre l'ex&eacute;cutable PHP &agrave; l'ext&eacute;rieur 
de l'arborescence du serveur web. Dans le r&eacute;pertoire <filename
     role="dir">/usr/local/bin</filename>, 
par exemple. Le probl&egrave;me de cette m&eacute;thode est que vous aurez &agrave; rajouter la ligne suivante :
     <informalexample>
      <programlisting>
#!/usr/local/bin/php
      </programlisting>
     </informalexample>
 dans tous les fichiers contenant des tags PHP. Vous devrez aussi rendre le binaire PHP ex&eacute;cutable. Dans ce cas-l&agrave;, traitez le fichier exactement comme si vous aviez un autre script &eacute;crit en Perl ou en sh ou en un autre langage de script qui utilise <literal>#!</literal> comme m&eacute;canisme pour lancer l'interpr&eacute;teur lui-m&ecirc;me.
     itself.
    </para>
    <para>
Pour que l'ex&eacute;cutable PHP prenne en compte les variables d'environnement 
<envar>PATH_INFO</envar> et
     <envar>PATH_TRANSLATED</envar> correctement avec cette configuration, 
vous devez utiliser l'option de compilation <link
     linkend="enable-discard-path">--enable-discard-path</link>.
    </para>
   </sect2>
  
  </sect1>

  <sect1 id="security.apache">
   <title>Module Apache</title>
   <simpara>
Lorsque le PHP est compil&eacute; en tant que module Apache, ce module h&eacute;rite des permissions accord&eacute;es &agrave; l'utilisateur faisant tourner Apache ( par d&eacute;faut, l'utilisateur "noboby"). 
   </simpara>
  </sect1>
    
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
