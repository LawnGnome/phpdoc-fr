<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
 <reference id="ref.mhash">
  <title>Hash</title>
  <titleabbrev>mhash</titleabbrev>
  <partintro>
   <para>
    Ces fonctions ont &eacute;t&eacute; pr&eacute;vues pour fonctionner avec
    <ulink url="&url.mhash;">mhash</ulink>.
  </para>
   <para>
    Cet ensemble de fonctions repr&eacute;sente une interface avec la librairie mhash.
    mhash accepte un grand nombre d'algorithmes diff&eacute;rents, tels que MD5,
    SHA1, GOST, bien d'autres.
   </para>
   <para>
    Pour l'utiliser, t&eacute;l&eacute;chargez les distributions de mhash depuis
    le site <ulink url="&url.mhash;">web ici</ulink> et suivez les instructions
    d'installation incluses. Vous aurez besoin de recompiler PHP avec l'option
    <link linkend="install.configure.with-mhash"><option role="configure">--with-mhash</option></link>
    pour activer cette extension.
   </para>
   <para>
     mhash sert &agrave; calculer des sommes de v&eacute;rification, des
     signatures de message, etc...
   </para>
   <para>
    <example>
     <title>
       Calcule un hash de type SHA1 et l'affiche au format hexad&eacute;cimal
     </title>
     <programlisting role="php">
&lt;?php
  $input = "Rencontrons-nous &agrave; 9h00 dans notre repaire secret.";
  $hash = mhash(MHASH_SHA1, $input);
  print "Le hash est ".bin2hex($hash)."\n";
?&gt;
     </programlisting>
    </example>
    Cela va produire quelque chose du type
    (Note du Traducteur : c'est le hash de la version anglaise)
    <computeroutput>
Le hash est d3b85d710d8f6e4e5efd4d5e67d041f9cecedafe
    </computeroutput>
    Pour avoir une liste compl&egrave;te des hash support&eacute;s, reportez-vous
    &agrave; la documentation de mhash. En r&egrave;gle g&eacute;n&eacute;rale,
    vous pouvez utiliser un algorithme de hash avec le type : MHASH_NOMDEHASH. Par
    exemple pour utiliser HAVAL vous devez sp&eacute;cifier la constante PHP
    MHASH_HAVAL.
  </para>
   <para>
    Voici une liste de hash qui sont actuellement support&eacute;s par mhash. Si
    un hash n'est pas dans la liste, mais qu'il est disponible avec mhash, c'est
    que ce document a pris de l'&acirc;ge.
    <itemizedlist>
     <listitem>
      <simpara>
       MHASH_MD5
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_SHA1
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_HAVAL
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_RIPEMD160
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_RIPEMD128
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_SNEFRU
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_TIGER
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_GOST
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_CRC32
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MHASH_CRC32B
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
  </partintro>
  <refentry id="function.mhash-get-hash-name">
   <refnamediv>
    <refname>mhash_get_hash_name</refname>
    <refpurpose>Retourne le nom du hash.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
       <type>string</type><methodname>mhash_get_hash_name</methodname>
       <methodparam><type>int</type><parameter>hash</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mhash_get_hash_name</function> sert &agrave; conna&icirc;tre le
     nom d'un hash.
    </para>
    <para>
     <function>mhash_get_hash_name</function> prend un numero d'identifiant de
     hash, et retourne son nom, ou bien &false; si le hash n'existe pas, ou si
     une erreur est survenue.
    </para>
    <para>
     <example>
      <title>exemple <function>mhash_get_hash_name</function></title>
      <programlisting role="php">
&lt;?php
  $hash = MHASH_MD5;
  print mhash_get_hash_name($hash);
?&gt;
      </programlisting>
     </example>
     L'exemple ci-dessus va afficher :
     <computeroutput>
MD5
     </computeroutput>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mhash-get-block-size">
   <refnamediv>
    <refname>mhash_get_block_size</refname>
    <refpurpose>Retourne la taille de bloc du hash.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
     <type>int</type><methodname>mhash_get_block_size</methodname>
     <methodparam><type>int</type><parameter>hash</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mhash_get_block_size</function> sert &agrave; conna&icirc;tre la
     taille de bloc du hash sp&eacute;cifi&eacute; <parameter>hash</parameter>.
    </para>
    <para>
     <function>mhash_get_block_size</function> prend un seul argument : le
     <parameter>hash</parameter> et retourne la taille en octets, ou bien &false;
     si le <parameter>hash</parameter> n'existe pas.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mhash-count">
   <refnamediv>
    <refname>mhash_count</refname>
    <refpurpose>retourne l'identifiant maximal de hash.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
     <type>int</type><methodname>mhash_count</methodname>
     <void/>
     </methodsynopsis>
    <para>
     <function>mhash_count</function> retourne l'identifiant de hash maximal.
     Les hash sont num&eacute;rot&eacute;s de 0 jusqu'&agrave; cet identifiant.
    </para>
    <para>
     <example>
      <title>Parcourir la liste des hash</title>
      <programlisting role="php">
&lt;?php
  $nr = mhash_count();
  for($i = 0; $i &lt;= $nr; $i++) {
    echo sprintf("The blocksize of %s is %d\n",
            mhash_get_hash_name($i),
            mhash_get_block_size($i));
  }
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mhash">
   <refnamediv>
    <refname>mhash</refname>
    <refpurpose>Calcule un hash.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
     <type>string</type><methodname>mhash</methodname>
     <methodparam><type>int</type><parameter>hash</parameter></methodparam>
     <methodparam><type>string</type><parameter>data</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mhash</function> applique la fonction de hash
     <parameter>hash</parameter> aux donn&eacute;es <parameter>data</parameter>
     et retourne le r&eacute;sultat.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mhash_keygen_s2k">
   <refnamediv>
    <refname>mhash_keygen_s2k</refname>
    <refpurpose>G&eacute;n&egrave;re une cl&eacute;</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
       <type>string</type><methodname>mhash_keygen_s2k</methodname>
       <methodparam><type>int</type><parameter>hash</parameter></methodparam>
       <methodparam><type>string</type><parameter>password</parameter></methodparam>
       <methodparam><type>string</type><parameter>salt</parameter></methodparam>
       <methodparam><type>int</type><parameter>bytes</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mhash_keygen_s2k</function> g&eacute;n&egrave;re une cl&eacute; de
     <parameter>bytes</parameter> octets de long, &agrave; partir d'un mot de
     passe. Cette fonction utilise l'algorithme Salted S2K, sp&eacute;cifi&eacute;
     dans OpenPGP (RFC 2440). Cet algorithme va utiliser l'algorithme de
     hashage <parameter>hash</parameter> pour cr&eacute;er la cl&eacute;.
     Le param&egrave;tre <parameter>salt</parameter> doit &ecirc;tre diff&eacute;rent
     et suffisamment al&eacute;atoire pour chaque cl&eacute; que vous
     g&eacute;n&egrave;rez, afin de cr&eacute;er des cl&eacute;s
     diff&eacute;rentes. Ce grain de sel r&eacute;servira lorsque vous v&eacute;rifierez
     les cl&eacute;s : c'est alors une bonne id&eacute;e que de l'ajouter
     &agrave; la fin de la cl&eacute; g&eacute;n&eacute;r&eacute;e.
     <parameter>salt</parameter> doit avoir la longueur de 8 octets, et
     sera compl&eacute;t&eacute; par des 0 si vous ne fournissez
     par suffisamment de donn&eacute;es. N'oubliez pas que les mots de passe
     fournis par les utilisateurs ne sont pas conseill&eacute; pour faire des
     cl&eacute;s cryptographique, &eacute;tant donn&eacute; que les
     utilisateurs normaux retiennent des mots de passe qu'ils peuvent
     saisir au clavier. Ces mots de passe utilisent uniquement 6 &agrave;
     7 des 8 bits d'un caract&egrave;re (voir moins). Il est vivement
     recommand&eacute; d'appliquer une fonction de transformation (comme celle-ci),
     &agrave; un mot de passe utilisateur.
    </para>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

