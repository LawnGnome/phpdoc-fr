<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
 <reference id="ref.pcntl">
  <title>Contr&ocirc;le des processus</title>
  <titleabbrev>PCNTL</titleabbrev>
  <partintro>
   <para>
    Le gestionnaire de contr&ocirc;le des processus n'est pas activ&eacute; par d&eacute;faut.
    Il faut utiliser l'option de configuration
    <link linkend="install.configure.enable-pcntl">--enable-pcntl</link>
    lors de la compilation de PHP pour l'activer.
   </para>
   <para>
    La liste suivante rassemble tous les signaux qui sont actuellement
    support&eacute;s par les fonctions de gestion des processus de PHP. Reportez
    vous &agrave; votre manuel pour plus de d&eacute;tails sur les comportements de ces
    signaux.
   <table>
    <title>Signaux support&eacute;s</title>
    <tgroup cols="2">
     <tbody>
      <row>
       <entry><literal>SIG_IGN</literal></entry>
       <entry><literal>SIGFPE</literal></entry>
       <entry><literal>SIGCONT</literal></entry>
      </row>
      <row>
       <entry><literal>SIG_DFL</literal></entry>
       <entry><literal>SIGKILL</literal></entry>
       <entry><literal>SIGSTOP</literal></entry>
      </row>
      <row>
       <entry><literal>SIG_ERR</literal></entry>
       <entry><literal>SIGUSR1</literal></entry>
       <entry><literal>SIGTSTP</literal></entry>
      </row>
      <row>
       <entry><literal>SIGHUP</literal></entry>
       <entry><literal>SIGUSR2</literal></entry>
       <entry><literal>SIGTTIN</literal></entry>
      </row>
      <row>
       <entry><literal>SIGINT</literal></entry>
       <entry><literal>SIGSEGV</literal></entry>
       <entry><literal>SIGTTOU</literal></entry>
      </row>
      <row>
       <entry><literal>SIGQUIT</literal></entry>
       <entry><literal>SIGPIPE</literal></entry>
       <entry><literal>SIGURG</literal></entry>
      </row>
      <row>
       <entry><literal>SIGILL</literal></entry>
       <entry><literal>SIGALRM</literal></entry>
       <entry><literal>SIGXCPU</literal></entry>
      </row>
      <row>
       <entry><literal>SIGTRAP</literal></entry>
       <entry><literal>SIGTERM</literal></entry>
       <entry><literal>SIGXFSZ</literal></entry>
      </row>
      <row>
       <entry><literal>SIGABRT</literal></entry>
       <entry><literal>SIGSTKFLT</literal></entry>
       <entry><literal>SIGVTALRM</literal></entry>
      </row>
      <row>
       <entry><literal>SIGIOT</literal></entry>
       <entry><literal>SIGCHLD</literal></entry>
       <entry><literal>SIGPROF</literal></entry>
      </row>
      <row>
       <entry><literal>SIGBUS</literal></entry>
       <entry><literal>SIGCLD</literal></entry>
       <entry><literal>SIGWINCH</literal></entry>
      </row>
      <row>
       <entry><literal>SIGPOLL</literal></entry>
       <entry><literal>SIGIO</literal></entry>
       <entry><literal>SIGPWR</literal></entry>
      </row>
      <row>
       <entry><literal>SIGSYS</literal></entry>
       <entry><literal></literal></entry>
       <entry><literal></literal></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   </para>


   <sect1 id="pcntl-example">
    <title>Exemple de contr&ocirc;le de processus</title>
    <para>
     Cet exemple effectue un fork du processus d&eacute;mon gr&acirc;ce &agrave; un gestionnaire de
     signaux.
    </para>
    <example>
     <title>Process Control Example</title>
     <programlisting role="php">
&lt;?php
  $pid = pcntl_fork();
  if ($pid == -1) {
     die("could not fork"); 
  } else if ($pid) {
     exit(); // we are the parent 
  } else {
     // we are the child
  }

// detatch from the controlling terminal
  if (!posix_setsid()) {
    die("could not detach from terminal");
  }

// setup signal handlers
  pcntl_signal(SIGTERM, "sig_handler");
  pcntl_signal(SIGHUP, "sig_handler");

// loop forever performing tasks
  while(1) {
    // do something interesting here
}

function sig_handler($signo) {
     switch($signo) {
         case SIGTERM:
             // handle shutdown tasks
             exit;
             break;
         case SIGHUP:
             // handle restart tasks
             break;
         default:
             // handle all other signals
     }
}
?&lt;
     </programlisting>
    </example>
   </sect1>
  </partintro>
 <refentry id="function.pcntl-fork">
  <refnamediv>
   <refname>pcntl_fork</refname>
   <refpurpose>Forks the currently running process</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>pcntl_fork</function></funcdef>
     <void/>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>pcntl_fork</function> cr&eacute;e un processus fils, qui ne diff&egrave;re du
    processus p&egrave;re que par l'identifiant de processus et l'identifiant
    PPID. Reportez vous &agrave; la page de man fork(2) pour avoir des d&eacute;tails
    sur le comportement de cette fonction sur votre syst&egrave;me.
   </para>
   <para>
    En cas de succ&egrave;s, le PID (identifiant de processus) du fils est retourn&eacute;
    dans le processus p&egrave;re, et 0 est retourn&eacute; dans le processus fils. En cas 
    d'&eacute;chec, -1 est retourn&eacute; dans le contexte du p&egrave;re, aucun processu fils ne
    sera cr&eacute;&eacute; et PHP l&egrave;vera une erreur.
   </para>
   <para>
    Voir aussi 
    <function>pcntl_waitpid</function> et
    <function>pcntl_signal</function>.
   </para>
  </refsect1>
 </refentry>

 <refentry id="function.pcntl-signal">
  <refnamediv>
   <refname>pcntl_signal</refname>
   <refpurpose>Installe un gestionnaire de signaux</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>pcntl_signal</function></funcdef>
     <paramdef>int <parameter>signo</parameter></paramdef>
     <paramdef>mixed <parameter>handle</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>pcntl_signal</function> installe un nouveau gestionnaire
    de signaux opur le signal indiqu&eacute; par le param&egrave;tre 
    <parameter>signo</parameter>.  Le gestionnaire de signaux est affect&eacute;
    &agrave; <parameter>handler</parameter> qui peut &ecirc;tre le nom d'une fonction
    utilisateur, ou bien l'une des deux constantes globales
    <constant>SIG_IGN</constant> et <constant>SIG_DFL</constant>.
   </para>
   <para>
    <function>pcntl_signal</function> retourne &true; en cas de
    succ&egrave;s et &false; en cas d'&eacute;chec.
   </para>
   <para>
    Voir aussi 
    <function>pcntl_fork</function> et
    <function>pcntl_waitpid</function>.
   </para>
  </refsect1>
 </refentry>

 <refentry id="function.pcntl-waitpid">
  <refnamediv>
   <refname>pcntl_waitpid</refname>
   <refpurpose>Attend la fin de l'ex&eacute;cution d'un processus fils</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>pcntl_waitpid</function></funcdef>
     <paramdef>int <parameter>pid</parameter></paramdef>
     <paramdef>int <parameter>status</parameter></paramdef>
     <paramdef>int <parameter>options</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>pcntl_waitpid</function> suspend l'ex&eacute;cution du processus
    courant jusqu'&agrave; ce que un processus fils sp&eacute;cifi&eacute; par le param&egrave;tre
    <parameter>pid</parameter> ait termin&eacute;, ou bien qu'un signal ait mis
    fin &agrave; ce processus ou qu'un signal ait appel&eacute; un gestionnaire de signaux.
    Si le processus fils identifi&eacute; par <parameter>pid</parameter> est d&eacute;j&agrave;
    termin&eacute; au moment de l'appel de cette fonction (on les appelle
    des processus "zombie"), la fonction se termine imm&eacute;diatement.
    Toute ressource syst&egrave;me utilis&eacute; par le processus fils est lib&eacute;r&eacute;e.
    Reportez vous &agrave; la page de man waitpid(2) pour avoir des d&eacute;tails
    sur le comportement de cette fonction sur votre syst&egrave;me.
   </para>
   <para>
    <function>pcntl_waitpid</function> retourne l'identifiant de 
    processus du processus fils qui s'est termin&eacute;, ou bien -1 en cas
    d'erreur ou encore z&eacute;ro si <constant>WNOHANG</constant> a &eacute;t&eacute; utilis&eacute;e
    et qu'aucun processus fils n'&eacute;tait disponible.
   </para>
   <para>
    Le param&egrave;tre <parameter>pid</parameter> peut prendre l'une des valeurs
    suivantes :
    <table>
     <title>Valeurs possibles de <parameter>pid</parameter></title>
     <tgroup cols="2">
      <tbody>
       <row>
	<entry><literal>&lt; -1</literal></entry>
	<entry>
	 attend que tous les processus fils dont l'identifiant de groupe
	 est &eacute;gal &agrave; la valeur absolue de <parameter>pid</parameter> soient 
	 termin&eacute;s.
	</entry>
       </row>
       <row>
	<entry><literal>-1</literal></entry>
	<entry>
	 attend que tous les processus fils soient termin&eacute;s. Ceci est le
	 m&ecirc;me comportement que celui de la fonction <function>wait</function>.
	</entry>
       </row>
       <row>
        <entry><literal>0</literal></entry>
        <entry>
	 attend que tous les processus fils dont l'identifiant de groupe
	 est &eacute;gal &agrave; celui du processus courant soient termin&eacute;s.
        </entry>
       </row>
       <row>
        <entry><literal>&gt; 0</literal></entry>
        <entry>
	 attend que le processus fils dont l'identifiant est
	 &eacute;gal &agrave; <parameter>pid</parameter> soit termin&eacute;.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    <function>pcntl_waitpid</function> enregistrera des informations sur
    le statut courant du processus dans le param&egrave;tre 
    <parameter>status</parameter>, qui peut &ecirc;tre acc&eacute;d&eacute; avec les
    fonctions suivantes :
    <function>pcntl_wifexited</function>,
    <function>pcntl_wifstopped</function>,
    <function>pcntl_wifsignaled</function>,
    <function>pcntl_wexitstatus</function>,
    <function>pcntl_wtermsig</function> et
    <function>pcntl_wstopsig</function>.
   </para>
   <para>
    Le param&egrave;tre <parameter>options</parameter> peut prendre la valeur
    de z&eacute;ro, ou plusieurs des constantes globales suivantes 
    (combinez les avec l'op&eacute;rateur <literal>OR</literal>) :
    <table>
     <title>Valeurs possibles de <parameter>options</parameter></title>
     <tgroup cols="2">
      <tbody>
       <row>
        <entry><literal>WNOHANG</literal></entry>
        <entry>
	 retourne imm&eacute;diatement si aucun processus fils ne s'est termin&eacute;.
	</entry>
       </row>
       <row>
        <entry><literal>WUNTRACED</literal></entry>
        <entry>
        retourne lorsque les processus fils sont arr&ecirc;t&eacute;s et que leur
        status n'a pas &eacute;t&eacute; mis &agrave; jour.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Voir aussi 
    <function>pcntl_fork</function>,
    <function>pcntl_signal</function>,
    <function>pcntl_wifexited</function>,
    <function>pcntl_wifstopped</function>,
    <function>pcntl_wifsignaled</function>,
    <function>pcntl_wexitstatus</function>,
    <function>pcntl_wtermsig</function> et
    <function>pcntl_wstopsig</function>.
   </para>
  </refsect1>
 </refentry>


 <refentry id="function.pcntl-wexitstatus">
  <refnamediv>
   <refname>pcntl_wexitstatus</refname>
   <refpurpose>
    Retourne le code d'un processus fils termin&eacute;
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>pcntl_wexitstatus</function></funcdef>
     <paramdef>int <parameter>status</parameter></paramdef>      
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>pcntl_wexitstatus</function> retourne le code de retour
    du processus fils. Cette fonction n'est utile que si la fonction
    <function>pcntl_wifexited</function> a retourn&eacute; &true;.
   </para>
   <para>
    Le param&egrave;tre <parameter>status</parameter> est le param&egrave;tre fourni
    &agrave; la fonction <function>pcntl_waitpid</function>, qui avait r&eacute;ussi.
   </para>
   <para>
    Voir aussi 
    <function>pcntl_waitpid</function> et
    <function>pcntl_wifexited</function>.
   </para>
  </refsect1>
 </refentry>


 <refentry id="function.pcntl-wifexited">
  <refnamediv>
   <refname>pcntl_wifexited</refname>
   <refpurpose>
    Retourne &true; si le code de retour repr&eacute;sente une fin normale
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>pcntl_wifexited</function></funcdef>
     <paramdef>int <parameter>status</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>pcntl_wifexited</function> retourne &true; si le processus
    fils a retourn&eacute; un code qui repr&eacute;sente une fin normale.
   </para>
   <para>
    Le param&egrave;tre <parameter>status</parameter> est le param&egrave;tre fourni
    &agrave; la fonction <function>pcntl_waitpid</function>, qui avait r&eacute;ussi.
   </para>
   <para>
    Voir aussi 
    <function>pcntl_waitpid</function> et
    <function>pcntl_wexitstatus</function>.
   </para>
  </refsect1>
 </refentry>


 <refentry id="function.pcntl-wifsignaled">
  <refnamediv>
   <refname>pcntl_wifsignaled</refname>
   <refpurpose>
    Returns &true; if status code represents a termination due to a
    signal
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis> 
    <funcprototype>
     <funcdef>int <function>pcntl_wifsignaled</function></funcdef>
     <paramdef>int <parameter>status</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    Returns &true; if the child process exited because of a signal
    which was not caught.
   </para>
   <para>
    Le param&egrave;tre <parameter>status</parameter> est le param&egrave;tre fourni
    &agrave; la fonction <function>pcntl_waitpid</function>, qui avait r&eacute;ussi.
   </para>
   <para>
    Voir aussi 
    <function>pcntl_waitpid</function> et
    <function>pcntl_signal</function>.
   </para>
  </refsect1>
 </refentry>


 <refentry id="function.pcntl-wifstopped">
  <refnamediv>
   <refname>pcntl_wifstopped</refname>
   <refpurpose>
    Returns &true; if child process is currently stopped
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>pcntl_wifstopped</function></funcdef>
     <paramdef>int <parameter>status</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    Returns &true; if the child process which caused the return is
    currently stopped; this is only possible if the call to
    <function>pcntl_waitpid</function> was done using the option
    <literal>WUNTRACED</literal>.
   </para>
   <para>
    Le param&egrave;tre <parameter>status</parameter> est le param&egrave;tre fourni
    &agrave; la fonction <function>pcntl_waitpid</function>, qui avait r&eacute;ussi.
   </para>
   <para>
    Voir aussi 
    <function>pcntl_waitpid</function>.
   </para>
  </refsect1>
 </refentry>


 <refentry id="function.pcntl-wstopsig">
  <refnamediv>
   <refname>pcntl_wstopsig</refname>
   <refpurpose>
    Returns the signal which caused the child to stop
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>pcntl_wstopsig</function></funcdef>
     <paramdef>int <parameter>status</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    Returns the number of the signal which caused the child to stop.
    This function is only useful if
    <function>pcntl_wifstopped</function> returned &true;.
   </para>
   <para>
    Le param&egrave;tre <parameter>status</parameter> est le param&egrave;tre fourni
    &agrave; la fonction <function>pcntl_waitpid</function>, qui avait r&eacute;ussi.
   </para>
   <para>
    Voir aussi 
    <function>pcntl_waitpid</function> et
    <function>pcntl_wifstopped</function>.
   </para>
  </refsect1>
 </refentry>


 <refentry id="function.pcntl-wtermsig">
  <refnamediv>
   <refname>pcntl_wtermsig</refname>
   <refpurpose>
    Returns the signal which caused the child to terminate
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>pcntl_wtermsig</function></funcdef>
     <paramdef>int <parameter>status</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    Returns the number of the signal that caused the child process to
    terminate. This function is only useful if
    <function>pcntl_wifsignaled</function> returned &true;.
   </para>
   <para>
    Le param&egrave;tre <parameter>status</parameter> est le param&egrave;tre fourni
    &agrave; la fonction <function>pcntl_waitpid</function>, qui avait r&eacute;ussi.
   </para>
   <para>
    Voir aussi 
    <function>pcntl_waitpid</function>,
    <function>pcntl_signal</function> et
    <function>pcntl_wifsignaled</function>.
   </para>
  </refsect1>
 </refentry>
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
