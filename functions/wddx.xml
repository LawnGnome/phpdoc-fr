<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
 <reference id="ref.wddx">
  <title>WDDX</title>
  <titleabbrev>WDDX</titleabbrev>
  <partintro>
   <para>
    Ces fonctions doivent fonctionner avec l'aide de <ulink url="&url.wddx;">WDDX</ulink>.
   </para>
   <para>
    Pour utiliser WDDX, you devez installer la librairie EXPAT (qui est fournie
    avec la distribution d'Apache 1.3.7 ou plus r&eacute;cent), et recompiler PHP
    avec <link linkend="install.configure.with-xml"><option role="configure">--with-xml</option></link> et
    <link linkend="install.configure.enable-wddx"><option role="configure">--enable-wddx</option></link>.
   </para>
   <para>
    Notez bien que toutes les fonctions qui enregistrent des donn&eacute;es,
    utilisent le premier &eacute;l&eacute;ment d'un tableau pour savoir si
    ce tableau doit &ecirc;tre enregistr&eacute; sous la forme d'un tableau,
    ou d'une structure. Si le premier &eacute;l&eacute;ment a une cl&eacute; de
    type cha&icirc;ne, le tableau sera enregistr&eacute; sous la forme d'une
    structure, et sinon, sous la forme d'un tableau.
    <example>
     <title>Enregistrer une valeur simple</title>
     <programlisting role="php">
&lt;?php
print wddx_serialize_value("Exemple de paquet de PHP &agrave; WDDX ", "Paquet PHP");
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    Cet exemple va produire le r&eacute;sultat suivant :
    <informalexample>
     <programlisting role="php">
&lt;wddxPacket version='0.9'&gt;&lt;header comment='Paquet PHP' &gt;&lt;data&gt;
&lt;string&gt;Exemple de paquet de PHP &agrave; WDDX&lt;/string&gt;&lt;/data&gt;&lt;/wddxPacket&gt;
     </programlisting>
    </informalexample>
    <example>
     <title>Utilisation de paquets incr&eacute;mentaux</title>
     <programlisting role="php">
&lt;?php
$pi = 3.1415926;
$packet_id = wddx_packet_start("PHP");
wddx_add_vars($packet_id, "pi");
/* Supposons que $villes provient d'une base de donn&eacute;es */
$cities = array("Paris", "Marseilles", "Lyon");
wddx_add_vars($packet_id, " villes ");
$packet = wddx_packet_end($packet_id);
print $packet;
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    Cet exemple donnera :
    <informalexample>
     <programlisting role="php">
&lt;wddxPacket version='0.9'&gt;&lt;header comment='PHP' &gt;&lt;data&gt;&lt;struct&gt;
&lt;var name='pi'&gt;&lt;number&gt;3.1415926&lt;/number&gt;&lt;/var&gt;&lt;var name='cities'&gt;
&lt;array length='3'&gt;&lt;string&gt;Paris&lt;/string&gt;&lt;string&gt;Marseilles&lt;/string&gt;
&lt;string&gt;Lyon&lt;/string&gt;&lt;/array&gt;&lt;/var&gt;&lt;/struct&gt;&lt;/data&gt;&lt;/wddxPacket&gt;
     </programlisting>
    </informalexample>
    </para>
  </partintro>
  <refentry id="function.wddx-serialize-value">
   <refnamediv>
    <refname>wddx_serialize_value</refname>
    <refpurpose>Enregistrer une valeur dans un paquet WDDX </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string
      <function>wddx_serialize_value</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>string
      <parameter><optional>comment</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      <function>wddx_serialize_value</function> sert &agrave; cr&eacute;er un
      paquet WDDX &agrave; partir d'une seule valeur. Cette fonction prend la
      valeur de <parameter>var</parameter>, et un argument optionnel
      <parameter>comment</parameter> qui appara&icirc;tra dans l'en-t&ecirc;te
      du paquet, et retourne un paquet WDDX.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.wddx-serialize-vars">
   <refnamediv>
    <refname>wddx_serialize_vars</refname>
    <refpurpose>Enregistrer plusieurs valeurs dans un paquet WDDX</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>wddx_serialize_vars</function></funcdef>
      <paramdef>mixed <parameter>var_name</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      <function>wddx_serialize_vars</function> sert &agrave; cr&eacute;er un
      paquet WDDX avec une structure qui contient la repr&eacute;sentation des
      variables pass&eacute;es en arguments.
    </para>
    <para>
     <function>wddx_serialize_vars</function> prend un nombre variable d'arguments,
      chacun d'entre eux pouvant &ecirc;tre une cha&icirc;ne contenant le nom d'une
      variable, ou un tableau de cha&icirc;ne de nom de variable, ou m&ecirc;me
      d'autres tableaux.
    </para>
    <para>
     <example>
      <title><function>wddx_serialize_vars</function></title>
      <programlisting role="php">
&lt;?php
$a = 1;
$b = 5.5;
$c = array("bleu", "orange", "violet");
$d = "colors";
$clvars = array("c", "d");
print wddx_serialize_vars("a", "b", $clvars);
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
L'exemple ci-dessus donnera :
     <computeroutput>
&lt;wddxPacket version='0.9'&gt;&lt;header &gt;&lt;data&gt;&lt;struct&gt;&lt;var name='a'&gt;&lt;number&gt;1&lt;/number&gt;&lt;/var&gt;
&lt;var name='b'&gt;&lt;number&gt;5.5&lt;/number&gt;&lt;/var&gt;&lt;var name='c'&gt;&lt;array length='3'&gt;
&lt;string&gt;bleu&lt;/string&gt;&lt;string&gt;orange&lt;/string&gt;&lt;string&gt;violet&lt;/string&gt;&lt;/array&gt;&lt;/var&gt;
&lt;var name='d'&gt;&lt;string&gt;colors&lt;/string&gt;&lt;/var&gt;&lt;/struct&gt;&lt;/data&gt;&lt;/wddxPacket&gt;
     </computeroutput>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.wddx-packet-start">
   <refnamediv>
    <refname>wddx_packet_start</refname>
    <refpurpose>Commencer un nouveau paquet WDDX avec une structure </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>wddx_packet_start</function></funcdef>
      <paramdef>string
      <parameter><optional>comment</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>wddx_packet_start</function> sert &agrave; cr&eacute;er un
     nouveau paquet WDDX, pour pouvoir y faire des ajouts incr&eacute;mentaux
     de variables. Cette fonction prend un argument optionnel
     <parameter>comment</parameter> et retourne un identifiant de paquet,
     qui servira &agrave; d'autres fonctions. Elle va automatiquement cr&eacute;er
     une d&eacute;finition de structure dans le paquet, pour accueillir des variables.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.wddx-packet-end">
   <refnamediv>
    <refname>wddx_packet_end</refname>
    <refpurpose>Clos un paquet WDDX.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>wddx_packet_end</function></funcdef>
      <paramdef>resource <parameter>packet_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>wddx_packet_end</function> clos un paquet WDDX rep&eacute;r&eacute;
     par son identifiant <parameter>packet_id</parameter>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.wddx-add-vars">
   <refnamediv>
    <refname>wddx_add_vars</refname>
    <refpurpose>Ajouter des variables &agrave; un paquet WDDX.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef><function>wddx_add_vars</function></funcdef>
      <paramdef>resource <parameter>packet_id</parameter></paramdef>
      <paramdef>mixed <parameter>name_var</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      <function>wddx_add_vars</function> sert &agrave; enregistrer les variables
      pass&eacute;es en argument, et les ajouter au paquet rep&eacute;r&eacute;
      par son identifiant <parameter>packet_id</parameter>. Les variables
      enregistr&eacute;es sont sp&eacute;cifi&eacute;es de la m&ecirc;me
      fa&ccedil;on que pour <function>wddx_serialize_vars</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.wddx-deserialize">
   <refnamediv>
    <refname>wddx_deserialize</refname>
    <refpurpose>Lire un paquet WDDX.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>wddx_deserialize</function></funcdef>
      <paramdef>string <parameter>packet</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>wddx_deserialize</function> prend la cha&icirc;ne
     <parameter>packet</parameter> et la lit. Cette fonction retourne
     un r&eacute;sultat qui peut &ecirc;tre
     une cha&icirc;ne, un nombre ou un tableau. Notez que les structures sont
     lues sous la forme de tableaux associatifs.
    </para>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
