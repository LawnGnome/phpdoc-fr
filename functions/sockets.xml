<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.sockets">
  <title>Sockets</title>
  <titleabbrev>Sockets</titleabbrev>
  <partintro>
   &warn.experimental;
   <simpara>
    L'extension socket impl&eacute;mente une interface bas niveau avec les
    fonctions de communication par socket. Cela permet de mettre en place
    un serveur aussi bien qu'un client.
   </simpara>
   <para>
    Les fonctions socket d&eacute;crites ici sont rassembl&eacute;es dans une extension
    PHP. Pour &ecirc;tre activ&eacute;es, il faut utiliser l'option de compilation
    <option role="configure">--enable-sockets</option> au script
    <command>configure</command>.
   </para>
   <para>
    Pour une interface client plus g&eacute;n&eacute;rique, reportez vous &agrave;
    <function>fsockopen</function> et <function>pfsockopen</function>.
   </para>
   <para>
    Lorsque vous utiliserez les fonctions de sockets qui sont d&eacute;crites ici,
    gardez bien &agrave; l'esprit que m&ecirc;me si elles ont souvent des noms identiques
    aux fonctions C, elles ont souvent des prototypes diff&eacute;rents. Lisez attentivement
    la documentation pour &eacute;viter les confusions.
   </para>
   <para>
   	Cela dit, ceux qui n'ont pas l'habitude de la programmation avec les sockets
   	pourront trouver beaucoup de documentation pertinente dans les pages de
   	manuel Unix, et de nombreux tutorial de programmation C sur le web, dont la
   	plus part peuvent &ecirc;tre repris apr&egrave;s de l&eacute;g&egrave;re
   	modifications, en PHP.
   </para>
   <para>
    <example>
     <title>Exemple de programmation Socket : serveur TCP/IP</title>
     <para>
      Cet exemple est un serveur perroquete : tout ce que vous lui envoyez
      vous est retourn&eacute;. Changez les variables
      <varname>address</varname> et <varname>port</varname> pour les adapter &agrave;
      votre configuration, et lancez le script. Vous pouvez vous connecter
      au serveur avec une commande telle que <command>telnet 192.168.1.53 10000</command>
      (avec l'adresse et le port qui sont ceux de votre configuration).
      Pour vous d&eacute;connecter, tapez 'quit'.
     </para>
     <programlisting role="php">
&lt;?php
error_reporting(E_ALL);
/* On autorise le script &agrave; attendre les connexions ind&eacute;finiment. */
set_time_limit(0);
/* Modifiez ces valeurs pour qu'elles soient celles de votre configuration */
$address = '192.168.1.53';
$port = 10000;
if (($sock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
    echo "socket() a &eacute;chou&eacute; : raison : " . strerror($sock) . "\n";
}
if (($ret = bind($sock, $address, $port)) &lt; 0) {
    echo "bind() a &eacute;chou&eacute; : raison: " . strerror($ret) . "\n";
}
if (($ret = listen($sock, 5)) &lt; 0) {
    echo "listen() a &eacute;chou&eacute; : raison: " . strerror($ret) . "\n";
}
do {
    if (($msgsock = accept_connect($sock)) &lt; 0) {
        echo "accept_connect() a &eacute;chou&eacute; : raison : " . strerror($msgsock) . "\n";
        break;
    }
    do {
        $buf = '';
        $ret = read($msgsock, $buf, 2048);
        if ($ret &lt; 0) {
            echo "read() a &eacute;chou&eacute; : raison : " . strerror($ret) . "\n";
            break 2;
        }
        if ($ret == 0) {
            break 2;
        }
        $buf = trim($buf);
        if ($buf == 'quit') {
            close($msgsock);
            break 2;
        }
        $talkback = "PHP: Vous avez dit '$buf'.\n";
        write($msgsock, $talkback, strlen($talkback));
        echo "$buf\n";
    } while (<literal>TRUE</literal>);
    close($msgsock);
} while (<literal>TRUE</literal>);
close($sock);
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Exemple avec les sockets : Client TCP/IP</title>
     <para>
      Cet exemple est un client HTTP basique. Il se connecte &agrave; une page
      envoi les ent&ecirc;tes (requ&ecirc;te HEAD), affiche le retour, et quitte.
     </para>
     <programlisting role="php">
&lt;?php
error_reporting(E_ALL);
echo "&lt;h2>TCP/IP Connection&lt;/h2>\n";
/* Demande le port du service WWW. */
$service_port = getservbyname('www', 'tcp');
/* Demande l'IP du serveur de destination. */
$address = gethostbyname('www.php.net');
/* Cr&eacute;e la connexion TCP/IP. */
$socket = socket(AF_INET, SOCK_STREAM, 0);
if ($socket &lt; 0) {
    echo "socket() a &eacute;chou&eacute; : raison : " . strerror($socket) . "\n";
} else {
    "socket() r&eacute;ussi: " . strerror($socket) . "\n";
}
echo "Connexion &agrave; '$address' on port '$service_port'...";
$result = connect($socket, $address, $service_port);
if ($result &lt; 0) {
    echo "connect()  a &eacute;chou&eacute; : raison : : ($result) " . strerror($result) . "\n";
} else {
    echo "OK.\n";
}
$in = "HEAD / HTTP/1.0\r\n\r\n";
$out = '';
echo "Envoi des ent&ecirc;tes HTTP HEAD...";
write($socket, $in, strlen($in));
echo "OK.\n";
echo "Lecture de la r&eacute;ponse :\n\n";
while (read($socket, $out, 2048)) {
    echo $out;
}
echo "Fermeture de la socket...";
close($socket);
echo "OK.\n\n";
?&gt;
      </programlisting>
     </example>
    </para>
  </partintro>
  <refentry id="function.accept-connect">
   <refnamediv>
    <refname>accept_connect</refname>
    <refpurpose>Accepte une connexion sur une socket.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>accept_connect</function></funcdef>
      <paramdef>resource <parameter>socket</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Une fois que la socket <parameter>socket</parameter> a
     &eacute;t&eacute; cr&eacute;&eacute;, avec la fonction
     <function>socket</function>, li&eacute;e &agrave; un nom avec
     <function>bind</function>, et mise en attente de connexion avec
     <function>listen</function>, <function>accept_connect</function>
     accepte les connexions sur la socket <parameter>socket</parameter>.
     Une fois que la connexion est faite, un nouveau pointeur de socket
     est retourn&eacute;, pour utilisation ult&eacute;rieure.
     Si il n'y a pas de connexion en attente, <function>accept_connect</function>
     se bloquera jusqu'&agrave; une connexion soit disponible.
     Si <parameter>socket</parameter> a &eacute;t&eacute; configur&eacute;e
     comme non-bloquante, avec <function>socket_set_blocking</function>,
     une erreur sera retourn&eacute;e.
    </para>
    <para>
     Le pointeur de socket retourn&eacute; par <function>accept_connect</function>
     ne peut plus accepter de nouvelles connexion. La socket originale,
     <parameter>socket</parameter>, reste ouverte, et peut &ecirc;tre r&eacute;utilis&eacute;e.
    </para>
    <para>
     <function>accept_connect</function> retourne une nouveau pointeur de
     socket en cas de succ&egrave;s, ou une erreur n&eacute;gative en cas
     d'erreur. Ce code peut &ecirc;tre pass&eacute; &agrave; la fonction
     <function>strerror</function> pour obtenir un message d'erreur lisible.
    </para>
    <para>
     Voir aussi
     <function>bind</function>,
     <function>connect</function>,
     <function>listen</function>,
     <function>socket</function> et
     <function>strerror</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.bind">
   <refnamediv>
    <refname>bind</refname>
    <refpurpose>Lie un nom &agrave; une socket.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>bind</function></funcdef>
      <paramdef>resource <parameter>socket</parameter></paramdef>
      <paramdef>string <parameter>address</parameter></paramdef>
      <paramdef>int
       <parameter><optional>protocol</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>bind</function> lie le nom <parameter>address</parameter>,
     &agrave; la socket <parameter>socket</parameter>, qui doit &ecirc;tre une socket
     valide, cr&eacute;&eacute;e avec <function>socket</function>.
    </para>
    <para>
     <parameter>address</parameter> peut &ecirc;tre une adresse IP num&eacute;rique
     (e.g. <literal>127.0.0.1</literal>), si la socket est de la famille
     <constant>AF_INET</constant>; ou bien un chemin d'un domaine UNIX, si la
     socket est de la famille des <constant>AF_UNIX</constant>.
    </para>
    <para>
     <parameter>port</parameter> sert uniquement dans le cas des sockets de type
     <constant>AF_INET</constant> et d&eacute;signe le port de connexion sur 
     l'h&ocirc;te distant.
    </para>
    <para>
     <function>bind</function> retourne z&eacute;ro en cas de succ&egrave;s,
     et une erreur n&eacute;gative en cas d'&eacute;chec. Ce code peut &ecirc;tre
     pass&eacute; &agrave; la fonction <function>strerror</function> pour obtenir
     un message d'erreur lisible.
    </para>
    <para>
     Voir aussi
     <function>accept_connect</function>,
     <function>connect</function>,
     <function>listen</function>,
     <function>socket</function>, et
     <function>strerror</function>.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.close">
   <refnamediv>
    <refname>close</refname>
    <refpurpose>Ferme une socket.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>close</function></funcdef>
      <paramdef>resource <parameter>socket</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>close</function> ferme le fichier (ou la socket)
     <parameter>socket</parameter>.
    </para>
    <para>
     Notez que <function>close</function> ne doit pas &ecirc;tre utilis&eacute;e avec
     des pointeurs de fichiers cr&eacute;&eacute; par <function>fopen</function>,
     <function>popen</function>, <function>fsockopen</function>, ou
     <function>pfsockopen</function>; elle ne sert que pour les sockets
     cr&eacute;&eacute;es avec <function>socket</function> ou
     <function>accept_connect</function>.
    </para>
    <para>
     <function>close</function> retourne &true; en cas
     de succ&egrave;s, ou &false; en cas d'erreur(i.e.,
     <parameter>socket</parameter> est invalide).
    </para>
    <para>
     Voir aussi 
     <function>bind</function>, 
     <function>listen</function>,
     <function>socket</function> et
     <function>strerror</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.connect">
   <refnamediv>
    <refname>connect</refname>
    <refpurpose>Initie une connexion avec une socket.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>connect</function></funcdef>
      <paramdef>resource <parameter>socket</parameter></paramdef>
      <paramdef>string <parameter>address</parameter></paramdef>
      <paramdef>int
       <parameter><optional>port</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>connect</function> initie une connexion avec la s
     ocket <parameter>socket</parameter>, qui doit &ecirc;tre une
     socket valide, cr&eacute;&eacute;e avec <function>socket</function>.
    </para>
    <para>
     <parameter>address</parameter> peut &ecirc;tre une adresse IP num&eacute;rique
     (e.g. <literal>127.0.0.1</literal>), si la socket est de la famille
     <constant>AF_INET</constant>; ou bien un chemin d'un domaine UNIX, si la
     socket est de la famille des <constant>AF_UNIX</constant>.
    </para>
    <para>
     <parameter>port</parameter> sert uniquement dans le cas des sockets de type
     <constant>AF_INET</constant> et d&eacute;signe le port de connexion 
     sur l'h&ocirc;te distant.
    </para>
    <para>
     <function>connect</function> retourne z&eacute;ro en cas de succ&egrave;s,
     et une erreur n&eacute;gative en cas d'&eacute;chec. Ce code peut &ecirc;tre
     pass&eacute; &agrave; la fonction <function>strerror</function> pour obtenir
     un message d'erreur lisible.
    </para>
    <para>
     Voir aussi
     <function>bind</function>,
     <function>listen</function>,
     <function>socket</function>, et
     <function>strerror</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.listen">
   <refnamediv>
    <refname>listen</refname>
    <refpurpose>Attend une connexion sur une socket.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>listen</function></funcdef>
      <paramdef>resource <parameter>socket</parameter></paramdef>
      <paramdef>int <parameter>backlog</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Une fois que la socket <parameter>socket</parameter> a &eacute;t&eacute;
     cr&eacute;&eacute;e avec <function>socket</function> et li&eacute;e avec
     <function>bind</function>, elle peut &ecirc;tre mise en attente de
     connexion entrante. Un maximum de <parameter>backlog</parameter>
     connexion entrantes seront mises en attente de traitement.
    </para>
    <para>
     <function>listen</function> ne fonctionne qu'avec des sockets de type
     <literal>SOCK_STREAM</literal> et <literal>SOCK_SEQPACKET</literal>.
    </para>
    <para>
     <function>listen</function> retourne z&eacute;ro en cas de succ&egrave;s,
     et une erreur n&eacute;gative en cas d'&eacute;chec. Ce code peut &ecirc;tre
     pass&eacute; &agrave; la fonction <function>strerror</function> pour
     obtenir un message d'erreur lisible.
    </para>
    <para>
     Voir aussi
     <function>accept_connect</function>,
     <function>bind</function>,
     <function>connect</function>,
     <function>socket</function> et
     <function>strerror</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.read">
   <refnamediv>
    <refname>read</refname>
    <refpurpose>Lit sur une socket</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>read</function></funcdef>
      <paramdef>resource <parameter>socket_des</parameter></paramdef>
      <paramdef>string <parameter>&amp;buffer</parameter></paramdef>
      <paramdef>int <parameter>length</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>read</function> lit sur la socket
     <parameter>socket_des</parameter> cr&eacute;&eacute;e avec
     <function>accept_connect</function>, et place le r&eacute;sultat dans
     le buffer <parameter>&amp;buffer</parameter>,
     <parameter>length</parameter> octets. Vous pouvez aussi
     utiliser \n, \t ou \0 pour terminer la lecture.
     Le nombre d'octets lus est retourn&eacute;.
    </para>
    <para>
     Voir aussi
     <function>accept_connect</function>,
     <function>bind</function>,
     <function>connect</function>,
     <function>listen</function>,
     <function>strerror</function>,
     <function>socket_get_status</function> et
     <function>write</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.socket">
   <refnamediv>
    <refname>socket</refname>
    <refpurpose>Cr&eacute;e une socket (point de communication).</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>socket</function></funcdef>
      <paramdef>int <parameter>domain</parameter></paramdef>
      <paramdef>int <parameter>type</parameter></paramdef>
      <paramdef>int <parameter>protocol</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>socket</function> cr&eacute;e un point de communication,
     appel&eacute; socket, et retourne un pointeur de socket.
    </para>
    <para>
     <parameter>domain</parameter> repr&eacute;sente le domaine. Actuellement, ce peut
     &ecirc;tre <constant>AF_INET</constant> et <constant>AF_UNIX</constant>.
    </para>
    <para>
     <parameter>type</parameter> s&eacute;lectionne le type de socket.
     Il peut prendre les valeurs suivantes : <constant>SOCK_STREAM</constant>,
     <constant>SOCK_DGRAM</constant>, <constant>SOCK_SEQPACKET</constant>,
     <constant>SOCK_RAW</constant>, <constant>SOCK_RDM</constant>, ou
     <constant>SOCK_PACKET</constant>.
    </para>
    <para>
     <parameter>protocol</parameter> choisit le protocole.
    </para>
    <para>
     Retourne un pointeur de socket valide en cas de succ&egrave;s, et 
     une erreur n&eacute;gative en cas d'&eacute;chec. Ce code peut 
     &ecirc;tre pass&eacute; &agrave; la fonction <function>strerror</function>
     pour obtenir un message d'erreur lisible.
    </para>
    <para>
     Pour plus d'informations sur l'utilisation des <function>socket</function>,
     ainsi que sur la pluspart des param&egrave;tres, reportez vous aux 
     pages de manuel Unix <filename>socket (2)</filename>.
    </para>
    <para>
     Voir aussi
     <function>accept_connect</function>,
     <function>bind</function>,
     <function>connect</function>,
     <function>listen</function> et
     <function>strerror</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.strerror">
   <refnamediv>
    <refname>strerror</refname>
    <refpurpose>D&eacute;crit une erreur de socket.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strerror</function></funcdef>
      <paramdef>int <parameter>errno</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>strerror</function> prend comme param&egrave;tre <parameter>errno</parameter>
     la valeur n&eacute;gative de retour d'une fonction de socket, et retourne l'explication
     correspondante au format texte. Cela facilite grandement la recherche d'erreur.
     Par exemple, au lieu d'&ecirc;tre bloqu&eacute; par une erreur '-111', et de devoir en
     rechercher la signification dans les fichiers syst&egrave;mes, il suffit de la
     passer &agrave; <function>strerror</function>, pour savoir ce qui s'est pass&eacute;.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>strerror</function></title>
      <programlisting role="php">
&lt;?php
if (($socket = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
   echo "socket() a &eacute;chou&eacute; : raison: " . strerror($socket) . "\n";
}
if (($ret = bind($socket, '127.0.0.1', 80)) &lt; 0) {
   echo "bind() a &eacute;chou&eacute; : raison: " . strerror($ret) . "\n";
}
?&gt;
      </programlisting>
      <para>
       Le r&eacute;sultat de l'exemple ci dessus (en supposant que le script
       n'est pas ex&eacute;cut&eacute; avec les droits du root) :
       <screen>
        bind() a &eacute;chou&eacute; : raison : Permission denied
       </screen>
      </para>
     </example>
    </para>
    <para>
     Voir aussi 
     <function>accept_connect</function>, 
     <function>bind</function>,
     <function>connect</function>, 
     <function>listen</function> et
     <function>socket</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.write">
   <refnamediv>
    <refname>write</refname>
    <refpurpose>Ecrit sur une socket</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>write</function></funcdef>
      <paramdef>resource <parameter>socket_des</parameter></paramdef>
      <paramdef>string <parameter>&amp;buffer</parameter></paramdef>
      <paramdef>int <parameter>length</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>write</function> &eacute;crit sur la socket
     <parameter>socket_des</parameter>, <parameter>length</parameter>
     octets issus du buffer <parameter>&amp;buffer</parameter>.
    </para>
    <para>
     Voir aussi 
     <function>accept_connect</function>, 
     <function>bind</function>,
     <function>connect</function>, 
     <function>listen</function>,
     <function>read</function>, 
     <function>strerror</function> et
     <function>socket_get_status</function>.
    </para>
   </refsect1>
  </refentry>
 </reference>
 <!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
