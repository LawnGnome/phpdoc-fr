 <reference id="ref.strings">
  <title>Fonctions de cha&icirc;ne de caract&egrave;res</title>
  <titleabbrev>Cha&icirc;nes</titleabbrev>

  <partintro>
   <simpara>
     Ces fonctions permettent la manipulations de cha&icirc;nes de caract&egrave;res. Certaines 
     sections plus sp&eacute;cialis&eacute;es sont disponibles d&egrave;s les sections sur les expressions 
     r&eacute;guli&egrave;res et dans la section URL.
   </simpara>
  </partintro>

  <refentry id="function.addcslashes">
   <refnamediv>
    <refname>AddCSlashes</refname>
    <refpurpose>Ajoute des slashes dans une cha&icirc;ne, comme en langage C.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>addcslashes</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
     <paramdef>string <parameter>charlist</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne une cha&icirc;ne avec des backslash devant les caract&egrave;res qui sont dans la 
     liste <parameter>charlist</parameter>. Les caract&egrave;res <literal>\n</literal>, 
     <literal>\r</literal> etc. sont &eacute;chapp&eacute;s. En langage C, les caract&egrave;res avec un 
     code ASCII inf&eacute;rieur &agrave; 32 ou sup&eacute;rieur &agrave; 126 sont convertis en repr&eacute;sentation 
     octale. Faites bien attention lorsque vous &eacute;chappez des caract&egrave;res alpha-num&eacute;riques. 
     Vous pouvez sp&eacute;cifier un intervalle dans <parameter>charlist</parameter> comme 
     "\0..\37", qui &eacute;chappera les caract&egrave;res compris dans cet intervalle.
     <example>
      <title>Exemple avec <function>Addcslashes</function></title>
      <programlisting role="php">
$escaped = addcslashes ($no_echappe, "\0..\37!@\177..\377");
      </programlisting>
     </example>
     <note>
      <simpara>
        Ajout&eacute; dans PHP4b3-dev.</simpara>
     </note>
    </para>
    <para>
     Voir aussi <function>stripcslashes</function>, <function>stripslashes</function>, 
     <function>htmlspecialchars</function>, <function>htmlspecialchars</function> et 
     <function>quotemeta</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.addslashes">
   <refnamediv>
    <refname>AddSlashes</refname>
    <refpurpose>Ajoute un slash devant tous les caract&egrave;res sp&eacute;ciaux.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>addslashes</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne une cha&icirc;ne avec des backslashes devant chaque caract&egrave;re qui a en a besoin 
     pour &ecirc;tre ins&eacute;r&eacute; dans une requ&ecirc;te de base de donn&eacute;es. Ces caract&egrave;res sont 
     guillemets simples (<literal>'</literal>), guillemets doubles (<literal>"</literal>), 
     backslash (<literal>\</literal>) et NULL (la valeur null).
    </para>
    <para>
     Voir aussi <function>stripslashes</function>, <function>htmlspecialchars</function>
     et <function>quotemeta</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.bin2hex">
   <refnamediv>
    <refname>bin2hex</refname>
    <refpurpose>
      Converti une valeur binaire en hexad&eacute;cimal
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>bin2hex</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne une cha&icirc;ne ASCII contenant la repr&eacute;sentation hexad&eacute;cimale de 
     <parameter>str</parameter>. La conversion est faite avec le bit de poids fort 
     en premier.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.chop">
   <refnamediv>
    <refname>Chop</refname>
    <refpurpose>
          Enl&egrave;ve les espaces de fin de cha&icirc;ne.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>chop</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne l’argument sans les espaces de fin de cha&icirc;ne.
     <example>
      <title>Exemple avec <function>Chop</function></title>
      <programlisting role="php">
$trimmed = chop ($line);
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi <function>trim</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.chr">
   <refnamediv>
    <refname>Chr</refname>
    <refpurpose>Retourne un caract&egrave;re.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>chr</function></funcdef>
     <paramdef>int <parameter>ascii</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne le caract&egrave;re de code ASCII <parameter>ascii</parameter>.
     <example>
      <title>Exemple avec <function>Chr</function></title>
      <programlisting role="php">
$str .= chr (27); /* ajoute un &eacute;chappement &agrave; la fin de la cha&icirc;ne $str */

/* G&eacute;n&eacute;ralement, ceci est plus efficace  */

$str = sprintf ("Cette cha&icirc;ne se termine par un escape: %c", 27);
      </programlisting>
     </example>
     Cette fonction est le contraire de <function>ord</function>.
     Voir aussi <function>sprintf</function> avec le format de cha&icirc;ne 
     <literal>%c</literal>.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.chunk-split">
   <refnamediv>
    <refname>chunk_split</refname>
    <refpurpose>Scinde une cha&icirc;ne en plus petits morceaux.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>chunk_split</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>chunklen</optional></parameter>
     </paramdef>
     <paramdef>string 
      <parameter><optional>end</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Permet de scinder une cha&icirc;ne en plus petit morceaux, comme dans le cas de la 
     conversion en <link linkend="function.base64-encode">base64_encode</link>
     pour se conformer &agrave; la RFC 2045. 
     Cette fonction ins&egrave;re une fin de cha&icirc;ne <parameter>end</parameter> 
     (par d&eacute;faut "\r\n"), tous les <parameter>chunklen</parameter> (par d&eacute;faut 76) 
     caract&egrave;res.
     La cha&icirc;ne retourn&eacute;e est une nouvelle cha&icirc;ne, et l’original n’est pas modifi&eacute;.
     <example>
      <title>Exemple avec <function>Chunk_split</function></title>
      <programlisting role="php">
# formate $data avec la s&eacute;mantique RFC 2045

$new_string = chunk_split (base64_encode($data));
      </programlisting>
     </example>
     Cette fonction est nettement plus rapide que <function>ereg_replace</function>.
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e en 3.0.6.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.convert-cyr-string">
   <refnamediv>
    <refname>convert_cyr_string</refname>
    <refpurpose>
      Converti la cha&icirc;ne d’un alphabet cyrillique vers un autre.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>convert_cyr_string</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
     <paramdef>string <parameter>from</parameter></paramdef>
     <paramdef>string <parameter>to</parameter></paramdef>
    </funcsynopsis>
    <para>
     Cette fonction convertit la cha&icirc;ne donn&eacute;e depuis un alphabet cyrillique vers 
     un autre. Les arguments <parameter>from</parameter> et <parameter>to</parameter> 
     sont des caract&egrave;res qui repr&eacute;sentent la source et la destination. 
     Les valeurs accept&eacute;es :
     <itemizedlist>
      <listitem>
       <simpara>
	k - koi8-r
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	w - windows-1251
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	i - iso8859-5
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	a - x-cp866
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	d - x-cp866
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	m - x-mac-cyrillic
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.count-chars">
   <refnamediv>
    <refname>count_chars</refname>
    <refpurpose>
       Retourne des informations sur les caract&egrave;res utilis&eacute;s dans une cha&icirc;ne.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>count_chars</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
     <paramdef>
      <parameter>
       <optional>mode</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Compte le nombre d'occurence de chaque octet (0..255) dans la cha&icirc;ne 
     <parameter>string</parameter> et le retourne de diff&eacute;rente fa&ccedil;on. L'option 
     <parameter>Mode</parameter> prend, par d&eacute;faut, la valeur 0.
     Suivant le <parameter>mode</parameter>, <function>count_chars</function> retourne 
     une des r&eacute;ponses suivante : 
     <itemizedlist>
      <listitem>
       <simpara>
	0 - un tableau avec l'octet comme cl&eacute;, et la fr&eacute;quence comme valeur.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	1 - Identique &agrave; 0, mais seule les fr&eacute;quences non nulles sont list&eacute;es.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	2 - Identique &agrave; 0, mais seule les fr&eacute;quences nulles sont list&eacute;es.
       </simpara>
      </listitem> 
      <listitem>
       <simpara> 
	3 - une cha&icirc;ne qui contient tous les octets utilis&eacute;s.
       </simpara>
      </listitem> 
      <listitem>
       <simpara> 
	4 - une cha&icirc;ne contenant tous les octets non utilis&eacute;s.
       </simpara>
      </listitem> 
     </itemizedlist>
    </para>
    <note>
     <para>
      Cette fonction a &eacute;t&eacute; ajout&eacute;e en PHP 4.0.
     </para> 
    </note>
   </refsect1>
  </refentry>
 
  <refentry id="function.crypt">
   <refnamediv>
    <refname>crypt</refname>
    <refpurpose>Encrypte une cha&icirc;ne avec un DES.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>crypt</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
     <paramdef>string 
      <parameter><optional>salt</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>crypt</function> va coder une cha&icirc;ne en utilisant la m&eacute;thode d’encryption 
     du <abbrev>DES</abbrev> standard. Les arguments sont : la cha&icirc;ne &agrave; encrypter, 
     et un grain de sel qui servira de base pour l’encryption. 
     Reportez vous au manuel Unix pour plus de d&eacute;tails.
    </para>
    <simpara>
      Si le grain de sel n’est pas fourni, il sera automatiquement g&eacute;n&eacute;r&eacute; par PHP.
    </simpara>
    <simpara>
      Certains syst&egrave;mes d’exploitation acceptent plus d’un type d’encryption. 
      En fait, le DES standard est parfois remplac&eacute; par une encryption MD5. 
      Le type d’encryption est alors choisi en fonction du grain de sel. 
      A l’installation, PHP d&eacute;termine les possibilit&eacute;s de cryptage et d&eacute;cidera 
      d’accepter d’autres grains de sel pour d’autres types d’encryption. 
      Si le grain de sel n’est pas fourni, PHP g&eacute;n&eacute;rera alors un grain de 2 caract&egrave;res, 
      pour le DES standard, &agrave; moins que le syst&egrave;me ne dispose de MD5 : 
      dans ce cas, PHP g&eacute;n&eacute;rera un grain de sel pour MD, par d&eacute;faut. 
      PHP affecte la variable d’environnement CRYPT_SALT_LENGTH, &agrave; 2 si il utilise le 
      DES standard, et &agrave; 12 si il utilise le MD5.
    </simpara>
    <simpara>
      L’encryption standard fournit le grain de sel dans les deux premiers octets
      du r&eacute;sultat de la fonction <function>crypt</function>.
    </simpara>
    <simpara>
      Sur les syst&egrave;mes qui supportent plusieurs m&eacute;thodes d’encryption, les variables 
      d’environnement suivantes sont mises &agrave; 0 ou &agrave; 1, en fonction de la disponibilit&eacute; 
      de la m&eacute;thode :
    </simpara>
    <itemizedlist>
     <listitem>
      <simpara>
       CRYPT_STD_DES - DES Standard avec 2-octets de SALT 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_EXT_DES - DES &eacute;tendu avec 9-octets SALT 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_MD5 - MD5 avec 12-octets SALT commencant &agrave; $1$ 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CRYPT_BLOWFISH - DES &eacute;tendu avec 16-octets SALT commencant &agrave; $2$ 
      </simpara>
     </listitem>
    </itemizedlist>
    <simpara>
      Il n’y a pas d’algorithme de d&eacute;cryptage, &eacute;tant donn&eacute; que 
      <function>crypt</function> est injective.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.echo">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>Affiche une ou plusieurs cha&icirc;nes.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef><function>echo</function></funcdef>
     <paramdef>string <parameter>arg1</parameter></paramdef>
     <paramdef>string 
      <parameter><optional>argn</optional>...</parameter>
     </paramdef>
    </funcsynopsis>
    <simpara>
      Affiche tous les param&egrave;tres.
    </simpara>
    <para>
     <function>Echo</function> n’est pas une fonction &agrave; proprement parler, ce qui rend 
      l'usage des parenth&egrave;ses facultatives.
     <example>
      <title>Exemple avec <function>echo</function></title>
      <programlisting role="php">
echo "Bonjour Monde";

echo "Cet echo se 
r&eacute;partis sur plusieurs lignes. Les nouvelles lignes
seront aussi affich&eacute;es";

echo "et echo se\nr&eacute;partis sur plusieurs lignes. Les nouvelles lignes\nseront aussi affich&eacute;es.";
      </programlisting>
     </example>
    </para>	 
    <note>
     <para>
      En fait, si vous voulez passer plus d'un param&egrave;tre &agrave; <function>echo</function>, 
      vous ne DEVEZ pas les placer entre parenth&egrave;ses.
     </para>
    </note>
    <simpara>
     Voir aussi :
     <function>print</function>, <function>printf</function> et 
     <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.explode">
   <refnamediv>
    <refname>explode</refname>
    <refpurpose>Scinde une cha&icirc;ne en morceau, grâce &agrave; un d&eacute;limiteur.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>explode</function></funcdef>
     <paramdef>string <parameter>separator</parameter></paramdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne un tableau qui contient les &eacute;l&eacute;ments de la cha&icirc;ne, s&eacute;par&eacute;s par 
     <replaceable>separator</replaceable>.
     <example>
      <title>Exemple avec <function>Explode</function></title>
      <programlisting role="php">
$pizza = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode (" ", $pizza);
      </programlisting>
     </example>
    </para>
    <para>
       Voir aussi <function>split</function> et <function>implode</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-html-translation-table">
   <refnamediv>
    <refname>get_html_translation_table</refname>
    <refpurpose>
     Retourne la table de traduction utilis&eacute;e par <function>htmlspecialchars</function> 
     et <function>htmlentities</function>.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string 
      <function>get_html_translation_table</function>
     </funcdef>
     <paramdef>int <parameter>table</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>get_html_translation_table</function> retourne la table de traduction
     utilis&eacute;e en interne par <function>htmlspecialchars</function> et 
     <function>htmlentities</function>. Il y a deux nouvelles d&eacute;finitions : 
     (<parameter>HTML_ENTITIES</parameter>, <parameter>HTML_SPECIALCHARS</parameter>) 
     qui vous permettent de sp&eacute;cifier vos propres tables.
     <example>
      <title>Exemple de table de traduction</title>
      <programlisting role="php">
$trans = get_html_translation_table (HTML_ENTITIES);
$str = "Hallo & &lt;Frau> & Krämer";
$encoded = strtr ($str, $trans);
      </programlisting>
     </example>
     La variable <literal>$encoded</literal> va contenir d&eacute;sormais : "Hallo
     &<sgmltag>amp</sgmltag>;
     &<sgmltag>lt</sgmltag>;Frau&<sgmltag>gt</sgmltag>;
     &<sgmltag>amp</sgmltag>; Kr&<sgmltag>auml</sgmltag>;mer".
    </para>
    <para>
     <function>array_flip</function> est alors tr&egrave;s efficace pour inverser la 
     direction de traduction : 
     <informalexample>
      <programlisting role="php">
$trans = array_flip ($trans);
$original = strtr ($str, $trans);
      </programlisting>
     </informalexample>
      Le contenu de <literal>$original</literal> sera : "Hallo & &lt;Frau> & Krämer".
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e en PHP 4.0.
      </para> 
     </note>
    </para>
    <para>
     Voir aussi : <function>htmlspecialchars</function>,
     <function>htmlentities</function>, <function>strtr</function>,
     et <function>array_flip</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.get-meta-tags">
   <refnamediv>
    <refname>get_meta_tags</refname>
    <refpurpose>
    Extrait toutes les balises meta d’un fichier, et les retourne sous forme d’un 
    tableau.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>get_meta_tags</function></funcdef>
     <paramdef>string <parameter>filename</parameter></paramdef>
     <paramdef>int
      <parameter><optional>use_include_path</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Ouvre le fichier <parameter>filename</parameter> et l’analyse ligne par ligne,
     en recherchant les balises &lt;meta>.
     <example>
      <title>Meta Tags Example</title>
      <programlisting role="html">
&lt;meta name="author" content="name">
&lt;meta name="tags" content="php3 documentation">
&lt;/head> &lt;!-- parsing stops here -->
      </programlisting>
     </example>
     (Faites bien attention aux fins de lignes. PHP utilise une fonction native pour 
     analyser le fichier d’entr&eacute;e, ce qui fait que les fichiers faits sous Mac 
     ne fonctionneront pas sous Unix).
    </para>
    <para> 
     Le nom d’une propri&eacute;t&eacute; devient sa cl&eacute;, et la valeur devient la valeur dans le 
     tableau associatif retourn&eacute;, ce qui rend ais&eacute; la manipulation des informations. 
     Les caract&egrave;res sp&eacute;ciaux dans la nom de la propri&eacute;t&eacute; sont remplac&eacute;s par des '_', 
     le reste est converti en minuscule.
    </para>
    <para>
     Mettre <parameter>use_include_path</parameter> &agrave; 1 forcera PHP &agrave; ouvrir les 
     fichiers dans le chemin standard d’inclusion.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.htmlentities">
   <refnamediv>
    <refname>htmlentities</refname>
    <refpurpose>
     Converti tous les caract&egrave;res sp&eacute;ciaux en &eacute;quivalent HTML.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>htmlentities</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     Cette fonction est identique &agrave; 
     <function>Htmlspecialchars</function> en tous points, sauf que tous les caract&egrave;res
     qui ont une entit&eacute; &eacute;quivalente en HTML sont replac&eacute;s par ces entit&eacute;s.
    </para>
    <para>
     Actuellement, le jeu de caract&egrave;res ISO-8859-1 character est utilis&eacute;.
    </para>
    <para>
     Voir aussi <function>htmlspecialchars</function> et <function>nl2br</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.htmlspecialchars">
   <refnamediv>
    <refname>htmlspecialchars</refname> 
    <refpurpose>
     Converti tous les caract&egrave;res sp&eacute;ciaux en &eacute;quivalent HTML.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>htmlspecialchars</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     Certains caract&egrave;res ont une valeur avec HTML, et doivent &ecirc;tre remplac&eacute;s par des 
     balises HTML pour conserver leur valeur. Cette fonction retourne une cha&icirc;ne avec 
     tous les caract&egrave;res sensibles remplac&eacute;s par leur &eacute;quivalent.
    </para>
    <simpara>
     Cette fonction est utile pour emp&ecirc;cher un utilisateur de fournir un texte avec un 
     sens HTML, comme dans un livre d’or.
    </simpara>
    <para>
     Actuellement, PHP remplace les valeurs suivantes :
     <itemizedlist>
      <listitem>
       <simpara>
        '&amp;' (et commercial) devient '&amp;amp;'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        '&quot;' guillement double) devient '&amp;quot;'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        '&lt;' (inf&eacute;rieur &agrave;) devient '&amp;lt;'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        '&gt;' (sup&eacute;rieur &agrave;) devient '&amp;gt;'
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Notez bien que cette fonction ne fait aucun autre remplacment que ceux list&eacute;s 
     ci-dessus. Pour une traduction compl&egrave;te de toutes les balises, reportez vous &agrave; 
     <function>htmlentities</function>.
    </para>
    <para>
     Voir aussi <function>htmlentities</function> et <function>nl2br</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.implode">
   <refnamediv>
    <refname>implode</refname>
    <refpurpose>
     Regroupe tous les &eacute;l&eacute;ments d’un tableau dans une cha&icirc;ne, avec une cha&icirc;ne de 
     jointure.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>implode</function></funcdef>
     <paramdef>string <parameter>glue</parameter></paramdef>
     <paramdef>array <parameter>pieces</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne une cha&icirc;ne constitu&eacute;e de tous les &eacute;l&eacute;ments du tableau, pris dans 
     l’ordre, transform&eacute;s en cha&icirc;ne, et s&eacute;par&eacute;s par <parameter>glue</parameter>.
     <example>
      <title>Exemple avec <function>Implode</function></title>
      <programlisting role="php">
$colon_separated = implode (":", $array);
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>explode</function>, <function>join</function>,
     et <function>split</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.join">
   <refnamediv>
    <refname>join</refname>
    <refpurpose>
      Regroupe tous les &eacute;l&eacute;ments d’un tableau dans une cha&icirc;ne, avec une cha&icirc;ne de 
     jointure.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>join</function></funcdef>
     <paramdef>string <parameter>glue</parameter></paramdef>
     <paramdef>array <parameter>pieces</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>join</function> join() est un alias de <function>implode</function>, 
     et lui est identique en tous points.
    </simpara>
    <simpara>
     Voir aussi <function>explode</function>, <function>implode</function>,
     et <function>split</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ltrim">
   <refnamediv>
    <refname>ltrim</refname> 
    <refpurpose>
       Enl&egrave;ve les espaces de d&eacute;but de cha&icirc;ne.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>ltrim</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Cette fonction enl&egrave;ve les caract&egrave;res blancs plac&eacute;s au d&eacute;but d’une cha&icirc;ne et 
     retourne la cha&icirc;ne raccourcie.
     Les caract&egrave;res blancs sont : "\n", "\r", "\t", "\v", "\0", et " ".
    </para>
    <para>
      Voir aussi <function>chop</function> et <function>trim</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.md5">
   <refnamediv>
    <refname>md5</refname>
    <refpurpose>Calcule un md5 avec la cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>md5</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Crypte la cha&icirc;ne <parameter>str</parameter> en utilisant la m&eacute;thode MD5 
     (voir <ulink url="http://ds.internic.net/rfc/rfc1321.txt">RSA Data Security, Inc. MD5 Message-Digest Algorithm</ulink>.).
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.metaphone">
   <refnamediv>
    <refname>Metaphone</refname>
    <refpurpose>Calcule la cl&eacute; metaphone d'une cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>metaphone</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
    Calcule la cl&eacute; m&eacute;taphone de la cha&icirc;ne <parameter>str</parameter>.
    </para>
    <para>
     Similairement &agrave; <function>soundex</function>, m&eacute;taphone cr&eacute;e une cl&eacute; similaire
     pour des sons proches. C'est une fonction plus pr&eacute;cise que 
     <function>soundex</function> car elle prend en compte les r&egrave;gles basiques de la 
     prononciation en anglais. Les cl&eacute;s m&eacute;taphones sont de longueur variable.
    </para>
    <para>
     Metaphone a &eacute;t&eacute; d&eacute;velopp&eacute; par Lawrence Philips &lt;lphilips@verity.com>. 
     Elle est d&eacute;crit dans ["Practical Algorithms for Programmers", Binstock & Rex, 
     Addison Wesley, 1995].
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e en PHP 4.0.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.nl2br">
   <refnamediv>
    <refname>nl2br</refname>
    <refpurpose>Converti les nouvelles lignes en HTML (&lt;BR&lg;).</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>nl2br</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne la cha&icirc;ne <parameter>string</parameter> dont toutes les lignes ont &eacute;t&eacute; 
      remplac&eacute;es par '&lt;BR&gt;'.
    </para>
    <para>
      Voir aussi <function>htmlspecialchars</function> et <function>htmlentities</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ord">
   <refnamediv>
    <refname>Ord</refname>
    <refpurpose>Retourne la valeur ASCII du caract&egrave;re.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ord</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne la valeur ASCII du premier caract&egrave;re de la cha&icirc;ne 
     <parameter>string</parameter>. Cette fonction est le contraire de 
     <function>chr</function>.
     <example>
      <title>Exemple avec <function>Ord</function></title>
      <programlisting role="php">
if (ord ($str) == 10) {
    echo "Le premier caract&egrave;re de \$str est un retour chariot.\n";
}
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>chr</function>.
    </simpara> 
   </refsect1>
  </refentry>

  <refentry id="function.parse-str">
   <refnamediv>
    <refname>parse_str</refname>
    <refpurpose>
     Analyse une cha&icirc;ne, et en d&eacute;duit des variables et leur valeur.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>parse_str</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Analyse la cha&icirc;ne <parameter>str</parameter> comme si c’etait une cha&icirc;ne pass&eacute;e 
     par URL, et affecte les variables qu’elle y trouve.
    </para>
    <para>
     <example>
      <title>Utilisation de <function>parse_str</function></title>
      <programlisting role="php">
$str = "first=value&amp;second[]=this+works&amp;second[]=another";
parse_str($str);
echo $first;     /* prints "value" */
echo $second[0]; /* prints "this works" */
echo $second[1]; /* prints "another" */
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.print">
   <refnamediv>
    <refname>print</refname>
    <refpurpose>Affiche une cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef><function>print</function></funcdef>
     <paramdef>string <parameter>arg</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Affiche <parameter>arg</parameter>.
    </simpara>
    <simpara>
     Voir aussi : <function>echo</function>, <function>printf</function>,
     et <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.printf">
   <refnamediv>
    <refname>printf</refname>
    <refpurpose>Affiche une cha&icirc;ne format&eacute;e.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>printf</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>mixed 
      <parameter><optional>args</optional></parameter>...
     </paramdef>
    </funcsynopsis>
    <simpara>
     Affiche les arguments en fonction du <parameter>format</parameter>. Ce format est 
     d&eacute;crit en d&eacute;tails dans la documentation de <function>sprintf</function>.
    </simpara>
    <simpara>
     Voir aussi : <function>print</function>, <function>sprintf</function> et 
     <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.quoted-printable-decode">
   <refnamediv>
    <refname>quoted_printable_decode</refname>
    <refpurpose>
     D&eacute;code une cha&icirc;ne
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string
      <function>quoted_printable_decode</function>
     </funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Cette fonction retourne une cha&icirc;ne 8-bit r&eacute;sultant du d&eacute;codage de la cha&icirc;ne 
     <parameter>str</parameter>. 
     Cette fonction est similaire &agrave; <function>imap_qprint</function>, hormis le fait 
     qu'elle ne requiert pas le module IMAP. 
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.quotemeta">
   <refnamediv>
    <refname>QuoteMeta</refname>
    <refpurpose>Ajoute un backslash devant tous les caract&egrave;res m&eacute;ta</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>quotemeta</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne une version de la cha&icirc;ne <parameter>str</parameter>, 
     avec un backslash (<literal>\</literal>) devant tous les caract&egrave;res de la liste 
     ci-dessous :
<screen>. \\ + * ? [ ^ ] ( $ )</screen>
    </para>
    <simpara>
     Voir aussi <function>addslashes</function>, <function>htmlentities</function>, 
     <function>htmlspecialchars</function>, <function>nl2br</function> et 
     <function>stripslashes</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.rawurldecode">
   <refnamediv>
    <refname>rawurldecode</refname>
    <refpurpose>D&eacute;code une cha&icirc;ne URL.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>rawurldecode</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne une cha&icirc;ne dont les s&eacute;quences de caract&egrave;res %xy, avec xy deux valeurs 
     hexad&eacute;cimales, auront &eacute;t&eacute; remplac&eacute;es par le caract&egrave;re ASCII correspondant. Par 
     exemple, la cha&icirc;ne<screen>foo%20bar%40baz</screen> devient <screen>foo bar@baz</screen>.
    </para>
    <simpara>
     Voir aussi <function>rawurlencode</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.rawurlencode">
   <refnamediv>
    <refname>rawurlencode</refname>
    <refpurpose>Encode une cha&icirc;ne en URL, selon la RFC1738.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>rawurlencode</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne une cha&icirc;ne dont tous les caract&egrave;res non-alpha-num&eacute;riques 
     (hormis <screen>-_.</screen>.) auront &eacute;t&eacute; remplac&eacute;s par des s&eacute;quences %xy 
     (<literal>%</literal>), avec xy deux valeurs hexad&eacute;cimales. 
     Ce codage est conforme &agrave; la RFC1738 qui &eacute;vite que les caract&egrave;res sp&eacute;ciaux 
     soient interpr&eacute;t&eacute;s comme des d&eacute;limiteurs, et pour prot&eacute;ger les URL lors 
     du transfert (contrairement &agrave; certains syst&egrave;mes email). Par exemple, si vous 
     voulez mettre un mot de passe dans une URL de ftp :
     <example>
      <title>Exemple avec <function>Rawurlencode</function> example 1</title>
      <programlisting role="php">
echo '&lt;A HREF="ftp://user:', rawurlencode ('foo @+%/'),
     '@ftp.my.com/x.txt">';
      </programlisting>
     </example>
     Ou, si vous transmettez un chemin dans une URL
     <example>
      <title>Exemple avec <function>Rawurlencode</function> example 2</title>
      <programlisting role="php">
echo '&lt;A HREF="http://x.com/department_list_script/',
    rawurlencode ('sales et marketing/Miami'), '">';
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>rawurldecode</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.setlocale">
   <refnamediv>
    <refname>setlocale</refname>
    <refpurpose>Change les informations locales.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>setlocale</function></funcdef>
     <paramdef>string <parameter>category</parameter></paramdef>
     <paramdef>string <parameter>locale</parameter></paramdef>
    </funcsynopsis>
    <para>
     <parameter>Category</parameter> est une cha&icirc;ne qui sp&eacute;cifie la cat&eacute;gorie de 
     fonction qui va &ecirc;tre affect&eacute;e par les informations locales :
     <itemizedlist>
      <listitem>
       <simpara>
	LC_ALL Toutes les fonctions ci-dessous 
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_COLLATE pour les comparaison de cha&icirc;ne (en cours d’impl&eacute;mentation) 
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_CTYPE pour la classification de caract&egrave;res et les conversions, 
                 par exemple <function>strtoupper</function>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_MONETARY pour localeconv() - (en cours d’impl&eacute;mentation) 
       </simpara>
      </listitem>
      <listitem>
       <simpara> 
	LC_NUMERIC pour les s&eacute;parateurs d&eacute;cimaux
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	LC_TIME pour le format des dates et heures date avec 
               <function>strftime</function>
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Si <parameter>locale</parameter> est une cha&icirc;ne vide (<literal>""</literal>), 
     les noms locaux prendront la valeur des variables d’environnement de m&ecirc;me nom, 
     ou &agrave; partir de "LANG".
    </para>
    <para>
     Si <parameter>locale</parameter> vaut z&eacute;ro ou <literal>"0"</literal>, la valeur 
     reste inchang&eacute;e, mais l’&eacute;tat courant est retourn&eacute;.
    </para>
    <para>
     <function>setlocale</function> retourne la valeur courante, ou FALSE si la 
     fonctionnalit&eacute; n’est pas encore impl&eacute;ment&eacute;e pour la plateforme. Une cat&eacute;gorie 
     invalide provoque une alerte.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.similar-text">
   <refnamediv>
    <refname>similar_text</refname>
    <refpurpose>
      Calcule la similarit&eacute; de deux cha&icirc;nes.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>similar_text</function></funcdef>
     <paramdef>string <parameter>first</parameter></paramdef>
     <paramdef>string <parameter>second</parameter></paramdef>
     <paramdef>double 
      <parameter><optional>percent</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Cette fonction calcule la similarit&eacute; entre deux cha&icirc;nes, comme d&eacute;crit par Oliver 
     [1993]. Notez que cette impl&eacute;mentation n’utilise pas une pile, comme dans le 
     pseudo-code d’Oliver, mais un appel r&eacute;cursif qui acc&eacute;l&egrave;re parfois l’ex&eacute;cution. 
     Notez aussi que la complexit&eacute; de cet algorithme est en o(N**3) avec N la taille 
     de la plus grande cha&icirc;ne.
    </para>
    <para>
     En passant une r&eacute;f&eacute;rence comme troisi&egrave;me argument, <function>similar_text</function> 
     va calculer le pourcentage de similarit&eacute;. Il retourne le nombre de caract&egrave;res 
     correspondant l’un &agrave; l’autre, d’une cha&icirc;ne &agrave; l’autre.
    </para>
   </refsect1>
  </refentry>
    
  <refentry id="function.soundex">
   <refnamediv>
    <refname>soundex</refname>
    <refpurpose>Calcule la valeur soundex d’une cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>soundex</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
      Calcule la valeur soundex de <parameter>str</parameter>.
    </para>
    <para>
     Une valeur Soundex est telle que deux mots prononc&eacute;s de la m&ecirc;me fa&ccedil;on auront des 
     valeurs Soundex identiques. Cela permet d’effectuer des recherches dans les bases 
     de donn&eacute;es, si vous connaissez la prononciation mais pas l’orthographe. Cette 
     fonction retourne une cha&icirc;ne de 4 caract&egrave;res, commencant par une lettre.
    </para>
    <para>
     Cette fonction particuli&egrave;re a &eacute;t&eacute; d&eacute;crite par Donald Knuth dans 
     "The Art Of Computer Programming, vol. 3: Sorting And Searching", 
     Addison-Wesley (1973), pp. 391-392.
    </para>
    <para>
     <example>
      <title>Exemple avec Soundex</title>
      <programlisting role="php">
soundex ("Euler") == soundex ("Ellery") == 'E460';
soundex ("Gauss") == soundex ("Ghosh") == 'G200';
soundex ("Knuth") == soundex ("Kant") == 'H416';
soundex ("Lloyd") == soundex ("Ladd") == 'L300';
soundex ("Lukasiewicz") == soundex ("Lissajous") == 'L222';
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sprintf">
   <refnamediv>
    <refname>sprintf</refname>
    <refpurpose>Retourne une cha&icirc;ne format&eacute;e.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>sprintf</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>mixed 
      <parameter><optional>args</optional></parameter>...
     </paramdef>
    </funcsynopsis>
    <simpara>
      Retourne une cha&icirc;ne format&eacute;e avec le format <parameter>format</parameter>.
    </simpara>
    <simpara>
     La cha&icirc;ne de format est compos&eacute;e de 0 ou plus directives : g&eacute;n&eacute;ralement des 
     caract&egrave;res qui sont recopi&eacute;s tels quel (hormis <literal>%</literal>), et des 
     sp&eacute;cifications, chacune d’elle disposant de son propre param&egrave;tre. Cela 
     s’applique &agrave; <function>sprintf</function> et <function>printf</function>.
    </simpara>
    <para>
     Chaque conversion consiste, dans l’ordre:
     <orderedlist>
      <listitem>
       <simpara>
          Une option de remplissage, qui indique quel caract&egrave;re sera utilis&eacute; pour 
          le remplissage, et la taille finale de la cha&icirc;ne. Le caract&egrave;re de remplissage 
          peut &ecirc;tre un espace ou le caract&egrave;re z&eacute;ro (<literal>0</literal>).). 
          La valeur par d&eacute;faut est l'espace. Une autre valeur peut &ecirc;tre sp&eacute;cifi&eacute;e en la 
          pr&eacute;fixant par un guillemet simple (<literal>'</literal>). Voir les exemples 
          plus loin.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	  Un argument optionnel <emphasis>alignment specifier</emphasis> qui indique 
          que le r&eacute;sultat doit &ecirc;tre justifi&eacute; &agrave; droite ou &agrave; gauche. Par d&eacute;faut, il est 
          justifi&eacute; &agrave; gauche. Le caract&egrave;re <literal>-</literal> signifie : justification
          &agrave; droite.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	Argument optionnel, <emphasis>width specifier</emphasis> indique le nombre
	minimum de caract&egrave;res que la conversion devrait retourner.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	Argument optionnel, <emphasis>precision specifier</emphasis> indique le nombre
	de chiffres utilis&eacute; pour afficher un nombre &agrave; virgule flottante. Cette option
	n'a d'effet que sur les nombres &agrave; virgule, double. (Une autre fonciton pratique
	pour formater les nombres est : <function>number_format</function>.)
       </simpara>
      </listitem>
      <listitem>
       <para>
	<emphasis>type specifier</emphasis> indique le type de donn&eacute;es pass&eacute;es en argument :
	Les types possibles sont : 
	<simplelist>
	 <member>
	  <literal>%</literal> - un signe pourcentage : aucun argument n&eacute;cessaire.
	 </member>
	 <member>
	  <literal>b</literal> - l'argument est trait&eacute; comme un entier, et repr&eacute;sent&eacute; 
	  comme un nombre binaire.
	 </member>
	 <member>
	  <literal>c</literal> - l'argument est trait&eacute; comme un entier, et repr&eacute;sent&eacute; 
	  comme un nombre ascii.
	 </member>
	 <member>
	  <literal>d</literal> - l'argument est trait&eacute; comme un entier, et repr&eacute;sent&eacute; 
	  comme un nombre d&eacute;cimal.
	 </member>
	 <member>
	  <literal>f</literal> - l'argument est trait&eacute; comme un double, et repr&eacute;sent&eacute; 
	  comme un nombre &agrave; virgule flottante.
	 </member>
	 <member>
	  <literal>o</literal> - l'argument est trait&eacute; comme un entier, et repr&eacute;sent&eacute; 
	  comme un nombre octal.
	 </member>
	 <member>
	  <literal>s</literal> - l'argument est trait&eacute; tel quel, et repr&eacute;sent&eacute; 
	  comme une cha&icirc;ne.
	 </member>
	 <member>
	  <literal>x</literal> - l'argument est trait&eacute; comme un entier, et repr&eacute;sent&eacute; 
	  comme un nombre hexad&eacute;cimal (en minuscule).
	 </member>
	 <member>
	  <literal>X</literal> - l'argument est trait&eacute; comme un entier, et repr&eacute;sent&eacute; 
	  comme un nombre hexad&eacute;cimal (en majuscule).
	 </member>
	</simplelist>
       </para>
      </listitem>
     </orderedlist>
    </para>
    <simpara>
     Voir aussi : <function>printf</function> et <function>number_format</function>.
    </simpara>
   </refsect1>
   <refsect1>
    <title>Exemples</title>
    <para>
     <example>
      <title>Exemple avec <function>sprintf</function>: compl&eacute;t&eacute; avec des z&eacute;ros</title>
      <programlisting role="php">
$isodate = sprintf ("%04d-%02d-%02d", $year, $month, $day);
      </programlisting>
     </example>
     <example>
      <title>Exemple avec <function>Sprintf</function>: format mon&eacute;taire</title>
      <programlisting role="php">
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money affichera "123.1";
$formatted = sprintf ("%01.2f", $money);
// echo $formatted affichera "123.10"
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strcasecmp">
   <refnamediv>
    <refname>strcasecmp</refname>
    <refpurpose>
     Comparaison binaire de cha&icirc;nes, insensible &agrave; la casse.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>strcasecmp</function></funcdef>
     <paramdef>string <parameter>str1</parameter></paramdef>
     <paramdef>string <parameter>str2</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne < 0 si <parameter>str1</parameter> est plus petit que 
     <parameter>str2</parameter>; > 0 si <parameter>str1</parameter>
     est plus grand que <parameter>str2</parameter>, et 0 si ils sont &eacute;gaux.
    <example>
      <title>Exemple avec <function>strcasecmp</function></title>
      <programlisting role="php">
$var1 = "Bonjour";
$var2 = "bonjour";
if ( !strcasecmp($var1,$var2) ) {
    echo '$var1 est &eacute;gal &agrave; $var2, &agrave; la casse pr&egrave;s.';
}
      </programlisting>
    </example>
    </para>
    <simpara>
     Voir aussi <function>ereg</function>, <function>strcmp</function>,
     <function>substr</function>, <function>stristr</function>, et
     <function>strstr</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strchr">
   <refnamediv>
    <refname>strchr</refname> 
    <refpurpose>
     Recherche la premi&egrave;re occurrence d’un caract&egrave;re.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strchr</function></funcdef>
     <paramdef>string <parameter>haystack</parameter></paramdef>
     <paramdef>string <parameter>needle</parameter></paramdef>
    </funcsynopsis>
    <para>
       Cette fonction est un alias de <function>strstr</function>, et lui est 
       identique en tous points.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strcmp">
   <refnamediv>
    <refname>strcmp</refname>
    <refpurpose>Comparaison binaire de cha&icirc;nes.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>strcmp</function></funcdef>
     <paramdef>string <parameter>str1</parameter></paramdef>
     <paramdef>string <parameter>str2</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Retourne < 0 si <parameter>str1</parameter> est plus petit que 
     <parameter>str2</parameter>; > 0 si <parameter>str1</parameter>
     est plus grand que <parameter>str2</parameter>, et 0 si ils sont &eacute;gaux.
    </simpara>
    <simpara>
     Notez bie nque la comparaison est sensible &agrave; la casse.
    </simpara>
    <simpara>
     Voir aussi <function>ereg</function>, <function>strcasecmp</function>, 
     <function>substr</function>, <function>stristr</function> et 
     <function>strstr</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strcspn">
   <refnamediv>
    <refname>strcspn</refname>
    <refpurpose>
     Recherche la longueur du premier segment de cha&icirc;ne qui ne corresponde pas 
     au masque donn&eacute;.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>strcspn</function></funcdef>
     <paramdef>string <parameter>str1</parameter></paramdef>
     <paramdef>string <parameter>str2</parameter></paramdef>
    </funcsynopsis>
    <simpara>
       Retourne la longueur du premier segment de la cha&icirc;ne <parameter>str1</parameter>
       qui <emphasis>ne</emphasis> contiennent <emphasis>pas</emphasis> aucun des 
       caract&egrave;res de la cha&icirc;ne <parameter>str2</parameter>.
    </simpara>
    <simpara>
     Voir aussi <function>strspn</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strip-tags">
   <refnamediv>
    <refname>strip_tags</refname>
    <refpurpose>Enl&egrave;ve les balises HTML et PHP.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strip_tags</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
     <paramdef>string 
      <parameter><optional>allowable_tags</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
       Cette fonction recherche et supprime toutes les balises HTML et PHP d'une cha&icirc;ne.
       En cas de balises non ferm&eacute;es, ou de balises mal form&eacute;es, elle g&eacute;n&egrave;re une erreur. 
       Cette fonction utilise le m&ecirc;me syst&egrave;me que la fonction <function>fgetss</function>.
    </para>
    <para>
     Vous pouvez utiliser l'option <parameter><optional>allowable_tags</optional></parameter>
     pour sp&eacute;ficier les balises qui seront ignor&eacute;es.
     <note>
      <para>
       <parameter>Allowable_tags</parameter> a &eacute;t&eacute; ajout&eacute; en PHP 3.0.13, et PHP4B3.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.stripcslashes">
   <refnamediv>
    <refname>StripCSlashes</refname>
    <refpurpose>D&eacute;quote une cha&icirc;ne quot&eacute;e avec addcslashes</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>stripcslashes</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne une cha&icirc;ne dont les backslashes ont &eacute;t&eacute; supprim&eacute;s. Cette fonction reconnait
     les <literal>\n</literal>, <literal>\r</literal> ..., et les repr&eacute;sentation octales
     et hexad&eacute;cimales utilis&eacute;es en C.
     <note>
      <simpara>
       Ajout&eacute; dans PHP4b3-dev.
      </simpara>
     </note>
    </para>
    <simpara>
     Voir aussi <function>addcslashes</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.stripslashes">
   <refnamediv>
    <refname>StripSlashes</refname>
    <refpurpose>Enl&egrave;ve les slash ajout&eacute;s par la fonction addslashes</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>stripslashes</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
       Retourne une cha&icirc;ne dont tous les slashes ont &eacute;t&eacute; supprim&eacute;s. 
       (<literal>\'</literal> devient <literal>'</literal>, ... et ainsi de suite).
       Les doubles backslashes sont remplac&eacute;s par des simples.
    </para>
    <simpara>
      Voir aussi <function>addslashes</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.stristr">
   <refnamediv>
    <refname>stristr</refname>
    <refpurpose>
      <function>strstr</function>, insensible &agrave; la casse.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>stristr</function></funcdef>
     <paramdef>string <parameter>haystack</parameter></paramdef>
     <paramdef>string <parameter>needle</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne tous les &eacute;l&eacute;ments de <parameter>haystack</parameter> &agrave; partir de la 
     premi&egrave;re occurence de <parameter>needle</parameter>, jusqu'&agrave; la fin.
     <parameter>needle</parameter> et <parameter>haystack</parameter>
     sont examin&eacute;s sans tenir compte de la casse.
    </para>
    <para>
     Si <parameter>needle</parameter> n'est pas trouv&eacute;, retourne FALSE.
    </para>
    <para>
     Si <parameter>needle</parameter> n'est pas une cha&icirc;ne, elle est convertie en entier,
     est utilis&eacute;e comme si elle &eacute;tait pass&eacute;e &agrave; <function>chr</function>.
    </para>
    <para>
     Voir aussi <function>strchr</function>, <function>strrchr</function>, 
     <function>substr</function>, et <function>ereg</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strlen">
   <refnamediv>
    <refname>strlen</refname>
    <refpurpose>Retourne la longueur de la cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>strlen</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne la longueur de la cha&icirc;ne <parameter>string</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strpos">
   <refnamediv>
    <refname>strpos</refname>
    <refpurpose>
       Recherche la derni&egrave;re occurrence d’un caract&egrave;re dans une cha&icirc;ne.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>strpos</function></funcdef>
     <paramdef>string <parameter>haystack</parameter></paramdef>
     <paramdef>string <parameter>needle</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>offset</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
       Retourne la position num&eacute;rique de la premi&egrave;re occurence de 
       <parameter>needle</parameter> dans la cha&icirc;ne <parameter>haystack</parameter>. 
       Contrairement &agrave; <function>strrpos</function>, <parameter>needle</parameter> peut
       &ecirc;tre une cha&icirc;ne.
    </para>
    <para>
    Si <parameter>needle</parameter> n'est pas trouv&eacute;e, retourne FALSE.
     <note>
      <para>
       Il est facile de confondre la valeur de retour "caract&egrave;re trouv&eacute; &agrave; la position 0"
       et "caract&egrave;re introuvable". Voici comment faire la diff&eacute;rence : 
       <informalexample>
	<programlisting role="php">
// PHP 4.0b3 et plus r&eacute;cent :
$pos = strpos ("b", $mystring);
if ($pos === false) { // note: trois &eacute;gal signes
    // non trouv&eacute;
}

// versions plus anciennes que 4.0b3:
$pos = strpos ("b", $mystring);
if (is_string ($pos) && !$pos) {
    // non trouv&eacute;
}
	</programlisting>
       </informalexample>
      </para>
     </note>
    </para>
    <para>
      Si <parameter>needle</parameter> n'est pas une cha&icirc;ne, elle est convertie 
      en entier, et utilis&eacute;e comme la valeur ASCII d'un caract&egrave;re.
    </para>
    <para>
     L'argument optionnel <parameter>offset</parameter> permet de pr&eacute;ciser le caract&egrave;re
     &agrave; partir duquel chercher, dans <parameter>haystack</parameter>. La position doit
     &ecirc;tre relative au d&eacute;but de la cha&icirc;ne <parameter>haystack</parameter>.
    </para>
    <para>
     Voir aussi <function>strrpos</function>, <function>strrchr</function>, 
      <function>substr</function>, <function>stristr</function> et 
      <function>strstr</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strrchr">
   <refnamediv>
    <refname>strrchr</refname>
    <refpurpose>
     Recherche la derni&egrave;re occurrence d’un caract&egrave;re dans une cha&icirc;ne
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strrchr</function></funcdef>
     <paramdef>string <parameter>haystack</parameter></paramdef>
     <paramdef>string <parameter>needle</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cette fonction retourne la partie de la cha&icirc;ne <parameter>haystack</parameter>
      qui commence &agrave; la derni&egrave;re occurence de <parameter>needle</parameter> et va 
      jusqu'&agrave; la fin de la cha&icirc;ne <parameter>haystack</parameter>.
    </para>
    <para>
      Retourne FALSE si <parameter>needle</parameter> n'est pas trouv&eacute;.
    </para>
    <para>
      Si <parameter>needle</parameter> contient plus d'un caract&egrave;re, les autres 
      sont ignor&eacute;s.
    </para>
    <para>
     Si <parameter>needle</parameter> n'est pas une cha&icirc;ne, il est converti en
     un entier, et utilis&eacute; comme valeur ordinale.
     <example>
      <title>Exemple avec <function>Strrchr</function></title>
      <programlisting role="php">
// lis le dernier repertoire de $PATH
$dir = substr (strrchr ($PATH, ":"), 1);

// lis tout apr&egrave;s la derni&egrave;re ligne
$text = "Line 1\nLine 2\nLine 3";
$last = substr (strrchr ($text, 10), 1 );
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi <function>substr</function>,
     <function>stristr</function>, et <function>strstr</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.str-repeat">
   <refnamediv>
    <refname>str_repeat</refname>
    <refpurpose>R&eacute;p&eacute;te une cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>str_repeat</function></funcdef>
     <paramdef>string <parameter>input</parameter></paramdef>
     <paramdef>int <parameter>multiplier</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne <parameter>input_str</parameter> r&eacute;p&eacute;t&eacute;es <parameter>multiplier</parameter>
     fois. <parameter>multiplier</parameter> doit &ecirc;tre plus grand que 0.
    </para>
    <example>
     <title>Exemple avec <function>Str_repeat</function></title>
     <programlisting role="php">
echo str_repeat ("-=", 10);
     </programlisting>
    </example>
    <para>
     Cet exemple affichera "-=-=-=-=-=-=-=-=-=-=".
    </para>
    <note>
     <para>
      Cette fonction a &eacute;t&eacute; ajout&eacute;e en PHP 4.0.
     </para> 
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.strrev">
   <refnamediv>
    <refname>strrev</refname>
    <refpurpose>Inverse l'ordre des caract&egrave;res d'une cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strrev</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
	Retourne <parameter>string</parameter>, apr&egrave;s avoir chang&eacute; l'ordre des caract&egrave;res.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strrpos">
   <refnamediv>
    <refname>strrpos</refname>
    <refpurpose>
     Recherche la derni&egrave;re occurrence d’un caract&egrave;re dans une cha&icirc;ne.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>strrpos</function></funcdef>
     <paramdef>string <parameter>haystack</parameter></paramdef>
     <paramdef>char <parameter>needle</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne la position num&eacute;rique de la derni&egrave;re occurence de 
     <parameter>needle</parameter> dans la cha&icirc;ne <parameter>haystack</parameter> string. 
     Cette fonction ne peut accepter qu'un seul caract&egrave;re. 
    </para>
    <para>
     Si <parameter>needle</parameter> n'est pas trouv&eacute;, retourne FALSE.
    </para>
    <para>
     Si <parameter>needle</parameter> n'est pas une cha&icirc;ne, elle est convertie en 
     entier, et utilis&eacute;e comme la valeur ASCII d'un caract&egrave;re.
    </para>
    <para>
     Voir aussi <function>strpos</function>, <function>strrchr</function>, 
     <function>substr</function>, <function>stristr</function> et 
     <function>strstr</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strspn">
   <refnamediv>
    <refname>strspn</refname>
    <refpurpose>
     Retourne la longueur du premier segment qui v&eacute;rifie le masque.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>strspn</function></funcdef>
     <paramdef>string <parameter>str1</parameter></paramdef>
     <paramdef>string <parameter>str2</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Retourne la longueur du premier segment de <parameter>str1</parameter> 
     qui est constitu&eacute; enti&egrave;rement de caract&egrave;res dans la cha&icirc;ne 
     <parameter>str2</parameter>.
    </simpara>
    <simpara>
     Voir aussi <function>strcspn</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.strstr">
   <refnamediv>
    <refname>strstr</refname>
    <refpurpose>Trouve la premi&egrave;re occurence d'une cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strstr</function></funcdef>
     <paramdef>string <parameter>haystack</parameter></paramdef>
     <paramdef>string <parameter>needle</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne toute la cha&icirc;ne <parameter>haystack</parameter> &agrave; partir de la premi&egrave;re
    occurrence de <parameter>needle</parameter>, jusqu'&agrave; la fin.
    </para>
    <para>
     Si <parameter>needle</parameter> n'est pas trouv&eacute;, retourne FALSE.
    </para>
    <para>
     Si <parameter>needle</parameter> n'est pas une cha&icirc;ne, elle est convertie en 
     entier, et utilis&eacute;e comme valeur ordinale d'un caract&egrave;re.
     <example>
      <title>Exemple avec <function>Strstr</function></title>
      <programlisting role="php">
$email = 'sterling@designmultimedia.com';
$domain = strstr ($email, '@');
print $domain; // affiche designmultimedia.com
      </programlisting>
     </example> 
    </para>
    <para>
     Voir aussi <function>stristr</function>, <function>strrchr</function>, 
     <function>substr</function>, et <function>ereg</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strtok">
   <refnamediv>
    <refname>strtok</refname>
    <refpurpose>Morcelle une cha&icirc;ne</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strtok</function></funcdef>
     <paramdef>string <parameter>arg1</parameter></paramdef>
     <paramdef>string <parameter>arg2</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>strtok</function> est utilis&eacute;e pour morceller une cha&icirc;ne. 
     Pour cela, si vous avez une cha&icirc;ne du type "ceci est une cha&icirc;ne exemple", 
     vous pouvez la morceller en mots, en utilisant ' ' comme d&eacute;limiteur.
     <example>
      <title>Exemple avec <function>Strtok</function></title>
      <programlisting role="php">
$string = "ceci est une cha&icirc;ne exemple";
$tok = strtok ($string," ");
while ($tok) {
    echo "Mot=$tok&lt;br>";
    $tok = strtok (" ");
}
      </programlisting>
     </example>
    </para>
    <para>
     Notez que seul, le premier appel &agrave; <function>strtok</function> utilise l'argument 
     cha&icirc;ne. Apr&egrave;s, chaque appel &agrave; strtok ne requiert que le d&eacute;limiteur &agrave; utiliser. 
     Pour recommencer, vous pouvez simplement appeler <function>strtok</function> avec 
     un nouvel argument, pour l'initialiser.
     Notez que vous pouvez mettre des d&eacute;limiteurs multiples. La cha&icirc;ne sera morcell&eacute;e 
     &agrave; chaque fois qu'on rencontrera un des d&eacute;limiteurs.
    </para>
    <para>
     Soyez prudents avec les d&eacute;limiteurs qui sont &eacute;gaux &agrave; "0". Cette valeur sera 
     confondue avec FALSE.
    </para>
    <para>
     Voir aussi <function>split</function> et <function>explode</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strtolower">
   <refnamediv>
    <refname>strtolower</refname>
    <refpurpose>Met tous les caract&egrave;res en minuscule.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strtolower</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne <parameter>string</parameter> avec tous les caract&egrave;res alphab&eacute;tiques en 
     minuscule.
    </para>
    <para>
     Notez que le caract&egrave;re 'alphab&eacute;tique' est d&eacute;termin&eacute; par la table de caract&egrave;res
     locale. Par exemple, dans la table des caract&egrave;res par d&eacute;faut du "C", des caract&egrave;res 
     tels que a-umlaut (ä) ne seront pas convertis.
    </para>
    <example>
     <title>Exemple avec <function>Strtolower</function></title>
     <programlisting role="php">
$str = "Marie A Un Petit Agneau, Et Elle L'Adore";
$str = strtolower($str);	
print $str; # Affiche : marie a un petit agneau, et elle l'adore
     </programlisting>
    </example>
    <para>
     Voir aussi <function>strtoupper</function> et <function>ucfirst</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strtoupper">
   <refnamediv>
    <refname>strtoupper</refname>
    <refpurpose>Met tous les caract&egrave;res en majuscule.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strtoupper</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne <parameter>string</parameter> avec tous ses caract&egrave;res alphab&eacute;tiques 
     mis en majuscule.
    </para>
    <para>
     Notez que le caract&egrave;re 'alphab&eacute;tique' est d&eacute;termin&eacute; par la table de caract&egrave;res
     locale. Par exemple, dans la table des caract&egrave;res par d&eacute;faut du "C", des caract&egrave;res 
     tels que a-umlaut (ä) ne seront pas convertis.
    </para>
    <example>
     <title>Exemple avec <function>Strtoupper</function></title>
     <programlisting role="php">
$str = "Marie A Un Petit Agneau, Et Elle L'Adore";
$str = strtoupper ($str);	
print $str; # Affiche : MARIE A UN PETIT AGNEAU, ET ELLE L'ADORE
     </programlisting>
    </example>
    <para>
     Voir aussi <function>strtolower</function> et <function>ucfirst</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.str-replace">
   <refnamediv>
    <refname>str_replace</refname>
    <refpurpose>
     Remplace toutes les occurrences d’une cha&icirc;ne par une autre.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>str_replace</function></funcdef>
     <paramdef>string <parameter>needle</parameter></paramdef>
     <paramdef>string <parameter>str</parameter></paramdef>
     <paramdef>string <parameter>haystack</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cette fonction remplace toutes les occurences de <parameter>needle</parameter> 
      dans <parameter>haystack</parameter> par la cha&icirc;ne <parameter>str</parameter>.
      Si vous n'avez pas besoin de r&egrave;gles de remplacement sophistiqu&eacute;es, 
      vous pouvez toujours utiliser <function>ereg_replace</function>.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>Str_replace</function></title>
      <programlisting role="php">
$bodytag = str_replace ("%body%", "black", "&lt;body text=%body%>");
      </programlisting>
     </example>
    </para>
    <para>
      Cette fonction n'alt&egrave;re pas les donn&eacute;es binaires.
    </para>
    <note>
     <para>
      <function>Str_replace</function> a &eacute;t&eacute; ajout&eacute;e dans PHP 3.0.6, mais &eacute;tait 
      erron&eacute;e jusqu'&agrave; PHP 3.0.8.
     </para>
    </note>
    <para>
     Voir aussi <function>ereg_replace</function> et <function>strtr</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.strtr">
   <refnamediv>
    <refname>strtr</refname>
    <refpurpose>Remplace toutes les occurrences d’un caract&egrave;re par un autre.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>strtr</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
     <paramdef>string <parameter>from</parameter></paramdef>
     <paramdef>string <parameter>to</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cette fonction travaille sur <parameter>str</parameter>, remplacant chaque 
      occurence de chaque caract&egrave;re de la cha&icirc;ne <parameter>from</parameter> 
      correspondant &agrave; la cha&icirc;ne <parameter>to</parameter> et retourne le r&eacute;sultat.
    </para>
    <para>
      Si <parameter>from</parameter> et <parameter>to</parameter> sont de longueur 
      diff&eacute;rentes, les caract&egrave;res en trop sont ignor&eacute;s.
     <example>
      <title>Exemple avec <function>Strtr</function></title>
      <programlisting role="php">
$addr = strtr($addr, "AAö", "aao");
      </programlisting>
     </example>
    </para>
    <para>
     <function>strtr</function> peut aussi &ecirc;tre appel&eacute;e avec deux arguments. 
     Dans ce cas, elle se comporte diff&eacute;remment : <parameter>from</parameter> 
     doit &ecirc;tre un tableau associatif contenant des paires de cha&icirc;nes, qui seront
     remplac&eacute;es dans la cha&icirc;ne source. <function>strtr</function> recherchera toujours
     la cha&icirc;ne la plus longue, et la remplacera en premier. Elle ne remplacera jamais
     une portion de cha&icirc;ne qu'elle &agrave; d&eacute;j&agrave; remplac&eacute;.
    </para>
    <para>
     Exemples:
     <informalexample>
      <programlisting role="php">
$trans = array ("hello" => "hi", "hi" => "hello");
echo strtr("hi all, I said hello", $trans) . "\n";
      </programlisting>
     </informalexample>
     Cete exemple affichera : "hello all, I said hi",
    </para>
    <note>
     <simpara>
      Travailler avec deux arguments a &eacute;t&eacute; ajout&eacute; dans PHP 4.0.
     </simpara>
    </note>
    <para>
     Voir aussi <function>ereg_replace</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.substr">
   <refnamediv>
    <refname>substr</refname>
    <refpurpose>Retourne une partie de la cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>substr</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
     <paramdef>int <parameter>start</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>length</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
      <function>Substr</function> retourne une portion de <parameter>string</parameter>,
      sp&eacute;cifi&eacute;e avec le d&eacute;but <parameter>start</parameter> et la longeur 
      <parameter>length</parameter>.
    </para>
    <para>
      Si <parameter>start</parameter>est positif, la cha&icirc;ne retourn&eacute;e commencera au 
      caract&egrave;re <parameter>start</parameter> de la cha&icirc;ne <parameter>string</parameter>.
      Par exemple:
    </para>  
    <para>
     Exemples:
     <informalexample>
      <programlisting role="php">
$rest = substr ("abcdef", 1);    // retourne "bcdef"
$rest = substr ("abcdef", 1, 3); // retourne "bcd"
      </programlisting>
     </informalexample>
    </para>
    <para>
      Si <parameter>start</parameter> est n&eacute;gatif, la cha&icirc;ne retourn&eacute;e commencera au 
      caract&egrave;re <parameter>start</parameter> de la cha&icirc;ne <parameter>string</parameter>,
      en partant de la fin. 
      Par exemple:
</para>  
    <para>
     Exemples:
     <informalexample>
      <programlisting role="php">
$rest = substr ("abcdef", -1);    // retourne "f"
$rest = substr ("abcdef", -2);    // retourne "ef"
$rest = substr ("abcdef", -3, 1); // retourne "d"
      </programlisting>
     </informalexample>
    </para>
    <para>
      Si <parameter>length</parameter> est donn&eacute; et positif, la cha&icirc;ne retourn&eacute;e aura 
      la longueur <parameter>length</parameter>. Si <parameter>length</parameter> est 
      donn&eacute; et n&eacute;gatif, la cha&icirc;ne retourn&eacute;e aura la longueur 
      <parameter>length</parameter>, en partant de la fin.
    </para>
    <para>
     Exemples:
     <informalexample>
      <programlisting role="php">
$rest = substr ("abcdef", 1, -1); // retourne "bcde"
      </programlisting>
     </informalexample>
    </para>
    <para>
     Voir aussi <function>strrchr</function> et <function>ereg</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.substr-replace">
   <refnamediv>
    <refname>substr_replace</refname>
    <refpurpose>Remplace dans une sous partie de cha&icirc;ne</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>substr_replace</function></funcdef>
     <paramdef>string <parameter>string</parameter></paramdef>
     <paramdef>string <parameter>replacement</parameter></paramdef>
     <paramdef>int <parameter>start</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>length</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>substr_replace</function> effectue un remplacement dans la portion de
     <parameter>string</parameter> d&eacute;limit&eacute;e par le caract&egrave;re <parameter>start</parameter>
     et de longueur optionnelle <parameter>length</parameter>. Le remplacement est
     fait avec la cha&icirc;ne <parameter>replacement</parameter>. Le r&eacute;sultat est retourn&eacute;.
    </para>
    <para>
     Si <parameter>start</parameter> est positif, le remplacement commencera au 
     caract&egrave;re <parameter>start</parameter>, dans la cha&icirc;ne <parameter>string</parameter>.
    </para>
    <para>
     Si <parameter>start</parameter> est n&eacute;gative, le remplacement commencera au 
     caract&egrave;re <parameter>start</parameter> en partant de la fin de la cha&icirc;ne 
     <parameter>string</parameter>.
    </para>
    <para>
      Si <parameter>length</parameter> est donn&eacute; et positif, la cha&icirc;ne retourn&eacute;e aura 
      la longueur <parameter>length</parameter>. Si <parameter>length</parameter> est 
      donn&eacute; et n&eacute;gatif, la cha&icirc;ne retourn&eacute;e aura la longueur 
      <parameter>length</parameter>, en partant de la fin.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>Substr_replace</function></title>
      <programlisting role="php">
&lt;?php
$var = 'ABCDEFGH:/MNRPQR/';
echo "Original: $var&lt;hr&gt;\n";

/* Ces deux exemples remplacent tout $var avec 'bob'. */
echo substr_replace ($var, 'bob', 0) . "&lt;br&gt;\n";
echo substr_replace ($var, 'bob', 0, strlen ($var)) . "&lt;br&gt;\n";

/* Ins&egrave;re 'bob' &agrave; gauche, du d&eacute;but de $var. */
echo substr_replace ($var, 'bob', 0, 0) . "&lt;br&gt;\n";

/* Ces deux exemples remplacent 'MNRPQR' dans $var avec 'bob'. */
echo substr_replace ($var, 'bob', 10, -1) . "&lt;br&gt;\n";
echo substr_replace ($var, 'bob', -7, -1) . "&lt;br&gt;\n";

/* Efface 'MNRPQR' dans $var. */
echo substr_replace ($var, '', 10, -1) . "&lt;br&gt;\n";
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi <function>str_replace</function> et <function>substr</function>.
    </para>
    <note>
     <simpara>
      <function>Substr_replace</function> a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.trim">
   <refnamediv>
    <refname>trim</refname> 
    <refpurpose>
      Enl&egrave;ve les espaces de fin et de fin de cha&icirc;ne.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>trim</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cette fonction retire les espaces blancs de d&eacute;but et de fin de cha&icirc;ne, et 
      retourne la cha&icirc;ne nettoy&eacute;e. Les espaces blancs sont :  
      "\n", "\r", "\t", "\v", "\0", et " " (espace).
    </para>
    <para>
     Voir aussi <function>chop</function> et <function>ltrim</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ucfirst">
   <refnamediv>
    <refname>ucfirst</refname> 
    <refpurpose>
      Force le premier caract&egrave;re d’une cha&icirc;ne en majuscule.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>ucfirst</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
      Met le premier caract&egrave;re d'une cha&icirc;ne <parameter>str</parameter> en majuscule, si 
      ce caract&egrave;re est alphab&eacute;tique.
    </para>
    <para>
      Notez que le caract&egrave;re 'alphab&eacute;tique' est d&eacute;termin&eacute; par la table de caract&egrave;res 
      locale. Par exemple, dans la table des caract&egrave;res par d&eacute;faut du "C", des 
      caract&egrave;res tels que a-umlaut (ä) ne seront pas convertis.
    <example>
        <title>Exemple avec <function>ucfirst</function></title>
        <programlisting role="php">    
$text = 'marie a un petit agneau, et l'adore.';
$text = ucfirst($text); // $text vaut : Marie a un petit agneau, et l'adore
        </programlisting>
    </example>
    </para>
    <para>
     Voir aussi <function>strtoupper</function> et <function>strtolower</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ucwords">
   <refnamediv>
    <refname>ucwords</refname> 
    <refpurpose>
     Force le premier caract&egrave;re de chaque mot d’une cha&icirc;ne en majuscule
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>ucwords</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
     Met le premier caract&egrave;re de chaque mot de la cha&icirc;ne <parameter>str</parameter> si ce caract&egrave;re est une lettre.
    <example>
       <title>Exemple avec <function>ucwords</function></title>
       <programlisting role="php">
$text = "marie a un petit agneau, et l'adore.";
$text = ucwords($text); // $text vaut : Marie A Un Petit Agneau, Et l'Adore.
       </programlisting>
    </example>
    </para>
    <para>
     Voir aussi <function>strtoupper</function>, <function>strtolower</function> et 
     <function>ucfirst</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
