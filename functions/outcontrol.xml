 <reference id="ref.outcontrol">
  <title>Entr&eacute;es/sorties</title>
  <titleabbrev>Entr&eacute;es/sorties</titleabbrev>
  <partintro>
   <para>
    Les fonctions d'entr&eacute;e/sorties vous permettent de contr&ocirc;ler
    quand les donn&eacute;es sont envoy&eacute;es par le script. Cela peut
    &ecirc;tre utile dans certaines situations, notamment si vous devez
    envoyer des ent&ecirc;tes au navigateur apr&egrave;s avoir envoy&eacute;
    des donn&eacute;es. Ces fonctions n'affectent pas les ent&ecirc;tes
    envoy&eacute;s par la fonction <function>header</function> ou les
    cookies envoy&eacute;s par <function>setcookie</function>. Seules les
    fonctions telles que <function>echo</function> et les donn&eacute;es entre
    blocs PHP sont affect&eacute;s.
   </para>
   <para>
    <example>
     <title>Exemple de gestion des sorties</title>
     <programlisting role="php">
&lt;?php
ob_start();
echo "Bonjour\n";
setcookie ("nom_du_cookie", "valeur_du_cookie");
ob_end_flush();
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    Dans l'exemple ci-dessus, la fonction <function>echo</function>
    est stock&eacute;e dans un buffer jusqu'&agrave; l'appel de la fonction
    <function>ob_end_flush</function> was called. Dans le m&ecirc;me
    temps, l'appel &agrave; <function>setcookie</function> a r&eacute;ussi
    &agrave; cr&eacute;er un cookie, sans g&eacute;n&eacute;rer d'erreur.
    (D'habitude, vous devez envoyer les ent&ecirc;tes avant les donn&eacute;es).
   </para>
   <para>
    Voir aussi <function>header</function> et <function>setcookie</function>.
   </para>
  </partintro>
  <refentry id="function.flush">
   <refnamediv>
    <refname>flush</refname>
    <refpurpose>Vide les buffers de sorties.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>flush</function></funcdef>
     <void/>
     </funcprototype>
    </funcsynopsis>
    <simpara>
      Vide les buffers de sortie de PHP et tous ceux que PHP utilisait
      (CGI, un serveur web, etc.).
    </simpara>
	<note>
	 <para>
		<function>flush</function> n'a aucun effet sur la bufferisation
		de votre serveur web ou du navigateur.
	 </para>
	<para>
		De nombreux serveur, essentiellement sous Windows,
		continueront &agrave; bufferiser l'affichage de votre script
		jusqu'&agrave; ce qu'il soit termin&eacute;, avant de transmettre
		les r&eacute;sultats &agrave; l'internaute.
	 </para>
	 <para>
		M&ecirc;me le navigateur peut mettre des informations en cache
		avant de les afficher. Par exemple, Netscape &eacute;crit les
		textes dasn un cache, jusqu'&agrave; ce qu'il ai recu une
		fin de ligne, ou une balise ouvrante. Il n'affichera
		pas les tables avant d'avoir recu la balise fermante
		&lt;/table&gt;.
	 </para>
    </note>
   </refsect1>
  </refentry>
  <refentry id="function.ob-start">
   <refnamediv>
    <refname>ob_start</refname>
    <refpurpose>Enclenche la bufferisation de sortie</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
       <funcdef>void <function>ob_start</function></funcdef>
      <paramdef>string
       <parameter>
        <optional>output_callback</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ob_start</function> d&eacute;marre la bufferisation de sortie.
     Tant qu'elle est enclench&eacute;e, aucune donn&eacute;es n'est
     envoy&eacute;e au client web, mais temporairement mis en buffer.
    </para>
    <para>
     Le contenu de ce buffer peut &ecirc;tre copi&eacute; dans une cha&icirc;ne
     avec la fonction <function>ob_get_contents</function>.  Pour afficher le
     contenu de ce buffer, utilisez <function>ob_end_flush</function>.  Au
     contraire, <function>ob_end_clean</function> effacera le contenu de ce buffer.
    </para>
    <para>
     Une fonction optionnelle de callback peut &ecirc;tre sp&eacute;cifi&eacute;e en
     troisi&egrave;me argument. <function>ob_start</function> prend une
     cha&icirc;ne comme param&egrave;tre, et retourne une cha&icirc;ne.
     Elle sera appel&eacute;e par <function>ob_end_flush</function> et
     recevra le contenu du buffer de sortie. Elle doit retourner un nouveau contenu
     pour le buffer de sortie : celui ci sera envoy&eacute; &agrave; la sortie
     standard.
    </para>
    <para>
     Les buffers de sortie sont g&eacute;r&eacute;s par pile, c'est &agrave; dire que
     vous pouvez appeler plusieurs <function>ob_start</function>
     simultan&eacute;ment. Assurez-vous que vous appelez
     <function>ob_end_flush</function> suffisamment souvent.
     Si plusieurs fonctions de callback sont actives, les
     contenus seront filtr&eacute;s s&eacute;quentiellement, dans l'ordre
     d'embo&icirc;tement.
    </para>
    <example>
     <title>Exemple de callback</title>
     <programlisting role="php">
&lt;?php
function c($str) {
  // Aa claar da la lana, man ama Paarrat..
  return nl2br(ereg_replace("[aeiou]", "u", $str));
}
function d($str) {
  return strip_tags($str);
}
?&gt;
&lt;?php ob_start("c"); ?&gt;
Au clair de la lune, mon ami Pierrot
&lt;?php ob_start("d"); ?&gt;
&lt;h1&gt;..Prete moi ta plume, pour ecrire un mot...&lt;/h1&gt;
&lt;?php ob_end_flush(); ?&gt;
... Ma chandelle est morte, je n'ai plus de feu
&lt;?php ob_end_flush(); ?&gt;
... Ouvre moi la porte, pour l'amour de Dieu
&lt;?php ob_end_flush(); ?&gt;
     </programlisting>
    </example>
    <para>
     Voir aussi <function>ob_get_contents</function>,<function>ob_end_flush</function>,
     <function>ob_end_clean</function>, et <function>ob_implicit_flush</function>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ob-get-contents">
   <refnamediv>
    <refname>ob_get_contents</refname>
    <refpurpose>
     Retourne le contenu du buffer de sortie
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
       <funcdef>string <function>ob_get_contents</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ob_get_contents</function> retourne le contenu du buffer
     de sortie si la bufferisation est active, ou <literal>FALSE</literal> sinon.
    </para>
    <para>
     Voir aussi <function>ob_start</function> et <function>ob_get_length</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ob-get-length">
   <refnamediv>
    <refname>ob_get_length</refname>
    <refpurpose>
     Retourne la longueur du contenu du buffer de sortie
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
       <funcdef>string <function>ob_get_length</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ob_get_length</function> retourne la longueur du contenu
     du buffer de sortie si la bufferisation est activ&eacute;e, et <literal>FALSE</literal> sinon.
    </para>
    <para>
     Voir aussi <function>ob_start</function> et <function>ob_get_contents</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ob-end-flush">
   <refnamediv>
    <refname>ob_end_flush</refname>
    <refpurpose>
     Envoie les donn&eacute;es du buffer de sortie, et &eacute;teind la
     bufferisation de sortie
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
       <funcdef>void <function>ob_end_flush</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ob_end_flush</function> envoie le contenu du buffer de sortie (s'il
     existe) et &eacute;teind la bufferisation de sortie. Si vous voulez
     continuer &agrave; manipuler la valeur du buffer, vous pouvez appeler
     <function>ob_get_contents</function> avant <function>ob_end_flush</function>
     car le contenu du buffer est d&eacute;truit apr&egrave;s un appel &agrave;
     <function>ob_end_flush</function>.
    </para>
    <para>
     Voir aussi <function>ob_start</function>,
     <function>ob_get_contents</function>, et
     <function>ob_end_clean</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ob-end-clean">
   <refnamediv>
    <refname>ob_end_clean</refname>
    <refpurpose>
     D&eacute;truit es donn&eacute;es du buffer de sortie, et &eacute;teind
     la bufferisation de sortie
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
       <funcdef>void <function>ob_end_clean</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ob_end_clean</function> d&eacute;truit les donn&eacute;es
     du buffer de sortie, et &eacute;teind la bufferisation.
    </para>
    <para>
     Voir aussi <function>ob_start</function> et <function>ob_end_flush</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ob-implicit-flush">
   <refnamediv>
    <refname>ob_implicit_flush</refname>
    <refpurpose>
     Active/d&eacute;sactive l'envoi implicite
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
       <funcdef>void <function>ob_implicit_flush</function></funcdef>
      <paramdef>int
       <parameter><optional>flag</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ob_implicit_flush</function> active/d&eacute;sactive
     l'envoi implicite (si <parameter>flag</parameter> est fourni.
     Par d&eacute;faut, il est activ&eacute;). L'envoi implicite
     signifie que toute fonction qui envoie des donn&eacute;es
     au client web veront leurs donn&eacute;es envoy&eacute;es
     imm&eacute;diatement (la fonction <function>flush</function>
     est appel&eacute;e automatiquement).
    </para>
    <para>
     Une fois que l'envoi implicite est desactiv&eacute;, le buffer de sortie ne
     sera envoy&eacute; qu'au moment de l'appel de
     <function>ob_end_flush</function>.
    </para>
    <para>
     Voir aussi <function>flush</function>, <function>ob_start</function>
     et <function>ob_end_flush</function>.
    </para>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
