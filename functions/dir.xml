 <reference id="ref.dir">
  <title>Acc&egrave;s aux dossiers</title>
  <titleabbrev>Dossiers</titleabbrev>
  <refentry id="function.chroot">
   <refnamediv>
    <refname>chroot</refname>
    <refpurpose>Change la racine</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>chroot</function></funcdef>
      <paramdef>string <parameter>directory</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>chroot</function> change la racine du script en cours,
     et la remplace par <parameter>directory</parameter>.
     <function>chroot</function> retourne <literal>FALSE</literal>
     s'il n'a pas pu modifier la racine, et <literal>TRUE</literal>
     sinon.
     <note>
      Il n'est pas conseill&eacute; d'utiliser cette fonction sur
      un site web, car il n'est pas possible de restaurer
      la racine &agrave; sa valeur initiale &agrave; la fin de la requ&ecirc;te.
      Cette fonction n'est viable que lorsque PHP est
      utilis&eacute; en CGI.
     </note>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.chdir">
   <refnamediv>
    <refname>chdir</refname>
    <refpurpose>Change de dossier</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>chdir</function></funcdef>
      <paramdef>string <parameter>directory</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      <function>chdir</function> change le dossier courant de PHP en
      <parameter>directory</parameter>. <function>chdir</function> retourne <literal>FALSE</literal>
      si l'op&eacute;ration &eacute;choue, et <literal>TRUE</literal> sinon.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.dir">
   <refnamediv>
    <refname>dir</refname>
    <refpurpose>Classe dossier</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>new <function>dir</function></funcdef>
      <paramdef>string <parameter>directory</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      Un m&eacute;canisme pseudo-objet permet la lecture d'un dossier.
      L'argument <parameter>directory</parameter> doit &ecirc;tre ouvert.
      Deux propri&eacute;t&eacute;s sont disponibles une fois le dossier
      ouvert : le pointeur peut &ecirc;tre utilis&eacute; avec d'autres
      fonctions telles que <function>readdir</function>,
      <function>rewinddir</function> et <function>closedir</function>.
      Le chemin du dossier est le chemin fourni lors de la construction
      de l'objet. Trois m&eacute;thodes permettent de lire, remettre
      &agrave; z&eacute;ro et fermer le dossier.
     <example>
      <title>Exemple avec <function>dir</function></title>
      <programlisting role="php">
&lt;?php
$d = dir("/etc");
echo "Pointeur: ".$d->handle."&lt;br>\n";
echo "Chemin: ".$d->path."&lt;br>\n";
while($entry=$d->read()) {
    echo $entry."&lt;br>\n";
}
$d->close();
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.closedir">
   <refnamediv>
    <refname>closedir</refname>
    <refpurpose>Ferme le pointeur sur le dossier.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>closedir</function></funcdef>
      <paramdef>int <parameter>dir_handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>closedir</function> ferme le pointeur de dossier
     <parameter>dir_handle</parameter>. Le dossier devait avoir
     &eacute;t&eacute; ouvert avec <function>opendir</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.getcwd">
   <refnamediv>
    <refname>getcwd</refname>
    <refpurpose>Retourne le dossier de travail</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>getcwd</function></funcdef>
      <void/>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>getcwd</function> retourne le nom du dossier courant.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.opendir">
   <refnamediv>
    <refname>opendir</refname>
    <refpurpose>
      Ouvre un dossier, et r&eacute;cup&egrave;re un pointeur dessus.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>opendir</function></funcdef>
      <paramdef>string <parameter>path</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>opendir</function> retourne un pointeur sur un dossier
     pour &ecirc;tre utilis&eacute; avec les fonctions
     <function>closedir</function>, <function>readdir</function>
     et <function>rewinddir</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.readdir">
   <refnamediv>
    <refname>readdir</refname>
    <refpurpose>Lit une entr&eacute;e du dossier.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>readdir</function></funcdef>
      <paramdef>int <parameter>dir_handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      <function>readdir</function> retourne le nom du fichier suivant dans
      le dossier identifi&eacute; par dir_handle. Les noms sont
      retourn&eacute;s dans n'importe quel ordre.
     <example>
      <title>Liste tous les fichiers du dossier courant</title>
      <programlisting role="php">
&lt;?php
$handle=opendir('.');
echo "Pointeur de dossier: $handle\n";
echo "Fichiers:\n";
while ($file = readdir($handle)) {
    echo "$file\n";
}
closedir($handle);
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     Notez que <function>readdir</function> retournera aussi les dossiers "." et
     "..".  Si vous ne les voulez pas, supprimez les simplement :
     <example>
      <title>
       Liste tous les fichiers du dossier courant, sauf . et ..
      </title>
      <programlisting role="php">
&lt;?php
$handle=opendir('.');
while ($file = readdir($handle)) {
    if ($file != "." && $file != "..") {
        echo "$file\n";
    }
}
closedir($handle);
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.rewinddir">
   <refnamediv>
    <refname>rewinddir</refname>
    <refpurpose>Retourne &agrave; la premi&egrave;re entr&eacute;e du dossier.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>rewinddir</function></funcdef>
      <paramdef>int <parameter>dir_handle</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
       <function>rewinddir</function> retourne &agrave; la premi&egrave;re
       entr&eacute;e du dossier : le prochain fichier lu sera le premier.
    </para>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
