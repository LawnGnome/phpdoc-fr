<reference id="ref.misc">
  <title>Fonctions diverses</title>
  <titleabbrev>Divers</titleabbrev>
  <partintro>
   <para>
     Ces fonctions ont &eacute;t&eacute; plac&eacute;es l&agrave;, car
     elles ne rentraient dans aucune cat&eacute;gorie ad&eacute;quate.
   </para>
  </partintro>
  <refentry id="function.connection-aborted">
   <refnamediv>
    <refname>connection_aborted</refname>
    <refpurpose>Indique si le client a abandonn&eacute; la connexion.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>connection_aborted</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>connection_aborted</function> retourne <literal>TRUE</literal> si le client a abandonn&eacute;
     la connexion. Reportez vous &agrave;
     <link linkend="features.connection-handling">Gestion des connexions</link>
     du chapitre <link linkend="features">Caract&eacute;ristiques</link>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.connection-status">
   <refnamediv>
    <refname>connection_status</refname>
    <refpurpose>Retourne les bits de status de la connexion.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>connection_status</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>connection_status</function> retourne les bits de status de la connexion.
     Reportez vous &agrave; la section
     <link linkend="features.connection-handling">gestion des connexions</link>
     pour plus de d&eacute;tails.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.connection-timeout">
   <refnamediv>
    <refname>connection_timeout</refname>
    <refpurpose>Retourne <literal>TRUE</literal> si le script a &eacute;xpir&eacute;.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>connection_timeout</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>connection_timeout</function> retourne <literal>TRUE</literal> si le script a &eacute;xpir&eacute;.
     Reportez vous &agrave; la section
     <link linkend="features.connection-handling">gestion des connexions</link>
     pour plus de d&eacute;tails.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.define">
   <refnamediv>
    <refname>define</refname>
    <refpurpose>D&eacute;finit une constante.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>define</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
     <paramdef>mixed <parameter>value</parameter></paramdef>
     <paramdef>int
      <parameter><optional>case_insensitive</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>define</function> d&eacute;finit une constante, de la m&ecirc;me
     fa&ccedil;on qu'une variable, sauf que :
     <itemizedlist>
      <listitem>
       <simpara>
	    Les constantes ne commencent pas par le signe '$'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
   	    Les constantes sont accessibles partout, de mani&egrave;re globale.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	    Les constantes ne peuvent pas &ecirc;tre red&eacute;finies, ou
	    ind&eacute;finies, une fois qu'elles ont &eacute;t&eacute; d&eacute;finies.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	    Les constantes ne repr&eacute;sentent que des valeurs scalaires :
	    il n'est pas possible de d&eacute;finir des tableaux ou des objets.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
      Le nom de la constante est donn&eacute;e par le param&egrave;tre
      <parameter>name</parameter>; sa valeur est donn&eacute;e par
      <parameter>value</parameter>.
    </para>
    <para>
     Le troisi&egrave;me param&egrave;tre optionnel
     <parameter>case_insensitive</parameter> peut prendre la valeur de
     <emphasis>1</emphasis>. Dans ce cas, le nom de la constante
     sera insensible &agrave; la casse (c'est la valeur par d&eacute;faut).
     Cela signifie que, par d&eacute;faut, CONSTANT et Constant
     repr&eacute;sentent des valeurs diff&eacute;rentes.
    </para>
    <para>
     <example>
      <title>D&eacute;finition d'une constante</title>
      <programlisting role="php">
&lt;?php
define ("CONSTANT", "Bonjour le monde.");
echo CONSTANT; // affiche "Bonjour le monde."
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
      <function>define</function> retoune <literal>TRUE</literal> en cas de succ&egrave;s et <literal>FALSE</literal> sinon.
    </para>
    <para>
      Voir aussi <function>defined</function> et la section sur les
      <link linkend="language.constants">constantes</link>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.defined">
   <refnamediv>
    <refname>defined</refname>
    <refpurpose>
      V&eacute;rifie qu'une constante existe.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>defined</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
    </funcsynopsis>
    <para>
      <function>defined</function> retourne <literal>TRUE</literal> si la constante nomm&eacute;e
      <parameter>name</parameter> a &eacute;t&eacute; d&eacute;finie,
      et <literal>FALSE</literal> sinon.
    </para>
    <para>
      Voir aussi <function>define</function> et la section sur les
      <link linkend="language.constants">constantes</link>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.die">
   <refnamediv>
    <refname>die</refname>
    <refpurpose>
      Affiche un message et termine le script courant
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>die</function></funcdef>
     <paramdef>string <parameter>message</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>die</function> affiche la cha&icirc;ne pass&eacute;e
     en param&egrave;tre, puis termine l'ex&eacute;cution
     du script. Il ne retourne rien de plus.
    </simpara>
    <para>
     <example>
      <title>Exemple avec <function>die</function></title>
      <programlisting role="php">
&lt;?php
$filename = '/path/to/data-file';
$file = fopen ($filename, 'r')
    or die("impossible d'ouvrir le fichier ($filename)");
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.eval">
   <refnamediv>
    <refname>eval</refname>
    <refpurpose>Evalue une cha&icirc;ne comme un script PHP.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>eval</function></funcdef>
     <paramdef>string <parameter>code_str</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>eval</function> &eacute;value la cha&icirc;ne
     <parameter>code_str</parameter> comme un script PHP. Parmi les utilisations
     possibles, cette fonction permet de stocker du code dans une base
     de donn&eacute;es, pour utilisation ult&eacute;rieure.
    </simpara>
    <simpara>
     Il faut bien garder en t&ecirc;te que le code pass&eacute;
     &agrave; <function>eval</function> doit &ecirc;tre valide, y
     compris les points virgules de fin de ligne et les s&eacute;quences
     d'&eacute;chappement, sinon l'ex&eacute;cution se terminera.
    </simpara>
    <simpara>
     N'oubliez pas que les variables utilis&eacute;es dans la fonction
     <function>eval</function> resteront accessibles dans le script principal.
    </simpara>
    <para>
     <example>
      <title>
       Exemple avec <function>eval</function> - inclusion de texte
      </title>
      <programlisting role="php">
&lt;?php
$string = 'tasse';
$name = 'cafe';
$str = 'Ceci est une $string avec mon $name dedans.&lt;br&gt;';
echo $str;
eval( "\$str = \"$str\";" );
echo $str;
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     L'exemple ci dessus devrait afficher :
     <computeroutput>
Ceci est une $string avec mon $name dedans.
Ceci est une tasse avec mon cafe dedans.
     </computeroutput>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.exit">
   <refnamediv>
    <refname>exit</refname>
    <refpurpose>Termine le script courant.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>exit</function></funcdef>
     <void/>
    </funcsynopsis>
    <simpara>
      <function>exit</function> termine l'analyse d'un script en cours
      d'ex&eacute;cution. Elle ne renvoie aucune valeur.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.get-browser">
   <refnamediv>
    <refname>get_browser</refname>
    <refpurpose>
      Indique de quoi est capable le navigateur client.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>object <function>get_browser</function></funcdef>
     <paramdef>string
      <parameter><optional>user_agent</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <simpara>
     <function>get_browser</function> essaie de d&eacute;terminer les
     capacit&eacute;s du navigateur client. Cela se fait en lisant
     les informations dans le fichier <filename>browscap.ini</filename>.
     Par d&eacute;faut, la valeur de $HTTP_USER_AGENT est utilis&eacute;e.
     Cependant, vous pouvez passer n'importe quelle valeur avec le
     param&egrave;tre optionnel <parameter>user_agent</parameter>
     &agrave; <function>get_browser</function>.
    </simpara>
    <simpara>
     Les informations sont retourn&eacute;es sous forme d'un objet,
     dont les diff&eacute;rents membres contiendront des informations,
     telles que les versions majeures et mineures et des cha&icirc;nes
     d'identification; des bool&eacute;ens pour des caract&eacute;ristiques
     telles que frames, JavaScript, et cookies; et ainsi de suite.
    </simpara>
    <simpara>
     M&ecirc;me si <filename>browscap.ini</filename> contient des
     informations sur de nombreux clients, il compte sur les
     utilisateurs pour &ecirc;tre mis &agrave; jour. Le format du
     fichier est facilement compr&eacute;hensible.
    </simpara>
    <para>
     L'exemple suivant montre comment on peut lister les informations
     disponibles :
     <example>
      <title>Exemple avec <function>get_browser</function></title>
      <programlisting role="php">
&lt;?php
function list_array ($array) {
    while (list ($key, $value) = each ($array)) {
        $str .= "&lt;B&gt;$key:&lt;/B&gt; $value&lt;br&gt;\n";
    }
    return $str;
}
echo "$HTTP_USER_AGENT&lt;hr&gt;\n";
$browser = get_browser();
echo list_array ((array) $browser);
?&gt;
      </programlisting>
     </example>
    </para>
    <simpara>
     L'affichage devrait ressembler &agrave; ceci :
    </simpara>
    <literallayout>
     <computeroutput>
Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)&lt;hr&gt;
&lt;B&gt;browser_name_pattern:&lt;/B&gt; Mozilla/4\.5.*&lt;br&gt;
&lt;B&gt;parent:&lt;/B&gt; Netscape 4.0&lt;br&gt;
&lt;B&gt;platform:&lt;/B&gt; Unknown&lt;br&gt;
&lt;B&gt;majorver:&lt;/B&gt; 4&lt;br&gt;
&lt;B&gt;minorver:&lt;/B&gt; 5&lt;br&gt;
&lt;B&gt;browser:&lt;/B&gt; Netscape&lt;br&gt;
&lt;B&gt;version:&lt;/B&gt; 4&lt;br&gt;
&lt;B&gt;frames:&lt;/B&gt; 1&lt;br&gt;
&lt;B&gt;tables:&lt;/B&gt; 1&lt;br&gt;
&lt;B&gt;cookies:&lt;/B&gt; 1&lt;br&gt;
&lt;B&gt;backgroundsounds:&lt;/B&gt; &lt;br&gt;
&lt;B&gt;vbscript:&lt;/B&gt; &lt;br&gt;
&lt;B&gt;javascript:&lt;/B&gt; 1&lt;br&gt;
&lt;B&gt;javaapplets:&lt;/B&gt; 1&lt;br&gt;
&lt;B&gt;activexcontrols:&lt;/B&gt; &lt;br&gt;
&lt;B&gt;beta:&lt;/B&gt; &lt;br&gt;
&lt;B&gt;crawler:&lt;/B&gt; &lt;br&gt;
&lt;B&gt;authenticodeupdate:&lt;/B&gt; &lt;br&gt;
&lt;B&gt;msn:&lt;/B&gt; &lt;br&gt;
     </computeroutput>
    </literallayout>
    <simpara>
     Pour fonctionner, votre configuration
     <link linkend="ini.sect.browscap">browscap</link>
     doit mener au fichier <filename>browscap.ini</filename>.
    </simpara>
    <simpara>
     Pour plus d'informations, (y compris pour les endroits o&uacute;
     charger le fichier
     <filename>browscap.ini</filename>), suivez la FAQ PHP &agrave;
     <ulink url="&url.php.faq;">http://www.php.net/FAQ.html</ulink>.
    </simpara>
    <note>
     <simpara>
      Browscap a &eacute;t&eacute; ajout&eacute; dans PHP version 3.0b2.
     </simpara>
    </note>
   </refsect1>
  </refentry>
<refentry id="function.highlight-file">
   <refnamediv>
    <refname>highlight_file</refname>
    <refpurpose>Colorisation de la syntaxe d'un fichier</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>highlight_file</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>highlight_file</function> affiche la syntaxe coloris&eacute;e du
     fichier <parameter>filename</parameter>, en utilisant les couleurs
     d&eacute;finies dans le moteur interne de PHP.
    </simpara>
   <para>
     <example>
      <title>Colorisation d'URL</title>
      <simpara>
       Pour configurer une URL qui peut coloriser n'importe quel script
       que vous lui passez, nous avons besoin d'utiliser la directive
       Apache &quot;ForceType&quot;, pour g&eacute;n&eacute;er une URL
       exploitable, puis utiliser la fonction
       <function>highlight_file</function> pour afficher un code propre.
      </simpara>
      <simpara>
       Dans votre configuration HTTP <filename>httpd.conf</filename>, vous
       pouvez ajouter le code suivant :
      </simpara>
      <para>
       <informalexample>
        <programlisting>
&lt;Location /source&gt;
    ForceType application/x-httpd-php
&lt;/Location&gt;
        </programlisting>
       </informalexample>
      </para>
      <simpara>
       Puis, faire un fichier appel&eacute; &quot;source&quot;, que
       vous placez dans votre racine de site web.
      </simpara>
      <para>
       <programlisting role="php">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Affichage de Source&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot?&gt;
&lt;?php
    $script = getenv (&quot;PATH_TRANSLATED&quot;);
    if(!$script) {
    echo &quot;&lt;BR&gt;&lt;B&gt;ERROR: Script Name needed&lt;/B&gt;&lt;BR&gt;&quot;;
    } else {
    if (ereg(&quot;(\.php|\.inc)$&quot;,$script)) {
    echo &quot;&lt;H1&gt;Source of: $PATH_INFO&lt;/H1&gt;\n&lt;HR&gt;\n&quot;;
    highlight_file($script);
    } else {
    echo &quot;&lt;H1&gt;ERREUR: Seuls les noms de fichier PHP ou de fichiers PH inclus sont autoris&eacute;s&lt;/H1&gt;&quot;;
    }
    }
    echo &quot;&lt;HR&gt;Trait&eacute;: &quot;.date(&quot;Y/M/d H:i:s&quot;,time());
?&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
       </programlisting>
      </para>
      <simpara>
       Alors, vous pourrez utiliser une URL telle que celle ci dessous pour afficher
       une version coloris&eacute;e de votre script &quot;/path/to/script.php&quot;.
      </simpara>
      <para>
       <informalexample>
        <programlisting role="url">
http://your.server.com/source/path/to/script.php
        </programlisting>
       </informalexample>
      </para>
     </example>
    </para>
    <simpara>
     Voir aussi <function>highlight_string</function>,
     <function>show_source</function>.
    </simpara>
   </refsect1>
  </refentry>
<refentry id="function.highlight-string">
   <refnamediv>
    <refname>highlight_string</refname>
    <refpurpose>Colorisation d'une cha&icirc;ne</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>highlight_string</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>highlight_string</function> affiche la version coloris&eacute;e
     de la cha&icirc;ne <parameter>str</parameter>, en utilisant les couleurs
     d&eacute;finies dans le moteur interne de PHP.
    </simpara>
    <simpara>
     Voir aussi <function>highlight_file</function>, <function>show_source</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ignore-user-abort">
   <refnamediv>
    <refname>ignore_user_abort</refname>
    <refpurpose>
     Active l'option d&eacute;cidant si, lors de la d&eacute;connexion du client,
     le script doit poursuivre son ex&eacute;cution ou non.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ignore_user_abort</function></funcdef>
     <paramdef>int
      <parameter><optional>setting</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <simpara>
      <function>ignore_user_abort</function> active l'option d&eacute;cidant si, lors de
      la d&eacute;connexion du client, le script doit poursuivre
      son ex&eacute;cution ou non. La fonction renvoie le param&eacute;trage
      pr&eacute;c&eacute;dent et elle peut &ecirc;tre appel&eacute;e
      sans argument pour ne pas changer le param&eacute;trage courant.
      Voir le paragraphe gestion des connexions dans le chapitre
      caract&eacute;ristiques pour une description plus compl&egrave;te
      des manipulations de connexion en PHP.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.iptcparse">
   <refnamediv>
    <refname>iptcparse</refname>
    <refpurpose>
       Analyse un bloc binaire IPTC <ulink url="&url.iptc;">&url.iptc;</ulink> et
       recherche les balises simples.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>iptcparse</function></funcdef>
     <paramdef>string <parameter>iptcblock</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>iptcparse</function> analyse un bloc binaire IPTC et recherche
     les balises simples. <function>iptcparse</function> retourne un tableau avec
     les balises comme index et les valeurs dans les valeurs de tableau
     correspondantes. En cas d'erreur, ou si aucune balise IPTC n'a &eacute;t&eacute;
     trouv&eacute;e, retourne <literal>FALSE</literal>. Voir <function>getimagesize</function> pour un exemple.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.leak">
   <refnamediv>
    <refname>leak</refname>
    <refpurpose>Fuite de m&eacute;moire.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>leak</function></funcdef>
     <paramdef>int <parameter>bytes</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>leak</function> cr&eacute;e une fuite de m&eacute;moire.
    </simpara>
    <simpara>
     <function>leak</function> est pratique pour d&eacute;bugger le
     gestionnaire de m&eacute;moire, qui doit nettoyer automatiquement
     les fuites de m&eacute;moire apr&egrave;s chaque requ&ecirc;te.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.pack">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>Compacte des donn&eacute;es dans une cha&icirc;ne binaire.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>pack</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>mixed
      <parameter><optional>args</optional></parameter> ...
     </paramdef>
    </funcsynopsis>
    <para>
     <function>pack</function> compacte les arguments dans une cha&icirc;ne binaire,
     suivant le format <parameter>format</parameter>. <function>pack</function>
     retourne la cha&icirc;ne binaire.
    </para>
    <para>
     L'id&eacute;e vient du Perl et tout le formatage fonctionne de
     la m&ecirc;me fonction qu'en Perl, mais quelques formats manquent
     encore (comme, "u" ). La cha&icirc;ne de format est compos&eacute;e
     d'une s&eacute;rie de code de formats, suivis par un quantificateur
     optionnel. Le quantificateur peut &ecirc;tre un entier, ou *
     pour la r&eacute;p&eacute;tition ind&eacute;finie. Pour les formats a,
     A, h et H, le quantificateur sp&eacute;cifie combien de
     caract&egrave;res d'un argument sont pris; pour @, c'est
     la position absolue o&uacute; placer les donn&eacute;es,
     et pour le reste, c'est le nombre de r&eacute;p&eacute;titions.
     Actuellement, les formats suivants sont impl&eacute;ment&eacute;s :
     <itemizedlist>
      <listitem>
       <simpara>
		Une cha&icirc;ne compl&eacute;t&eacute;e avec NULL
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		Une cha&icirc;ne compl&eacute;t&eacute;e avec espace (SPACE)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		Cha&icirc;ne hexad&eacute;cimale h, bit de poids faible en premier.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		Cha&icirc;ne hexad&eacute;cimale H, bit de poids fort en premier.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		c caract&egrave;re sign&eacute;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		C caract&egrave;re non sign&eacute;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		s entier court sign&eacute; (toujours sur 16 bits, ordre des bits d&eacute;pendant de la machine).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		S entier court non sign&eacute; (toujours 16 bits, ordre des bits d&eacute;pendant de la machine).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		n entier court sign&eacute; (toujours 16 bits, ordre des bits big endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		v entier cours non sign&eacute; (toujours 16 bits, ordre des bits little endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		i entier sign&eacute; (taille et ordre des bits d&eacute;pendants de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		I entier non sign&eacute; (taille et ordre des bits d&eacute;pendants de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		l entier long sign&eacute; (toujours 32 bits, ordre des bits d&eacute;pendant de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		L entier long non sign&eacute; (toujours 32 bits, ordre des bits d&eacute;pendant de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		N entier long non sign&eacute; (toujours 16 bits, ordre des bits big endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		V entier long non sign&eacute; (toujours 16 bits, ordre des bits little endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		f nombre &agrave; virgule flottante (taille et repr&eacute;sentation d&eacute;pendantes de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		d nombre &agrave; virgule flottante double (taille et repr&eacute;sentation d&eacute;pendantes de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		x bit NULL
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        X recule d'un octet
       </simpara>
      </listitem>
      <listitem>
       <simpara>
         @ rempli avec NULL, jusqu'&agrave; une position absolue
       </simpara>
      </listitem>
     </itemizedlist>
     <example>
      <title>Compactage d'une cha&icirc;ne</title>
      <programlisting role="php">
&lt;?php
$binarydata = pack ("nvc*", 0x1234, 0x5678, 65, 66);
?&gt;
      </programlisting>
      <para>
       La cha&icirc;ne binaire r&eacute;sultante aura 6 octets de long,
       et contiendra la s&eacute;quence 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
      </para>
     </example>
    </para>
    <para>
     Notez que la distinction entre sign&eacute; et non sign&eacute;
     n'affecte que la fonction <function>unpack</function>, tandis que
     la fonction <function>pack</function> fournira le m&ecirc;me
     r&eacute;sultat pour les deux formats.
    </para>
    <para>
     De plus, notez que PHP enregistre de mani&egrave;re interne et
     int&eacute;grale les valeurs : cette repr&eacute;sentation
     d&eacute;pend de la machine.  Si vous essayez d'enregistrer une
     valeur trop grande, elle risque d'&ecirc;tre convertie et de
     donner lieu &agrave; des effets de bords vicieux.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.show-source">
   <refnamediv>
    <refname>show_source</refname>
    <refpurpose>Colorisation de la syntaxe d'un fichier</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>show_source</function></funcdef>
      <paramdef>string <parameter>filename</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>show_source</function> affiche la syntaxe coloris&eacute;e du
     fichier <parameter>filename</parameter>, en utilisant les couleurs
     d&eacute;finies dans le moteur interne de PHP.
    </simpara>
    <note>
     <simpara>
      <function>show_source</function> est un alias de <function>highlight_file</function>
     </simpara>
    </note>
    <simpara>
     Voir aussi <function>highlight_string</function>,
     <function>highlight_file</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.sleep">
   <refnamediv>
    <refname>sleep</refname>
    <refpurpose>Retarde l'ex&eacute;cution.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>sleep</function></funcdef>
     <paramdef>int <parameter>seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>sleep</function> retarde l'ex&eacute;cution du programme pendant
     <parameter>seconds</parameter> secondes.
    </simpara>
    <simpara>
     Voir aussi <function>usleep</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.uniqid">
   <refnamediv>
    <refname>uniqid</refname>
    <refpurpose>G&eacute;n&eacute;re un identifiant unique.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>uniqid</function></funcdef>
     <paramdef>string <parameter>prefix</parameter></paramdef>
     <paramdef>boolean
      <parameter><optional>lcg</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <simpara>
     <function>uniqid</function> retourne un identifiant
     pr&eacute;fix&eacute; unique, bas&eacute; sur l'heure courante,
     en micro-secondes. Le pr&eacute;fixe peut servir &agrave; identifier
     facilement diff&eacute;rents h&ocirc;tes, si vous g&eacute;n&eacute;rez
     simultan&eacute;ment des fichiers depuis plusieurs h&ocirc;tes,
     &agrave; la m&ecirc;me micro-seconde.
     <parameter>prefix</parameter> peut prendre jusqu'&agrave; 114
     caract&egrave;res.
    </simpara>
    <simpara>
     Si le param&egrave;tre optionnel <parameter>lcg</parameter> est
     <literal>TRUE</literal>, <function>uniqid</function> ajoutera une entropie
     "combined LCG" &agrave; la fin de la valeur retourn&eacute;e, ce qui
     renforcera encore l'unicit&eacute; de l'identifiant.
    </simpara>
    <simpara>
     Sans <parameter>prefix</parameter> (pr&eacute;fixe vide), la
     cha&icirc;ne retourn&eacute;e fera 13 caract&egrave;res. Si
     <parameter>lcg</parameter> est &agrave; <literal>TRUE</literal>, elle fera 23
     caract&egrave;res.
    </simpara>
    <note>
     <simpara>
      Le param&egrave;tre <parameter>lcg</parameter> est utilis&eacute;
      &agrave; partir de PHP 4 et PHP 3.0.13 et ult&eacute;rieurs.
     </simpara>
    </note>
    <para>
     Si vous voulez utiliser un identifiant unique, ou bien g&eacute;rer
     des cookies, il est recommand&eacute; d'utiliser un code
     tel que celui ci :
     <informalexample>
      <programlisting role="php">
&lt;?php
$token = md5 (uniqid ("")); // pas de section al&eacute;atoire.
$better_token = md5 (uniqid (rand())); // mieux, difficile &agrave; deviner
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Ceci va cr&eacute;er un identifiant de 32 caract&egrave;re
     (un nombre hexad&eacute;cimal de 128 ) qui sera tr&egrave;s
     difficile &agrave; pr&eacute;dire.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.unpack">
   <refnamediv>
    <refname>unpack</refname>
    <refpurpose>
      D&eacute;conditionne des donn&eacute;es depuis une cha&icirc;ne binaire.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>unpack</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>string <parameter>data</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>unpack</function> d&eacute;conditionne des donn&eacute;es
     depuis une cha&icirc;ne binaire avec le format
     <parameter>format</parameter>. Retourne un tableau contenant
     les &eacute;l&eacute;ments d&eacute;conditionn&eacute;s.
    </para>
    <para>
      <function>unpack</function> se comporte l&eacute;g&egrave;rement
      diff&eacute;remment de la version Perl car les donn&eacute;es
      d&eacute;conditionn&eacute;es sont stock&eacute;es dans un
      tableau. Pour cela, il faut donner un nom &agrave; chaque
      format utilis&eacute; et les s&eacute;parer par des slash (/).
     <example>
      <title>Exemple avec <function>unpack</function></title>
      <programlisting role="php">
&lt;?php
$array = unpack ("c2chars/nint", $binarydata);
?&gt;
      </programlisting>
      <para>
      Le tableau r&eacute;sultant contiendra les entr&eacute;es suivantes :
      "chars1", "chars2" et "int".
      </para>
     </example>
    </para>
    <para>
     Pour plus de d&eacute;tails, reportez vous &agrave;:
     <function>pack</function>
    </para>
    <para>
      Il faut noter que PHP g&egrave;re les valeurs en interne
      sous forme sign&eacute;e. Si vous d&eacute;conditionnez
      une valeur qui est aussi grande que la taille utilis&eacute;e
      en interne par PHP, le r&eacute;sultat se trouvera &ecirc;tre
      un nombre n&eacute;gatif, m&ecirc;me si il a &eacute;t&eacute;
      d&eacute;conditionn&eacute; avec l'option " non sign&eacute; ".
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.usleep">
   <refnamediv>
    <refname>usleep</refname>
    <refpurpose>Retarde l'ex&eacute;cution en micro-secondes </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>usleep</function></funcdef>
     <paramdef>int <parameter>micro_seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>sleep</function> retarde l'ex&eacute;cution du programme pendant
     <parameter>micro_seconds</parameter> micro-secondes.
    </simpara>
    <simpara>
     Voir aussi <function>sleep</function>.
    </simpara>
    <note>
     <simpara>
      <function>sleep</function> est inop&eacute;rante sous Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
