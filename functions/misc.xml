 <reference id="ref.misc">
  <title>Fonctions diverses</title>
  <titleabbrev>Divers</titleabbrev>

  <partintro>
   <para>
     Ces fonctions ont &eacute;t&eacute; plac&eacute;es l&agrave;, car elles ne rentraient dans aucune cat&eacute;gorie 
     ad&eacute;quate.
   </para>
  </partintro>

  <refentry id="function.connection-aborted">
   <refnamediv>
    <refname>connection_aborted</refname>
    <refpurpose>Retourne TRUE si le client a abandonn&eacute; la connexion.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>connection_aborted</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Retourne TRUE si le client a abandonn&eacute; la connexion. Reportez vous &agrave; 
     <link linkend="features.connection-handling">Gestion des connexions</link>
     du chapitre <link linkend="features">Caract&eacute;ristiques</link>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-status">
   <refnamediv>
    <refname>connection_status</refname>
    <refpurpose>Retourne les bits de status de la connexion.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>connection_status</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
       Retourne les bits de status de la connexion. Reportez vous &agrave; la section 
       <link linkend="features.connection-handling">gestion des connexions</link>
       pour plus de d&eacute;tails. 
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-timeout">
   <refnamediv>
    <refname>connection_timeout</refname>
    <refpurpose>Retourne TRUE si le script a expir&eacute;.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>connection_timeout</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
      Retourne TRUE si le script a expir&eacute;.  Reportez vous &agrave; la section 
      <link linkend="features.connection-handling">gestion des connexions</link> 
      pour plus de d&eacute;tails. 
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.define">
   <refnamediv>
    <refname>define</refname>
    <refpurpose>D&eacute;finit une constante.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>define</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
     <paramdef>mixed <parameter>value</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>case_insensitive</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     D&eacute;finit une constante, de la m&ecirc;me fa&ccedil;on qu'une variable, sauf que : 
     <itemizedlist>
      <listitem>
       <simpara>
	Les constantes ne commencent pas par le signe '$'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	Les constantes sont accessibles partout, de mani&egrave;re globale.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	Les constantes ne peuvent pas &ecirc;tre red&eacute;finies, ou ind&eacute;finies, une fois qu'elles 
        ont &eacute;t&eacute; d&eacute;finies.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	Les constantes ne repr&eacute;sentent que des valeurs scalaires : il n'est pas possible
        de d&eacute;finir des tableaux ou des objets.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
      Le nom de la constante est donn&eacute;e par le param&egrave;tre <parameter>name</parameter>;
      sa valeur est donn&eacute;e par <parameter>value</parameter>.
    </para>
    <para>
     Le troisi&egrave;me param&egrave;tre optionnel <parameter>case_insensitive</parameter> peut 
     prendre la valeur de <emphasis>1</emphasis>. Dans ce cas, le nom de la constante 
     sera insensible &agrave; la casse (c'est la valeur par d&eacute;faut). Cela signifie que, par
     d&eacute;faut, CONSTANT et Constant repr&eacute;sentent des valeurs diff&eacute;rentes.
    </para>
    <para>
     <example>
      <title>D&eacute;finition d'une constante</title>
      <programlisting role="php">
&lt;?php
define ("CONSTANT", "Bonjour le monde.");
echo CONSTANT; // affiche "Bonjour le monde."
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
      <function>define</function> retoune TRUE en cas de succ&egrave;s et FALSE sinon.
    </para>
    <para>
      Voir aussi <function>defined</function> et la section sur les 
      <link linkend="language.constants">constantes</link>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.defined">
   <refnamediv>
    <refname>defined</refname>
    <refpurpose>
      V&eacute;rifie qu'une constante existe.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>defined</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne TRUE si la constante nomm&eacute;e <parameter>name</parameter> a &eacute;t&eacute; 
      d&eacute;finie, et FALSE sinon.
    </para>
    <para>
      Voir aussi <function>define</function> et la section sur les 
      <link linkend="language.constants">constantes</link>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.die">
   <refnamediv>
    <refname>die</refname>
    <refpurpose>
      Affiche un message et termine le script courant 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>die</function></funcdef>
     <paramdef>string <parameter>message</parameter></paramdef>
    </funcsynopsis>
    <simpara>
      Cette fonction affiche la cha&icirc;ne pass&eacute;e en param&egrave;tre, puis termine l'ex&eacute;cution 
      du script. Il ne retourne rien de plus.
    </simpara>
    <para>
     <example>
      <title>Exemple avec <function>die</function></title>
      <programlisting role="php">
&lt;?php
$filename = '/path/to/data-file';
$file = fopen ($filename, 'r')
    or die("impossible d'ouvrir le fichier ($filename)");
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.eval">
   <refnamediv>
    <refname>eval</refname>
    <refpurpose>Evalue une cha&icirc;ne comme un script PHP.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>eval</function></funcdef>
     <paramdef>string <parameter>code_str</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>eval</function> &eacute;value la cha&icirc;ne <parameter>code_str</parameter>
     comme un script PHP. Parmi les utilisations possibles, cette fonction permet 
     de stocker du code dans une base de donn&eacute;es, pour utilisation ult&eacute;rieure.
    </simpara>
    <simpara>
     Il faut bien garder en t&ecirc;te que le code pass&eacute; &agrave; <function>eval</function> doit 
     &ecirc;tre valide, y compris les points virgules de fin de ligne, et les s&eacute;quences
     d'&eacute;chappement, sinon l'ex&eacute;cution se terminera.
    </simpara> 
    <simpara>
     N'oubliez pas que les variables utilis&eacute;es dans la fonction 
     <function>eval</function> resteront accessibles dans le script principal.
    </simpara>
    <para>
     <example>
      <title>
       Exemple avec <function>Eval</function> - inclusion de texte
      </title>
      <programlisting role="php">
&lt;?php
$string = 'tasse';
$name = 'cafe';
$str = 'Ceci est une $string avec mon $name dedans.&lt;br&gt;';
echo $str;
eval( "\$str = \"$str\";" );
echo $str;
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     L'exemple ci dessus devrait afficher :
     <programlisting>
Ceci est une $string avec mon $name dedans.
Ceci est une tasse avec mon cafe dedans.
     </programlisting>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.exit">
   <refnamediv>
    <refname>exit</refname>
    <refpurpose>Termine le script courant.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>exit</function></funcdef>
     <void/>
    </funcsynopsis>
    <simpara>
      Cette fonction termine l'analyse d'un script en cours d'ex&eacute;cution. Elle ne 
      renvoie aucune valeur.
    </simpara>
   </refsect1>
  </refentry> 

  <refentry id="function.func-get-arg">
   <refnamediv>
    <refname>func_get_arg</refname>
    <refpurpose>Retourne la liste des arguments d'une fonction</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>func_get_arg</function></funcdef>
     <paramdef>int <parameter>arg_num</parameter></paramdef>
    </funcsynopsis>
    <simpara>
      Retourne l'argument &agrave; la <parameter>arg_num</parameter>-i&egrave;me position
      d'une fonction d&eacute;finie par l'utilisateur. Les positions sont index&eacute;es en 
      commencant &agrave; z&eacute;ro. <function>func_get_arg</function> g&eacute;n&eacute;rera une alerte (warning) 
      si elle est appel&eacute;e hors d'une d&eacute;finition de fonction.
    </simpara>
    <simpara>
     Si <parameter>arg_num</parameter> est plus grand que le nombre d'arguments 
     une alerte sera g&eacute;n&eacute;r&eacute;e, et <function>func_get_arg</function> retournera FALSE.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
     $numargs = func_num_args();
     echo "Nombre d'arguments: $numargs&lt;br&gt;\n";
     if ($numargs &gt;= 2) {
         echo "Deuxi&egrave;me argument : " . func_get_arg (1) . "&lt;br&gt;\n";
     }
} 

foo (1, 2, 3);
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_get_arg</function> peut &ecirc;tre utilis&eacute; conjointement avec 
     <function>func_num_args</function> et <function>func_get_args</function> 
     pour permettre aux fonctions d&eacute;finies par les utilisateurs d'accepter un 
     nombre variable d'argument.
    </simpara>
    <note>
     <simpara>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.func-get-args">
   <refnamediv>
    <refname>func_get_args</refname>
    <refpurpose>
      Retourne une tableau contenant la liste des arguments d'une fonction.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>func_get_args</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Retourne un tableau dont les &eacute;l&eacute;ments sont les arguments de la fonction courante.
     <function>func_get_args</function> g&eacute;n&eacute;rera une alerte (warning) si elle est 
     appel&eacute;e hors d'une d&eacute;finition de fonction.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
    $numargs = func_num_args();
    echo "Nombre d'arguments: $numargs&lt;br&gt;\n";
    if ($numargs &gt;= 2) {
        echo "Deuxi&egrave;me argument : " . func_get_arg (1) . "&lt;br&gt;\n";
    }
    $arg_list = func_get_args();
    for ($i = 0; $i &lt; $numargs; $i++) {
        echo "Argument $i : " . $arg_list[$i] . "&lt;br&gt;\n";
    }
} 

foo (1, 2, 3);
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_get_args</function> peut &ecirc;tre utilis&eacute; conjointement avec 
     <function>func_num_args</function> et <function>func_get_args</function> 
     pour permettre aux fonctions d&eacute;finies par les utilisateurs d'accepter 
     un nombre variable d'argument.
    </simpara>
    <note>
     <simpara>
      Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.func-num-args">
   <refnamediv>
    <refname>func_num_args</refname>
    <refpurpose>
     Retourne le nombre d'arguments pass&eacute;s &agrave; une fonction.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>func_num_args</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Retourne le nombre d'arguments pass&eacute; &agrave; la fonction courante.
     <function>func_num_args</function> g&eacute;n&egrave;rera une alerte (warning) si elle est 
     appel&eacute;e hors d'une d&eacute;finition de fonction.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
    $numargs = func_num_args();
    echo "Nombre d'arguments: $numargs\n";
} 

foo (1, 2, 3);  // affiche : 'Nomber d'arguments: 3'
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_num_args</function> peut &ecirc;tre utilis&eacute; conjointement avec 
     <function>func_get_arg</function> et <function>func_get_args</function> 
     pour permettre aux fonctions d&eacute;finies par les utilisateurs d'accepter 
     un nombre variable d'arguments.
    </simpara>
    <note>
     <simpara>
      Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.function-exists">
   <refnamediv>
    <refname>function_exists</refname>
    <refpurpose>
      Retourne TRUE si la fonction a &eacute;t&eacute; d&eacute;finie.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>function_exists</function></funcdef>
     <paramdef>string <parameter>function_name</parameter></paramdef>
    </funcsynopsis>
    <simpara>
       V&eacute;rifie la liste des fonctions d&eacute;finies, et recherche la fonction 
       <parameter>function_name</parameter>.
       Retourne TRUE si cette fonction est trouv&eacute;e, sinon FALSE.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.get-browser">
   <refnamediv>
    <refname>get_browser</refname>
    <refpurpose>
      Indique de quoi est capable le navigateur client.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>object <function>get_browser</function></funcdef>
     <paramdef>string 
      <parameter><optional>user_agent</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <simpara>
     <function>get_browser</function> essaie de determiner les capacit&eacute;s du navigateur
     client. Cela se fait en lisant les informations dans le fichier 
     <filename>browscap.ini</filename>. Par d&eacute;faut, la valeur de $HTTP_USER_AGENT est 
     utilis&eacute;e. Cependant, vous pouvez passer n'importe quelle valeur avec le param&egrave;tre 
     optionnel <parameter>user_agent</parameter> &agrave; <function>get_browser</function>.
    </simpara>
    <simpara>
     Les informations sont retourn&eacute;es sous forme d'un objet, dont les diff&eacute;rents membres
     contiendront des informations, telles que les versions majeures et mineures, et
     des cha&icirc;nes d'identification; des bool&eacute;ens pour des caract&eacute;ristiques telles que
     frames, JavaScript, and cookies; et ainsi de suite.
    </simpara>
    <simpara>
     M&ecirc;me si <filename>browscap.ini</filename> contient des informations sur de nombreux 
     clients, il compte sur les utilisateurs pour &ecirc;tre mis &agrave; jour. Le format du fichier 
     est facilement compr&eacute;hensible.
    </simpara>
    <para>
     L'exemple suivant montre comment on peut lister les informations disponibles :
     <example>
      <title>Exemple avec <function>get_browser</function></title>
      <programlisting role="php">
&lt;?php
function list_array ($array) {
    while (list ($key, $value) = each ($array)) {
        $str .= "&lt;b&gt;$key:&lt;/b&gt; $value&lt;br&gt;\n";
    }
    return $str;
}
echo "$HTTP_USER_AGENT&lt;hr&gt;\n";
$browser = get_browser();
echo list_array ((array) $browser);
?&gt;
      </programlisting>
     </example>
    </para>
    <simpara>
     L'affichage devrait ressembler &agrave; ceci : 
    </simpara>
    <programlisting>
Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)&lt;hr&gt;
&lt;b&gt;browser_name_pattern:&lt;/b&gt; Mozilla/4\.5.*&lt;br&gt;
&lt;b&gt;parent:&lt;/b&gt; Netscape 4.0&lt;br&gt;
&lt;b&gt;platform:&lt;/b&gt; Unknown&lt;br&gt;
&lt;b&gt;majorver:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;minorver:&lt;/b&gt; 5&lt;br&gt;
&lt;b&gt;browser:&lt;/b&gt; Netscape&lt;br&gt;
&lt;b&gt;version:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;frames:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;tables:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;cookies:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;backgroundsounds:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;vbscript:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;javascript:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;javaapplets:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;activexcontrols:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;beta:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;crawler:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;authenticodeupdate:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;msn:&lt;/b&gt; &lt;br&gt;
    </programlisting>
    <simpara>
     Pour fonctionner, votre configuration <link linkend="ini.sect.browscap">browscap</link> 
     doit mener au fichier <filename>browscap.ini</filename>.
    </simpara>
    <simpara>
     Pour plus d'informations, (y compris pour les endroits o&uacute; charger le fichier
     <filename>browscap.ini</filename>), suivez la FAQ PHP &agrave; 
     <ulink url="&url.php.faq;">http://www.php.net/FAQ.html</ulink>.
    </simpara>
    <note>
     <simpara>
      Browscap a &eacute;t&eacute; ajout&eacute; dans PHP version 3.0b2.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.ignore-user-abort">
   <refnamediv>
    <refname>ignore_user_abort</refname>
    <refpurpose>
     Active l'option d&eacute;cidant si, lors de la d&eacute;connexion du client, le script doit 
     poursuivre son ex&eacute;cution ou non.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ignore_user_abort</function></funcdef>
     <paramdef>int 
      <parameter><optional>setting</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <simpara>
      Cette fonction active l'option d&eacute;cidant si, lors de la d&eacute;connexion du client, 
      le script doit poursuivre son ex&eacute;cution ou non. La fonction renvoie le param&eacute;trage 
      pr&eacute;c&eacute;dent et elle peut &ecirc;tre appel&eacute;e sans argument pour ne pas changer le 
      param&eacute;trage courant. Voir le paragraphe gestion des connexions dans le chapitre 
      caract&eacute;ristiques pour une description plus compl&egrave;te des manipulations de connexion 
      en PHP. 
    </simpara>
   </refsect1>
  </refentry> 
	
  <refentry id="function.iptcparse">
   <refnamediv>
    <refname>iptcparse</refname>
    <refpurpose>
       Analyse un bloc binaire IPTC <ulink url="&url.iptc;">&url.iptc;</ulink> et 
       recherche les balises simples.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>iptcparse</function></funcdef>
     <paramdef>string <parameter>iptcblock</parameter></paramdef>
    </funcsynopsis>
    <simpara>
       Analyse un bloc binaire IPTC et recherche les balises simples. Elle retourne un 
       tableau avec les balises comme index, et les valeurs dans les valeurs de tableau 
       correspondantes. En cas d'erreur, ou si aucune balise IPTC n'a &eacute;t&eacute; trouv&eacute;e, 
       retourne FALSE. Voir <function>GetImageSize</function> pour un exemple.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.leak">
   <refnamediv>
    <refname>leak</refname>
    <refpurpose>Fuite de m&eacute;moire.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>leak</function></funcdef>
     <paramdef>int <parameter>bytes</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>Leak</function> cr&eacute;e une fuite de m&eacute;moire.
    </simpara>
    <simpara>
       Cette fonction est pratique pour d&eacute;bugger le gestionnaire de m&eacute;moire, qui doit
       nettoyer automatiquement les fuites de m&eacute;moire apr&egrave;s chaque requ&ecirc;te.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.pack">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>Compacte des donn&eacute;es dans une cha&icirc;ne binaire.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>pack</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>mixed 
      <parameter><optional>args</optional></parameter> ...
     </paramdef>
    </funcsynopsis>
    <para>
      Compacte les arguments dans une cha&icirc;ne binaire, suivant le format 
      <parameter>format</parameter>. Retourne la cha&icirc;ne binaire.
    </para>
    <para>
      L'id&eacute;e vient du Perl, et tout le formatage fonctionne de la m&ecirc;me fonction qu'en 
      Perl, mais quelques formats manquent encore (comme, "u" ). La cha&icirc;ne de format 
      est compos&eacute;e d'une s&eacute;rie de code de formats, suivis un quantificateur optionnel. 
      Le quantificateur peut &ecirc;tre un entier, ou * pour la r&eacute;p&eacute;tition ind&eacute;finie. Pour a, 
      A, h et H le quantificateur sp&eacute;cifie combien de caract&egrave;res d'un argument sont pris; 
      pour @, c'est la position absolue o&uacute; placer les donn&eacute;es, et pour le reste, c'est 
      le nombre de r&eacute;p&eacute;titions. Actuellement, les formats suivants sont impl&eacute;ment&eacute;s : 
     <itemizedlist>
      <listitem>
       <simpara>
	une cha&icirc;ne compl&eacute;t&eacute;e avec NUL
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	une cha&icirc;ne compl&eacute;t&eacute;e avec espace (SPACE)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	Cha&icirc;ne hexad&eacute;cimale h, bit de poids faible en premier.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	Cha&icirc;ne hexad&eacute;cimale H, bit de poids fort en premier.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	c caract&egrave;re sign&eacute;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	C caract&egrave;re non sign&eacute;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	s entier court sign&eacute; (toujours sur 16 bits, ordre des bits d&eacute;pendant de la machine).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	S entier court non sign&eacute; (toujours 16 bits, ordre des bits d&eacute;pendant de la machine).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	n entier court sign&eacute; (toujours 16 bits, ordre des bits big endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	v entier cours non sign&eacute; (toujours 16 bits, ordre des bits little endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	i entier sign&eacute; (taille et ordre des bits d&eacute;pendants de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	I entier non sign&eacute; (taille et ordre des bits d&eacute;pendants de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	l entier long sign&eacute; (toujours 32 bits, ordre des bits d&eacute;pendant de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	L entier long non sign&eacute; (always 32 bits, ordre des bits d&eacute;pendant de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	N entier long non sign&eacute; (toujours 16 bits, ordre des bits big endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	V ntier long non sign&eacute; (toujours 16 bits, ordre des bits little endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	f nombre &agrave; virgule flottante (taille et repr&eacute;sentation d&eacute;pendantes de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	d nombre &agrave; virgule flottante double (taille et repr&eacute;sentation d&eacute;pendantes de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
	x bit NUL 
       </simpara>
      </listitem>
      <listitem>
       <simpara>X recule d'un octet
       </simpara>
      </listitem>
      <listitem>
       <simpara>@ rempli avec NUL, jusqu'&agrave; une position absolue
       </simpara>
      </listitem>
     </itemizedlist>
     <example>
      <title>Compactage d'une cha&icirc;ne</title>
      <programlisting role="php">
$binarydata = pack ("nvc*", 0x1234, 0x5678, 65, 66);
      </programlisting>
      <para>
       La cha&icirc;ne binaire r&eacute;sultante aura 6 octets de long, et contiendra 
la s&eacute;quence 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
      </para>
     </example>
    </para>
    <para>
     Notez que la distinction entre sign&eacute; et non sign&eacute; n'affecte que la fonction 
     <function>unpack</function>, tandis que la fonction <function>pack</function> 
     fournira le m&ecirc;me r&eacute;sultat pour les deux formats.
    </para>
    <para>
     De plus, notez que PHP enregistre de mani&egrave;re interne et int&eacute;grale les valeurs : 
     cette repr&eacute;sentation d&eacute;pend de la machine.  Si vous essayez d'enregistrer une 
     valeur trop grande, elle risque d'&ecirc;tre convertie, et de donner lieu &agrave; des effets 
     de bords vicieux.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.register-shutdown-function">
   <refnamediv>
    <refname>register_shutdown_function</refname>
    <refpurpose>
      Enregistre une fonction pour ex&eacute;cution &agrave; l'extinction.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int 
      <function>register_shutdown_function</function>
     </funcdef>
     <paramdef>string <parameter>func</parameter></paramdef>
    </funcsynopsis>
    <simpara>
      Enregistre la fonction <parameter>func</parameter> pour ex&eacute;cution &agrave; la fin
      du script.
    </simpara>
    <para>
     Erreur commune : 
    </para>
    <simpara>
     Etant donn&eacute; qu'aucun affichage n'est autoris&eacute; depuis cette fonction,
     vous ne pourrez pas d&eacute;bugger en utilisant print ou echo dans cette fonction.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>
     G&eacute;n&egrave;re une repr&eacute;sentation enregistrable d'une valeur.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>serialize</function></funcdef>
     <paramdef>mixed <parameter>value</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>serialize</function> retourne une cha&icirc;ne contenant un flot d'octets 
     repr&eacute;sentant la valeur <parameter>value</parameter>, et qui pourra &ecirc;tre relue.
    </simpara>
    <simpara>
       Ceci est tr&egrave;s utile pour enregistrer ou passer des valeurs &agrave; PHP sans perdre 
       leur type ou leur structure.
    </simpara>
    <simpara>
       Pour relire la cha&icirc;ne dans PHP, utilisez<function>unserialize</function>. 
       <function>serialize</function> accepte les  <type>integer</type>, 
       <type>double</type>, <type>string</type>, <type>array</type> (multidimensionel) 
       et <type>object</type> (les propri&eacute;t&eacute;s de l'objet seront sauvegard&eacute;es, mais pas 
       ses m&eacute;thodes).
    </simpara>
    <para>
     <example>
      <title>Exemple avec <function>serialize</function></title>
      <programlisting role="php">
// $session_data contient un tableau multi-dimensionnel avec des informations
// de session concernant l'utilisateur courant. On utilise serialize() pour 
// enregistrer les informations dans une base de donn&eacute;e &agrave; la fin de la requ&ecirc;te.

$conn = odbc_connect("webdb", "php", "poulet");
$stmt = odbc_prepare($conn,
                     "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array(serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata)) {
    $stmt = odbc_prepare($conn,
                         "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &$sqldata)) {
        /* Un os ! Souffre et potasse. */
    }
}
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sleep">
   <refnamediv>
    <refname>sleep</refname>
    <refpurpose>Retarde l'ex&eacute;cution.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>sleep</function></funcdef>
     <paramdef>int <parameter>seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
        La fonction sleep retarde l'ex&eacute;cution du programme pendant 
        <parameter>seconds</parameter> secondes.
    </simpara>
    <simpara>
     Voir aussi <function>usleep</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.uniqid">
   <refnamediv>
    <refname>uniqid</refname>
    <refpurpose>G&eacute;n&eacute;re un identifiant unique.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>uniqid</function></funcdef>
     <paramdef>string <parameter>prefix</parameter></paramdef>
     <paramdef>boolean 
      <parameter><optional>lcg</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <simpara>
     <function>uniqid</function> retourne un identifiant pr&eacute;fix&eacute; unique, bas&eacute; sur 
     l'heure courante, en micro-secondes. Le pr&eacute;fixe peut servir &agrave; identifier facilement 
     diff&eacute;rents h&ocirc;tes, si vous g&eacute;n&eacute;rez simultan&eacute;ment des fichiers depuis plusieurs h&ocirc;tes,
     &agrave; la m&ecirc;me micro-seconde. <parameter>prefix</parameter> peut prendre jusqu'&agrave; 114 
     caract&egrave;res.
    </simpara>
    <simpara>
     Si le param&egrave;tre optionnel <parameter>lcg</parameter> est TRUE, <function>uniqid</function>
     ajoutera une entropie "combined LCG" &agrave; la fin de la valeur retourn&eacute;e, ce qui 
     renforcera encore l'unicit&eacute; de l'identifiant.
    </simpara>
    <simpara>
     Sans <parameter>prefix</parameter> (pr&eacute;fixe vide), la cha&icirc;ne retourn&eacute;e fera 13
     caract&egrave;res. Si <parameter>lcg</parameter> est &agrave; TRUE, elle fera 23 caract&egrave;res.
    </simpara>
    <note>
     <simpara>
      Le param&egrave;tre <parameter>lcg</parameter> est utilis&eacute; &agrave; partir de 
      PHP 4 et PHP 3.0.13 et ult&eacute;rieurs.
     </simpara>
    </note>
    <para>
     Si vous voulez utiliser un identifiant unique, ou bien g&eacute;rer des cookies,
     il est recommand&eacute; d'utiliser un code tel que celui ci : 
     <informalexample>
      <programlisting role="php">
$token = md5 (uniqid ("")); // pas de section al&eacute;atoire.
$better_token = md5 (uniqid (rand())); // mieux, difficile &agrave; deviner
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Ceci va cr&eacute;er un identifiant de 32 caract&egrave;re (un nombre hexad&eacute;cimal de 128 )
     qui sera tr&egrave;s difficile &agrave; pr&eacute;dire.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.unpack">
   <refnamediv>
    <refname>unpack</refname>
    <refpurpose>D&eacute;conditionne des donn&eacute;es depuis une cha&icirc;ne binaire.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>unpack</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>string <parameter>data</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>Unpack</function> d&eacute;conditionne des donn&eacute;es depuis une cha&icirc;ne binaire 
     avec le format <parameter>format</parameter>. 
     Retourne un tableau contenant les &eacute;l&eacute;ments d&eacute;conditionn&eacute;s.
    </para>
    <para>
     <function>Unpack</function> se comporte l&eacute;g&egrave;rement diff&eacute;remment de la version Perl
      car les donn&eacute;es d&eacute;conditionn&eacute;es sont stock&eacute;es dans un tableau. Pour cela, il faut 
      donner un nom &agrave; chaque format utilis&eacute;, et les s&eacute;parer par des slash (/).
     <example>
      <title>Exemple avec <function>unpack</function></title>
      <programlisting role="php">
$array = unpack ("c2chars/nint", $binarydata);
      </programlisting>
      <para>
      Le tableau r&eacute;sultant contiendra les entr&eacute;es suivantes : "chars1", "chars2" et "int".
      </para>
     </example>
    </para>
    <para>
     Pour plus de d&eacute;tails, reportez vous &agrave;: 
     <function>pack</function>
    </para>
    <para>
Il faut noter que PHP g&egrave;re les valeurs en interne sous forme sign&eacute;e. Si vous d&eacute;conditionnez une valeur qui est aussi grande que la taille utilis&eacute;e en interne par PHP, le r&eacute;sultat se trouvera &ecirc;tre un nombre n&eacute;gatif, m&ecirc;me si il a &eacute;t&eacute; d&eacute;conditionn&eacute; avec l'option " non sign&eacute; ".
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>
     Lit une repr&eacute;sentation enregistr&eacute;e d'une valeur.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>unserialize</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>unserialize</function> prend une variable cr&eacute;&eacute;e avec 
     <function>serialize</function> et la convertie en valeur PHP. La valeur lue est 
     retourn&eacute;e, et elle peut &ecirc;tre de type <type>integer</type>, <type>double</type>,
     <type>string</type>, <type>array</type> or <type>object</type>. Si un objet a &eacute;t&eacute; 
     s&eacute;rialis&eacute;, ses m&eacute;thodes ont &eacute;t&eacute; perdues, et ses attributs ont &eacute;t&eacute; conserv&eacute;s.
    </simpara>
    <para>
     <example>
      <title>Exemple avec <function>Unserialize</function></title>
      <programlisting role="php">
// Ici, on utilise unserialize() pour lire les donn&eacute;es concernant 
// la session d'un utilisateur dans $session_data. Cet exemple compl&egrave;te 
// celui d&eacute;crit dans <function>serialize</function>.
$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata) || !odbc_fetch_into($stmt, &$tmp)) {
    // En cas d'erreur, initialisation &agrave; tableau vide.
$session_data = array();
} else {
    // On a maintenant les information dans $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // Un os ! initialisation &agrave; tableau vide
        $session_data = array();
    }
}

      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.usleep">
   <refnamediv>
    <refname>usleep</refname>
    <refpurpose>Retarde l'ex&eacute;cution en micro-secondes </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>usleep</function></funcdef>
     <paramdef>int <parameter>micro_seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     La <function>sleep</function> retarde l'ex&eacute;cution du programme pendant 
     <parameter>micro_seconds</parameter> micro-secondes.
    </simpara>
    <simpara>
     Voir aussi <function>sleep</function>.
    </simpara>
    <note>
     <simpara>
     Cette fonction est inop&eacute;rante sous Windows
     </simpara>
    </note>
   </refsect1>
  </refentry>

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
