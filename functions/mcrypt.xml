<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.11 $ -->
 <reference id="ref.mcrypt">
  <title>Chiffrage mcrypt</title>
  <titleabbrev>mcrypt</titleabbrev>
  <partintro>
   <para>
     Ces fonctions utilisent <ulink url="&url.mcrypt;">mcrypt</ulink>.
   </para>
   <para>
     Ces fonctions permettent d'acc&eacute;der &agrave; la librairie
     mcrypt, qui dispose d'une grande vari&eacute;t&eacute; d'algorithmes
     de chiffrage, tels que DES, TripleDES, Blowfish (par d&eacute;faut), 3-WAY,
     SAFER-SK64, SAFER-SK128, TWOFISH, TEA, RC2 et GOST en modes CBC,
     OFB, CFB et ECB. De plus, elle accepte aussi RC6 et IDEA qui sont
     consid&eacute;r&eacute;s comme "non libre".
   </para>
  <para>
    Si vous compilez PHP avec la librairie <literal>libmcrypt 2.4.x</literal>, les algorithmes
    suivants sont support&eacute;s : CAST, LOKI97, RIJNDAEL, SAFERPLUS,
    SERPENT ainsi que les chiffrements suivants : ENIGMA (chiffrage), PANAMA,
    RC4 et WAKE. Avec <literal>libmcrypt 2.4.x</literal> un autre mode de chiffrement
    est disponible : nOFB.
   </para>
   <para>
     Pour l'utiliser, t&eacute;l&eacute;chargez la librairie
     <literal>libmcrypt-x.x.tar.gz</literal> par <ulink url="&url.mcrypt;">ici</ulink>
     et suivez les instructions d'installations incluses. Vous aurez aussi besoin
     de compiler PHP avec le param&egrave;tre
     <link linkend="install.configure.with-mcrypt"><option role="configure">--with-mcrypt</option></link>
     pour activer cette extension.
   </para>
   <para>
     Mcrypt permet de chiffrer et de d&eacute;chiffrer, en utilisant les m&eacute;thodes
     mentionn&eacute;es ci-dessus. Les 4 commandes importantes
     <function>mcrypt_cfb</function>, <function>mcrypt_cbc</function>,
     <function>mcrypt_ecb</function> et <function>mcrypt_ofb</function>)
     peuvent toutes op&eacute;rer en mode MCRYPT_ENCRYPT et MCRYPT_DECRYPT.
    <example>
     <title>Chiffre une valeur avec un TripleDES, en mode ECB. </title>
     <programlisting role="php">
&lt;?php
$key = "Cette cle est ultra-secrete";
$input = "Rencontrons-nous dans notre place secrete a 9 h 00.";
$encrypted_data = mcrypt_ecb(MCRYPT_TripleDES, $key, $input, MCRYPT_ENCRYPT);
?&gt;
     </programlisting>
    </example>
   Cet exemple va retourner les donn&eacute;es crypt&eacute;es dans la variable
   $encrypted_data.
   </para>
   <para>
    Si vous avez compil&eacute; PHP avec libmcrypt 2.4.x, ces fonctions sont toujours
    disponibles, mais il est vivement conseill&eacute; d'utiliser les nouvelles
    fonctions avanc&eacute;es.
    <example>
     <title>Encryption d'une valeur avec TripleDES sous 2.4.x en mode ECB</title>
     <programlisting role="php">
&lt;?php
$key = "Ceci est une vraie cle secrete";
$input = "Rendez-vous &agrave; 9 heures, dans notre planque.";
$td = mcrypt_module_open (MCRYPT_TripleDES, "", MCRYPT_MODE_ECB, "");
$iv = mcrypt_create_iv (mcrypt_enc_get_iv_size ($td), MCRYPT_RAND);
mcrypt_generic_init ($td, $key, $iv);
$encrypted_data = mcrypt_generic ($td, $input);
mcrypt_generic_end ($td);
?&gt;
     </programlisting>
    </example>
     Cet exemple va retourner les donn&eacute;es crypt&eacute;es dans la variable
    <literal>$encrypted_data</literal>.
   </para>
   <para>
     Mcrypt peut op&eacute;rer en 4 modes de chiffrage (CBC, OFB, CFB, et ECB).
     Nous allons pr&eacute;senter la technique d'utilisation de ces modes. Pour
     plus de r&eacute;f&eacute;rences et de d&eacute;tails, reportez-vous au livre
     suivant : Applied Cryptography par Schneier (ISBN 0-471-11709-9).
    <itemizedlist>
     <listitem>
      <simpara>
       ECB (electronic codebook) ECB (electronic codebook) est pr&eacute;vu pour
       des donn&eacute;es al&eacute;atoires, telles que des cl&eacute;s. Etant
       donn&eacute; que les donn&eacute;es sont peu nombreuses et al&eacute;atoires,
       les inconv&eacute;nients de l'ECB ont ici un effet n&eacute;gatif favorable.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CBC (cipher block chaining) est sp&eacute;cialement pratique avec les
       fichiers dont la s&eacute;curit&eacute; ECB n'est pas suffisante.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       CFB (cipher feedback) est la meilleure m&eacute;thode pour chiffrer des
       flots d'octets, quand les octets doivent &ecirc;tre encrypt&eacute;s un
       par un.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       OFB (output feedback) est comparable &agrave; CFB, mais peut &ecirc;tre
       utilis&eacute; lorsque des erreurs ne doivent pas &ecirc;tre propag&eacute;es.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       nOFB (output feedback, in nbit) est comparable &agrave; OFB, mais
       plus s&ucirc;r, car il op&egrave;re avec la taille de blocs de l'algorithme.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       STREAM est un mode suppl&eacute;mentaire, pour permettre l'utilisation d'
       algorithmes tels que WAKE ou RC4.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
     PHP ne supporte par encore le chiffrage des flots d'octets.
     Pour l'instant, PHP n'accepte que le chiffrage de cha&icirc;ne.
   </para>
   <para>
    Pour obtenir la liste compl&egrave;te des modes de chiffrement, reportez
    vous aux derniers #define, dans le fichier <filename>mcrypt.h</filename>.
    En r&egrave;gle g&eacute;n&eacute;rale, vous pouvez acc&eacute;der &agrave;
    une m&eacute;thode de chiffrement avec l'option MCRYPT_nomDuChiffrement.
    </para>
   <para>
     Voici une liste non exhaustive des modes de chiffrement de l'extension
     mcrypt. Si un chiffrement n'est pas dans cette liste, mais disponible dans
     la librairie, vous pouvez supposer que cette documentation est hors d'&acirc;ge.
   </para>
 <itemizedlist>
     <listitem>
      <simpara>
       MCRYPT_3DES
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_ARCFOUR_IV (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_ARCFOUR (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_BLOWFISH
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_CAST_128
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_CAST_256
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_CRYPT
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_DES
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_DES_COMPAT (libmcrypt 2.2.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_ENIGMA (libmcrypt 2.4.x seulement, alias de MCRYPT_CRYPT)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_GOST
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_IDEA (payant)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_LOKI97 (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_MARS (libmcrypt 2.4.x seulement, payant)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_PANAMA (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RIJNDAEL_128 (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RIJNDAEL_192 (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RIJNDAEL_256 (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC2
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC4 (libmcrypt 2.2.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC6 (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC6_128 (libmcrypt 2.2.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC6_192 (libmcrypt 2.2.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_RC6_256 (libmcrypt 2.2.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SAFER64
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SAFER128
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SAFERPLUS (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SERPENT (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SERPENT_128 (libmcrypt 2.2.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SERPENT_192 (libmcrypt 2.2.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SERPENT_256 (libmcrypt 2.2.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_SKIPJACK (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TEAN (libmcrypt 2.2.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_THREEWAY
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TRIPLEDES (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TWOFISH (Pour les anciennes versions de mcrypt 2.x versions,
       ou mcrypt 2.4.x )
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TWOFISH128 (TWOFISHxxx sont disponibles avec les nouvelles
       versions de 2.x, mais pas dans les versions 2.4.x)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TWOFISH192
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_TWOFISH256
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_WAKE (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       MCRYPT_XTEA (libmcrypt 2.4.x seulement)
      </simpara>
     </listitem>
    </itemizedlist>
   <para>
    Vous devez (mode CFB et OFB) ou pouvez (mode CBC) fournir un vecteur
    d'initialisation (IV) pour ces modes de chiffrement. IV doit &ecirc;tre
    unique, et avoir la m&ecirc;me valeur au chiffrement et au d&eacute;chiffrement.
    Pour des donn&eacute;es qui seront enregistr&eacute;es apr&egrave;s chiffrement,
    vous pouvez prendre le r&eacute;sultat d'une fonction telle que MD5,
    appliqu&eacute;e sur le nom du fichier. Sinon, vous pouvez envoyer IV avec
    les donn&eacute;es chiffr&eacute;es, (reportez-vous au chapitre 9.3 de
    Applied Cryptography by Schneier (ISBN 0-471-11709-9) pour plus de
    d&eacute;tails sur le sujet).
  </para>
  </partintro>
  <refentry id="function.mcrypt-get-cipher-name">
   <refnamediv>
    <refname>mcrypt_get_cipher_name</refname>
    <refpurpose>Lit le nom du chiffrement utilis&eacute;.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_get_cipher_name</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_get_cipher_name</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      <function>mcrypt_get_cipher_name</function> retourne le nom du chiffrement
      utilis&eacute;.
    </para>
    <para>
      <function>mcrypt_get_cipher_name</function> prend le num&eacute;ro de
      chiffrement (avec libmcrypt 2.2.x) ou prend le nom du chiffrement
      (avec libmcrypt 2.4.x) comme param&egrave;tre, et retourne le nom du
      chiffrement, ou &false;, si ce chiffrement n'existe pas.
    </para>
    <para>
     <example>
      <title>Exemple avec mcrypt_get_cipher_name</title>
      <programlisting role="php">
&lt;?php
$cipher = MCRYPT_TripleDES;
print mcrypt_get_cipher_name($cipher);
?&gt;
      </programlisting>
     </example>
     </para>
    <para>
     L'exemple ci-dessus va donner :
     <computeroutput>
TripleDES
      </computeroutput>
     </para>
   </refsect1>
  </refentry>
  <refentry id="function.mcrypt-get-block-size">
   <refnamediv>
    <refname>mcrypt_get_block_size</refname>
    <refpurpose>Retourne la taille de blocs d'un chiffrement.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_block_size</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_block_size</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>module</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_get_block_size</function> sert &agrave; lire la taille
     de blocs du chiffrement <parameter>cipher</parameter>.
    </para>
    <para>
      <function>mcrypt_get_block_size</function> prend comme argument le chiffrement
      <parameter>cipher</parameter> et retourne une taille en octets.
    </para>
    <para>
     Voir aussi : <function>mcrypt_get_key_size</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mcrypt-get-key-size">
   <refnamediv>
    <refname>mcrypt_get_key_size</refname>
    <refpurpose>Retourne la taille de la cl&eacute; d'un chiffrement.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_key_size</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_key_size</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>module</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_get_key_size</function> sert &agrave; lire la taille de
     cl&eacute; du chiffrement <parameter>cipher</parameter>.
    </para>
    <para>
     <function>mcrypt_get_block_size</function> prend comme argument le chiffrement
     <parameter>cipher</parameter> et retourne une taille en octets.
    </para>
    <para>
     Voir aussi: <function>mcrypt_get_block_size</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mcrypt-create-iv">
   <refnamediv>
    <refname>mcrypt_create_iv</refname>
    <refpurpose>Cr&eacute;e un vecteur d'initialisation &agrave; partir d'une
    source al&eacute;atoire.
   </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string
      <function>mcrypt_create_iv</function></funcdef>
      <paramdef>int <parameter>size</parameter></paramdef>
      <paramdef>int <parameter>source</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_create_iv</function> sert &agrave; cr&eacute;er un IV
     (vecteur d'initialisation).
    </para>
    <para>
     <function>mcrypt_create_iv</function> prend deux arguments,
     <parameter>size</parameter> d&eacute;termine la taille de IV,
     <parameter>source</parameter> sp&eacute;cifie la source de IV.
    </para>
    <para>
      La source peut &ecirc;tre MCRYPT_RAND (g&eacute;n&eacute;rateur de nombres
      al&eacute;atoires syst&egrave;me), MCRYPT_DEV_RANDOM (lecture des donn&eacute;es
      depuis le fichier /dev/random) et MCRYPT_DEV_URANDOM (lecture des donn&eacute;es
      depuis le fichier /dev/urandom). Si vous utilisez MCRYPT_RAND, assurez-vous de
      bien appeler <function>srand</function> pour initialiser le
      g&eacute;n&eacute;rateur de nombres al&eacute;atoires.
    </para>
    <para>
     <example>
      <title>Exemple avec mcrypt_create_iv</title>
      <programlisting role="php">
&lt;?php
$cipher = MCRYPT_TripleDES;
$block_size = mcrypt_get_block_size($cipher);
$iv = mcrypt_create_iv($block_size, MCRYPT_DEV_RANDOM);
?&gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
 <refentry id="function.mcrypt-cbc">
   <refnamediv>
    <refname>mcrypt_cbc</refname>
    <refpurpose>Chiffre/d&eacute;chriffre des donn&eacute;es en mode CBC</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_cbc</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_cbc</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     La premi&egrave;re syntaxe utilise libmcrypt 2.2.x, et la seconde utilise
     libmcrypt 2.4.x.
    </para>
    <para>
     <function>mcrypt_cbc</function> chiffre ou d&eacute;chiffre (suivant le
     <parameter>mode</parameter> s&eacute;lectionn&eacute;) les donn&eacute;es
     <parameter>data</parameter> avec le chiffrement <parameter>cipher</parameter>
     et la cl&eacute; <parameter>key</parameter> en mode CBC et retourne la
     cha&icirc;ne r&eacute;sultant.
    </para>
    <para>
     <parameter>Cipher</parameter> est une des constantes MCRYPT_ciphername
    </para>
    <para>
     <parameter>Key</parameter> est la cl&eacute; fournie &agrave; l'algorithme.
     Elle doit &ecirc;tre tenue secr&egrave;te.
    </para>
    <para>
     <parameter>Data</parameter> sont les donn&eacute;es &agrave; traiter.
    </para>
    <para>
     <parameter>Mode</parameter> vaut MCRYPT_ENCRYPT ou MCRYPT_DECRYPT.
    </para>
    <para>
     <parameter>IV</parameter> est le vecteur d'initialisation (optionnel).
    </para>
    <para>
     Voir aussi: <function>mcrypt_cfb</function>,
     <function>mcrypt_ecb</function>, et
     <function>mcrypt_ofb</function>.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-cfb">
   <refnamediv>
    <refname>mcrypt_cfb</refname>
    <refpurpose>Chiffre/d&eacute;chiffre des donn&eacute;es en mode CFB</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_cfb</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter>iv</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_cfb</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     La premi&egrave;re syntaxe utilise libmcrypt 2.2.x, et la seconde utilise
     libmcrypt 2.4.x.
    </para>
    <para>
     <function>mcrypt_cfb</function> chiffre ou d&eacute;chiffre (suivant le
     <parameter>mode</parameter> s&eacute;lectionn&eacute;) les donn&eacute;es
     <parameter>data</parameter> avec le chiffrement <parameter>cipher</parameter>
     et la cl&eacute; <parameter>key</parameter> en mode CFB et retourne la
     cha&icirc;ne r&eacute;sultant.
    </para>
    <para>
     <parameter>Cipher</parameter> est une des constantes MCRYPT_ciphername
    </para>
    <para>
     <parameter>Key</parameter> est la cl&eacute; fournie &agrave; l'algorithme.
     Elle doit &ecirc;tre tenue secr&egrave;te.
    </para>
    <para>
     <parameter>Data</parameter> sont les donn&eacute;es &agrave; traiter.
    </para>
    <para>
     <parameter>Mode</parameter> vaut MCRYPT_ENCRYPT ou MCRYPT_DECRYPT.
    </para>
    <para>
     <parameter>IV</parameter> est le vecteur d'initialisation (optionnel).
    </para>
    <para>
     Voir aussi: <function>mcrypt_cbc</function>,
     <function>mcrypt_ecb</function>, et
     <function>mcrypt_ofb</function>.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-ecb">
   <refnamediv>
    <refname>mcrypt_ecb</refname>
    <refpurpose>Chiffre/d&eacute;chiffre des donn&eacute;es en mode ECB</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_ecb</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_ecb</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     La premi&egrave;re syntaxe utilise libmcrypt 2.2.x, et la seconde utilise
     libmcrypt 2.4.x.
    </para>
    <para>
     <function>mcrypt_ecb</function> chiffre ou d&eacute;chiffre (suivant le
     <parameter>mode</parameter> s&eacute;lectionn&eacute;) les donn&eacute;es <parameter>data</parameter>
     avec le chiffrement <parameter>cipher</parameter> et la cl&eacute;
     <parameter>key</parameter> en mode CFB et retourne la cha&icirc;ne r&eacute;sultant.
    </para>
    <para>
     <parameter>Cipher</parameter> est une des constantes MCRYPT_ciphername
    </para>
    <para>
     <parameter>Key</parameter> est la cl&eacute; fournie &agrave; l'algorithme.
     Elle doit &ecirc;tre tenue secr&egrave;te.
    </para>
    <para>
     <parameter>Data</parameter> sont les donn&eacute;es &agrave; traiter.
    </para>
    <para>
     <parameter>Mode</parameter> vaut MCRYPT_ENCRYPT ou MCRYPT_DECRYPT.
    </para>
    <para>
     <parameter>IV</parameter> est le vecteur d'initialisation (optionnel).
    </para>
    <para>
     Voir aussi: <function>mcrypt_cbc</function>,
     <function>mcrypt_cfb</function>, et
     <function>mcrypt_ofb</function>.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-ofb">
   <refnamediv>
    <refname>mcrypt_ofb</refname>
    <refpurpose>Chiffre/d&eacute;chiffre des donn&eacute;es en mode OFB</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_ofb</function></funcdef>
      <paramdef>int <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter>iv</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_ofb</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>int <parameter>mode</parameter></paramdef>
      <paramdef>string
       <parameter><optional>iv</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     La premi&egrave;re syntaxe utilise libmcrypt 2.2.x, et la seconde utilise
     libmcrypt 2.4.x.
    </para>
       <para>
     <function>mcrypt_ofb</function> chiffre ou d&eacute;chiffre (suivant le
     <parameter>mode</parameter> s&eacute;lectionn&eacute;) les donn&eacute;es
     <parameter>data</parameter> avec le chiffrement <parameter>cipher</parameter>
     et la cl&eacute; <parameter>key</parameter> en mode OFB et retourne la
     cha&icirc;ne r&eacute;sultant.
    </para>
    <para>
     <parameter>Cipher</parameter> est une des constantes MCRYPT_ciphername
    </para>
    <para>
     <parameter>Key</parameter> est la cl&eacute; fournie &agrave; l'algorithme.
     Elle doit &ecirc;tre tenue secr&egrave;te.
    </para>
    <para>
     <parameter>Data</parameter> sont les donn&eacute;es &agrave; traiter.
    </para>
    <para>
     <parameter>Mode</parameter> vaut MCRYPT_ENCRYPT ou MCRYPT_DECRYPT.
    </para>
    <para>
     <parameter>IV</parameter> est le vecteur d'initialisation (optionnel).
    </para>
    <para>
     Voir aussi: <function>mcrypt_cbc</function>,
     <function>mcrypt_cfb</function>, et
     <function>mcrypt_ecb</function>.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-list-algorithms">
   <refnamediv>
    <refname>mcrypt_list_algorithms</refname>
    <refpurpose>Liste tous les algorithmes de chiffrement support&eacute;s</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mcrypt_list_algorithms</function></funcdef>
      <paramdef>string
	   <parameter>
	    <optional>lib_dir</optional>
	   </parameter>
	  </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_list_algorithms</function> sert &agrave; lister tous les
     algorithmes de chiffrement de <parameter>lib_dir</parameter>.
     <function>mcrypt_list_algorithms</function> prend un argument
     optionnel, qui sp&eacute;cifie le dossier qui contient tous les
     algorithmes. S'il est omis, la valeur de mcrypt.algorithms_dir dans
     <filename>php.ini</filename> est utilis&eacute;e.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>mcrypt_list_algorithms</function></title>
      <programlisting role="php">
&lt;?php
$algorithms = mcrypt_list_algorithms ("/usr/local/lib/libmcrypt");
foreach ($algorithms as $cipher) {
	echo $cipher."/n";
}
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     L'exemple ci-dessus va afficher tous les algorithmes support&eacute;s
     dans le dossier "<filename>/usr/local/lib/libmcrypt</filename>".
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-list-modes">
   <refnamediv>
    <refname>mcrypt_list_modes</refname>
    <refpurpose>Liste tous les modes de chiffrement support&eacute;s</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mcrypt_list_modes</function></funcdef>
      <paramdef>string
	   <parameter>
	    <optional>lib_dir</optional>
	   </parameter>
	  </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_list_algorithms</function> sert &agrave; lister tous les
     modes de chiffrement de <parameter>lib_dir</parameter>.
     <function>mcrypt_list_algorithms</function> prend un argument
     optionnel, qui sp&eacute;cifie le dossier qui contient tous les
     algorithmes. S'il est omis, la valeur de mcrypt.algorithms_dir dans
     <filename>php.ini</filename> est utilis&eacute;e.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>mcrypt_list_modes</function></title>
      <programlisting role="php">
&lt;?php
$modes = mcrypt_list_modes ();
foreach ($modes as $mode) {
	echo $mode."&lt;br&gt;";";
}
?&gt;
      </programlisting>
     </example>
    </para>
    <para>
     L'exemple ci-dessus va afficher tous les modes support&eacute;s
     dans le dossier "<filename>/usr/local/lib/libmcrypt</filename>".
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-get-iv-size">
   <refnamediv>
    <refname>mcrypt_get_iv_size</refname>
    <refpurpose>Retourne la taille du VI utilis&eacute; par un couple chiffrement/mode
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_iv_size</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
     </funcprototype>
     <funcprototype>
      <funcdef>int <function>mcrypt_get_iv_size</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     La premi&egrave;re syntaxe utilise libmcrypt 2.2.x, et la seconde utilise
     libmcrypt 2.4.x.
    </para>
    <para>
     <function>mcrypt_get_iv_size</function> retourne la taille du
     Vecteur d'initialisation (VI). En cas d'erreur, la fonction
     retourne &false;. Si le VI est ignor&eacute; dans le couple
      chiffrement/mode demand&eacute;, z&eacute;ro est retourn&eacute;.
    </para>
    <para>
     <parameter>Cipher</parameter> est une constante MCRYPT_ciphername
     qui indique le nom de l'algorithme sous forme de cha&icirc;ne.
    </para>
    <para>
     <parameter>Mode</parameter> est une constante  MCRYPT_MODE_modename
     qui peut valoir : "ecb", "cbc", "cfb", "ofb", "nofb" ou "stream".
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-encrypt">
   <refnamediv>
    <refname>mcrypt_encrypt</refname>
    <refpurpose>Chiffre un texte</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_encrypt</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string
       <parameter>
        <optional>iv</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_encrypt</function> chiffre les donn&eacute;es, et retourne
     les donn&eacute;es crypt&eacute;es.
    </para>
    <para>
     <parameter>Cipher</parameter> est une constante MCRYPT_ciphername
     qui indique le nom de l'algorithme sous forme de cha&icirc;ne.
    </para>
    <para>
     <parameter>Key</parameter> est la cl&eacute; utilis&eacute;e pour
     chiffrer les donn&eacute;es. Si elle est plus petite que n&eacute;cessaire,
     elle sera compl&eacute;t&eacute;e avec des '<literal>\0</literal>'.
    </para>
    <para>
     <parameter>Data</parameter> sont les donn&eacute;es qui doivent &ecirc;tre
     encrypt&eacute;es. Si la taille des donn&eacute;es n'est pas de la forme
     n * taille_de_bloc, elles seront compl&eacute;t&eacute;es avec des '<literal>\0</literal>'. La
     valeur retourn&eacute;e peut &ecirc;tre plus grande que la valeur d'origine.
     </para>
    <para>
     <parameter>Mode</parameter> est une constante  MCRYPT_MODE_modename
     qui peut valoir : "ecb", "cbc", "cfb", "ofb", "nofb" ou "stream".
    </para>
    <para>
     <parameter>IV</parameter> (Vecteur d'initialisation) est utilis&eacute;
     pour les modes CBC, CFB, OFB, et dans certains algorithmes de
     mode STREAM. Si vous le fournissez par le VI, alors qu'il est
     n&eacute;cessaire, la fonction affichera une alerte, et utilisera un
     vecteur d'initialisation compos&eacute; de caract&egrave;res '<literal>\0</literal>'.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>mcrypt_encrypt</function></title>
      <programlisting role="php">
&lt;?php
$iv = mcrypt_create_iv (mcrypt_get_iv_size (MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND);
$key = "Ceci est une cl&eacute; secr&egrave;te";
$text = "Rencontrons nous &agrave; 11 heures, derri&egrave;re le monument";
echo strlen ($text)."\n";
$crypttext = mcrypt_encrypt (MCRYPT_RIJNDAEL_256, $key, $text, MCRYPT_MODE_ECB, $iv);
echo strlen ($crypttext)."\n";
?&gt;
      </programlisting>
     </example>
     L'exemple ci-dessus affichera :
     <computeroutput>
42
64
     </computeroutput>
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-decrypt">
   <refnamediv>
    <refname>mcrypt_decrypt</refname>
    <refpurpose>D&eacute;chiffre un texte</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_decrypt</function></funcdef>
      <paramdef>string <parameter>cipher</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string
       <parameter>
        <optional>iv</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <parameter>Cipher</parameter> est une constante MCRYPT_ciphername
     qui indique le nom de l'algorithme sous forme de cha&icirc;ne.
    </para>
    <para>
     <parameter>Key</parameter> est la cl&eacute; utilis&eacute;e pour
     chiffrer les donn&eacute;es. Si elle est plus petite que n&eacute;cessaire,
     elle sera compl&eacute;t&eacute;e avec des '<literal>\0</literal>'.
    </para>
    <para>
     <parameter>Data</parameter> sont les donn&eacute;es qui doivent &ecirc;tre
     encrypt&eacute;es. Si la taille des donn&eacute;es n'est pas de la forme
     n * taille_de_bloc, elles seront compl&eacute;t&eacute;es avec des '<literal>\0</literal>'. La
     valeur retourn&eacute;e peut &ecirc;tre plus grande que la valeur d'origine.
     </para>
    <para>
     <parameter>Mode</parameter> est une constante  MCRYPT_MODE_modename
     qui peut valoir : "ecb", "cbc", "cfb", "ofb", "nofb" ou "stream".
    </para>
    <para>
     <parameter>IV</parameter> (Vecteur d'initialisation) est utilis&eacute;
     pour les modes CBC, CFB, OFB, et dans certains algorithmes de
     mode STREAM. Si vous le fournissez par le VI, alors qu'il est
     n&eacute;cessaire, la fonction affichera une alerte, et utilise un VI
     compos&eacute; de caract&egrave;res '<literal>\0</literal>'.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-module-open">
   <refnamediv>
    <refname>mcrypt_module_open</refname>
    <refpurpose>
      Ouvre le module de l'algorithme et le mode &agrave; utiliser
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>resource <function>mcrypt_module_open</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string <parameter>algorithm_directory</parameter></paramdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter>mode_directory</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_module_open</function> ouvre le module de l'algorithme et du mode &agrave; utiliser.
     Le nom de l'algorithme est sp&eacute;cifi&eacute; par le param&egrave;tre
     <parameter>algorithm</parameter> (par exemple : "twofish"), ou bien une des
     constantes MCRYPT_ciphername. La librairie est referm&eacute;e en appelant
     mcrypt_module_close, mais il n'est pas n&eacute;cessaire
     d'appeler cette fonction si <function>mcrypt_generic_end</function> est
     utilis&eacute;. Normalement, <function>mcrypt_module_open</function>
     retourne un pointeur d'encryption, ou bien &false; en cas d'erreur.
    </para>
    <para>
     <parameter>algorithm_directory</parameter> et
     <parameter>mode_directory</parameter> servent &agrave; rep&eacute;rer les
     modules d'encryption. Si vous fournissez un nom de dossier, il sera
     utilis&eacute;.
     Si vous passez une cha&icirc;ne vide (""), la valeur utilis&eacute; par
     <parameter>mcrypt.algorithms_dir</parameter> ou
     <parameter>mcrypt.modes_dir</parameter> sera celle indiqu&eacute;e dans les
     directives de configuration. Lorsque ces param&egrave;tres ne sont pas fournis
     les valeurs par d&eacute;faut, compil&eacute;es avec la librairie sont
     utilis&eacute;es. (g&eacute;n&eacute;ralement /usr/local/lib/libmcrypt).
    </para>
    <para>
     <example>
      <title>Exemple avec <function>mcrypt_module_open</function></title>
      <programlisting role="php">
&lt;?php
$td = mcrypt_module_open (MCRYPT_DES, "", MCRYPT_MODE_ECB, "/usr/lib/mcrypt-modes");
?&gt;
      </programlisting>
     </example>
     L'exemple ci-dessus va essayer d'ouvrir le module de chiffrement par
     DES, dans le dossier par d&eacute;faut, et le mode EBC dans le dossier
     /usr/lib/mcrypt-modes.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-generic-init">
   <refnamediv>
    <refname>mcrypt_generic_init</refname>
    <refpurpose>
     Initialise tous les buffers n&eacute;cessaires
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_generic_init</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter>iv</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     La taille maximale de la cl&eacute; doit &ecirc;tre cette retourn&eacute;e par
     <function>mcrypt_enc_get_key_size</function> et toutes les valeurs
     inf&eacute;rieures seront aussi valides. Le vecteur d'initialisation (VI)
     doit avoir la taille d'un bloc, mais vous devez lire sa taille
     en appelant <function>mcrypt_enc_get_iv_size</function>.
     IV est ignor&eacute; en mode ECB. IV DOIT exister en modes CFB, CBC, STREAM, nOFB
     et OFB. Il doit &ecirc;tre al&eacute;atoire et unique (mais pas secret).
     Le m&ecirc;me VI doit &ecirc;tre utilis&eacute; pour le chiffrage et le
     d&eacute;chiffrage.
     Si vous ne voulez pas l'utiliser, remplissez le de z&eacute;ros, mais
     ce n'est pas recommand&eacute;. La fonction retourne (-1) en cas d'erreur.
    </para>
    <para>
     Vous devez appeler <function>mcrypt_generic_init</function>
     avant chaque appel &agrave; <function>mcrypt_generic</function> ou
     <function>mdecrypt_generic</function>.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-generic">
   <refnamediv>
    <refname>mcrypt_generic</refname>
    <refpurpose>Chiffre</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_generic</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_generic</function> chiffre des donn&eacute;es.
     Les donn&eacute;es sont compl&eacute;t&eacute;es par des "<literal>\0</literal>" pour obtenir une
     taille de n fois la taille d'un bloc. Elle retourne les donn&eacute;es
     encrypt&eacute;es. Notez que la longueur de la cha&icirc;ne retourn&eacute;e
     peut &ecirc;tre plus longue que celle pass&eacute;e en argument, &agrave; cause
     du compl&eacute;ment.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mdecrypt-generic">
   <refnamediv>
    <refname>mdecrypt_generic</refname>
    <refpurpose>D&eacute;chiffre</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mdecrypt_generic</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
      <paramdef>string <parameter>data</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mdecrypt_generic</function> d&eacute;chiffre les donn&eacute;es <parameter>data</parameter>.
     Notez que la longueur de
     la cha&icirc;ne d&eacute;crypt&eacute;e peut &ecirc;tre plus longue que
     la cha&icirc;ne originale, car elle peut avoir &eacute;t&eacute;
     compl&eacute;t&eacute;e par des "<literal>\0</literal>".
    </para>
    <para>
     <example>
      <title>Exemple avec <function>mdecrypt_generic</function></title>
      <programlisting role="php">
&lt;?php
$iv_size = mcrypt_enc_get_iv_size ($td));
$iv = @mcrypt_create_iv ($iv_size, MCRYPT_RAND);
if (@mcrypt_generic_init ($td, $key, $iv) != -1)
{
    $c_t = mcrypt_generic ($td, $plain_text);
    @mcrypt_generic_init ($td, $key, $iv);
    $p_t = mdecrypt_generic ($td, $c_t);
}
if (strncmp ($p_t, $plain_text, strlen($plain_text)) == 0)
    echo "ok";
else
    echo "erreur";
?&gt;
      </programlisting>
     </example>
     L'exemple ci-dessus montre comment v&eacute;rifier que les donn&eacute;es avant
     chiffrage sont bien les m&ecirc;mes que celles apr&egrave;s
     chiffrage/d&eacute;chiffrage.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-generic-end">
   <refnamediv>
    <refname>mcrypt_generic_end</refname>
    <refpurpose>Termine un chiffrage</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>mcrypt_generic_end</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_generic_end</function> termine le chiffrage
     d&eacute;sign&eacute; par le pointeur <parameter>td</parameter>. En fait,
     elle supprime tous les buffers, et ferme les modules utilis&eacute;s.
     Elle retourne &false; en cas d'erreur, et &true; sinon.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-enc-self-test">
   <refnamediv>
    <refname>mcrypt_enc_self_test</refname>
    <refpurpose>Teste  un module ouvert</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_self_test</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_self_test</function> effectue un test du
     module ouvert et d&eacute;sign&eacute; par <parameter>td</parameter>. Si le
     test est concluant, elle retourne 0, sinon, 1.
    </para>
   </refsect1>
  </refentry>
 <refentry id="function.mcrypt-enc-is-block-algorithm-mode">
   <refnamediv>
    <refname>mcrypt_enc_is_block_algorithm_mode</refname>
    <refpurpose>Teste le chiffrage par blocs d'un mode</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_is_block_algorithm_mode</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_is_block_algorithm_mode</function> retourne 1
     si ce mode utilise des algorithmes par blocs, et 0 sinon.
     (i.e. 0 pour stream, et 1 pour cbc, cfb, ofb).
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-enc-is-block-algorithm">
   <refnamediv>
    <refname>mcrypt_enc_is_block_algorithm</refname>
    <refpurpose>Teste le chiffrage par blocs d'un algorithme</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_is_block_algorithm</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_is_block_algorithm</function> retourne 1 si
     l'algorithme utilis&eacute; est un algorithme par blocs, et 0
     si c'est un algorithme par flot.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-enc-is-block-mode">
   <refnamediv>
    <refname>mcrypt_enc_is_block_mode</refname>
    <refpurpose>Teste si le mode retourne les donn&eacute;es par blocs</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_is_block_mode</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_is_block_mode</function> retourne 1 si
     le mode retourne des blocs d'octets, ou bien 0 s'il retourne
     des octets (par flot). (i.e. 1 pour cbc et ecb, et 0 pour cfb et
     stream).
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-enc-get-block-size">
   <refnamediv>
    <refname>mcrypt_enc_get_block_size</refname>
    <refpurpose>Retourne la taille de blocs d'un algorithme</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_get_block_size</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_get_block_size</function> retourne la taille
     de blocs d'un algorithme, en octets.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-enc-get-key-size">
   <refnamediv>
    <refname>mcrypt_enc_get_key_size</refname>
    <refpurpose>Retourne la taille maximale de la cl&eacute; pour un mode</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_get_key_size</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_get_key_size</function> retourne la taille
     maximale de cl&eacute; accept&eacute;e par le mode d&eacute;sign&eacute; par
     <parameter>td</parameter>, en octets.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-enc-get-supported-key-sizes">
   <refnamediv>
    <refname>mcrypt_enc_get_supported_key_sizes</refname>
    <refpurpose>
      Retourne un tableau contenant les tailles de cl&eacute;s accept&eacute;es
      par un algorithme
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mcrypt_enc_get_supported_key_sizes</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_get_supported_key_sizes</function> retourne un
     tableau contenant les tailles des cl&eacute;s support&eacute;es par l'algorithme
     d&eacute;sign&eacute; par <parameter>td</parameter>. S'il retourne un tableau
     vide, c'est que toutes les cl&eacute;s entre 1 et
     <function>mcrypt_enc_get_key_size</function> sont accept&eacute;es par
     l'algorithme.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-enc-get-iv-size">
   <refnamediv>
    <refname>mcrypt_enc_get_iv_size</refname>
    <refpurpose>Retourne la taille du VI d'un algorithme</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_enc_get_iv_size</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_get_iv_size</function> retourne la
     taille du VI de l'algorithme d&eacute;sign&eacute; par <parameter>td</parameter>,
     en octets. Si la valeur retourn&eacute;e est 0, c'est que l'algorithme
     ne demande pas de VI. Un VI est demand&eacute; en mode cbc, cfb et ofb,
     et parfois en mode stream.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-enc-get-algorithms-name">
   <refnamediv>
    <refname>mcrypt_enc_get_algorithms_name</refname>
    <refpurpose>Retourne le nom de l'algorithme</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_enc_get_algorithms_name</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_get_algorithms_name</function> retourne le nom de
     l'algorithme d&eacute;sign&eacute; par <parameter>td</parameter>.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-enc-get-modes-name">
   <refnamediv>
    <refname>mcrypt_enc_get_modes_name</refname>
    <refpurpose>Retourne le nom du mode</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>mcrypt_enc_get_modes_name</function></funcdef>
      <paramdef>resource <parameter>td</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_enc_get_modes_name</function> retourne le nom du
     mode d&eacute;sign&eacute; par <parameter>td</parameter>.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-module-self-test">
   <refnamediv>
    <refname>mcrypt_module_self_test</refname>
    <refpurpose>Teste un mode</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>mcrypt_module_self_test</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string <parameter><optional>lib_dir</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_module_self_test</function> effectue un
     test sur l'algorithme sp&eacute;cifi&eacute;. Le param&egrave;tre optionnel
     <parameter>lib_dir</parameter> contient le chemin jusqu'au module
     de l'algorithme sur le syst&egrave;me.
    </para>
    <para>
     <function>mcrypt_module_self_test</function> retourne &true; si le test
     fonctionne, et &false; sinon.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-module-is-block-algorithm-mode">
   <refnamediv>
    <refname>mcrypt_module_is_block_algorithm_mode</refname>
    <refpurpose>Indique si un mode fonctionne par blocs</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>mcrypt_module_is_block_algorithm_mode</function></funcdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter><optional>lib_dir</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_module_is_block_algorithm_mode</function> retourne &true;
     si le mode doit &ecirc;tre utilis&eacute; avec un algorithme par bloc,
     sinon retourne 0 (i.e. 0 pour stream, et 1 pour cbc, cfb, ofb). Le
     param&egrave;tre optionnel <parameter>lib_dir</parameter> contient le
     chemin jusqu'au module de l'algorithme sur le syst&egrave;me.
    </para>
   </refsect1>
  </refentry>
<refentry id="function.mcrypt-module-is-block-algorithm">
   <refnamediv>
    <refname>mcrypt_module_is_block_algorithm</refname>
    <refpurpose>Indique si un algorithme fonctionne par blocs</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>mcrypt_module_is_block_algorithm</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string <parameter><optional>lib_dir</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_module_is_block_algorithm</function> retourne &true;
     si <parameter>algorithm</parameter> est un algorithme par bloc, sinon
     retourne 0. Le param&egrave;tre optionnel <parameter>lib_dir</parameter>
     contient le chemin jusqu'au module de l'algorithme sur le syst&egrave;me.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mcrypt-module-is-block-mode">
   <refnamediv>
    <refname>mcrypt_module_is_block_mode</refname>
    <refpurpose>Indique si un mode travaille par blocs</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>boolean <function>mcrypt_module_is_block_mode</function></funcdef>
      <paramdef>string <parameter>mode</parameter></paramdef>
      <paramdef>string <parameter><optional>lib_dir</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_module_is_block_mode</function> retourne &true; si
     ce mode fournit des blocs d'octets, ou bien un flot d'octets.
     (i.e. 1 pour cbc et ecb, et 0 pour cfb et stream). Le param&egrave;tre optionnel
     <parameter>lib_dir</parameter> contient le chemin jusqu'au module de
     l'algorithme sur le syst&egrave;me.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mcrypt-module-get-algo-block-size">
   <refnamediv>
    <refname>mcrypt_module_get_algo_block_size</refname>
    <refpurpose>Retourne la taille de blocs d'un algorithme</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_module_get_algo_block_size</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string <parameter><optional>lib_dir</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_module_get_algo_block_size</function> retourne la taille
     de blocs d'un algorithme, en octets.  Le param&egrave;tre optionnel
     <parameter>lib_dir</parameter> contient le chemin jusqu'au module de
     l'algorithme sur le syst&egrave;me.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mcrypt-module-get-algo-key-size">
   <refnamediv>
    <refname>mcrypt_module_get_algo_key_size</refname>
    <refpurpose>Retourne la taille maximale de cl&eacute;</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>mcrypt_module_get_algo_key_size</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string <parameter><optional>lib_dir</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_module_get_algo_key_size</function> retourne la taille
     maximale de la cl&eacute; support&eacute;e par l'algorithme
     <parameter>algorithm</parameter>.
     Le param&egrave;tre optionnel <parameter>lib_dir</parameter> contient le chemin
     jusqu'au module de l'algorithme sur le syst&egrave;me.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.mcrypt-module-enc-get-algo-supported-key-sizes">
   <refnamediv>
    <refname>mcrypt_module_get_algo_supported_key_sizes</refname>
    <refpurpose>
      Indique les tailles de cl&eacute; support&eacute;es par un algorithme
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>mcrypt_module_get_algo_supported_key_sizes</function></funcdef>
      <paramdef>string <parameter>algorithm</parameter></paramdef>
      <paramdef>string <parameter><optional>lib_dir</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>mcrypt_module_get_algo_supported_key_sizes</function> retourne
     un tableau avec les tailles des cl&eacute;s support&eacute;es par l'algorithme
     <parameter>algorithm</parameter>. Si le tableau retourn&eacute; est vide,
     c'est que toutes les tailles de cl&eacute; entre 1 et
     <function>mcrypt_module_get_algo_key_size</function> sont support&eacute;es.
     Le param&egrave;tre optionnel <parameter>lib_dir</parameter> peut contenir
     le dossier du module sur le syst&egrave;me.
    </para>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
