 <reference id="ref.array">
  <title>Tableaux</title>
  <titleabbrev>Tableaux</titleabbrev>
  <partintro>
   <simpara>
    Ces fonctions vous permettent de manipuler et de traiter les tableaux 
    de nombreuses fa&ccedil;ons. Les tableaux sont tr&egrave;s efficaces d&egrave;s 
    qu'il s'agit de stocker, g&eacute;rer et traiter des donn&eacute;es en groupe.
   </simpara>
   <simpara>
    Les tableaus simples et multi-dimensionnels sont support&eacute;s et peuvent 
    &ecirc;tre cr&eacute;&eacute; par l'utilisateur, ou par une fonction. Il y a 
    des fonctions sp&eacute;cifiques qui remplissent des tableaux &agrave; partir 
    de r&eacute;sultats de requ&ecirc;tes, et de nombreuses fonctions retournent 
    un tableau.
   </simpara>
   <para>
    Voir aussi <function>is_array</function>, <function>explode</function>, 
	<function>implode</function>, <function>split</function> 
	et <function>join</function>.
   </para>
  </partintro>
  
  <refentry id="function.array">
   <refnamediv>
    <refname>array</refname>
    <refpurpose>
     Cr&eacute;e un tableau
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array</function></funcdef>
      <paramdef>mixed 
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Retourne un tableau, cr&eacute;&eacute; &agrave; partir des param&egrave;tres
     fournis. Les param&egrave;tres peuvent avoir un index, fournis sous la forme 
     cl&eacute; <literal>=&gt;</literal> valeur. 
    </para>
    <para>
     <note>
      <para>
       <function>array</function> n'est pas une fonction standard, elle existe 
       simplement pour repr&eacute;senter litt&eacute;ralement des tableaux.
      </para>
     </note>
    </para>
    <para>
     Les exemples suivants montrent la construction de tableaux 
     bi-dimensionnels, l'assignation de cl&eacute;s pour les tableaux 
     associatifs, et comment &eacute;carter certains intervalle d'indices 
     num&eacute;riques.
     <example>
      <title>Exemples avec <function>array</function></title>
      <programlisting role="php">
$fruits = array (
    "fruits"  => array("a"=>"orange", "b"=>"banane", "c"=>"pomme"),
    "numbres" => array(1, 2, 3, 4, 5, 6),
    "trous"   => array("premier", 5 => "deuxi&egrave;me", "troisi&egrave;me")
);
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi : <function>list</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-count-values">
   <refnamediv>
    <refname>array_count_values</refname>
    <refpurpose>Compte le nombre de valeurs dans un tableau</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>array_count_values</function></funcdef>
     <paramdef>array <parameter>input</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_count_values</function> retourne un tableau contenant
     les valeurs du tableau <parameter>input</parameter> comme cl&eacute;s 
     et leurs fr&eacute;quence.
    <parameter>input</parameter> comme valeur.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_count_values</function></title>
      <programlisting role="php">
$array = array(1, "bonjour", 1, "monde", "bonjour");
array_count_values($array); // retourne array(1=>2, "bonjour"=>2, "monde"=>1)
      </programlisting>
     </example>     
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>
  
   <refentry id="function.array-diff">
   <refnamediv>
    <refname>array_diff</refname>
    <refpurpose>Calcule la diff&eacute;rence entre deux tableaux</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_diff</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional> ...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_diff</function> retourne un tableau 
     qui contient toutes les valeurs du tableau <parameter>array1</parameter>
     qui sont absentes de tous les autres arguments.
     Notez que les cl&eacute;s sont pr&eacute;serv&eacute;es.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_diff</function></title>
      <programlisting role="php">
$array1 = array ("a" =&gt; "vert", "rouge", "bleu");
$array2 = array ("b" =&gt; "vert", "jaune", "rouge");
$result = array_diff ($array1, $array2);
      </programlisting>
     </example>
    </para>     
    <para>
     <varname>$result</varname> contient <literal>array
     ("bleu");</literal>
    </para>
    <para>
     Voir aussi <function>array_intersect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-flip">
   <refnamediv>
    <refname>array_flip</refname>
     <refpurpose>
       Remplace les cl&eacute;s par les valeurs, et les valeurs par les cl&eacute;s
     </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>array_flip</function></funcdef>
     <paramdef>array <parameter>trans</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_flip</function> retourne un tableau dont les cl&eacute;s sont les 
     valeurs du pr&eacute;c&eacute;dent tableau, et les valeurs sont les cl&eacute;s.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_flip</function></title>
      <programlisting role="php">
$trans = array_flip ($trans);
$original = strtr ($str, $trans);
      </programlisting>
     </example>
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

 <refentry id="function.array-intersect">
   <refnamediv>
    <refname>array_intersect</refname>
    <refpurpose>Calcule l'intersection de tableaux</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_intersect</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional> ...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_intersect</function> retourne un tableau 
     contenant toutes les valeurs de <parameter>array1</parameter>
     qui sont pr&eacute;sentes dans tous les autres arguments.
     Notez que les cl&eacute;s sont pr&eacute;serv&eacute;es.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_intersect</function></title>
      <programlisting role="php">
$array1 = array ("a" =&gt; "vert", "rouge", "bleu");
$array2 = array ("b" =&gt; "vert", "jaune", "rouge");
$result = array_intersect ($array1, $array2);
      </programlisting>
     </example>
    </para>     
    <para>
     <varname>$result</varname> contient <literal>array ("a"
     =&gt; "vert", "rouge");</literal>
    </para>
    <para>
     Voir aussi <function>array_diff</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-keys">
   <refnamediv>
    <refname>array_keys</refname>
    <refpurpose>Retourne toutes les cl&eacute;s d'un tableau</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>array_keys</function></funcdef>
     <paramdef>array <parameter>input</parameter></paramdef>
     <paramdef>mixed
      <parameter>
       <optional>search_value</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>array_keys</function> retourne les cl&eacute;s num&eacute;riques et 
     lit&eacute;rales du tableau <parameter>input</parameter>.
    </para>
    <para>
     Si l'option <parameter>search_value</parameter> est sp&eacute;cifi&eacute;e,
     seule les cl&eacute;s ayant cette valeur seront retourn&eacute;es.
Sinon, toutes les cl&eacute;s de <parameter>input</parameter> sont retourn&eacute;es.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_keys</function></title>
      <programlisting role="php">
$array = array(0 => 100, "couleur" => "rouge");
array_keys ($array);       // retourne array (0, "couleur")
$array = array(1, 100, 2, 100);
array_keys ($array, 100);  //  retourne array (0, 2) 
      </programlisting>
     </example>
    </para>
      <note>
     <para>
      Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4. Ci dessous, voici une
      impl&eacute;mentation qui fonctionnera sous PHP3: 
      <example>
       <title>
    Impl&eacute;mentation de <function>array_keys</function> pour les utilisateurs
    de  PHP 3
       </title>
       <programlisting role="php">
function array_keys ($arr, $term="") {
    $t = array();
    while (list($k,$v) = each($arr)) {
        if ($term &amp;&amp; $v != $term)
            continue;
            $t[] = $k;
        }
        return $t;
}
       </programlisting>
      </example>
     </para>
    </note>
    <para>
     Voir aussi <function>array_values</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-merge">
   <refnamediv>
    <refname>array_merge</refname>
    <refpurpose>Rassemble plusieurs tableaux</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>array_merge</function></funcdef>
     <paramdef>array <parameter>array1</parameter></paramdef>
     <paramdef>array <parameter>array2</parameter></paramdef>
     <paramdef>
      <parameter><optional> ...</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>array_merge</function> rassemble les &eacute;l&eacute;ments de 
     plusieurs tableaux ensemble, en ajoutant les valeurs de l'un &agrave; la 
     fin de l'autre. Le r&eacute;sultat est un tableau.
    </para>
    <para>
      Si les tableaux ont des cl&eacute;s en commun, la derni&egrave;re valeur 
      rencontr&eacute;e &eacute;crasera l'ancienne. Pour les valeurs num&eacute;riques,
      cela n'arrive pas, car alors, les valeurs sont ajout&eacute;es en fin de 
      tableau.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_merge</function></title>
      <programlisting role="php">
$array1 = array ("couleur" => "rouge", 2, 4);
$array2 = array ("a", "b", "couleur" => "vert", "forme" => "trap&eacute;zo&iuml;de");
array_merge ($array1, $array2);
      </programlisting>
      <para>
       Le r&eacute;sultat sera array("couleur" => "vert", 2, 4, "a",
       "b", "forme" => "trap&eacute;zo&icirc;de").
      </para>
     </example>
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

 <refentry id="function.array-merge-recursive">
   <refnamediv>
    <refname>array_merge_recursive</refname>
    <refpurpose>Combine plusieurs tableaux ensemble, r&eacute;cursivement</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_merge_recursive</function></funcdef>
      <paramdef>array <parameter>array1</parameter></paramdef>
      <paramdef>array <parameter>array2</parameter></paramdef>
      <paramdef>array
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_merge_recursive</function> rassemble tous les &eacute;l&eacute;ments
     de plusieurs tableaux ensemble, en ajoutant les &eacute;l&eacute;ments de l'un &agrave; la
     suite des &eacute;l&eacute;m&eacute;nts du pr&eacute;c&eacute;dent. Cette fonction retourne le tableau
     r&eacute;sultant.
    </para>
    <para>
     Si les tableaux pass&eacute;s en arguments ont les m&ecirc;mes cl&eacute;s (cha&icirc;nes de
     caract&egrave;res), les valeurs sont alors rassembl&eacute;es dans un tableau,
     de mani&egrave;re r&eacute;cursive, de fa&ccedil;on &agrave; ce que, si l'une de ces valeurs
     est un tableau elle-m&ecirc;me, la fonction la rassemblera avec les valeurs
     de l'entr&eacute;e courante. Cependant, si deux tableaux ont la m&ecirc;me cl&eacute;
     num&eacute;rique, la derni&egrave;re valeur n'&eacute;crasera pas la pr&eacute;c&eacute;dente, mais sera
     ajout&eacute; &agrave; la fin du tableau.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_merge_recursive</function></title>
      <programlisting role="php">
$ar1 = array ("couleur" =&gt; array ("favorie" =&gt; "red"), 5);
$ar2 = array (10, "couleur" =&gt; array ("favorie" =&gt; "vert", "rouge"));
$result = array_merge_recursive ($ar1, $ar2);
      </programlisting>
     </example>
    </para>
    <para>
     Le r&eacute;sultat sera <literal>array ("couleur" =&gt; array
     ("favorie" =&gt; array ("rouge", "vert"), "bleu"), 5, 10)</literal>.
    </para>
    <para>
     Voir aussi <function>array_merge</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-multisort">
   <refnamediv>
    <refname>array_multisort</refname>
    <refpurpose>Tri multi-dimensionnel</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>array_multisort</function></funcdef>
      <paramdef>array <parameter>ar1</parameter></paramdef>
      <paramdef>mixed
       <parameter><optional>arg</optional></parameter>
      </paramdef>
      <paramdef>mixed
       <parameter><optional>...</optional></parameter>
      </paramdef>
      <paramdef>array
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_multisort</function> sert &agrave; trier simultan&eacute;ment
     plusieurs tableau, ou bien &agrave; trier un tableau multi-dimensionnel,
     suivant l'une ou l'autre de ses dimensions. Les cl&eacute;s sont
     pr&eacute;serv&eacute;es.
    </para>
    <para>
     Les tableaux pass&eacute;s en arguments sont trait&eacute;s comme les colonnes
     d'une table, tri&eacute;es par lignes (un peu comme la clause SQL ORDER BY).
     Le premier tableau est la cl&eacute; primaire de tri. Les valeurs du premier
     tableaux qui sont &eacute;gales, sont tri&eacute;es gr&acirc;ce au tableau suivant,
     et ainsi de suite...
    </para>
    <para>
     La structure des arguments de cette fonction est un peu inhabituelle,
     mais elle est plus souple. Le premier argument DOIT &ecirc;tre un tableau,
     mais les arguments suivants peuvent &ecirc;tre des tableaux ou une ou deux options
     de tri, prises dans les valeurs suivantes : 
    </para>
    <para>
     Options de tri :
     <itemizedlist>
      <listitem>
       <simpara>SORT_ASC - Tri en ordre ascendant</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_DESC - Tri en ordre descendant</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Sorting type flags:
     <itemizedlist>
      <listitem>
       <simpara>SORT_REGULAR - Comparaison normale des valeurs</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_NUMERIC - Comparaison num&eacute;rique des valeurs</simpara>
      </listitem>
      <listitem>
       <simpara>SORT_STRING - Comparaison alphab&eacute;tique des valeurs</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Une seule option de tri de chaque type peut &ecirc;tre appliqu&eacute;e apr&egrave;s un tableau. 
     Une option ne s'applique qu'au tableau pr&eacute;c&eacute;dent. Tous les autres
     sont mis par d&eacute;faut &agrave; SORT_ASC et SORT_REGULAR.
    </para>
    <para>
     Retourns true en cas de succ&egrave;s, false sinon.
    </para>
    <para>
     <example>
      <title>Trier plusieurs tableaux</title>
      <programlisting role="php">
$ar1 = array ("10", 100, 100, "a");
$ar2 = array (1, 3, "2", 1);
array_multisort ($ar1, $ar2);
      </programlisting>
     </example>
    </para>
    <para>
     Dans cet exemple, Dans cet exemple, apr&egrave;s le tri, le premier tableau contient 
     10, "a", 100, 100; Le deuxi&egrave;me tableau contient 1, 1, 2, "3". Les entr&eacute;es du 
     second tableau correspondent aux valeurs jumelles du premier 
     tableau (100 et 100), sont aussi tri&eacute;es.
    </para>
    <para>
     <example>
      <title>Classer un tableau multidimensionnel</title>
      <programlisting role="php">
$ar = array (array ("10", 100, 100, "a"), array (1, 3, "2", 1));
array_multisort ($ar[0], SORT_ASC, SORT_STRING, 
                 $ar[1], SORT_NUMERIC, SORT_DESC);
      </programlisting>
     </example>
    </para>
    <para>
    Dans cet exemple, apr&egrave;s le tri, le premier tableau contient 10, 100, 100, "a" 
    (tri alphab&eacute;tique, ordre croissant); Le deuxi&egrave;me tableau contient 1, 3, "2", 1
    (tri num&eacute;rique, ordre d&eacute;croissant).
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-pad">
   <refnamediv>
    <refname>array_pad</refname>
    <refpurpose>
     Compl&egrave;te un tableau jusqu'&agrave; la longueur sp&eacute;cifi&eacute;e, 
     avec une valeur.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>array_pad</function></funcdef>
     <paramdef>array <parameter>input</parameter></paramdef>
     <paramdef>int <parameter>pad_size</parameter></paramdef>
     <paramdef>mixed <parameter>pad_value</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_pad</function> retourne une copie du tableau
     <parameter>input</parameter> compl&eacute;t&eacute; jusqu'&agrave; la taille de 
     <parameter>pad_size</parameter> avec la valeur 
     <parameter>pad_value</parameter>. si <parameter>pad_size</parameter> est positif 
     alors le tableau est compl&eacute;t&eacute; &agrave; droite, si il est 
     n&eacute;gatif, il est compl&eacute;t&eacute; &agrave; gauche. Si la valeur
     absolue de <parameter>pad_size</parameter> est plus petite que la taille du 
     tableau  <parameter>input</parameter> alors le tableau n'est pas 
     compl&eacute;t&eacute;.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_pad</function></title>
      <programlisting role="php">
$input = array (12, 10, 9);
$result = array_pad ($input, 5, 0);
// Le r&eacute;sultat est array (12, 10, 9, 0, 0)
$result = array_pad ($input, -7, -1);
// Le r&eacute;sultat est array (-1, -1, -1, -1, 12, 10, 9)
$result = array_pad ($input, 2, "noop");
// pas compl&eacute;t&eacute;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-pop">
   <refnamediv>
    <refname>array_pop</refname>
    <refpurpose>
      D&eacute;pile un &eacute;l&eacute;ment de la fin d'un tableau 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>array_pop</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_pop</function> d&eacute;pile et retourne le dernier 
     &eacute;l&eacute;ment du tableau <parameter>array</parameter>, le 
     raccourcissant d'un &eacute;l&eacute;ment.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_pop</function></title>
      <programlisting role="php">
$stack = array ("orange", "pomme", "framboise");
$fruit = array_pop ($stack);
      </programlisting>
      <para>
Apr&egrave;s ceci, $stack n'a plus que 2 &eacute;l&eacute;ments: "orange" et "pomme",
       tandis que $fruit contient "framboise".
      </para>
     </example>
    </para>
    <para>
     Voir aussi <function>array_push</function>,
     <function>array_shift</function>, et
     <function>array_unshift</function>.
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-push">
   <refnamediv>
    <refname>array_push</refname>
    <refpurpose>
     Empile un ou plusieurs &eacute;l&eacute;ments &agrave; la fin d'un tableau
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>array_push</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
     <paramdef>mixed <parameter>var</parameter></paramdef>
     <paramdef>
      <parameter><optional>...</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>array_push</function> consid&egrave;re <parameter>array</parameter> 
     comme une pile, et empile les variables pass&eacute;es en param&egrave;tres 
     &agrave; la fin de <parameter>array</parameter>.
     La longueur du tableau <parameter>array</parameter> augmente d'autant. 
     Cela a le m&ecirc;me effet que : 
     <programlisting role="php">
$array[] = $var;
     </programlisting>
     repet&eacute; pour chaque <parameter>var</parameter>.
    </para>
    <para>
     Retourne le nouveau nombre d'&eacute;l&eacute;ments du tableau.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_push</function></title>
      <programlisting role="php">
$stack = array (1, 2);
array_push($stack, "+", 3);
      </programlisting>
     </example>
     Cet exemple fait que $stack a 4 &eacute;l&eacute;ments: 1, 2, "+",
     et 3.
    </para>
    <para>
     Voir aussi: <function>array_pop</function>,
     <function>array_shift</function>, et
     <function>array_unshift</function>.
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-reverse">
   <refnamediv>
    <refname>array_reverse</refname>
    <refpurpose>
     Retourne un tableau dont les &eacute;l&eacute;ments sont class&eacute;s en sens 
     inverse.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>array_reverse</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_reverse</function> prend le tableau <parameter>array</parameter> 
     et retourne un nouveau tableau qui contient les m&ecirc;mes &eacute;l&eacute;ments
     mais dans l'ordre inverse.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_reverse</function></title>
      <programlisting role="php">
$input = array ("php", 4.0, array ("rouge", "vert"));
$result = array_reverse ($input);
      </programlisting>
     </example>
     Au final, $result contient (array ("rouge", "vert"), 4.0, "php").
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0 Beta 3.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

 <refentry id="function.array-rand">
   <refnamediv>
    <refname>array_rand</refname>
    <refpurpose>
     Prend une ou plusieurs valeurs, au hasard dans un tableau
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>array_rand</function></funcdef>
      <paramdef>array <parameter>input</parameter></paramdef>
      <paramdef>int
       <parameter><optional>num_req</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_rand</function> est pratique lorsque vous voulez
     selectionner une ou plusieurs valeurs au hasard dans un tableau.
     Le param&egrave;tre <parameter>input</parameter> est un tableau, et 
     <parameter>num_req</parameter> sp&eacute;ficie le nombre de valeurs que
     vous voulez obtenir (par d&eacute;faut, c'est 1).
    </para>
    <para>
     Si vous ne demandez qu'une entr&eacute;e, <function>array_rand</function>
     retourne l'index de la valeur. Sinon, elle retourne un tableau
     d'index. Cela vous permet de faire une selection au hasard de cl&eacute;s,
     ou bien de valeur.
    </para>
    <para>
     N'oubliez pas d'appeler <function>srand</function> pour initialiser le
     g&eacute;n&eacute;rateur de nombres al&eacute;atoires.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_rand</function></title>
      <programlisting role="php">
srand ((double) microtime() * 10000000);
$input = array ("Neo", "Morpheus", "Trinit&eacute;e", "Cypher", "Tank");
$rand_keys = array_rand ($input, 2);
print $input[$rand_keys[0]]."\n";
print $input[$rand_keys[1]]."\n";
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-shift">
   <refnamediv>
    <refname>array_shift</refname>
    <refpurpose>
     D&eacute;pile un &eacute;l&eacute;ment au d&eacute;but d'un tableau 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>array_shift</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_shift</function> extrait la premi&egrave;re valeur d'un 
     tableau et la retourne, en raccourcissant le tableau d'un &eacute;l&eacute;ment, 
     et en d&eacute;placant tous les &eacute;l&eacute;ments vers le bas. 
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_shift</function></title>
      <programlisting role="php">
$args = array ("-v", "-f");
$opt = array_shift ($args);
      </programlisting>
     </example>
       Cet exemple aura pour r&eacute;sultat que $args ne contiendra plus que "-f", 
       et $opt contient "-v".
    </para>
    <para>
     Voir aussi <function>array_unshift</function>,
     <function>array_push</function>, et
     <function>array_pop</function>.
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-slice">
   <refnamediv>
    <refname>array_slice</refname>
    <refpurpose>Extrait une portion de tableau </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>array_slice</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
     <paramdef>int <parameter>offset</parameter></paramdef>
     <paramdef>int
      <parameter>
       <optional>length</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>array_slice</function> retourne une s&eacute;rie d'
     &eacute;l&eacute;ment du tableau <parameter>array</parameter> commencant &agrave; 
     l'offset <parameter>offset</parameter> et repr&eacute;sentant 
     <parameter>length</parameter> &eacute;l&eacute;ments.
    </para>
    <para>
      Si <parameter>offset</parameter> est positif, la s&eacute;rie commencera &agrave; 
      cet offset dans le tableau <parameter>array</parameter>. Si 
      <parameter>offset</parameter> est n&eacute;gatif, cette s&eacute;rie commencera
       &agrave; l'offset offset mais en commencant &agrave; la fin du tableau 
       <parameter>array</parameter>.
    </para>
    <para>
      Si <parameter>length</parameter> est donn&eacute; et positif, alors la 
      s&eacute;rie aura autant d'&eacute;l&eacute;ments. Si 
      <parameter>length</parameter> est donn&eacute; et n&eacute;gatif, les 
      &eacute;l&eacute;ments seront pris dans l'ordre inverse. Si 
      <parameter>length</parameter> est omis, la s&eacute;quence lira tous les 
      &eacute;l&eacute;ments du tableau, depuis l'<parameter>offset</parameter> 
      pr&eacute;cis&eacute; jusqu'&agrave; la fin du tableau.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_slice</function></title>
      <programlisting role="php">
$input = array ("a", "b", "c", "d", "e");
$output = array_slice ($input, 2);      // retourne "c", "d", et "e"
$output = array_slice ($input, 2, -1);  // retourne "c", "d"
$output = array_slice ($input, -2, 1);  // retourne "d"
$output = array_slice ($input, 0, 3);   // retourne "a", "b", et "c"
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi <function>array_splice</function>.
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para> 
     </note>
    </para>     
   </refsect1>
  </refentry>

  <refentry id="function.array-splice">
   <refnamediv>
    <refname>array_splice</refname>
    <refpurpose>
     Efface et remplace une portion de tableau
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>array_splice</function></funcdef>
     <paramdef>array <parameter>input</parameter></paramdef>
     <paramdef>int <parameter>offset</parameter></paramdef>
     <paramdef>int
      <parameter><optional>length</optional></parameter>
     </paramdef>
     <paramdef>array
      <parameter>
       <optional>replacement</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>array_splice</function> supprime les &eacute;l&eacute;ments 
     d&eacute;sign&eacute;s par <parameter>offset</parameter> et
     <parameter>length</parameter> du tableau <parameter>input</parameter> et 
     les remplace par les &eacute;l&eacute;ments du tableau
     <parameter>replacement</parameter>, si ce dernier est pr&eacute;sent.
    </para>
    <para>
    Si <parameter>offset</parameter> est positif, la s&eacute;rie commencera 
    &agrave; cet offset dans le tableau  <parameter>input</parameter>. 
    Si <parameter>offset</parameter> est n&eacute;gatif, cette s&eacute;rie 
    commencera &agrave; l'offset <parameter>offset</parameter> mais en commencant 
    &agrave; la fin du tableau <parameter>input</parameter>.
    </para>
    <para>
    Si <parameter>length</parameter> est donn&eacute; et positif, alors la 
    s&eacute;rie aura autant d'&eacute;l&eacute;ments. Si <parameter>length</parameter> 
    est donn&eacute; et n&eacute;gatif, les &eacute;l&eacute;ments seront pris 
    dans l'ordre inverse. 
    Si <parameter>length</parameter> est omis, la s&eacute;quence lira tous les 
    &eacute;l&eacute;ments du tableau, depuis l'offset pr&eacute;cis&eacute; 
    jusqu'&agrave; la fin du tableau. 
    Conseil : pour supprimer tous les &eacute;l&eacute;ments du tableau depuis 
    <parameter>offset</parameter> jusqu'&agrave; la fin, m&ecirc;me si un tableau 
    de remplacement replacement est sp&eacute;cifi&eacute;, utilisez 
    count(<literal>count($input)</literal>) &agrave; la place de length.
    </para>
    <para>
    Si <parameter>replacement</parameter> est pr&eacute;cis&eacute;, alors les 
    &eacute;l&eacute;ments supprim&eacute;s sont remplac&eacute;s par les 
    &eacute;l&eacute;ments de ce tableau. Si <parameter>loffset</parameter> 
    et <parameter>length</parameter> sont tels que la taille du tableau ne change pas, 
    alors les &eacute;l&eacute;ments du tableau de remplacement replacement sont 
    ins&eacute;r&eacute;s &agrave; partir de l'offset <parameter>offset</parameter>.
     Conseil : si le tableau de remplacement ne contient qu'un seul 
     &eacute;l&eacute;ment, il n'est pas obligatoire de forcer le type &agrave; 
     array avec <literal>array()</literal>, &agrave; moins que cette variable ne soit 
     elle m&ecirc;me un tableau.
    </para>
    <para>
     Les codes suivants sont &eacute;quivalents :
     <programlisting role="php">
array_push($input, $x, $y)     array_splice($input, count($input), 0, array($x, $y))
array_pop($input)              array_splice($input, -1)
array_shift($input)            array_splice($input, 0, 1)
array_unshift($input, $x, $y)  array_splice($input, 0, 0, array($x, $y))
$a[$x] = $y                    array_splice($input, $x, 1, $y)
     </programlisting>
    </para>
    <para>
     Retourne le tableau des &eacute;l&eacute;ments supprim&eacute;s.
    </para>
    <para>
     <example>
      <title>Exemples avec <function>array_splice</function></title>
      <programlisting role="php">
$input = array("red", "green", "blue", "yellow");
array_splice($input, 2);      // $input est array("red", "green")
array_splice($input, 1, -1);  // $input est array("red", "yellow")
array_splice($input, 1, count($input), "orange");  
                              // $input est array("red", "orange")
array_splice($input, -1, 1, array("black", "maroon")); 
                              // $input est array("red", "green", 
                              //          "blue", "black", "maroon")
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi <function>array_slice</function>.
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>
  
   <refentry id="function.array-unique">
   <refnamediv>
    <refname>array_unique</refname>
    <refpurpose>D&eacute;doublonne un tableau</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>array <function>array_unique</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_unique</function> prend le tableau
     <parameter>array</parameter> et retourne un nouveau tableau,
     compl&egrave;tement d&eacute;doublonn&eacute;.
     Notez que les cl&eacute;s sont pr&eacute;serv&eacute;es.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_unique</function></title>
      <programlisting role="php">
$input = array ("a" =&gt; "vert", "rouge", "b" =&gt; "vert", "bleu", "rouge");
$result = array_unique ($input);
      </programlisting>
     </example>
    </para>
    <para>
     <varname>$result</varname> contient<literal>array ("a" =&gt;
     "vert", "rouge", "bleu");</literal>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-unshift">
   <refnamediv>
    <refname>array_unshift</refname>
    <refpurpose>
      Empile un ou plusieurs &eacute;l&eacute;ments au d&eacute;but d'un 
      tableau
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>array_unshift</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>
       <parameter>
	<optional>...</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_unshift</function> ajoute les &eacute;l&eacute;ments pass&eacute; 
     en argument au d&eacute;but du tableau <parameter>array</parameter>. Notez que 
     les &eacute;l&eacute;ments sont ajout&eacute;s comme un tout, et qu'ils restent 
     dans le m&ecirc;me ordre.
    </para>
    <para>
      Retourne le nouveau nombre d'&eacute;l&eacute;ments du tableau 
      <parameter>array</parameter>.
    </para>
    <para>
     <example>
      <title>Exemples avec <function>array_unshift</function></title>
      <programlisting role="php">
$queue = array("p1", "p3");
array_unshift($queue, "p4", "p5", "p6");
      </programlisting>
     </example>
     Le r&eacute;sultat de cet exemple est que $queue aura 5 &eacute;l&eacute;ments, 
     &agrave; savoir: "p4", "p5", "p6", "p1", et "p3".
    </para>
    <para>
     Voir aussi <function>array_shift</function>,
     <function>array_push</function>, et
     <function>array_pop</function>.
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-values">
   <refnamediv>
    <refname>array_values</refname>
    <refpurpose>Retourne les valeurs d'un tableau </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>array_values</function></funcdef>
     <paramdef>array <parameter>input</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_values</function>retourne les valeurs du tableau 
     <parameter>input</parameter>.
    </para>
    <para>
     <example>
      <title>Exemples avec <function>array_values</function></title>
      <programlisting role="php">
$array = array("taille" => "XL", "couleur" => "or");
array_values($array);    // // retourne array("XL", "or")
      </programlisting>
     </example>
     <note>
     <para>
      Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4. Ci dessous, voici une
      impl&eacute;mentation pour ceux qui utilisent toujours PHP 3.
      <example>
       <title>
    Impl&eacute;mentation de <function>array_values</function> pour les utilisateurs
    PHP 3
       </title>
       <programlisting role="php">
function array_values ($arr) {
    $t = array();
    while (list($k, $v) = each ($arr)) {
        $t[] = $v;
        return $t;
    }
}
       </programlisting>
      </example>
     </para>
    </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-walk">
   <refnamediv>
    <refname>array_walk</refname>
    <refpurpose>
     Ex&eacute;cute une fonction sur chacun des membres d'un tableau.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>array_walk</function></funcdef>
     <paramdef>array <parameter>arr</parameter></paramdef>
     <paramdef>string <parameter>func</parameter></paramdef>
     <paramdef>mixed <parameter>userdata</parameter></paramdef>
    </funcsynopsis>
    <simpara>
    Ex&eacute;cute la fonction <parameter>func</parameter> avec chaque 
    &eacute;l&eacute;ment du tableau <parameter>arr</parameter>.Les 
    &eacute;l&eacute;ments sont pass&eacute;s en tant que premier argument de la 
    fonction <parameter>func</parameter>;
    </simpara>
    <simpara>
    Si <parameter>func</parameter> a besoin de plus d'un argument, une alerte 
    sera g&eacute;n&eacute;r&eacute;e pour chaque appel de <parameter>func</parameter>. 
    Ces alertes sont supprim&eacute;es en ajoutant le suffixe '@' avant l'appel de 
    <function>array_walk</function> ou simplement en utilisant 
    <function>error_reporting</function>.
    </simpara>
    <note>
     <para>
      Si <parameter>func</parameter> doit travailler avec les v&eacute;ritables 
      valeur du tableau, sp&eacute;cifiez que le premier param&egrave;tre de 
      <parameter>func</parameter> doit &ecirc;tre pass&eacute; par 
      r&eacute;f&eacute;rence. Alors, les &eacute;l&eacute;ments seront directement 
      modifi&eacute;s dans le tableau.
     </para>
    </note>
    <note>
     <para>
      Passez les cl&eacute;s et userdata &agrave; <parameter>func</parameter> 
      a &eacute;t&eacute; ajout&eacute; dans PHP 4.0.
     </para>
     <para>
      Dans PHP 4, <function>reset</function> doit &ecirc;tre appel&eacute;s si
      n&eacute;cessaire, car <function>array_walk</function> ne r&eacute;initialise pas 
      automatiquement le tableau.
     </para>
    </note>
    <para>
     <example>
      <title>Exemple avec <function>array_walk</function></title>
      <programlisting role="php">
$fruits = array("d"=>"citron","a"=>"orange","b"=>"banane","c"=>"pomme");
function test_alter( $item1 ) {
   $item1 = 'bidon';
}
function test_print( $item2 ) {
   echo "$item2&lt;br>\n";
}
array_walk( $fruits, 'test_print' );
array_walk( $fruits, 'test_alter' );
array_walk( $fruits, 'test_print' );
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>each</function> et <function>list</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.arsort">
   <refnamediv>
    <refname>arsort</refname>
    <refpurpose>
     Trie un tableau en ordre inverse
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>arsort</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para> 
    Cette fonction trie un tableau de telle mani&egrave;re que la corr&eacute;lation 
    entre les index et les valeurs soient conserv&eacute;es. L'usage principal est 
    lors de tri de tableaux associatifs o&uacute; l'ordre des &eacute;l&eacute;ments 
    est important.
     <example>
      <title>Exemple avec <function>arsort</function></title>
      <programlisting role="php">
$fruits = array("d"=>"papaye","a"=>"orange","b"=>"banane","c"=>"ananas");
arsort ($fruits);
for (reset ($fruits); $key = key ($fruits); next ($fruits)) {
    echo "fruits[$key] = ".$fruits[$key]."\n";
}
      </programlisting>
     </example>
Cet exemple va afficher: 
     <computeroutput>
fruits[a] = orange 
fruits[d] = papaye 
fruits[b] = banane 
fruits[c] = ananas 
     </computeroutput>
     Les fruits ont &eacute;t&eacute; tri&eacute;s en ordre alphab&eacute;tique 
     inverse, et leur index respectifs ont &eacute;t&eacute; conserv&eacute;. 
    </para>
    <para>
     Voir aussi: <function>asort</function>, <function>rsort</function>,
     <function>ksort</function>, et <function>sort</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.asort">
   <refnamediv>
    <refname>asort</refname>
    <refpurpose>Trie un tableau en ordre</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>asort</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
    Cette fonction trie un tableau de telle mani&egrave;re que la corr&eacute;lation 
    entre les index et les valeurs soient conserv&eacute;es. L'usage principal est 
    lors de tri de tableaux associatifs o&uacute; l'ordre des &eacute;l&eacute;ments 
    est important.
     <example>
      <title>Exemple avec <function>asort</function></title>
      <programlisting role="php">
$fruits = array("d"=>"papaye","a"=>"orange","b"=>"banane","c"=>"ananas");
asort($fruits);
for(reset($fruits); $key = key($fruits); next($fruits)) {
    echo "fruits[$key] = ".$fruits[$key]."\n";
}
      </programlisting>
     </example>
     Cet exemple va afficher: 
     <computeroutput>
fruits[c] = ananas 
fruits[b] = banane 
fruits[d] = papaye 
fruits[a] = orange
     </computeroutput>
       Les fruits ont &eacute;t&eacute; tri&eacute;s par ordre alphab&eacute;tique, 
       et leur index respectifs ont &eacute;t&eacute; conserv&eacute;.
    </para>
    <para>
     Voir aussi <function>arsort</function>, <function>rsort</function>,
     <function>ksort</function>, et <function>sort</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.compact">
   <refnamediv>
    <refname>compact</refname>
    <refpurpose>
     Cr&eacute;e un tableau contenant les variables et leur valeur
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>compact</function></funcdef>
     <paramdef><parameter>string varname | array
     varnames</parameter></paramdef>
     <paramdef>
      <parameter><optional>...</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
      <function>compact</function> accepte diff&eacute;rents param&egrave;tres. Les 
      param&egrave;tres peuvent &ecirc;tre des variables contenant des cha&icirc;nes, 
      ou un tableau de cha&icirc;ne, qui peut contenir d'autres tableau de noms, que 
      <function>compact</function> traitera r&eacute;cursivement.
    </para>
    <para>
      Pour chacun des arguments, <function>compact</function> recherche une variable 
      avec une variable de m&ecirc;me nom dans la table courante des symboles, et 
      l'ajoute dans le tableau, de mani&egrave;re &agrave; avoir la relation nom => 
      'valeur de variable'. En bref, c'est le contraire de la fonction 
      <function>extract</function>. Retourne le tableau ainsi cr&eacute;&eacute;.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>compact</function></title>
      <programlisting role="php">
$ville = "San Francisco";
$etat = "CA";
$evenement = "SIGGRAPH";
$location_vars = array("ville", "etat");
$result = compact("evenement", $location_vars);
      </programlisting>
      <para>
       Apr&egrave;s cette op&eacute;ration, $result sera le tableau suivant : 
       array(("evenement" => "SIGGRAPH", "ville" => "San Francisco", "etat" => "CA").
      </para>
     </example>
    </para>
    <para>
     Voir aussi <function>extract</function>.
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.count">
   <refnamediv>
    <refname>count</refname>
    <refpurpose>Compte le nombre d'&eacute;l&eacute;ment d'un tableau </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>count</function></funcdef>
     <paramdef>mixed <parameter>var</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne le nombre d'&eacute;l&eacute;ment dans <parameter>var</parameter>, qui 
     est g&eacute;n&eacute;ralement un tableau (et tout le reste n'aura qu'un 
     &eacute;l&eacute;ment).
    </para>
    <para>
     Retourne 1 si la variable n'est pas un tableau.
    </para>
    <para>
     Retourne 0 si la variable n'est pas cr&eacute;&eacute;e.
    </para>
    <para>
   <warning>
      <para>
       <function>count</function> peut retourner 0 pour une
       variable qui n'a pas &eacute;t&eacute; affect&eacute;e, ou pour un tableau
       vide. Utilisez plut&ocirc;t <function>isset</function> 
       pour tester si la variable existe.
      </para>
     </warning>
    </para>
    <para>
     <example>
      <title>Exemple avec <function>count</function></title>
      <programlisting role="php">
$a[0] = 1; 
$a[1] = 3; 
$a[2] = 5; 
$result = count ($a);
//$result == 3, pas 2, car il y a 3 &eacute;l&eacute;ments assign&eacute;s
$a[2] = 1; 
$a[4] = ""; 
$a[6] = 5;
$a[8] = 7;
$a[10] = 11;
$a[12] = "";
$result = count ($a);
// $result == 4, car il y a 4 &eacute;l&eacute;ments assign&eacute;s
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi: <function>sizeof</function>,
     <function>isset</function>, et
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.current">
   <refnamediv>
    <refname>current</refname>
    <refpurpose>Transforme une variable en tableau</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>current</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
Chaque tableau entretien un pointeur interne,  qui est initialis&eacute; lors
lorsque le premier &eacute;l&eacute;ment est ins&eacute;r&eacute; dans le tableau.
    </para>
    <para>
     La fonction <function>current</function> ne fait que retourner 
     l'&eacute;l&eacute;ment courant point&eacute; par le pointeur interne. 
     <function>current</function> ne d&eacute;place pas le pointeur.
     Si le pointeur est au dela du dernier &eacute;l&eacute;ment de la liste, 
     <function>current</function> retourne faux.
     <warning>
      <para> 
       Si le tableau des &eacute;l&eacute;ments vides ou des z&eacute;ros (0 ou "", 
       la cha&icirc;ne vide) alors cette fonction retournera false pour ces 
       &eacute;l&eacute;ments. Il est donc impossible de determiner si vous 
       &ecirc;tes r&eacute;ellement &agrave; la fin de la liste en utilisant
       la fonction <function>current</function>.  Pour passer en revue proprement un 
       tableau qui peut contenir des &eacute;l&eacute;ments vides ou des z&eacute;ros,
       utilisez la fonction
       <function>each</function>.  
      </para>
     </warning>
    </para>
    <para>
     Voir aussi: <function>end</function>, <function>next</function>,
     <function>prev</function> et <function>reset</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.each">
   <refnamediv>
    <refname>each</refname> 
    <refpurpose>
     Retourne chaque paire cl&eacute;/valeur d'un tableau 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>each</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne la paire (cl&eacute;/valeur) courante du tableau 
      <parameter>array</parameter> et avance le pointeur de tableau. Cette paire 
      est retourn&eacute;e dans un tableau de 4 &eacute;l&eacute;ments, avec les 
      cl&eacute;s  <emphasis>0</emphasis>, <emphasis>1</emphasis>,     
      <emphasis>key</emphasis>, et <emphasis>value</emphasis>. Les 
      &eacute;l&eacute;ments <emphasis>0</emphasis> et <emphasis>key</emphasis> 
      contiennent le nom de la cl&eacute; et, et <emphasis>1</emphasis> et
     <emphasis>value</emphasis> contiennent la valeur.
    </para>
    <para>
      Si le pointeur interne de fichier est au del&agrave; de la fin du tableau, 
      <function>each</function> retourne faux.
    </para>
    <para>
     <example>
      <title>Exemples avec <function>each</function></title>
      <programlisting role="php">
$foo = array ("bob", "fred", "jussi", "jouni", "egon", "marliese");
$bar = each ($foo);
      </programlisting>
      <para>
<literal>$bar</literal> contient maintenant les paires suivantes: 
       <itemizedlist spacing="compact">
        <listitem><simpara>0 => 0</simpara></listitem>
        <listitem><simpara>1 => 'bob'</simpara></listitem>
        <listitem><simpara>key => 0</simpara></listitem>
        <listitem><simpara>value => 'bob'</simpara></listitem>
       </itemizedlist>
       <programlisting role="php">
$foo = array ("Robert" => "Bob", "Seppo" => "Sepi");
$bar = each ($foo);
       </programlisting>
      </para>
      <para>
<literal>$bar</literal> contient maintenant les paires suivantes: 
       <itemizedlist spacing="compact">
        <listitem><simpara>0 => 'Robert'</simpara></listitem>
        <listitem><simpara>1 => 'Bob'</simpara></listitem>
        <listitem><simpara>key => 'Robert'</simpara></listitem>
        <listitem><simpara>value => 'Bob'</simpara></listitem>
       </itemizedlist>
      </para>
     </example>
    </para>
      
    <para>
      <function>each</function> est utilis&eacute; conjointement avec 
      <function>list</function> pour &eacute;tudier tous les &eacute;l&eacute;ments 
      d'un tableau; par exemple, $HTTP_POST_VARS: 
     <example>
      <title>
       Affichage de $HTTP_POST_VARS avec <function>each</function>
      </title>
      <programlisting role="php">
echo "Valeurs transmises par la m&eacute;thode POST:&lt;br&gt;";
reset ($HTTP_POST_VARS);
while (list ($key, $val) = each ($HTTP_POST_VARS)) {
    echo "$key => $val&lt;br&gt;";
}
      </programlisting>
     </example>
    </para>
    <para>
     Apr&egrave;s chaque <function>each</function>, le pointeur de tableau est 
     d&eacute;plac&eacute; au dernier &eacute;l&eacute;ments, ou sur le dernier 
     &eacute;l&eacute;ment, lorsqu'on arrive &agrave; la fin.
    </para>
    <para>
     Voir aussi <function>key</function>, <function>list</function>,
     <function>current</function>, <function>reset</function>,
     <function>next</function>, et <function>prev</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.end">
   <refnamediv>
    <refname>end</refname>
    <refpurpose>
     Positionne le pointeur de tableau en fin de tableau 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef><function>end</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>end</function> d&eacute;place le pointeur interne du tableau 
     <parameter>array</parameter> jusqu'au dernier &eacute;l&eacute;ment.
    </para>
    <para>
     Voir aussi: <function>current</function>,
     <function>each</function>, <function>end</function>,
     <function>next</function>, et <function>reset</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.extract">
   <refnamediv>
    <refname>extract</refname>
    <refpurpose>
     Import variables into the symbol table from an array
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>extract</function></funcdef>
     <paramdef>array <parameter>var_array</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>extract_type</optional></parameter>
     </paramdef>
     <paramdef>string 
      <parameter><optional>prefix</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
      Cette fonction sert &agrave; exporter un tableau vers la table des symboles. 
      Elle prend un tableau associatif <parameter>var_array</parameter> et cr&eacute;e 
      les variables dont les noms sont les index de ce tableau, et leur affecte la 
      valeur associ&eacute;e. Pour chaque paire cl&eacute;/valeur, cette fonction 
      cr&eacute;e une variable, avec les param&egrave;tres 
      <parameter>extract_type</parameter> et <parameter>prefix</parameter>.
    </para>
    <para>
      <function>extract</function> v&eacute;rifie l'existence de la variable avant 
      de la cr&eacute;er. La mani&egrave;re de traiter les collisions est 
      d&eacute;termin&eacute;e par <parameter>extract_type</parameter>. 
      Ce param&egrave;tre peut prendre une des valeurs suivantes :
     <variablelist>
      <varlistentry>
       <term>EXTR_OVERWRITE</term>
       <listitem>
	<simpara>
	 Lors d'une collision, r&eacute;&eacute;crire la variable existante. 
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_SKIP</term>
       <listitem>
	<simpara>
	 Lors d'une collision, ne pas r&eacute;&eacute;crire la variable existante 
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_SAME</term>
       <listitem>
	<simpara>
	  Lors d'une collision, ajouter le pr&eacute;fixe <parameter>prefix</parameter>, 
	  et cr&eacute;er une nouvelle variable.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_ALL</term>
       <listitem>
	<simpara>
	  Ajouter le pr&eacute;fixe <parameter>prefix</parameter>, et cr&eacute;er 
	  une nouvelle variable. 
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
      Si <parameter>extract_type</parameter> est omis, extract() utilise 
      EXTR_OVERWRITE par d&eacute;fault.
    </para>
    <para>
      Notez que <parameter>prefix</parameter> n'est n&eacute;cessaire que pour 
      les valeurs de <parameter>extract_type</parameter> suivantes : 
      EXTR_PREFIX_SAME et EXTR_PREFIX_ALL.
    </para>
    <para>
      <function>extract</function> v&eacute;rifie que les cl&eacute;s constitue 
      un nom de variable valide, et si c'est le cas, proc&egrave;de &agrave; son 
      exportation.
    </para>
    <para>
      Une utilisation possible de cette fonction est l'exportation vers la table des 
      symboles de tableau de variables retourn&eacute; par la fonction 
      <function>wddx_deserialize</function>.
    </para>
    <para>
     <example>
      <title>Exemples avec <function>extract</function></title>
      <programlisting role="php">
&lt;php?
/* Supposons que $var_array est un tableau retourn&eacute; par 
   wddx_deserialize */
$taille = "grand";
$var_array = array("couleur" => "bleu",
                   "taille"  => "moyen",
                   "forme" => "sphere");
extract($var_array, EXTR_PREFIX_SAME, "wddx");
print "$couleur, $taille, $forme, $wddx_taille\n";
?>
      </programlisting>
     </example>
    </para>
    <para>
     L'exemple ci dessus va afficher 
     <programlisting>
bleu, large, sphere, moyen
     </programlisting>
    </para>
    <para>
      La variable $taille n'a pas &eacute;t&eacute; r&eacute;&eacute;crite, car on 
      avait sp&eacute;cifi&eacute; le param&egrave;tre EXTR_PREFIX_SAME, qui a permis 
      la cr&eacute;ation $wddx_size. Si EXTR_SKIP avait &eacute;t&eacute; 
      utilis&eacute;, alors $wddx_size n'aurait pas &eacute;t&eacute; 
      cr&eacute;&eacute;. Avec EXTR_OVERWRITE, $taille aurait pris la valeur "moyen", 
      et avec EXTR_PREFIX_ALL, les variables cr&eacute;&eacute;es seraient 
      $wddx_couleur, $wddx_taille, et $wddx_forme.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.in-array">
   <refnamediv>
    <refname>in_array</refname>
    <refpurpose>
      Retourne vrai si une valeur appartient &agrave; un tableau
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>bool in_array</funcdef>
     <paramdef>mixed <parameter>needle</parameter></paramdef>
     <paramdef>array <parameter>haystack</parameter></paramdef>
    </funcsynopsis>
    <para>
     Recherche <parameter>needle</parameter> dans <parameter>haystack</parameter> et
     retourne vrai si il s'y trouve, ou faux sinon.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>in_array</function></title>
      <programlisting role="php">
$os = array("Mac", "NT", "Irix", "Linux");
if (in_array("Irix", $os))
       print "Irix trouve";
      </programlisting>
     </example>
     <note>
      <para>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.key">
   <refnamediv>
    <refname>key</refname>
    <refpurpose>Retourne une cl&eacute; d'un tableau associatif</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>key</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>key</function> retourne l'index de la cl&eacute; courante dans un 
     tableau.
    </para>
    <para>
     Voir aussi: <function>current</function>, et <function>next</function>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.krsort">
   <refnamediv>
    <refname>krsort</refname>
    <refpurpose>
      Trie un tableau en sens inverse et suivant les cl&eacute;s
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>krsort</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
      <function>krsort</function> trie un tableau en ordre inverse et suivant les 
      cl&eacute;s, en maintenant la correspondance entre les cl&eacute;s et les 
      valeurs. Cette fonction est pratique pour les tableaux associatifs.
     <example>
      <title>Exemple avec <function>krsort</function></title>
      <programlisting role="php">
$fruits = array("d"=>"papaye","a"=>"orange","b"=>"banane","c"=>"ananas");
ksort($fruits);
for(reset($fruits); $key = key($fruits); next($fruits)) {
    echo "fruits[$key] = ".$fruits[$key]."\n";
}
      </programlisting>
     </example>
     Cet exemple va afficher : 
     <computeroutput>
fruits[d] = citron
fruits[c] = ananas 
fruits[b] = banane 
fruits[a] = orange 
     </computeroutput>
    </para>
    <simpara>
     Voir aussi <function>asort</function>, <function>arsort</function>,
     <function>ksort</function> <function>sort</function>, et
     <function>rsort</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ksort">
   <refnamediv>
    <refname>ksort</refname>
    <refpurpose>Trie un tableau suivant les cl&eacute;s</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ksort</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
    <function>ksort</function> trie un tableau suivant les 
    cl&eacute;s, en maintenant la correspondance entre les 
    cl&eacute;s et les valeurs. Cette fonction est pratique 
    pour les tableaux associatifs.
     <example>
      <title>Exemple avec <function>ksort</function></title>
      <programlisting role="php">
$fruits = array("d"=>"papaye","a"=>"orange","b"=>"banane","c"=>"ananas");
ksort ($fruits);
reset ($fruits);
while (list ($key, $val) = each ($fruits)) {
    echo "$key -&gt; $val\n";
}
      </programlisting>
     </example>
     Cet exemple va afficher : 
     <computeroutput>
fruits[a] = orange 
fruits[b] = banane 
fruits[c] = ananas 
fruits[d] = citron
     </computeroutput>
    </para>
    <para>
     Vous pouvez modifier le comportement du tri avec les 
     options <parameter>sort_flags</parameter>. Pour plus de 
     d&eacute;tails, voyez <function>sort</function>.
    </para>
    <simpara>
     Voir aussi <function>asort</function>, <function>arsort</function>, 
     <function>sort</function>, et <function>rsort</function>.
    </simpara>
        <note>
     <para>
      Le second param&egrave;tre a &eacute;t&eacute; ajout&eacute; dans PHP 4.
     </para>
    </note>
   </refsect1>
  </refentry>
  <refentry id="function.list">
   <refnamediv>
    <refname>list</refname>
    <refpurpose>
     Transforme une liste de variables en tableau 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>list</function></funcdef>
     <void/>
    </funcsynopsis>
    <para>
     Tout comme <function>array</function>, ce n'est pas une 
     v&eacute;ritable fonction, mais une construction syntaxique,
     qui permet d'assigner une s&eacute;rie de variable en une
     seule ligne.
     <example>
      <title>Exemple avec <function>list</function></title>
      <programlisting role="php">
&lt;table>
 &lt;tr>
  &lt;th>Employee name&lt;/th>
  &lt;th>Salary&lt;/th>
 &lt;/tr>
&lt;?php
$result = mysql ($conn, "SELECT id, name, salary FROM employees");
while (list ($id, $name, $salary) = mysql_fetch_row ($result)) {
    print (" &lt;tr>\n".
           "  &lt;td>&lt;a href=\"info.php3?id=$id\">$name&lt;/a>&lt;/td>\n".
           "  &lt;td>$salary&lt;/td>\n".
           " &lt;/tr>\n");
}
?>
&lt;/table>
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi: <function>each</function>, <function>array</function>.
    </para>
   </refsect1>
  </refentry>
 <refentry id="function.natsort">
   <refnamediv>
    <refname>natsort</refname>
    <refpurpose>
     Tri d'un tableau avec l'algorithme &agrave; "ordre naturel"
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>natsort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Cette fonction impl&eacute;mente un algorithme de tri qui traite 
     les cha&icirc;nes alphanum&eacute;riques comme un &ecirc;tre humain : c'est 
     ce qui est appel&eacute; l'"ordre naturel". Un exemple de la 
     diff&eacute;rence de traitement entre un tel algorithme et un 
     algorithme de tri de cha&icirc;ne (comme lorsqu'on utilise 
     <function>sort</function>) est illustr&eacute; ci dessous :
    </para>
    <para>
     <example>
      <title>Exemple avec <function>natsort</function></title>
      <programlisting role="php">
$array1 = $array2 = array ("img12.png","img10.png","img2.png","img1.png");          
sort($array1);
echo "Tri Standard\n";
print_r($array1);
natsort($array2);
echo "\nTri par Ordre Naturel\n";
print_r($array2);
      </programlisting>
     </example>
    </para>
    <para>
     L'exemple ci dessous g&eacute;n&egrave;re l'affichage suivant : 
    </para>
    <para>
     <informalexample>
      <programlisting>
Tri Standard
Array
(
    [0] =&gt; img1.png
    [1] =&gt; img10.png
    [2] =&gt; img12.png
    [3] =&gt; img2.png
)
Tri par Ordre Naturel
Array
(
    [3] =&gt; img1.png
    [2] =&gt; img2.png
    [1] =&gt; img10.png
    [0] =&gt; img12.png
)
      </programlisting>
     </informalexample>
     Pour plus de d&eacute;tails, rendez vous sur le site de : 
     Martin Pool's 
     <ulink url="&url.strnatcmp;">Natural Order String Comparison</ulink>.
    </para>
    <para>
     Voir aussi <function>natcasesort</function>,
     <function>strnatcmp</function> et
     <function>strnatcasecmp</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.natcasesort">
   <refnamediv>
    <refname>natcasesort</refname>
    <refpurpose>
     Tri d'un tableau avec l'algorithme &agrave; "ordre naturel" insensible &agrave; la casse
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>natcasesort</function></funcdef>
      <paramdef>array <parameter>array</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Cette fonction impl&eacute;mente un algorithme de tri qui traite 
     les cha&icirc;nes alphanum&eacute;riques comme un &ecirc;tre humain : c'est 
     ce qui est appel&eacute; l'"ordre naturel". 
    </para>
    <para>
     <function>natcasesort</function> est la version insensible &agrave; la
     casse de <function>natsort</function>.  Voir aussi 
     <function>natsort</function> pour un exemple illustr&eacute;.
    </para>
    <para>
     Pour plus de d&eacute;tails, rendez vous sur le site de : 
     Martin Pool's 
     <ulink url="&url.strnatcmp;">Natural Order String Comparison</ulink>.
    </para>
    <para>
     Voir aussi <function>sort</function>,
     <function>natsort</function>,
     <function>strnatcmp</function> et
     <function>strnatcasecmp</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.next">
   <refnamediv>
    <refname>next</refname>
    <refpurpose>
     Avance le pointeur interne d'un tableau 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>next</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para> 
     <function>next</function> retourne l'&eacute;l&eacute;ment suivant du tableau, 
     ou false si il n'y a plus d'&eacute;l&eacute;ments. Le pointeur de interne de 
     tableau est avanc&eacute; d'un &eacute;l&eacute;ment.
    </para>
    <para>
     <function>next</function> se comporte comme 
     <function>current</function>, mais avec une diff&eacute;rence : il avance le 
     pointeur interne de tableau d'un &eacute;l&eacute;ment avant de retourner la 
     valeur qu'il pointe. Lorsque le pointeur d&eacute;passe le dernier 
     &eacute;l&eacute;ment, <function>next</function> retourne false.
     <warning>
      <para>
        Si le tableau contient des &eacute;l&eacute;ments vides ou des z&eacute;ros, 
        cette fonction retournera false pour ces &eacute;l&eacute;ments.
        Pour passer proprement en revue un tableau, il faut utiliser 
        <function>each</function>.
      </para>
     </warning>
    </para>
    <para>
     Voir aussi:
     <function>current</function>, <function>end</function>
     <function>prev</function> et <function>reset</function>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.pos">
   <refnamediv>
    <refname>pos</refname>
    <refpurpose>Retourne l'&eacute;l&eacute;ment courant d'un tableau </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>pos</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     C'est une fonction alias de <function>current</function>.
    </simpara>
    <para>
     Voir aussi:
     <function>end</function>, <function>next</function>,
     <function>prev</function> et <function>reset</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.prev">
   <refnamediv>
    <refname>prev</refname>
    <refpurpose>Recule le pointeur courant de tableau </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>prev</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
     Repositionne le pointeur interne de tableau &agrave; la derni&egrave;re 
     place qu'il occupait, ou bien retourne faux si il ne reste plus 
     d'&eacute;l&eacute;ments.
     <warning>
      <para>
        Si le tableau contient des &eacute;l&eacute;ments vides, cette fonction 
        retournera faux pour ces &eacute;l&eacute;ments aussi. Pour passer en 
        revue tous les &eacute;l&eacute;ments, utilisez plut&ocirc;t 
        <function>each</function>.
      </para>
     </warning>
    </para>
    <para>
      <function>prev</function> se comporte exactement comme 
      <function>next</function>, mais il fait reculer le pointeur plut&ocirc;t que 
      de l'avancer.  
    </para>
    <para>
     Voir aussi: <function>current</function>, <function>end</function>
     <function>next</function> et <function>reset</function>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.range">
   <refnamediv>
    <refname>range</refname>
    <refpurpose>
     Cr&eacute;e un tableau contenant un intervalle d'entiers 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>range</function></funcdef>
     <paramdef>int <parameter>low</parameter></paramdef>
     <paramdef>int <parameter>high</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>range</function> retourne un tableau contenant tous les entiers 
     depuis <parameter>low</parameter> jusqu'&agrave; <parameter>high</parameter>, 
     inclus.
    </para>
    <para>
     Voir <function>shuffle</function> pour un exemple d'utilisation.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.reset">
   <refnamediv>
    <refname>reset</refname>
    <refpurpose>
     Remet le pointeur interne de tableau au d&eacute;but
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>reset</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>reset</function> replace le pointeur de tableau 
     <parameter>array</parameter> au premier &eacute;l&eacute;ment.
    </para>
    <para>
     <function>reset</function> retourne la valeur du premier &eacute;l&eacute;ment.
    </para>
    <para>
     Voir aussi: <function>current</function>,
     <function>each</function>, <function>next</function>,
     <function>prev</function>, et <function>reset</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.rsort">
   <refnamediv>
    <refname>rsort</refname>
    <refpurpose>Trie en ordre inverse</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>rsort</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
     Cette fonction effectue un trie en ordre d&eacute;croissant (du plus grand au 
     plus petit). 
     <example>
      <title>Exemple avec <function>rsort</function></title>
	<programlisting role="php">
$fruits = array("papaye","orange","banane","ananas");
rsort($fruits);
for (reset($fruits); list($key,$value) = each($fruits); ) {
    echo "fruits[$key] = ", $value, "\n";
}
 </programlisting>
     </example>
     Cet exemple va afficher: 
     <computeroutput>
fruits[0] = papaye 
fruits[1] = orange 
fruits[2] = banane 
fruits[3] = ananas 
     </computeroutput>
     Les fruits ont &eacute;t&eacute; class&eacute;s dans l'ordre alphab&eacute;tique 
     inverse.
    </para>
    <para>
     Voir aussi: <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>sort</function>, et <function>usort</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.shuffle">
   <refnamediv>
    <refname>shuffle</refname>
    <refpurpose>M&eacute;lange les &eacute;l&eacute;ments d'un tableau </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>shuffle</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
Cette fonction m&eacute;lange les &eacute;l&eacute;ments d'un tableau.
     <example>
      <title>Exemple avec <function>shuffle</function></title>
      <programlisting role="php">
$numbers = range (1,20);
srand (time());
shuffle ($numbers);
while (list(, $number) = each ($numbers)) {
    echo "$number ";
}
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi <function>arsort</function>, <function>asort</function>,
     <function>ksort</function>, <function>rsort</function>,
     <function>sort</function> and <function>usort</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.sizeof">
   <refnamediv>
    <refname>sizeof</refname>
    <refpurpose>Retourne le nombre d'&eacute;l&eacute;ment d'un tableau</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>sizeof</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne le nombre d'&eacute;l&eacute;ment d'un tableau.
    </para>
    <para>
     Voir aussi: <function>count</function>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.sort">
   <refnamediv>
    <refname>sort</refname>
    <refpurpose>Trie le tableau </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>sort</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cette fonction trie le tableau <parameter>array</parameter>. Les 
      &eacute;l&eacute;ments seront tri&eacute;s du plus petit au plus grand.
     <example>
      <title>Exemple avec <function>sort</function></title>
	<programlisting role="php">
$fruits = array("papaye","orange","banane","ananas");
sort($fruits);
for(reset($fruits); $key = key($fruits); next($fruits)) {
    echo "fruits[$key] = ".$fruits[$key]."\n";
}
     </programlisting>
     </example>
     Cet exemple va afficher :
     <computeroutput>
fruits[0] = ananas 
fruits[1] = banane 
fruits[2] = orange 
fruits[3] = papaye
     </computeroutput>
     Les fruits ont &eacute;t&eacute; class&eacute; dans l'ordre alphab&eacute;tique.
    </para>
    <para>
     Voir aussi: <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>rsort</function>, et <function>usort</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.uasort">
   <refnamediv>
    <refname>uasort</refname>
    <refpurpose>
      Trie un tableau en utilisant une fonction de comparaison d&eacute;finie par 
      l'utilisateur.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>uasort</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
     <paramdef>function <parameter>cmp_function</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cette fonction trie un tableau en conservant la correspondance entre les index 
      et leurs valeurs. Cette fonction sert essentiellement lors de tri de tableaux 
      associatifs o&uacute; l'ordre des &eacute;l&eacute;ments est significatif. La 
      fonction de comparaison utilis&eacute;e est d&eacute;finie par l'utilisateur.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.uksort">
   <refnamediv>
    <refname>uksort</refname>
    <refpurpose>
      Trie les cl&eacute;s d'un tableau en utilisant une fonction de comparaison d&eacute;finie par l'utilisateur 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>uksort</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
     <paramdef>function <parameter>cmp_function</parameter></paramdef>
    </funcsynopsis>
    <para>
      <function>uksort</function> trie les cl&eacute;s du tableau en utilisant une 
      fonction d&eacute;finie par l'utilisateur. Si un tableau qui doit &ecirc;tre 
      tri&eacute; avec un crit&egrave;re complexe, il est pr&eacute;f&eacute;rable 
      d'utiliser cette fonction.
     <example>
      <title>Exemple avec <function>uksort</function></title>
      <programlisting role="php">
function mycompare($a, $b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}
$a = array(4 => "quatre", 3 => "trois", 20 => "vingt", 10 => "dix");
uksort($a, mycompare);
while(list($key, $value) = each($a)) {
    echo "$key: $value\n";
}
      </programlisting>
     </example>
     Cet exemple affichera: 
     <computeroutput>
20: vingt 
10: dix 
4: quatre 
3: trois 
     </computeroutput>
    </para>
    <para>
     Voir aussi: <function>arsort</function>,
     <function>asort</function>, <function>uasort</function>,
     <function>ksort</function>, <function>rsort</function>, et
     <function>sort</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.usort">
   <refnamediv>
    <refname>usort</refname>
    <refpurpose>
     Trie les valeurs d'un tableau en utilisant une fonction de comparaison d&eacute;finie par l'utilisateur 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>usort</function></funcdef>
     <paramdef>array <parameter>array</parameter></paramdef>
     <paramdef>function <parameter>cmp_function</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cette fonction va trier un tableau avec ses valeurs, en utilisant une fonction 
      d&eacute;finie par l'utilisateur. Si un tableau doit &ecirc;tre tri&eacute; 
      avec un crit&egrave;re complexe, il est pr&eacute;f&eacute;rable d'utiliser 
      cette m&eacute;thode.
    </para>
    <para>
      La fonction de comparaison doit retourner un entier, qui sera inf&eacute;rieur,
       &eacute;gal ou sup&eacute;rieur &agrave; z&eacute;ro suivant que le premier 
       argument est consid&eacute;r&eacute; comme plus petit, &eacute;gal ou plus 
       grand que le second argument. Si les deux arguments sont &eacute;gaux, leur 
       ordre est ind&eacute;fini.
     <example>
      <title>Exemple avec <function>usort</function></title>
      <programlisting>
function cmp($a,$b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}
$a = array(3,2,5,6,1);
usort($a, cmp);
while(list($key,$value) = each($a)) {
    echo "$key: $value\n";
}
      </programlisting>
     </example>
     Cet exemple va afficher : 
     <computeroutput>
0: 6 
1: 5 
2: 3 
3: 2 
4: 1 
     </computeroutput>
     <note>
      <para>
       Evidemment dans ce cas trivial, <function>rsort</function> serait plus 
       appropri&eacute;.
      </para>
     </note>
     <warning>
      <para>
        Les biblioth&egrave;ques de tri rapides sur lesquelles reposent PHP 
        peuvent le conduire &agrave; un plantage, si la fonction de comparaison 
        ne retourne pas une valeur coh&eacute;rente.
      </para>
     </warning>
    </para>
    <para>
     Voir aussi: <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>rsort</function> and <function>sort</function>.
    </para>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
