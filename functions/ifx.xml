 <reference id="ref.ifx">
  <title>Fonctions Informix</title>
  <titleabbrev>Informix</titleabbrev>

  <partintro>
   <para>
     Le pilote d'acc&egrave;s &agrave; Informix pour Online (ODS) 7.x, SE 7.x et Universal Server 
     (IUS) 9.x est impl&eacute;ment&eacute; dans "functions/ifx.ec" et "functions/php3_ifx.h". Le 
     support ODS 7.x est plut&ocirc;t complet, et accepte les colonnes de type BYTE et TEXT. 
     Le support IUS 9.x est partiellment fini, de nouveau types sont disponibles, mais 
     SLOB et CLOB sont toujours en d&eacute;veloppement.
   </para>
   <note>
    <title>Notes de configuration</title>
    <para>
     Avant que vous ne lanciez le script "configure", assurez vous que la variable 
     d'environnement "INFORMIXDIR" a &eacute;t&eacute; correctement param&eacute;tr&eacute;e.
    </para>
    <para> 
     Le script de configuration va d&eacute;tecter automatiquement les librairies 
     disponibles, et inclure les dossiers si vous lancer le script avec l'option 
     "configure --with_informix=yes". Vous pouvez ignorer cette d&eacute;tection en sp&eacute;cifiant 
     "IFX_LIBDIR", "IFX_LIBS" et "IFX_INCDIR" dans votre environnement. Le script de 
     configuration va aussi essayer de d&eacute;tecter la version de votre serveur Informix. 
     Il modifiera alors la condition de compilation "HAVE_IFX_IUS" si votre serveur 
     Informix est d'une version plus r&eacute;cente que 9.00.
    </para>
   </note>
   <note>
    <title>Notes </title>
    <para>
     Assurez vous que les variables d'environnement INFORMIXDIR et
     INFORMIXSERVER sont accessibles au pilote PHP, et que le dossier bin 
     INFORMIX est aussi dans la variable PATH. Vous pouvez le voir en lancant un
     script qui contient un appel &agrave; <function>phpinfo</function> avant que vous ne
     commenciez &agrave; tester. La fonction  <function>phpinfo</function> affiche une 
     liste des variables d'environnement. Cela fonctionne aussi bien en mode
     mod_php, qu'en mode CGI. Il vous faudra fixer les valeurs dans le script
     de d&eacute;marrage d'Apache.
    </para>
    <para>
     Les "Informix shared libraries" doivent aussi &ecirc;tre accessibles au chargement
     (v&eacute;rifiez LD_LINBRARY_PATH ou ld.so.conf/ldconfig).
    </para>
   </note>
   <note>
    <title>Notes sur l'utilisation des BLOBs (TEXT et BYTE)</title>
    <para>
     Les objets de type BLOBs sont normalement g&eacute;r&eacute;s par des identifiants de BLOB. 
     Les requ&ecirc;tes de s&eacute;lection retournent un identifiant de BLOB pour chaque colonne de 
     type BYTE et TEXT. Vous pouvez en lire le contenu, avec des commandes de types 
     "string_var = ifx_get_blob($BLOB_id);" ; si vous souhaitez ramener le BLOB en 
     m&eacute;moire (avec: "ifx_blobinfile_mode(0);"). Si vous pr&eacute;f&eacute;rez recevoir le contenu d'une 
     colonne BLOB dans un fichier, utilisez <function>ifx_blobinfile_mode</function>, et 
     ifx_get_blob($BLOB_id) vous retournera le nom du fichier. 
     Utilisez les fonctions habituelles d'acc&egrave;s aux fichiers pour lire son contenu.
    </para>
    <para>
     Pour les requ&ecirc;tes INSERT/UPDATE, vous devez cr&eacute;er les identifiants de BLOB par vous 
     m&ecirc;me, avec la fonction <function>ifx_create_blob</function>. Puis, vous placez 
     l'identifiant de BLOB dans un tableau, et remplacez la colonne par un point 
     d'interrogation. Pour les UPDATE/INSERT, vous &ecirc;tes responsable du contenu du BLOB, 
     avec la fonction <function>ifx_update_blob</function>.
    </para>
    <para>
     Le comportement par d&eacute;faut des colonnes de type BLOB peut &ecirc;tre modifi&eacute; en affectant
     de nouvelles valeurs aux variables de configuration (m&ecirc;me &agrave; la vol&eacute;e) : 
    </para>
    <para>
     Variable de configuration : ifx.textasvarchar
    </para>
    <para>
     Variable de configuration  : ifx.byteasvarchar
    </para>
    <para>
     Fonctions &agrave; utiliser lors de l'ex&eacute;cution : 
    </para>
    <para>
     ifx_textasvarchar(0) : Utilise l'identifiant de BLOB avec des colonnes de type
     TEXT, dans les requ&ecirc;tes SELECT
    </para>
    <para>
     ifx_byteasvarchar(0) : Utilise l'identifiant de BLOB avec des colonnes de type
     BYTE, dans les requ&ecirc;tes SELECT
    </para>
    <para>
     ifx_textasvarchar(1) : Retourne les colonnes de type TEXT sous la forme de 
     VARCHAR, sans utiliser les identifiants de BLOB dans les requ&ecirc;tes SELECT.
    </para>
    <para>
     ifx_byteasvarchar(1) : Retourne les colonnes de type BYTE sous la forme de 
     VARCHAR, sans utiliser les identifiants de BLOB dans les requ&ecirc;tes SELECT.
    </para>
    <para>
     Variable de configuration : ifx.BLOBinfile
    </para>
    <para>
     Fonctions &agrave; utiliser lors de l'ex&eacute;cution : 
    </para>
    <para>
     ifx_blobinfile_mode(0) : Retourne les colonnes de type BYTE en m&eacute;moire, 
     l'identifiant de BLOB vous donnera acc&egrave;s au contenu.
    </para>
    <para>
     ifx_blobinfile_mode(1) : Retourne les colonnes de type BYTE dans un fichier, 
     l'identifiant de BLOB vous donnera acc&egrave;s au nom de ce fichier.
    </para>
    <para>
     En affectant la valeur de 1 &agrave; ifx_text/byteasvarchar, vous pouvez utiliser les 
     colonnes de type TEXT et BYTE dans les requ&ecirc;tes SELECT comme des champs VARCHAR 
     (mais plus long). Etant donn&eacute; la gestion des cha&icirc;nes par PHP, cette technique 
     conserve les donn&eacute;es binaires. Les donn&eacute;es retourn&eacute;es peuvent contenir n'importe 
     quoi, et vous &ecirc;tes responsable de la bonne manipulation de ces valeurs.
    </para>
    <para>
     En affectant la valeur de 1 &agrave; <function>ifx_blobinfile_mode</function>, utilisez le nom de fichier retourn&eacute; 
     par <function>ifx_get_blob</function> pour acc&eacute;der au contenu du BLOB. Notez bien 
     que vous &ecirc;tes tenu responsable de l'effacement des fichiers temporaires, cr&eacute;&eacute;s par 
     Informix. Chaque nouvelle ligne lue sur le serveur va cr&eacute;er un nouveau fichier 
     temporaire, pour chaque colonne de type BYTE.
    </para>
    <para>
     L'emplacement des fichiers temporaire peut &ecirc;tre modifi&eacute;, grâce &agrave; la variable 
     "blobdir", (par d&eacute;faut, ".", c'est &agrave; dire, le dossier courant). Une valeur telle 
     que BLOBdir="tmpBLOB" simplifiera le nettoyage des fichiers temporaires, 
     accidentellement oubli&eacute;s (les noms commencent tous par "blb").
    </para>
   </note>
   <note>
    <title>Suppression automatique des espaces (SQLCHAR et SQLNCHAR)</title>
    <para>
     Elle peut &ecirc;tre mise en place avec la variable de configuration.
    </para>
    <para>
     ifx.charasvarchar : avec la valeur 1, les espaces de fin de champs seront 
     automatiquement supprim&eacute;s.
    </para>
   </note>
   <note>
    <title>NULL values</title>
    <para>
     Lorsque la variable de configuration ifx.nullformat (ou que la fonction 
     <function>ifx_nullformat</function>) est &agrave; un, les colonnes contenant la valeur 
     NULL retourneront la cha&icirc;ne "NULL", et sinon, retourneront une cha&icirc;ne vide. 
     Cela vous permet de faire la diff&eacute;rence entre les colonnes vides et celle qui 
     contiennent la valeur NULL.
    </para>
   </note>
  </partintro>

  <refentry id="function.ifx-connect">
   <refnamediv>
    <refname>ifx_connect</refname>
    <refpurpose>Ouvre une connexion &agrave; un serveur Informix.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_connect</function></funcdef>
     <paramdef>string <parameter><optional>database</optional>
                      </parameter></paramdef>
     <paramdef>string <parameter><optional>userid</optional>
                      </parameter></paramdef>
     <paramdef>string <parameter><optional>password</optional>
                      </parameter></paramdef>
    </funcsynopsis>
    <para> 
      Retourne un identifiant de connexion, en cas de succ&egrave;s, et FALSE sinon.
    </para>
    <para> 
     <function>ifx_connect</function> &eacute;tablit une connexion &agrave; un serveur Informix. 
      Tous les arguments sont optionnels, et, si ils viennent &agrave; manquer, les 
      valeurs par d&eacute;faut seront prises dans le fichier 
      <link linkend="configuration.file">de configuration </link>.
      (ifx.default_host pour l'h&ocirc;te par d&eacute;faut) (Les librairies Informix utiliseront la 
      variable d'environnement <envar>$INFORMIXSERVER</envar> si ifx.default_host n'est 
      pas d&eacute;finie). ifx.default_user pour l'utilisateur, et ifx.default_password comme 
      mot de passe (si aucun n'a &eacute;t&eacute; d&eacute;fini).
    </para>
    <para> 
      Si un deuxi&egrave;me appel &agrave; <function>ifx_connect</function> est fait avec les m&ecirc;mes 
      arguments, l'identifiant de connexion d&eacute;j&agrave; ouvert sera retourn&eacute;.
    </para>
    <para> 
      Le lien avec le serveur sera ferm&eacute; d&egrave;s que le script se termine, ce qui fait 
      qu'il n'est pas n&eacute;cessaire de terminer les connexions avec 
      <function>ifx_close</function>.
    </para>
    <para> 
     Voir aussi<function>ifx_pconnect</function> et <function>ifx_close</function>.
     <example>
      <title>Connection &agrave; un serveur Informix</title>
      <programlisting role="php3">
$conn_id = ifx_pconnect ("mydb@ol_srv1", "imyself", "mypassword");
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-pconnect">
   <refnamediv>
    <refname>ifx_pconnect</refname>
    <refpurpose>Ouvre une connexion persistante &agrave; un serveur Informix.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_pconnect</function></funcdef>
     <paramdef>string 
      <parameter><optional>database</optional></parameter>
     </paramdef>
     <paramdef>string 
      <parameter><optional>userid</optional></parameter>
     </paramdef>
     <paramdef>string 
      <parameter><optional>password</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
      Retourne un identifiant positif de connexion Informix, ou FALSE, en cas d'erreur.
    </para>
    <para>
     <function>ifx_pconnect</function> se comporte de mani&egrave;re tr&egrave;s similaire &agrave; 
      <function>ifx_connect</function> avec deux diff&eacute;rences importantes : 
    </para>
    <para> 
      Cette fonction se comporte exactement comme <function>ifx_connect</function> lorsque 
      PHP n'est pas un module Apache. Lors de la connexion, la fonction va chercher une 
      connexion d&eacute;j&agrave; ouverte avec le m&ecirc;me h&ocirc;te, le m&ecirc;me nom d'utilisateur, et le m&ecirc;me 
      mot de passe. Si elle en trouve une, elle retournera un identifiant de cette 
      connexion, au lieu d'en ouvrir une nouvelle.
    </para>
    <para> 
      Deuxi&egrave;mement, la connexion au serveur SQL ne sera pas automatiquement referm&eacute;e 
      &agrave; la fin de l'ex&eacute;cution du script. Au contraire, le lien va rester ouvert 
      (<function>ifx_close</function> ne fermera pas les connexions &eacute;tablies avec 
      <function>ifx_pconnect</function>).
    </para>
    <para> 
      Ainsi, ce type de lien est appel&eacute; 'persistant'.
    </para>
    <para>
      Voir aussi: <function>ifx_connect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-close">
   <refnamediv>
    <refname>ifx_close</refname>
    <refpurpose>Ferme une connexion &agrave; un serveur Informix.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_close</function></funcdef>
     <paramdef>int 
      <parameter><optional>link_identifier</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Retourne toujours TRUE.
    </para>
    <para> 
     <function>ifx_close</function> ferme le lien au serveur de donn&eacute;es Informix 
      associ&eacute; &agrave; l'identifant de connexion  <parameter><optional>link_identifier</optional></parameter>.
      Si l'identifiant du lien n'est pas sp&eacute;cifi&eacute;, la derni&egrave;re connexion est utilis&eacute;e.
    </para>
    <para> 
      Notez qu'il n'est g&eacute;n&eacute;ralement pas besoin d'appeler cette fonction, car les 
      connexions non persistantes seront automatiquement ferm&eacute;es.
    </para>
    <para> 
      <function>ifx_close</function> ne peut pas fermer une connexion ouverte avec 
      <function>ifx_pconnect</function>.
    </para>
    <para> 
     Voir aussi: <function>ifx_connect</function> et <function>ifx_pconnect</function>.
     <example>
      <title>Fermer une connexion Informix</title>
      <programlisting role="php3">
$conn_id = ifx_connect ("mydb@ol_srv", "itsme", "mypassword");
... some queries and stuff ...
ifx_close($conn_id);
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-query">
   <refnamediv>
    <refname>ifx_query</refname>
    <refpurpose>Envoie une requ&ecirc;te Informix.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_query</function></funcdef>
     <paramdef>string <parameter>query</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>link_identifier</optional></parameter>
     </paramdef>
     <paramdef>int 
      <parameter><optional>cursor_type</optional></parameter>
     </paramdef>
     <paramdef>mixed 
      <parameter>
       <optional>BLOBidarray</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
      Retourne un identifiant positif de r&eacute;sultat Informix en cas de succ&egrave;s, et 
      FALSE en cas d'erreur. 
    </para>
    <para> 
      L'entier de type "identifiant de r&eacute;sultat" est utilis&eacute; par d'autres fonctions 
      pour lire les r&eacute;sultats. Pour un exemple, reportez vous &agrave; 
      <function>ifx_affected_rows</function> pour conna&icirc;tre le nombre de lignes 
      affect&eacute;es.
    </para>
    <para> 
     <function>ifx_query</function> envoie une requ&ecirc;te au serveur actif courant, 
      associ&eacute; &agrave; l'identifiant de connexion <parameter><optional>link_identifier</optional></parameter>.
      Si <parameter><optional>link_identifier</optional></parameter> n'est pas fourni, 
      la derni&egrave;re connexion ouverte sera utilis&eacute;e. Si aucune connexion n'a &eacute;t&eacute; ouverte, 
      <function>ifx_query</function> va essayer d'en cr&eacute;er une, en appelant 
      <function>ifx_connect</function>.
    </para>
    <para>
      Ex&eacute;cute la requ&ecirc;te <parameter>query</parameter> sur la connexion 
      <parameter>conn_id</parameter>.
      Pour les requ&ecirc;tes de type SELECT, un pointeur est d&eacute;clar&eacute;, et ouvert. 
      L'option <parameter>cursor_type</parameter> permet de choisir le type de 
      pointeur, "scroll" et/ou "hold". <parameter>cursor_type</parameter> accepte 
      les deux valeurs s&eacute;par&eacute;es, et leur combinaison. Les requ&ecirc;tes d'autre type sont 
      &agrave; ex&eacute;cution imm&eacute;diate.
    </para>
    <para>
      Le nombre de ligne affect&eacute;es (estim&eacute; ou exact) est enregistr&eacute;, pour &ecirc;tre lu avec 
      la fonction <function>ifx_affected_rows</function>.
    </para>
    <para>
      Si vous avez une colonne de type BLOB (BYTE ou TEXT) dans une requ&ecirc;te de 
      modification, vous pouvez passer un param&egrave;tre <parameter>BLOBidarray</parameter>
      qui contiendra les identifiants des BLOB &agrave; modifier, et vous devrez remplacer 
      cette colonne par un point d'interrogation (?) dans la requ&ecirc;te.
    </para>
    <para>
      Si le contenu d'une colonne de type TEXT (ou BYTE) vous pouvez aussi utiliser les 
      fonctions <function>ifx_textasvarchar</function> et <function>ifx_byteasvarchar</function>. 
      Cela vous permettra d'utiliser les colonnes TEXT ( ou BYTE ) comme des colonnes 
      de type VARCHAR (mais plus long, tout de m&ecirc;me), et vous n'aurez pas besoin de 
      l'identifiant de BLOB.
    </para>
    <para>
      Avec les fonctions <function>ifx_textasvarchar</function> et <function>ifx_byteasvarchar</function>
      (valeurs par d&eacute;faut), les requ&ecirc;tes SELECT retourneront des identifiants de BLOB. 
      Cet identifiant peut &ecirc;tre une cha&icirc;ne ou un fichier, suivant la configuration 
      (voir plus loin).
    </para>
    <para>
     Voir aussi : <function>ifx_connect</function>.
     <example>
      <title>
       Afficher toutes les lignes de la table "ordres" sous la forme html 
      </title>
      <programlisting role="php3">
ifx_textasvarchar(1);      // Utilisation du mode "text mode" pour les BLOBs
$res_id = ifx_query("select * from orders", $conn_id);
if (! $res_id) {
    printf("Impossible de selectionner des lignes dans : %s\n&lt;br>%s&lt;br>\n", ifx_error());
    ifx_errormsg();
    die;
}
ifx_htmltbl_result($res_id, "border=\"1\"");
ifx_free_result($res_id);
      </programlisting>
     </example>
     <example>
      <title>Insertion de valeurs dans la table "catalogue" </title>
      <programlisting role="php3">
                      // cr&eacute;er un identifiant de BLOB pour une colonne de type BYTE et une de type TEXT
$textid = ifx_create_blob(0, 0, "Text column in memory");
$byteid = ifx_create_blob(1, 0, "Byte column in memory");
                      // store BLOB id's in a BLOBid array
$BLOBidarray[] = $textid;
$BLOBidarray[] = $byteid;
                      // launch query
$query = "insert into catalog (stock_num, manu_code, " .
         "cat_descr,cat_picture) values(1,'HRO',?,?)";
$res_id = ifx_query($query, $conn_id, $BLOBidarray);
if (! $res_id) {
  ... erreur ...
}
                     // lib&eacute;ration du r&eacute;sultat
ifx_free_result($res_id);
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-prepare">
   <refnamediv>
    <refname>ifx_prepare</refname>
    <refpurpose>Pr&eacute;pare une requ&ecirc;te SQL pour l'ex&eacute;cution.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_prepare</function></funcdef>
     <paramdef>string <parameter>query</parameter></paramdef>
     <paramdef>int <parameter>conn_id</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>cursor_def</optional></parameter>
     </paramdef>
     <paramdef>mixed <parameter>BLOBidarray</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne un entier identifiant de r&eacute;sultat <parameter>result_id</parameter>
      &agrave; utiliser avec <function>ifx_do</function>. Modifie la valeur de
      <parameter>affected_rows</parameter>, pour acc&egrave;s ult&eacute;rieur avec 
      <function>ifx_affected_rows</function>.
    </para>
    <para>
      Pr&eacute;pare la requ&ecirc;te <parameter>query</parameter> sur la connexion 
      <parameter>conn_id</parameter>. Pour les requ&ecirc;tes de type "select-type" 
      un pointeur de r&eacute;sultat est d&eacute;clar&eacute; et ouvert. L'option 
      <parameter>cursor_type</parameter> permet de choisir le type de pointeur : 
      "scroll" et/ou "hold". Les valeurs peuvent &ecirc;tre combin&eacute;es ensemble 
      (IFX_SCROLL, IFX_HOLD).
    </para>
    <para> 
      Le nombre de ligne affect&eacute;rs (estim&eacute; ou exact) est enregistr&eacute;, pour &ecirc;tre lu 
      avec la fonction <function>ifx_affected_rows</function>.
    </para>
    <para>
      Si vous avez une colonne de type BLOB (BYTE ou TEXT) dans une requ&ecirc;te de 
      modification, vous pouvez passer un param&egrave;tre <parameter>BLOBidarray</parameter> 
      qui contiendra les identifiants des BLOB &agrave; modifier, et vous devrez remplacer 
      cette colonne par un point d'interrogation (?) dans la requ&ecirc;te.
    </para>
    <para>
      Si le contenu d'une colonne de type TEXT (ou BYTE) vous pouvez aussi utiliser les 
      fonctions <function>ifx_textasvarchar</function> et <function>ifx_byteasvarchar</function>.
      Cela vous permettra d'utiliser les colonnes TEXT (ou BYTE) comme des colonnes de 
      type VARCHAR (mais plus long, tout de m&ecirc;me), et vous n'aurez pas besoin de 
      l'identifiant de BLOB.
    </para>
    <para>
      Avec les fonctions <function>ifx_textasvarchar</function> et <function>ifx_byteasvarchar</function>
      (valeurs par d&eacute;faut), les requ&ecirc;tes SELECT retourneront des identifiants de BLOB. 
      Cet identifiant peut &ecirc;tre une cha&icirc;ne ou un fichier, suivant la configuration 
      (voir plus loin).
    </para>
    <para>
     Voir aussi <function>ifx_do</function>.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.ifx-do">
   <refnamediv>
    <refname>ifx_do</refname>
    <refpurpose>
     Ex&eacute;cute une requ&ecirc;te SQL d&eacute;j&agrave; pr&eacute;par&eacute;e.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_do</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne TRUE en cas de succ&egrave;s, FALSE en cas d'erreur.
    </para>
    <para> 
      Ex&eacute;cute une requ&ecirc;te qui a d&eacute;j&agrave; &eacute;t&eacute; pr&eacute;par&eacute;e, ou cr&eacute;e un pointeur pour cela.
    </para>
    <para> 
      Ne lib&egrave;re pas <parameter>result_id</parameter> en cas d'erreur.
    </para>
    <para> 
      De plus, elle fixe la valeur de <parameter>result_id</parameter> pour acc&egrave;s 
      ult&eacute;rieur par <function>ifx_affected_rows</function>
    </para>
    <para>
     Voir aussi : <function>ifx_prepare</function>. Il y a un exemple.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-error">
   <refnamediv>
    <refname>ifx_error</refname>
    <refpurpose>Retourne le code d'erreur de la derni&egrave;re requ&ecirc;te Informix.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>ifx_error</function></funcdef>
     <void/>
    </funcsynopsis>
    <para>
     Les codes d'erreur Informix (SQLSTATE & SQLCODE) format&eacute; comme suit :
    </para>
    <para>
     x [SQLSTATE = aa bbb SQLCODE=cccc]
    </para>
    <para>
     avec x = space : aucune erreur
    </para>
    <para> 
     E : erreur
    </para>
    <para> 
     N : il n'y a plus d'informations
    </para>
    <para>        
     W : Alerte
    </para>
    <para>        
     ? : Und&eacute;finie
    </para>
    <para>
      Si le caract&egrave;re vaut autre chose qu'un espace, SQLSTATE et SQLCODE d&eacute;crit 
      l'erreur avec plus de d&eacute;tails.
    </para>
    <para>
      Reportez vous au manuel Informix pour trouver la description de 
      SQLSTATE et SQLCODE
    </para>
    <para>
      Retourne une cha&icirc;ne avec un caract&egrave;res, d&eacute;crivant le r&eacute;sultat g&eacute;n&eacute;ral de la 
      commande, et aussi SQLSTATE et SQLCODE associ&eacute; &agrave; la plus r&eacute;cente requ&ecirc;te SQL 
      ex&eacute;cut&eacute;e. Le format de la cha&icirc;ne est "(char) [SQLSTATE=(deux chiffres) (trois chiffres)
      SQLCODE=(un chiffre)]". Le premier caract&egrave;re peut &ecirc;tre '<literal> </literal>' 
      (espace) (succ&egrave;s), '<literal>W</literal>' (Alerte), '<literal>E</literal>' 
      (une erreur est survenue durant le traitement ) ou '<literal>N</literal>' 
      (aucune donn&eacute;e de retour).
    </para>
    <para> 
      Voir aussi: <function>ifx_errormsg</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-errormsg">
   <refnamediv>
    <refname>ifx_errormsg</refname>
    <refpurpose>Retourne le message d'erreur de la derni&egrave;re requ&ecirc;te Informix.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>ifx_errormsg</function></funcdef>
     <paramdef>int 
      <parameter><optional>errorcode</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
      Retourne le plus r&eacute;cent message d'erreur ou, lorsque l'option 
      <parameter>errorcode</parameter> est pr&eacute;sent, le message d'erreur associ&eacute; 
      &agrave; <parameter>errorcode</parameter>.
    </para>
    <para> 
     Voir aussi: <function>ifx_error</function>.
    </para>
    <informalexample>
     <programlisting role="php3">
printf("%s\n&lt;br>", ifx_errormsg(-201));
     </programlisting>
    </informalexample>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-affected-rows">
   <refnamediv>
    <refname>ifx_affected_rows</refname>
    <refpurpose>Retourne le nombre de lignes affect&eacute;es par une requ&ecirc;te.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_affected_rows</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <parameter>result_id</parameter> est un identifiant valide de r&eacute;sultat retourn&eacute; 
      par <function>ifx_query</function> ou <function>ifx_prepare</function>. 
    </para>
    <para> 
     Retourne le nombre de lignes affect&eacute;es par la requ&ecirc;te associ&eacute;e &agrave; 
     <parameter>result_id</parameter>.  
    </para>
    <para> 
      Pour les INSERT, UPDATE et DELETE, ce nombre est le nombre exact de lignes 
      affect&eacute;es (sqlerrd[2]). Pour les SELECT, ce n'est qu'une estimation 
      (sqlerrd[0]). Ne vous y fiez pas.
    </para>
    <para> 
      Cette fonction est tr&egrave;s pratique apr&egrave;s <function>ifx_prepare</function> 
      pour limiter la taille des r&eacute;sultats.
    </para>
    <para>
     Voir aussi : <function>ifx_num_rows</function>.
    </para>
     <example>
      <title>Nombre de lignes affect&eacute;es</title>
      <programlisting role="php3">
$rid = ifx_prepare ("select * from emp 
                     where name like " . $name, $connid);
if (! $rid) {
    ... error ...
}
$rowcount = ifx_affected_rows ($rid);
if ($rowcount > 1000) {
    printf ("Trop de lignes trouv&eacute;es (%d)\n&lt;br>", $rowcount);
    die ("Ressayez avec une autre requ&ecirc;te. &lt;br>\n");
}
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-getsqlca">
   <refnamediv>
    <refname>ifx_getsqlca</refname>
    <refpurpose>
     Retourne le contenu de la variable sqlca.sqlerrd[0..5] apr&egrave;s une requ&ecirc;te.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>ifx_getsqlca</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
      <parameter>result_id</parameter> est un identifiant valide de r&eacute;sultat retourn&eacute; 
      par <function>ifx_query</function> ou <function>ifx_prepare</function>. 
    </para>
    <para> 
      Retourne une pseudo-ligne (tableau associatif) avec sqlca.sqlerrd[0] &agrave; 
      sqlca.sqlerrd[5] apr&egrave;s la requ&ecirc;te associ&eacute;e <parameter>result_id</parameter>.
    </para>
    <para> 
      Pour les requ&ecirc;tes INSERT, UPDATE et DELETE, les valeurs retourn&eacute;es sont celles 
      fix&eacute;es par le serveur apr&egrave;s avoir ex&eacute;cut&eacute; la requ&ecirc;te. Cela donne acc&egrave;s au nombre 
      de ligne affect&eacute;es, ainsi qu'au num&eacute;ro de s&eacute;rie d'insertion. Pour les requ&ecirc;tes de 
      type SELECT, les valeurs retourn&eacute;es sont celles qui ont &eacute;t&eacute; pr&eacute;par&eacute;es. Utiliser 
      cette fonction &eacute;conomise l'ex&eacute;cution d'une requ&ecirc;te "select dbinfo('sqlca.sqlerrdx')", 
      &eacute;tant donn&eacute; qu'elle retourne les valeurs qui ont &eacute;t&eacute; sauv&eacute;es par le pilote ifx 
      driver au moment appropri&eacute;.
    </para>
    <example>
     <title>Lire les valeurs de sqlca.sqlerrd[x] </title>
     <programlisting role="php3">
/* On suppose que la premi&egrave;re colonne d'une table 'quelconque' est un num&eacute;ro de s&eacute;rie */
$qid = ifx_query("insert into sometable values(0, '2nd column', 'another column' ", $connid);
if (! $qid) {
    ... error ...
}
$sqlca = ifx_getsqlca ($qid);
$serial_value = $sqlca["sqlerrd1"];
echo "Le num&eacute;ro de s&eacute;rie de la valeur ins&eacute;r&eacute;e est : " . $serial_value&lt;br>\n"; 

     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-fetch-row">
   <refnamediv>
    <refname>ifx_fetch_row</refname>
    <refpurpose>Retourne une ligne sous la forme d'un tableau &eacute;num&eacute;r&eacute;.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>ifx_fetch_row</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>mixed 
      <parameter><optional>position</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
      Retourne un tableau associatif qui contient la ligne retourn&eacute;e, ou FALSE si 
      il ne reste plus de lignes &agrave; lire, ou si il a eu une erreur.
    </para>
    <para>
      Les colonnes de types BLOB sont retourn&eacute;es sous la forme d'un identifiant &agrave; 
      utiliser avec <function>ifx_get_blob</function> &agrave; moins que vous n'ayez utilis&eacute; 
      la fonction <function>ifx_textasvarchar</function> ou <function>ifx_byteasvarchar</function>,
      et dans ce cas, les BLOBs seront retourn&eacute;s sous forme de cha&icirc;ne. 
      Retourne FALSE en cas d'erreur. 
    </para>
    <para>
      <parameter>result_id</parameter> est un identifiant valide de r&eacute;sultat, retourn&eacute; 
      par <function>ifx_query</function> ou <function>ifx_prepare</function> 
      (Requ&ecirc;tes SELECT seulement !).
    </para>
    <para>
     <parameter><optional>position</optional></parameter> est un param&egrave;tre optionnel, 
      pour une op&eacute;ration de lecture d'informations sur un pointeur de type "scroll": 
      "NEXT", "PREVIOUS", "CURRENT", "FIRST", "LAST" ou encore un nombre. Si vous 
      sp&eacute;cifier un nombre, la ligne d'index absolu sera retourn&eacute;e. Ce param&egrave;tre est 
      optionnel, et ne fonctionne qu'avec les pointeurs de type "scroll".
    </para>
    <para>
     <function>ifx_fetch_row</function> retourne une ligne de donn&eacute;es d'un r&eacute;sultat 
      associ&eacute; &agrave; l'identifiant de r&eacute;sultat <parameter>result_id</parameter>. La 
      ligne est retourn&eacute;e sous la forme d'un tableau associatif. 
    </para>
    <para>
      Les appels ult&eacute;rieurs &agrave; <function>ifx_fetch_row</function> retourneront la ligne 
      suivante, ou FALSE si il n'y a plus de ligne.
    </para>
    <example>
     <title>Informix fetch rows</title>
     <programlisting role="php3">
$rid = ifx_prepare ("select * from emp where name like " . $name,
                     $connid, IFX_SCROLL);
if (! $rid) {
    ... error ...
}
$rowcount = ifx_affected_rows($rid);
if ($rowcount > 1000) {
    printf ("Trop de lignes dans le r&eacute;sultats. (%d)\n&lt;br>", $rowcount);
    die ("Recommencez votre requ&ecirc;te. &lt;br>\n");
}
if (! ifx_do ($rid)) {
   ... erreur ...
}
$row = ifx_fetch_row ($rid, "NEXT");
while (is_array($row)) {
    for(reset($row); $fieldname=key($row); next($row)) {
        $fieldvalue = $row[$fieldname];
        printf ("%s = %s,", $fieldname, $fieldvalue);
    }
    printf("\n&lt;br>");
    $row = ifx_fetch_row ($rid, "NEXT");
}
ifx_free_result ($rid);
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-htmltbl-result">
   <refnamediv>
    <refname>ifx_htmltbl_result</refname>
    <refpurpose>
    Lit toutes les lignes d'un tableau, et la met sous la forme d'un tableau HTML. 
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_htmltbl_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>string 
      <parameter><optional>html_table_options</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
      Lit toutes les lignes d'un tableau, et la met sous la forme d'un tableau HTML, 
      ou FALSE en cas d'erreur.
    </para>
    <para>
      Affiche les lignes avec des balises HTML. Le second argument permet de modifier 
      les options de table.
    </para>
    <example>
     <title>Affichage sous la forme d'une table HTML</title>
     <programlisting role="php3">
$rid = ifx_prepare ("select * from emp where name like " . $name,
                     $connid, IFX_SCROLL);
if (! $rid) {
   ... error ...
}
$rowcount = ifx_affected_rows ($rid);
if ($rowcount > 1000) {
    printf ("Trop de lignes dans le r&eacute;sultat : (%d)\n&lt;br>", $rowcount);
    die ("Recommencez votre requ&ecirc;te &lt;br>\n");
}
if (! ifx_do($rid) {
  ... erreur ...
}

ifx_htmltbl_result ($rid, "border=\"2\"");

ifx_free_result($rid);
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-fieldtypes">
   <refnamediv>
    <refname>ifx_fieldtypes</refname>
    <refpurpose>Liste les champs Informix SQL.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>ifx_fieldtypes</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne un tableau associatif avec les noms des champs comme cl&eacute;s, et les types 
      SQL comme valeur. En cas d'erreur, retourne FALSE.
    </para>
    <example>
     <title>Nom de champs et type SQL.</title>
     <programlisting role="php3">
$types = ifx_fieldtypes ($resultid);
if (! isset ($types)) {
  ... error ...
}
for ($i = 0; $i < count($types); $i++) {
    $fname = key($types);
    printf("%s :\t type =  %s\n", $fname, $types[$fname]);
    next($types);
}
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-fieldproperties">
   <refnamediv>
    <refname>ifx_fieldproperties</refname>
    <refpurpose>Liste les propri&eacute;t&eacute;s des champs SQL.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>ifx_fieldproperties</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne un tableau associatif avec les nom des champs comme cl&eacute;, et les donn&eacute;es 
      de propri&eacute;t&eacute;s des champs comme valeur. Retourne FALSE en cas d'erreur.
    </para>
    <para>
      Retourne les propri&eacute;t&eacute;s Informix SQL pour tous les champs d'une requ&ecirc;te, sous la 
      forme d'un tableau associatif. Les propri&eacute;t&eacute;s sont pr&eacute;sent&eacute;es sous la forme 
      : "SQLTYPE;longueur ;pr&eacute;cision;&eacute;chelle;ISNULLABLE" avec SQLTYPE qui repr&eacute;sente 
      le type de donn&eacute;es Informix tel que "SQLVCHAR"etcÖ. et 
      ISNULLABLE = "Y" ou "N" (le champs peut contenir NULL ou pas : Oui ou Non). 
    </para>
    <example>
     <title>Informix SQL fieldproperties</title>
     <programlisting role="php3">
$properties = ifx_fieldtypes ($resultid);
if (! isset($properties)) {
  ... error ...
}
for ($i = 0; $i < count($properties); $i++) {
    $fname = key ($properties);
    printf ("%s:\t type =  %s\n", $fname, $properties[$fname]);
    next ($properties);
}
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-num-fields">
   <refnamediv>
    <refname>ifx_num_fields</refname>
    <refpurpose>Retourne le nombre de colonnes dans une requ&ecirc;te.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_num_fields</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne le nombre de colonnes dans la requ&ecirc;te <parameter>result_id</parameter>
      ou FALSE en cas d'erreur.
    </para>
    <para>
      Apr&egrave;s avoir pr&eacute;par&eacute; ou ex&eacute;cut&eacute; une requ&ecirc;te, cette fonction retourne le nombre 
      de colonne dans la requ&ecirc;te.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-num-rows">
   <refnamediv>
    <refname>ifx_num_rows</refname>
    <refpurpose>Compte le nombre de ligne d&eacute;j&agrave; lues dans un r&eacute;sultat.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_num_rows</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
      Compte le nombre de ligne d&eacute;j&agrave; lues dans le r&eacute;sultat <parameter>result_id</parameter>
      apr&egrave;s <function>ifx_query</function> ou <function>ifx_do</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-free-result">
   <refnamediv>
    <refname>ifx_free_result</refname>
    <refpurpose>Lib&egrave;re les ressources prises par un r&eacute;sultat.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_free_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
      Lib&egrave;re les ressources prises par le r&eacute;sultat <parameter>result_id</parameter>.
      Retourne FALSE en cas d'erreur.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-create-char">
   <refnamediv>
    <refname>ifx_create_char</refname>
    <refpurpose>Cr&eacute;e un objet char.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_create_char</function></funcdef>
     <paramdef>string <parameter>param</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cr&eacute;e un objet char. <parameter>param</parameter> sera le contenu de l'objet.
    </para> 
   </refsect1>
  </refentry>

  <refentry id="function.ifx-free-char">
   <refnamediv>
    <refname>ifx_free_char</refname>
    <refpurpose>Supprime un objet char.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_free_char</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
      Supprime l'objet char <parameter>bid</parameter>.
      Retourne FALSE en cas d'erreur, et sinon TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-update-char">
   <refnamediv>
    <refname>ifx_update_char</refname>
    <refpurpose>Modifie le contenu d'un objet char.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_update_char</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
     <paramdef>string <parameter>content</parameter></paramdef>
    </funcsynopsis>
    <para>
      Modifie le contenu de l'objet char rep&eacute;r&eacute; par son 
      identifiant<parameter>bid</parameter>. <parameter>content</parameter> est une 
      cha&icirc;ne avec les nouvelles donn&eacute;es. Retourne. FALSE en cas d'erreur, et sinon, 
      TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-get-char">
   <refnamediv>
    <refname>ifx_get_char</refname>
    <refpurpose>Retourne le contenu d'un objet char.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_get_char</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne le contenu de l'objet associ&eacute; &agrave; l'identifiant <parameter>bid</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-create-blob">
   <refnamediv>
    <refname>ifx_create_blob</refname>
    <refpurpose>Cr&eacute;e un objet BLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_create_blob</function></funcdef>
     <paramdef>int <parameter>type</parameter></paramdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
     <paramdef>string <parameter>param</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cr&eacute;e un objet BLOB.
    </para>
    <para>
      type: 1 = TEXT, 0 = BYTE
    </para>
    <para>
      mode: 0 = L'objet BLOB place le contenu en m&eacute;moire ; 
      1 = L'objet BLOB place le contenu dans un fichier.
    </para>
    <para>
      param: Si mode = 0: pointeur du contenu, 
      si mode = 1: pointeur vers un fichier.
    </para>
    <para>
      Retourne FALSE en cas d'erreur, et sinon, un identifiant de BLOB.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-copy-blob">
   <refnamediv>
    <refname>ifx_copy_blob</refname>
    <refpurpose>Duplique un objet BLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_copy_blob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne FALSE en cas d'erreur, et sinon, l'identifiant du nouvel objet.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-free-blob">
   <refnamediv>
    <refname>ifx_free_blob</refname>
    <refpurpose>Supprime un objet BLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_free_blob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
      Supprime l'objet BLOB <parameter>bid</parameter>. Retourne FALSE en cas d'erreur, 
      et sinon TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-get-blob">
   <refnamediv>
    <refname>ifx_get_blob</refname>
    <refpurpose>Retourne le contenu d'un objet BLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_get_blob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne le contenu de l'objet BLOB associ&eacute; &agrave; <parameter>bid</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-update-blob">
   <refnamediv>
    <refname>ifx_update_blob</refname>
    <refpurpose>Modifie le contenu d'un objet BLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef><function>ifx_update_blob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
     <paramdef>string <parameter>content</parameter></paramdef>
    </funcsynopsis>
    <para>
      Modifie le contenu de l'objet BLOB rep&eacute;r&eacute; par sont identifiant 
      <parameter>bid</parameter>. <parameter>content</parameter> est une cha&icirc;ne 
      contenant les nouvelles donn&eacute;es. 
      Retourne FALSE en cas d'erreur, et sinon, TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-blobinfile-mode">
   <refnamediv>
    <refname>ifx_blobinfile_mode</refname>
    <refpurpose>
      Choisi le mode par d&eacute;faut des objets BLOB pour toutes les requ&ecirc;tes SELECT.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>ifx_blobinfile_mode</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
      Choisi le mode par d&eacute;faut des objets BLOB pour toutes les requ&ecirc;tes SELECT. 
      Mode "0" chargera les BLOB de type Byte en m&eacute;moire ;
      Mode "1" sauvera les BLOB de type Byte dans un fichier. 
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-textasvarchar">
   <refnamediv>
    <refname>ifx_textasvarchar</refname>
    <refpurpose>Choisi le mode par d&eacute;faut des objets text.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>ifx_textasvarchar</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
      Choisi le mode par d&eacute;faut des objets TEXT. 
      Le mode "0" retournera un identifiant de BLOB
      et le mode "1" retourne le BLOB sous la forme d'un (gros) varchar.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-byteasvarchar">
   <refnamediv>
    <refname>ifx_byteasvarchar</refname>
    <refpurpose>Choisi le mode par d&eacute;faut des objets BYTE.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>ifx_byteasvarchar</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
      Choisi le mode par d&eacute;faut des objets BYTE. 
      Le mode "0" retournera l'identifiant de BLOB, et 
      le mode "1" retourenra le contenu du text sous la forme d'un VARCHAR.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-nullformat">
   <refnamediv>
    <refname>ifx_nullformat</refname>
    <refpurpose>
     Choisi le mode par d&eacute;faut de lecture des valeurs.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>ifx_nullformat</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
      Choisi le mode par d&eacute;faut de lecture des valeurs. Le mode "0" retourne "", 
      et le mode "1" retourne "NULL".
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-create-slob">
   <refnamediv>
    <refname>ifxus_create_slob</refname>
    <refpurpose>Cr&eacute;e un objet SLOB et l'ouvre.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_create_slob</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
      Cr&eacute;e un objet SLOB et l'ouvre. 
      Les modes valides sont : 1 = LO_RDONLY, 2 = LO_WRONLY, 4 = LO_APPEND, 
      8 = LO_RDWR, 16 = LO_BUFFER, 32 = LO_NOBUFFER -> ou une combinaison des 
      pr&eacute;c&eacute;dents. Vous pouvez aussi utiliser les constantes suivantes : 
      IFX_LO_RDONLY, IFX_LO_WRONLY etc. Retourne FALSE en cas d'erreur, et sinon, 
      l'identifiant de l'objet SLOB.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-free-slob">
   <refnamediv>
    <refname>ifx_free_slob</refname>
    <refpurpose>Supprime un objet SLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_free_slob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
      Supprime un objet SLOB. <parameter>bid</parameter> est l'identifiant de 
      l'objet SLOB. Retourne FALSE en cas d'erreur, et sinon TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-close-slob">
   <refnamediv>
    <refname>ifxus_close_slob</refname>
    <refpurpose>Ferme un objet SLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_close_slob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
      Ferme l'objet SLOB repr&eacute;sent&eacute; par son identifiant <parameter>bid</parameter>. 
      Retourne FALSE en cas d'erreur, et sinon, TRUE.
     TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-open-slob">
   <refnamediv>
    <refname>ifxus_open_slob</refname>
    <refpurpose>Ouvre un objet SLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_open_slob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
      Ouvre un objet SLOB. <parameter>bid</parameter> est un identifiant d'objet SLOB. 
      Les modes valides sont : 1 = LO_RDONLY, 2 = LO_WRONLY, 4 = LO_APPEND, 
      8 = LO_RDWR, 16 = LO_BUFFER, 32 = LO_NOBUFFER -> ou une combinaison des valeurs 
      pr&eacute;c&eacute;dentes. Retourne FALSE en cas d'erreur, et sinon, l'identifiant du 
      nouvel objet.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-tell-slob">
   <refnamediv>
    <refname>ifxus_tell_slob</refname>
    <refpurpose>Retourne le fichier courant, ou la position courante.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_tell_slob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne le fichier courant, ou la position courante d'un objet SLOB ouvert. 
      <parameter>bid</parameter> est un identifiant d'objet SLOB. Retourne FALSE en cas 
      d'erreur, et sinon, la position du pointeur de fichier.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-seek-slob">
   <refnamediv>
    <refname>ifxus_seek_slob</refname>
    <refpurpose>Fixe le fichier courant, ou la position courante.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_seek_slob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
     <paramdef>long <parameter>offset</parameter></paramdef>
    </funcsynopsis>
    <para>
      Fixe le fichier courant, ou la position du pointeur de fichier, pour un objet
      SLOB ouvert. <parameter>bid</parameter> est un identifiant d'objet SLOB. 
      Les modes valides sont : 0 = LO_SEEK_SET, 1 = LO_SEEK_CUR, 2 = LO_SEEK_END et 
      <parameter>offset</parameter> est un octet d'offset. Retourne FALSE en cas 
      d'erreur, et sinon, la position du pointeur de fichier.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-read-slob">
   <refnamediv>
    <refname>ifxus_read_slob</refname>
    <refpurpose>Lit n bytes d'un objet SLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_read_slob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
     <paramdef>long <parameter>nbytes</parameter></paramdef>
    </funcsynopsis>
    <para>
      Lit <parameter>nbytes</parameter> octets de l'objet SLOB <parameter>bid</parameter>.
      <parameter>bid</parameter> est un identifiant d'objet SLOB existant, et 
      <parameter>nbytes</parameter> est le nombre d'octets &agrave; lire. Retourne FALSE en 
      cas d'erreur, et sinon, une cha&icirc;ne de caract&egrave;res.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-write-slob">
   <refnamediv>
    <refname>ifxus_write_slob</refname>
    <refpurpose>Ecrit une cha&icirc;ne dans un objet SLOB.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_write_slob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
     <paramdef>string <parameter>content</parameter></paramdef>
    </funcsynopsis>
    <para>
      Ecrit une cha&icirc;ne dans un objet SLOB. <parameter>bid</parameter> est un 
      identifiant d'objet SLOB et <parameter>content</parameter> sont les donn&eacute;es &agrave; 
      &eacute;crire. Retourne FALSE en cas d'erreur, et sinon, le nombre d'octets &eacute;crits.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
