 <reference id="ref.url">
  <title>Fonctions URL</title>
  <titleabbrev>Fonctions URL</titleabbrev>

  <refentry id="function.base64-decode">
   <refnamediv>
    <refname>base64_decode</refname>
    <refpurpose>D&eacute;code une cha&icirc;ne en MIME base64</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>base64_decode</function></funcdef>
     <paramdef>string <parameter>encoded_data</parameter></paramdef>
    </funcsynopsis>
    <para>
      <function>Base64_decode</function> d&eacute;code <parameter>encoded_data</parameter> 
      et retourne les donn&eacute;es d&eacute;cod&eacute;es. Les informations initiales peuvent &ecirc;tre 
      binaires.
    </para>
    <para>
      Voir aussi : <function>base64_encode</function> et la RFC-2045 section 6.8.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.base64-encode">
   <refnamediv>
    <refname>base64_encode</refname>
    <refpurpose>Encode une cha&icirc;ne en MIME base64.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>base64_encode</function></funcdef>
     <paramdef>string <parameter>data</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>Base64_encode</function> retourne <parameter>data</parameter> encod&eacute; en 
     base64. Cet encodage est fait pour permettre aux informations binaires d'&ecirc;tre 
     manipul&eacute;es par les syst&egrave;mes qui ne g&egrave;rent pas correctement les 8 bits, comme par 
     exemple, les corps de mail.
    </para>
    <para>
      Une cha&icirc;ne encod&eacute;e Base64 prend, grosso modo, 33% de plus que les donn&eacute;es 
      initiales.
    </para>
    <para>
     Voir aussi: <function>base64_decode</function>, <function>chunk_split</function>,
     et la RFC-2045 section 6.8.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.parse-url">
   <refnamediv>
    <refname>parse_url</refname>
    <refpurpose>Analyse une URL et retourne ses composants.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>parse_url</function></funcdef>
     <paramdef>string <parameter>url</parameter></paramdef>
    </funcsynopsis>
    <para>
      <function>parse_url</function> retourne un tableau associatif contenant les 
      composants de l'URL. Les composants recherch&eacute;s sont : "scheme", "host", "port", 
      "user", "pass", "path", "query", et "fragment".
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.urldecode">
   <refnamediv>
    <refname>urldecode</refname>
    <refpurpose>D&eacute;code une cha&icirc;ne encod&eacute;e URL.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>urldecode</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
      D&eacute;code toutes les s&eacute;quences <literal>%<replaceable>##</replaceable></literal> et 
      les remplace par leur valeur. La cha&icirc;ne ainsi d&eacute;cod&eacute;e est retourn&eacute;e.
     <example>
      <title>Exemple avec <function>urldecode</function></title>
      <programlisting role="php">
$a = split ('&', $querystring);
$i = 0;
while ($i &lt; count ($a)) {
    $b = split ('=', $a [$i]);
    echo 'Value for parameter ', htmlspecialchars (urldecode ($b [0])),
         ' is ', htmlspecialchars (urldecode ($b [1])), "&lt;BR>";
    $i++;
}
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi <function>urlencode</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.urlencode">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose>Encode une cha&icirc;ne en URL.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>urlencode</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <para>
      Retourne une cha&icirc;ne dont les caract&egrave;res non-alphanum&eacute;riques (hormis
      <literal>-_.</literal>) sont remplac&eacute;s par des s&eacute;quences commencant par un 
      caract&egrave;re pourcentage (<literal>%</literal>), suivi de deux chiffres hexad&eacute;cimaux. 
      Les espaces sont remplac&eacute;s par des signes plus (<literal>+</literal>).
      Ce codage est celui qui est utilis&eacute; pour poster des informations dans les 
      formulaires HTML. Le type MIMIE est <literal>application/x-www-form-urlencoded</literal>. 
      Ce codage est diff&eacute;rent de celui sp&eacute;cifi&eacute; dans la RFC1738 (voir 
      <function>rawurlencode</function>) : pour des raisons historiques, les espaces 
      sont remplac&eacute;s par des signes plus (+). Cette fonction est pratique pour 
      transmettre des informations via une URL. C'est aussi un moyen de passer des 
      informations d'une page &agrave; l'autre.
     <example>
      <title>Exemple avec <function>Urlencode</function></title>
      <programlisting role="php">
echo '&lt;A HREF="mycgi?foo=', urlencode ($userinput), '">';
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi <function>urldecode</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
