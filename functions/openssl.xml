 <reference id="ref.openssl">
  <title>OpenSSL</title>
  <titleabbrev>OpenSSL</titleabbrev>
  <partintro>
  <para>
   Cette extension utilise les fonctions de
   <ulink url="&url.openssl;">OpenSSL</ulink> pour g&eacute;n&eacute;rer et v&eacute;rifier
   les signatures, ainsi que pour sceller (chiffrer) et ouvrir (d&eacute;chiffrer)
   les donn&eacute;es. Vous avez besoin de OpenSSL >= 0.9.6 pour utiliser
   ce module.
  </para>
  <para>
   OpenSSL offre de nombreuses fonctionnalit&eacute;s qui ne sont pas
   encore support&eacute;es par ce module. Elle seront ajout&eacute;es ult&eacute;rieurement.
  </para>
  </partintro>
  <refentry id="function.openssl-free-key">
   <refnamediv>
    <refname>openssl_free_key</refname>
    <refpurpose>Lib&egrave;re les ressources</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>openssl_free_key</function></funcdef>
      <paramdef>int <parameter>key_identifier</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_free_key</function> lib&egrave;re les ressources
     associ&eacute;es &agrave; <parameter>key_identifier</parameter>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.openssl-get-privatekey">
   <refnamediv>
    <refname>openssl_get_privatekey</refname>
    <refpurpose>Pr&eacute;pare une cl&eacute; priv&eacute;e au format PEM</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_get_privatekey</function></funcdef>
      <paramdef>string <parameter>key</parameter></paramdef>
      <paramdef>string <parameter><optional>passphrase</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_get_privatekey</function> retourne un identifiant
     de cl&eacute; positif, ou FALSE en cas d'erreur.
    </para>
    <para>
     <function>openssl_get_privatekey</function> analyse la cl&eacute; priv&eacute;e
     <parameter>key</parameter>, au format PEM, et la pr&eacute;pare pour
     &agrave; &ecirc;tre utilis&eacute;e par d'autres fonctions. Le param&egrave;tre optionnel
     <parameter>passphrase</parameter> doit &ecirc;tre utilis&eacute; si
     la cl&eacute; est chiffr&eacute;e (prot&eacute;g&eacute;e par un mot de passe).
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.openssl-get-publickey">
   <refnamediv>
    <refname>openssl_get_publickey</refname>
    <refpurpose>Extrait une cl&eacute; publique d'un certificat</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_get_publickey</function></funcdef>
      <paramdef>string <parameter>certificate</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_get_publickey</function> retourne un identifiant
     de cl&eacute; positif, ou FALSE en cas d'erreur.
    </para>
    <para>
     <function>openssl_get_publickey</function> extrait la cl&eacute; publique
     du certificat <parameter>certificate</parameter> (format X.509), et la
     pr&eacute;pare &agrave; &ecirc;tre utilis&eacute;e ult&eacute;rieurement.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.openssl-open">
   <refnamediv>
    <refname>openssl_open</refname>
    <refpurpose>Ouvre des donn&eacute;es scell&eacute;es</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_open</function></funcdef>
      <paramdef>string <parameter>sealed_data</parameter></paramdef>
      <paramdef>string <parameter>open_data</parameter></paramdef>
      <paramdef>string <parameter>env_key</parameter></paramdef>
      <paramdef>int <parameter>priv_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_open</function> TRUE en cas de succ&egrave;s, et FALSE sinon.
     En cas de succ&egrave;s, les donn&eacute;es d&eacute;chiffr&eacute;es 
     sont plac&eacute;es dans <parameter>open_data</parameter>.
    </para>
    <para>
     <function>openssl_open</function> ouvre (d&eacute;chiffre) les donn&eacute;es
     <parameter>sealed_data</parameter> en utilisant la cl&eacute; prvi&eacute;e
     <parameter>priv_key_id</parameter> et la cl&eacute; d'enveloppe
     <parameter>env_key</parameter>. La cl&eacute; d'enveloppe est g&eacute;n&eacute;r&eacute;e
     lorsque les donn&eacute;es sont scell&eacute;es, et ne peut &ecirc;tre utilis&eacute;e qu'avec
     la cl&eacute; priv&eacute;e sp&eacute;cifique. Reportez vous &agrave; <function>openssl_seal</function>
     pour plus d'informations.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>openssl_open</function></title>
      <programlisting role="php">
&lt;?php
// On suppose que $sealed et $env_key contiennent les donn&eacute;es scell&eacute;es
// et la cl&eacute; d'enveloppe, fournies par l'exp&eacute;diteur
// lecture de la cl&eacute; priv&eacute;e dans un fichier
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);
// d&eacute;chiffrage des donn&eacute;es : elles sont plac&eacute;es dans $open
if (openssl_open($sealed, $open, $env_key, $pkeyid))
    echo "Voici les donn&eacute;es d&eacute;chiffr&eacute;es : ", $open;
else
    echo "Impossible de d&eacute;chiffrer les donn&eacute;es";
// lib&eacute;ration des ressources
openssl_free_key($pkeyid);
?&gt;
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>openssl_seal</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.openssl-seal">
   <refnamediv>
    <refname>openssl_seal</refname>
    <refpurpose>Scelle des donn&eacute;es</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_seal</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>sealed_data</parameter></paramdef>
      <paramdef>array <parameter>env_keys</parameter></paramdef>
      <paramdef>array <parameter>pub_key_ids</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_seal</function> retourne la longueur des donn&eacute;es
     scell&eacute;es en cas de succ&egrave;s, et FALSE sinon. En cas de succ&egrave;s, les donn&eacute;es
     scell&eacute;es sont plac&eacute;es dans le param&egrave;tre <parameter>sealed_data</parameter>,
     et les cl&eacute;s d'enveloppe dans <parameter>env_keys</parameter>.
    </para>
    <para>
     <function>openssl_seal</function> scelle (chiffre) les donn&eacute;es
     <parameter>data</parameter> en utilisant l'algorithme RC4 avec une cl&eacute;
     secr&egrave;tre g&eacute;n&eacute;r&eacute;e al&eacute;atoirement. La cl&eacute; 
     est chiffr&eacute;e avec chaque cl&eacute; publique associ&eacute;e &agrave; 
     <parameter>pub_key_ids</parameter> et chaque cl&eacute; ainsi 
     encrypt&eacute;e est retourn&eacute;e dans <parameter>env_keys</parameter>. 
     Cela signifique que vous pouvez envoyez des donn&eacute;es scell&eacute;es 
     &agrave; plusieurs destinataires (en supposant que chacun ait recu la 
     cl&eacute; publique). Chaque destinataire doit recevoir les donn&eacute;es 
     encrypt&eacute;es et la cl&eacute; d'enveloppe, qui a &eacute;t&eacute; 
     encrypt&eacute;e avec la cl&eacute; publique du destinataire.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>openssl_seal</function></title>
      <programlisting role="php">
&lt;?php
// On suppose que $data contient les donn&eacute;es &agrave; sceller
// lecture de la cl&eacute; publique pour chaque destinataire
$fp = fopen("/src/openssl-0.9.6/demos/maurice/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk1 = openssl_get_publickey($cert);
// pour le deuxi&egrave;me destinataire
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk2 = openssl_get_publickey($cert);
// scelle le message : seuls, les possessuers de $pk1 et $pk2 peuvent d&eacute;chiffrer
// le message $sealed avec les cl&eacute;s $ekeys[0] et $ekeys[1] (respectivement).
openssl_seal($data, $sealed, $ekeys, array($pk1,$pk2));
// lib&egrave;re les cl&eacute;s de la m&eacute;moire
openssl_free_key($pk1);
openssl_free_key($pk2);
?&gt;
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>openssl_open</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.openssl-sign">
   <refnamediv>
    <refname>openssl_sign</refname>
    <refpurpose>Signe les donn&eacute;es</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>openssl_sign</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>signature</parameter></paramdef>
      <paramdef>int <parameter>priv_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_sign</function> retourne TRUE en cas de succ&egrave;s, et
     FALSE sinon. En cas de succ&egrave;s, la signature est plac&eacute;e dans
     <parameter>signature</parameter>.
    </para>
    <para>
     <function>openssl_sign</function> calcule la signature des donn&eacute;es
     <parameter>data</parameter> en utilisant l'algorithme SHA1 (hashing)
     suivi du chiffrage avec la cl&eacute; priv&eacute;e <parameter>priv_key_id</parameter>.
     Notez que les donn&eacute;es elles-m&ecirc;mes ne sont pas chiffr&eacute;es.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>openssl_sign</function></title>
      <programlisting role="php">
&lt;?php
// On suppose que $data contient les donn&eacute;es &agrave; signer
// lecture de la cl&eacute; publique pour chaque destinataire
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);
// calcule de la signature
openssl_sign($data, $signature, $pkeyid);
// lib&egrave;re les cl&eacute;s de la m&eacute;moire
openssl_free_key($pkeyid);
?&gt;
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>openssl_verify</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.openssl-verify">
   <refnamediv>
    <refname>openssl_verify</refname>
    <refpurpose>V&eacute;rifie une signature</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>openssl_verify</function></funcdef>
      <paramdef>string <parameter>data</parameter></paramdef>
      <paramdef>string <parameter>signature</parameter></paramdef>
      <paramdef>int <parameter>pub_key_id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>openssl_verify</function> retourne 1 si la signature est
     correcte, 0 si la signature est incorrecte, et -1 en cas d'erreur.
    </para>
    <para>
     <function>openssl_verify</function> v&eacute;rifie que la signature
     <parameter>signature</parameter> est correcte pour les donn&eacute;es
     <parameter>data</parameter>, et avecd la cl&eacute; publique
     <parameter>pub_key_id</parameter>. Cette cl&eacute; doit &ecirc;tre la cl&eacute;
     publique correspondant &agrave; la cl&eacute; priv&eacute;e utilis&eacute;e lors de la signature.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>openssl_verify</function></title>
      <programlisting role="php">
&lt;?php
// On suppose que $data et $signature contiennent les donn&eacute;es &agrave; signer et
// la signature
// lecture de la cl&eacute; publique depuis le certificat
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pubkeyid = openssl_get_publickey($cert);
// indique si la signature est correcte
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1)
    echo "Signature valide";
elseif ($ok == 0)
    echo "Signature erronn&eacute;e";
else
    echo "Erreur de v&eacute;rification de la signature";
// lib&egrave;re les cl&eacute;s de la m&eacute;moire
openssl_free_key($pubkeyid);
?&gt;
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>openssl_sign</function>.
    </simpara>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
