 <reference id="ref.funchand">
  <title>Function Handling functions</title>
  <titleabbrev>Functions</titleabbrev>

  <partintro>
   <para>
    These functions all handle various operations involved in working
    with functions.
   </para>
  </partintro>
  
  <refentry id="function.call-user-func">
   <refnamediv>
    <refname>call_user_func</refname>
    <refpurpose>
     Call a user function given by the first parameter
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed 
       <function>call_user_func</function>
      </funcdef>
      <paramdef>string 
       <parameter>function_name</parameter>
      </paramdef>
      <paramdef>mixed 
       <parameter><optional>parameter</optional></parameter>
      </paramdef>
      <paramdef>mixed 
       <parameter><optional>...</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Call a user defined function given by the
     <parameter>function_name</parameter> parameter.  Take the
     following:
     <informalexample>
      <programlisting role="php">
function barber ($type) {
    print "You wanted a $type haircut, no problem";
}
call_user_func ('barber', "mushroom");
call_user_func ('barber', "shave");
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="function.create-function">
   <refnamediv>
    <refname>create_function</refname>
    <refpurpose>Create an anonymous (lambda-style) function</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>create_function</function></funcdef>
      <paramdef>string <parameter>args</parameter></paramdef>
      <paramdef>string <parameter>code</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Creates an anonymous function from the parameters passed, and
     returns a unique name for it. Usually the
     <parameter>args</parameter> will be passed as a single quote
     delimited string, and this is also recommended for the
     <parameter>code</parameter>. The reason for using single quoted
     strings, is to protect
     the variable names from parsing, otherwise, if you use double
     quotes there will be a need to escape the variable names, e.g. 
     <literal>\$avar</literal>.
    </para>
    <para>
     You can use this function, to (for example) create a function
     from information gathered at run time:
     <example>
      <title>
       Creating an anonymous function with <function>create_function</function>
      </title>
      <programlisting role="php">
$newfunc = create_function('$a,$b','return "ln($a) + ln($b) = ".log($a * $b);');
echo "New anonymous function: $newfunc\n";
echo $newfunc(2,M_E)."\n";
// outputs
// New anonymous function: lambda_1
// ln(2) + ln(2.718281828459) = 1.6931471805599
      </programlisting>
     </example>
     Or, perhaps to have general handler function that can apply a set
     of operations to a list of parameters:
     <example>
      <title>
       Making a general processing function with
       <function>create_function</function>
      </title>
      <programlisting role="php">
function process($var1, $var2, $farr) {
    for ($f=0; $f &lt; count($farr); $f++)
    echo $farr[$f]($var1,$var2)."\n";
}

// create a bunch of math functions
$f1 = 'if ($a &gt;=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}';
$f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);";
$f3 = 'if ($a &gt; 0 &amp;&amp; $b != 0) {return "ln(a)/b = ".log($a)/$b;} else {return false;}';
$farr = array(
    create_function('$x,$y', 'return "some trig: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "a hypotenuse: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', $f1),
    create_function('$a,$b', $f2),
    create_function('$a,$b', $f3)
    );

echo "\nUsing the first array of anonymous functions\n";
echo "parameters: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// now make a bunch of string processing functions
$garr = array(
    create_function('$b,$a','if (strncmp($a,$b,3) == 0) return "** \"$a\" '.
    'and \"$b\"\n** Look the same to me! (looking at the first 3 chars)";'),
    create_function('$a,$b','; return "CRCs: ".crc32($a)." , ".crc32(b);'),
    create_function('$a,$b','; return "similar(a,b) = ".similar_text($a,$b,&$p)."($p%)";')
    );
echo "\nUsing the second array of anonymous functions\n";
process("Twas brilling and the slithy toves", "Twas the night", $garr);
      </programlisting>
     </example>
     and when you run the code above, the output will be:
     <informalexample>
      <programlisting>
Using the first array of anonymous functions
parameters: 2.3445, M_PI
some trig: -1.6291725057799
a hypotenuse: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a/b) = 0.27122299212594

Using the second array of anonymous functions
** "Twas the night" and "Twas brilling and the slithy toves"
** Look the same to me! (looking at the first 3 chars)
CRCs: -725381282 , 1908338681
similar(a,b) = 11(45.833333333333%)
      </programlisting>
     </informalexample>
    But perhaps the most common use for of lambda-style (anonymous) functions
    is to create callback functions, for example when using
    <function>array_walk</function> or <function>usort</function>
    <example>
     <title>Using anonymous functions as callback functions</title>
     <programlisting role="php">
$av = array("the ","a ","that ","this ");
array_walk($av, create_function('&$v,$k','$v = $v."mango";'));
print_r($av);  // for PHP 3 use var_dump()
// outputs:
// Array
// (
//   [0] =&gt; the mango
//   [1] =&gt; a mango
//   [2] =&gt; that mango
//   [3] =&gt; this mango
// )

// an array of strings ordered from shorter to longer
$sv = array("small","larger","a big string","it is a string thing");
print_r($sv);
// outputs:
// Array
// (
//   [0] =&gt; small
//   [1] =&gt; larger
//   [2] =&gt; a big string
//   [3] =&gt; it is a string thing
// )

// sort it from longer to shorter
usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);
// outputs:
// Array
// (
//   [0] =&gt; it is a string thing
//   [1] =&gt; a big string
//   [2] =&gt; larger
//   [3] =&gt; small
// )
     </programlisting>
    </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.func-get-arg">
   <refnamediv>
    <refname>func_get_arg</refname>
    <refpurpose>Retourne la liste des arguments d'une fonction</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>func_get_arg</function></funcdef>
     <paramdef>int <parameter>arg_num</parameter></paramdef>
    </funcsynopsis>
    <simpara>
      Retourne l'argument &agrave; la <parameter>arg_num</parameter>-i&egrave;me position
      d'une fonction d&eacute;finie par l'utilisateur. Les positions sont index&eacute;es en 
      commencant &agrave; z&eacute;ro. <function>func_get_arg</function> g&eacute;n&eacute;rera une alerte (warning) 
      si elle est appel&eacute;e hors d'une d&eacute;finition de fonction.
    </simpara>
    <simpara>
     Si <parameter>arg_num</parameter> est plus grand que le nombre d'arguments 
     une alerte sera g&eacute;n&eacute;r&eacute;e, et <function>func_get_arg</function> retournera FALSE.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
     $numargs = func_num_args();
     echo "Nombre d'arguments: $numargs&lt;br&gt;\n";
     if ($numargs &gt;= 2) {
         echo "Deuxi&egrave;me argument : " . func_get_arg (1) . "&lt;br&gt;\n";
     }
} 

foo (1, 2, 3);
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_get_arg</function> peut &ecirc;tre utilis&eacute; conjointement avec 
     <function>func_num_args</function> et <function>func_get_args</function> 
     pour permettre aux fonctions d&eacute;finies par les utilisateurs d'accepter un 
     nombre variable d'argument.
    </simpara>
    <note>
     <simpara>
       Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.func-get-args">
   <refnamediv>
    <refname>func_get_args</refname>
    <refpurpose>
      Retourne une tableau contenant la liste des arguments d'une fonction.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>func_get_args</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Retourne un tableau dont les &eacute;l&eacute;ments sont les arguments de la fonction courante.
     <function>func_get_args</function> g&eacute;n&eacute;rera une alerte (warning) si elle est 
     appel&eacute;e hors d'une d&eacute;finition de fonction.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
    $numargs = func_num_args();
    echo "Nombre d'arguments: $numargs&lt;br&gt;\n";
    if ($numargs &gt;= 2) {
        echo "Deuxi&egrave;me argument : " . func_get_arg (1) . "&lt;br&gt;\n";
    }
    $arg_list = func_get_args();
    for ($i = 0; $i &lt; $numargs; $i++) {
        echo "Argument $i : " . $arg_list[$i] . "&lt;br&gt;\n";
    }
} 

foo (1, 2, 3);
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_get_args</function> peut &ecirc;tre utilis&eacute; conjointement avec 
     <function>func_num_args</function> et <function>func_get_args</function> 
     pour permettre aux fonctions d&eacute;finies par les utilisateurs d'accepter 
     un nombre variable d'argument.
    </simpara>
    <note>
     <simpara>
      Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.func-num-args">
   <refnamediv>
    <refname>func_num_args</refname>
    <refpurpose>
     Retourne le nombre d'arguments pass&eacute;s &agrave; une fonction.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>func_num_args</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Retourne le nombre d'arguments pass&eacute; &agrave; la fonction courante.
     <function>func_num_args</function> g&eacute;n&egrave;rera une alerte (warning) si elle est 
     appel&eacute;e hors d'une d&eacute;finition de fonction.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
    $numargs = func_num_args();
    echo "Nombre d'arguments: $numargs\n";
} 

foo (1, 2, 3);  // affiche : 'Nomber d'arguments: 3'
?&gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     <function>func_num_args</function> peut &ecirc;tre utilis&eacute; conjointement avec 
     <function>func_get_arg</function> et <function>func_get_args</function> 
     pour permettre aux fonctions d&eacute;finies par les utilisateurs d'accepter 
     un nombre variable d'arguments.
    </simpara>
    <note>
     <simpara>
      Cette fonction a &eacute;t&eacute; ajout&eacute;e dans PHP 4.
     </simpara>
    </note>
   </refsect1>
  </refentry>

  <refentry id="function.function-exists">
   <refnamediv>
    <refname>function_exists</refname>
    <refpurpose>
      Retourne TRUE si la fonction a &eacute;t&eacute; d&eacute;finie.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>function_exists</function></funcdef>
     <paramdef>string <parameter>function_name</parameter></paramdef>
    </funcsynopsis>
    <simpara>
       V&eacute;rifie la liste des fonctions d&eacute;finies, et recherche la fonction 
       <parameter>function_name</parameter>.
       Retourne TRUE si cette fonction est trouv&eacute;e, sinon FALSE.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.register-shutdown-function">
   <refnamediv>
    <refname>register_shutdown_function</refname>
    <refpurpose>
      Enregistre une fonction pour ex&eacute;cution &agrave; l'extinction.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int 
      <function>register_shutdown_function</function>
     </funcdef>
     <paramdef>string <parameter>func</parameter></paramdef>
    </funcsynopsis>
    <simpara>
      Enregistre la fonction <parameter>func</parameter> pour ex&eacute;cution &agrave; la fin
      du script.
    </simpara>
    <para>
     Erreur commune : 
    </para>
    <simpara>
     Etant donn&eacute; qu'aucun affichage n'est autoris&eacute; depuis cette fonction,
     vous ne pourrez pas d&eacute;bugger en utilisant print ou echo dans cette fonction.
    </simpara>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
