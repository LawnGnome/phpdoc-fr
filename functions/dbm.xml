<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<reference id="ref.dbm">
 <title>DBM</title>
 <titleabbrev>DBM</titleabbrev>
 <partintro>
  <simpara>
   Ces fonctions vous permettent d'&eacute;crire des lignes dans une
   base de donn&eacute;es de type dbm. Ce type de base (support&eacute;
   par Berkeley db, gdbm, et quelques librairies syst&egrave;mes,
   ou certaines librairies du syst&egrave;me d'exploitation) enregistre
   les paires cl&eacute;s/valeurs, (contrairement aux enregistrements
   par ligne, utilis&eacute; par les autres bases de donn&eacute;es
   relationnelles).
  </simpara>
  <para>
   <example>
    <title>Pr&eacute;sentation de dbm</title>
    <programlisting role="php">
&lt;?php
  $dbm = dbmopen("dernier", "w");
  if (dbmexists($dbm, $userid)) {
    $last_seen = dbmfetch($dbm, $userid);
  } else {
    dbminsert($dbm, $userid, time());
  }
  faire_quelquechose();
  dbmreplace($dbm, $userid, time());
  dbmclose($dbm);
?&gt;
    </programlisting>
   </example>
  </para>
 </partintro>
 <refentry id="function.dbmopen">
  <refnamediv>
   <refname>dbmopen</refname>
   <refpurpose>Ouvre une base de donn&eacute;es dbm</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>resource <function>dbmopen</function></funcdef>
     <paramdef>string <parameter>filename</parameter></paramdef>
     <paramdef>string <parameter>flags</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    Le premier argument est le chemin absolu jusqu'au fichier dbm &agrave;
    ouvrir. Le deuxi&egrave;me argument est le mode d'ouverture du fichier,
    qui peut prendre les valeurs suivantes : "r", "n", "c" ou "w" qui
    repr&eacute;sentent respectivement lecture seule, nouveau (ce qui
    implique lecture/&eacute;criture, et qui, probablement, va
    &eacute;craser une base existante), cr&eacute;ation(ce qui
    implique lecture/&eacute;criture, et qui, probablement, va
    &eacute;craser une base existante), et lecture/&eacute;criture.
   </para>
   <para>
    <function>dbmopen</function> retourne un identifiant, qui
    sera pass&eacute; &agrave; toutes les autres fonctions dbm,
    en cas de succ&egrave;s, ou <literal>FALSE</literal> en
    cas d'&eacute;chec.
   </para>
   <para>
    Si ndbm est utilis&eacute;, ndbm va cr&eacute;er les fichiers
    <filename>filename.dir</filename> et <filename>filename.pag</filename>.
    gdbm n'utilise qu'un fichier, tout comme les librairies internes,
    et Berkeley db cr&eacute;e
    le fichier <filename>filename.db</filename>. Notez que PHP
    dispose de son propre syst&egrave;me de verrouillage des
    fichiers, qui s'additionne &agrave; celui &eacute;ventuellement
    utilis&eacute; par les librairies. PHP n'efface jamais les fichiers
    <filename>.lck</filename> qu'il cr&eacute;e. Il les utilise comme
    inode fixe, sur lequel faire le verrouillage.
    Pour plus d'informations sur les fichiers dbm, reportez-vous
    &agrave; vos pages de manuel Unix (man) , ou bien chargez gdbm :
    <filename role="url">ftp://prep.ai.mit.edu/pub/gnu</filename>.
   </para>
  </refsect1>
 </refentry>
 <refentry id="function.dbmclose">
  <refnamediv>
   <refname>dbmclose</refname>
   <refpurpose>Ferme une base de donn&eacute;es dbm.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>boolean <function>dbmclose</function></funcdef>
     <paramdef>resource <parameter>dbm_identifier</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>dbmclose</function> d&eacute;verrouille et
    ferme la base de donn&eacute;es <parameter>dbm_identifier</parameter>.
   </para>
  </refsect1>
 </refentry>
 <refentry id="function.dbmexists">
  <refnamediv>
   <refname>dbmexists</refname>
   <refpurpose>Indique si une valeur existe.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>boolean <function>dbmexists</function></funcdef>
     <paramdef>resource <parameter>dbm_identifier</parameter></paramdef>
     <paramdef>string <parameter>key</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>dbmexists</function> retourne <literal>TRUE</literal>
    s'il y a une valeur associ&eacute;e &agrave; la cl&eacute;
    <parameter>key</parameter>.
   </para>
  </refsect1>
 </refentry>
 <refentry id="function.dbmfetch">
  <refnamediv>
   <refname>dbmfetch</refname>
   <refpurpose>Lit une valeur.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>dbmfetch</function></funcdef>
     <paramdef>resource <parameter>dbm_identifier</parameter></paramdef>
     <paramdef>string <parameter>key</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>dbmfetch</function> retourne la valeur associ&eacute;e
    &agrave; la cl&eacute; <parameter>key</parameter>.
   </para>
  </refsect1>
 </refentry>
 <refentry id="function.dbminsert">
  <refnamediv>
   <refname>dbminsert</refname>
   <refpurpose>Ins&egrave;re une valeur.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>dbminsert</function></funcdef>
     <paramdef>resource <parameter>dbm_identifier</parameter></paramdef>
     <paramdef>string <parameter>key</parameter></paramdef>
     <paramdef>string <parameter>value</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>dbminsert</function> ajoute la valeur
    <parameter>value</parameter> dans la base de
    donn&eacute;es, avec la cl&eacute; <parameter>key</parameter>.
   </para>
   <para>
    <function>dbminsert</function> retourne -1 si la base a
    &eacute;t&eacute; ouverte en mode lecture
    seule, 0 si l'insertion a &eacute;t&eacute; r&eacute;ussie, et 1 si
    la cl&eacute; key existe d&eacute;j&agrave;. (Pour remplacer la
    valeur, utilisez <function>dbmreplace</function>.)
   </para>
  </refsect1>
 </refentry>
 <refentry id="function.dbmreplace">
  <refnamediv>
   <refname>dbmreplace</refname>
   <refpurpose>Remplace une valeur.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>dbmreplace</function></funcdef>
     <paramdef>resource <parameter>dbm_identifier</parameter></paramdef>
     <paramdef>string <parameter>key</parameter></paramdef>
     <paramdef>string <parameter>value</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>dbmreplace</function> remplace la valeur courante par
    la valeur <parameter>value</parameter> pour la cl&eacute;
    <parameter>key</parameter>, dans une base <parameter>dbm_identifier</parameter>.
   </para>
   <para>
    <function>dbmreplace</function> cr&eacute;e la cl&eacute;, si elle n'existe pas
    dans la base.
   </para>
  </refsect1>
 </refentry>
 <refentry id="function.dbmdelete">
  <refnamediv>
   <refname>dbmdelete</refname>
   <refpurpose>Efface une valeur.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>boolean <function>dbmdelete</function></funcdef>
     <paramdef>resource <parameter>dbm_identifier</parameter></paramdef>
     <paramdef>string <parameter>key</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>dbmdelete</function> efface la valeur de la cl&eacute;
    <parameter>key</parameter>, dans la base <parameter>dbm_identifier</parameter>.
   </para>
   <para>
    <function>dbmdelete</function> retourne <literal>FALSE</literal>
    si la cl&eacute; n'existe pas dans cette base.
   </para>
  </refsect1>
 </refentry>
 <refentry id="function.dbmfirstkey">
  <refnamediv>
   <refname>dbmfirstkey</refname>
   <refpurpose>Lit la premi&egrave;re cl&eacute;.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>dbmfirstkey</function></funcdef>
     <paramdef>resource <parameter>dbm_identifier</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>dbmfirstkey</function> retourne la premi&egrave;re
    cl&eacute; de la base de donn&eacute;es. Notez bien que les
    cl&eacute;s ne sont pas dans un ordre d&eacute;fini,
    &eacute;tant donn&eacute; que la table est construite comme un tableau
    associatif.
   </para>
  </refsect1>
 </refentry>
 <refentry id="function.dbmnextkey">
  <refnamediv>
   <refname>dbmnextkey</refname>
   <refpurpose>Lit la cl&eacute; suivante.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>dbmnextkey</function></funcdef>
     <paramdef>resource <parameter>dbm_identifier</parameter></paramdef>
     <paramdef>string <parameter>key</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <para>
    <function>dbmnextkey</function> retourne la cl&eacute; apr&egrave;s la cl&eacute;
    <parameter>key</parameter>. En appelant <function>dbmfirstkey</function>,
    puis successivement <function>dbmnextkey</function>, il est
    possible de passer en revue toute les paires cl&eacute;/valeur
    de la base de donn&eacute;es dbm. Par exemple :
    <example>
     <title>Passer en revue une base de donn&eacute;es.</title>
     <programlisting role="php">
&lt;?php
  $cle = dbmfirstkey($dbm_id);
  while ($cle){
    echo "$cle = " . dbmfetch($dbm_id, $cle) . "\n";
    $cle = dbmnextkey($dbm_id, $cle);
  }
?&gt;
     </programlisting>
    </example>
   </para>
  </refsect1>
 </refentry>
 <refentry id="function.dblist">
  <refnamediv>
   <refname>dblist</refname>
   <refpurpose>D&eacute;crit la librairie dbm utilis&eacute;e.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>dblist</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
  </refsect1>
 </refentry>
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

