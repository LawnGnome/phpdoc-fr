 <reference id="ref.var">
  <title>Fonctions sur les variables</title>
  <titleabbrev>Fonctions sur les variables</titleabbrev>
  <refentry id="function.doubleval">
   <refnamediv>
    <refname>doubleval</refname>
    <refpurpose>
       Retourne la valeur num&eacute;rique (double) de la variable.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>double <function>doubleval</function></funcdef>
     <paramdef>mixed <parameter>var</parameter></paramdef>
    </funcsynopsis>
    <simpara>
       <function>doubleval</function> retourne la valeur num&eacute;rique
       (double) de la variable <parameter>var</parameter>.
    </simpara>
    <para>
     <parameter>var</parameter> peut &ecirc;tre de type scalaire. Vous ne
     pouvez pas utiliser la fonction <function>doubleval</function> avec
     un tableau ou un objet.
    <informalexample>
      <programlisting role="php">
&lt;?php
$var = '122.34343Le';
$double_valeur_de_var = doubleval($var);
print $double_valeur_de_var; // affiche 122.34343
?gt;
      </programlisting>
    </informalexample>
    </para>
    <simpara>
     Voir aussi <function>intval</function>, <function>strval</function>,
     <function>settype</function> et
     <link linkend="language.types.type-juggling">Transtypage</link>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.empty">
   <refnamediv>
    <refname>empty</refname>
    <refpurpose>D&eacute;termine si une variable est affect&eacute;e.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>empty</function></funcdef>
     <paramdef>mixed <parameter>var</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>empty</function> retourne la valeur FALSE si la variable
     <parameter>var</parameter> est affect&eacute;e ou bien a une valeur
     diff&eacute;rente de 0; la valeur TRUE dans les autres cas.
     <informalexample>
      <programlisting role="php">
&lt;?php
$var = 0;
if (empty($var)) { // retourne TRUE     
  print 'soit $var vaut 0, soit il n'est pas d&eacute;fini';
}
if (!isset($var)) { // retourne FALSE     
  print '$var n'est pas d&eacute;finie';
}
?gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Notez que cette fonction n'a pas de sens si elle est utilis&eacute;e sur
     autre chose qu'une variable. i.e.
     <literal>empty (addslashes ($name))</literal>
     n'a pas de sens, car cela revient &agrave; v&eacute;rifier une
     entit&eacute; qui n'est pas une variable.
    </simpara>
    <simpara>
     Voir aussi <function>isset</function> et <function>unset</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.gettype">
   <refnamediv>
    <refname>gettype</refname>
    <refpurpose>Retourne le type de la variable.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>gettype</function></funcdef>
     <paramdef>mixed <parameter>var</parameter></paramdef>
    </funcsynopsis>
    <para>
     Retourne le type de la variable PHP <parameter>var</parameter>.
    </para>
    <para>
     Les cha&icirc;nes de caract&egrave;res que peut retourner la fonction
     sont les suivantes :
     <itemizedlist>
      <listitem>
       <simpara>"boolean"</simpara>
      </listitem>
      <listitem>
       <simpara>"integer"</simpara>
      </listitem>
      <listitem>
       <simpara>"double"</simpara>
      </listitem>
      <listitem>
       <simpara>"string"</simpara>
      </listitem>
      <listitem>
       <simpara>"array"</simpara>
      </listitem>
      <listitem>
       <simpara>"object"</simpara>
      </listitem>
      <listitem>
       <simpara>"resource"</simpara>
      </listitem>
      <listitem>
       <simpara>"user function"</simpara>
      </listitem>
      <listitem>
       <simpara>"unknown type"</simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Voir aussi <function>settype</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.intval">
   <refnamediv>
    <refname>intval</refname>
    <refpurpose>
      Retourne la valeur num&eacute;rique (integer) de la variable.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>intval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>int
       <parameter><optional>base</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Retourne la valeur num&eacute;rique (integer) de la variable
     <parameter>var</parameter>, en convertisant la valeur dans la
     base sp&eacute;cifi&eacute;e (par d&eacute;faut en base 10).
    </simpara>
    <simpara>
     <parameter>var</parameter> peut &ecirc;tre de type scalaire. Vous ne
     pouvez pas utiliser la fonction <function>intval</function> avec un
     tableau ou un objet.
    </simpara>
    <simpara>
     Voir aussi <function>doubleval</function>, <function>strval</function>,
     <function>settype</function> et
     <link linkend="language.types.type-juggling">Transtypage</link>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.is-array">
   <refnamediv>
    <refname>is_array</refname>
    <refpurpose>D&eacute;termine si une variable est un tableau.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_array</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Renvoie la valeur TRUE si la variable <parameter>var</parameter> est un tableau,
     FALSE sinon.
    </para>
    <para>
     Voir aussi <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, et
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>
    <refentry id="function.is-bool">
   <refnamediv>
    <refname>is_bool</refname>
     <refpurpose>
      D&eacute;termine si une variable est un tableau bool&eacute;en
     </refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
     <funcsynopsis>
     <funcprototype>
       <funcdef>bool
        <function>is_bool</function>
       </funcdef>
       <paramdef>mixed
        <parameter>var</parameter>
       </paramdef>
     </funcprototype>
     </funcsynopsis>
     <para>
      <function>is_bool</function> retourne TRUE si <parameter>var</parameter>
      est un bool&eacute;en.
     </para>
     <para>
     Voir aussi <function>is_array</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, et
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.is-double">
   <refnamediv>
    <refname>is_double</refname>
    <refpurpose>D&eacute;termine si une variable est de type double.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_double</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
       Renvoie TRUE si la variable <parameter>var</parameter> est du type "double",
       FALSE sinon.
    </para>
    <para>
     Voir aussi <function>is_array</function>,
     <function>is_bool</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_long</function>, et
     <function>is_object</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.is-float">
   <refnamediv>
    <refname>is_float</refname>
    <refpurpose>D&eacute;termine si une variable est de type float.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_float</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Cette fonction est un alias de la fonction <function>is_double</function>.
    </simpara>
    <simpara>
     Voir aussi <function>is_double</function>,
     <function>is_bool</function>,
     <function>is_real</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, et
     <function>is_long</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.is-int">
   <refnamediv>
    <refname>is_int</refname>
    <refpurpose>D&eacute;termine si une variable est de type integer.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_int</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>is_int</function> est un alias de la fonction
     <function>is_long</function>.
    </simpara>
    <simpara>
     Voir aussi <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_integer</function>,
     <function>is_string</function>,
     <function>is_real</function>,
     <function>is_object</function>,
     <function>is_array</function>, et
     <function>is_long</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.is-integer">
   <refnamediv>
    <refname>is_integer</refname>
    <refpurpose>D&eacute;termine si une variable est de type int.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_integer</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Cette fonction est un alias de la fonction <function>is_long</function>.
    </simpara>
    <simpara>
     Voir aussi <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_string</function>,
     <function>is_real</function>,
     <function>is_object</function>,
     <function>is_array</function>, et
     <function>is_long</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.is-long">
   <refnamediv>
    <refname>is_long</refname>
    <refpurpose>D&eacute;termine si une variable est de type integer.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_long</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      Renvoie TRUE si la variable <parameter>var</parameter> est du type
      integer (long), FALSE sinon.
    </para>
    <para>
     Voir aussi <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, et
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>
    <refentry id="function.is-numeric">
   <refnamediv>
    <refname>is_numeric</refname>
    <refpurpose>
    	D&eacute;termine si une variable est un type num&eacute;rique
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_numeric</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>is_numeric</function> retourne TRUE si
     <parameter>var</parameter> est un nombre, ou une cha&icirc;ne
     num&eacute;rique, ou FALSE sinon.
    </para>
    <para>
     Voir aussi <function>is_bool</function>,
     <function>is_double</function>,
     <function>is_float</function>,
     <function>is_int</function>,
     <function>is_real</function>,
     <function>is_string</function>,
     <function>is_object</function>,
     <function>is_array</function>, et
     <function>is_integer</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.is-object">
   <refnamediv>
    <refname>is_object</refname>
    <refpurpose>D&eacute;termine si une variable est de type object.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_object</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     Renvoie TRUE si la variable <parameter>var</parameter> est un objet,
     FALSE sinon.
    </para>
    <para>
     Voir aussi <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_real</function>,
     <function>is_string</function>, et
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.is-real">
   <refnamediv>
    <refname>is_real</refname>
    <refpurpose>D&eacute;termine si une variable est de type real.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_real</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     Cette fonction est un alias de la fonction <function>is_double</function>.
    </simpara>
    <simpara>
     Voir aussi <function>is_bool</function>,
     <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_object</function>,
     <function>is_string</function>, et
     <function>is_array</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.is-resource">
   <refnamediv>
    <refname>is_resource</refname>
    <refpurpose>
     D&eacute;termine si une variable est une ressource
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <funcsynopsis>
     <funcprototype>
      <funcdef>bool
       <function>is_resource</function>
      </funcdef>
      <paramdef>mixed
       <parameter>var</parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>is_resource</function> retourne TRUE si la variable
     <parameter>var</parameter> est une ressource PHP, sinon FALSE.
    </para>
    <para>
     Les ressources peuvent &ecirc;tre des pointeurs de fichiers, des identifiants
     de r&eacute;sultats SQL, qui sont allou&eacute;es et lib&eacute;r&eacute;es en interne, par PHP,
     et qui peuvent demander un peut de nettoyage lorsqu'elle sont
     devenues inutiles, mais pas encore supprim&eacute;es.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.is-string">
   <refnamediv>
    <refname>is_string</refname>
    <refpurpose>D&eacute;termine si une variable est de type string.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>bool <function>is_string</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      Renvoie TRUE si la variable <parameter>var</parameter> est du type "string",
      FALSE sinon.
    </para>
    <para>
     Voir aussi <function>is_long</function>,
     <function>is_int</function>,
     <function>is_integer</function>,
     <function>is_float</function>,
     <function>is_double</function>,
     <function>is_real</function>,
     <function>is_object</function>, et <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.isset">
   <refnamediv>
    <refname>isset</refname>
    <refpurpose>D&eacute;termine si une variable est affect&eacute;e.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>isset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
       Renvoie TRUE si la variable <parameter>var</parameter> est d&eacute;finie,
       FALSE sinon.
    </simpara>
    <para>
     Si une variable a &eacute;t&eacute; d&eacute;saffect&eacute;e avec la fonction
     <function>unset</function>, la fonction <function>isset</function> renverra
     FALSE.
     <informalexample>
      <programlisting role="php">
&lt;?php
$a = "test";
echo isset ($a); // TRUE 
unset($a);
echo isset ($a); // FALSE
?gt;
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Voir aussi <function>empty</function> et <function>unset</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.print-r">
   <refnamediv>
    <refname>print_r</refname>
    <refpurpose>
      Affiche des informations lisibles pour une variable.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>print_r</function></funcdef>
      <paramdef>mixed <parameter>expression</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
        Cette fonction affiche des informations &agrave; propos d'une
        variable, de mani&egrave;re &agrave; ce qu'elle soit lisible.
        Pour une cha&icirc;ne, un entier ou un double, la valeur
        sera elle m&ecirc;me sera affich&eacute;e. Pour les tableaux,
        les valeurs seront pr&eacute;sent&eacute;es dans un format qui
        montre les cl&eacute;s et les valeurs. Une notation similaire est
        disponible pour les objets.
    </simpara>
    <simpara>
     Comparer <function>print_r</function> et <function>var_dump</function>.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;?php
$a = array (1, 2, array ("a", "b", "c"));
print_r ($a);
?gt;
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>
    <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>
     Lin&eacute;arise une variable
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>serialize</function></funcdef>
      <paramdef>mixed <parameter>value</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>serialize</function> retourne une cha&icirc;ne contenant une
     repr&eacute;sentation lin&eacute;aire de <parameter>value</parameter>, pour
     stockage.
    </simpara>
    <simpara>
     C'est une technique pratique pour stocker ou passer des valeurs de PHP
     entre scripts, sans perdre ni leur structure, ni leur type.
    </simpara>
    <simpara>
     Pour r&eacute;cup&eacute;rer une variable lin&eacute;aris&eacute;e, et retrouver une
     variable, utilisez <function>unserialize</function>.
     <function>serialize</function> acceptent les types
      <type>integer</type>, <type>double</type>,
     <type>string</type>, <type>array</type> (multidimensionnels) et
     <type>object</type> (les propri&eacute;t&eacute;s des objets seront lin&eacute;aris&eacute;es, mais
     pas les m&eacute;thodes).
    </simpara>
    <para>
     <example>
      <title>Exemple avec <function>serialize</function></title>
      <programlisting role="php">
&lt;?php
// $session_data contient un tableau multi-dimensionnel , avec les
// informations de session de l'utilisateur courant. On utilise serialize()
// pour les stocker dans une base de donn&eacute;es
$conn = odbc_connect ("webdb", "php", "chicken");
$stmt = odbc_prepare ($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &amp;$sqldata)) {
    /* Grosse bourde! Souffre et potasse! */
    }
}
?gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.settype">
   <refnamediv>
    <refname>settype</refname>
    <refpurpose>Affecte un type &agrave; une variable.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>settype</function></funcdef>
      <paramdef>string <parameter>var</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      <function>settype</function> modifie le type de la variable
      <parameter>var</parameter> en <parameter>type</parameter>.
    </para>
    <para>
      Les valeurs possibles pour le param&egrave;tre
      <parameter>type</parameter> sont :
     <itemizedlist>
      <listitem><simpara>"integer"</simpara></listitem>
      <listitem><simpara>"double"</simpara></listitem>
      <listitem><simpara>"string"</simpara></listitem>
      <listitem><simpara>"array"</simpara></listitem>
      <listitem><simpara>"object"</simpara></listitem>
     </itemizedlist>
    </para>
    <para>
     Renvoie TRUE en cas de succ&egrave;s, FALSE sinon.
    </para>
    <para>
     Voir aussi <function>gettype</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.strval">
   <refnamediv>
    <refname>strval</refname>
    <refpurpose>Retourne la valeur de la variable, au format cha&icirc;ne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>strval</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
        Retourne la valeur de la variable <parameter>var</parameter>,
        au format cha&icirc;ne de caract&egrave;res.
    </simpara>
    <simpara>
        <parameter>var</parameter> peut &ecirc;tre un scalaire. Vous ne pouvez
        pas utiliser la fonction <function>strval</function> avec des tableaux
        ou des objets.
    </simpara>
    <simpara>
     Voir aussi <function>doubleval</function>, <function>intval</function>,
     <function>settype</function> et
     <link linkend="language.types.type-juggling">Transtypage</link>.
    </simpara>
   </refsect1>
  </refentry>
    <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>
     Cr&eacute;e une variable PHP &agrave; partir d'une valeur lin&eacute;aris&eacute;e
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>unserialize</function></funcdef>
      <paramdef>string <parameter>str</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>unserialize</function> prend une variable lin&eacute;aris&eacute;e
     (voir <function>serialize</function>) et la converti en variable PHP.
     Ma valeur convertie est retourn&eacute;e par la fonction, et peut &ecirc;tre de
     type <type>integer</type>, <type>double</type>,
     <type>string</type>, <type>array</type> ou <type>object</type>.
     Les objets lin&eacute;aris&eacute;s perdent leurs m&eacute;thodes.
    </simpara>
    <para>
     <example>
      <title>Exemple avec <function>unserialize</function></title>
      <programlisting role="php">
&lt;?php
// Ici, on utilise <function>unserialize</function> pour charger les donn&eacute;es de sessions
// depuis la base de donn&eacute;es, dans $session_data. Cet exemple compl&egrave;te
// celui fourni avec <function>serialize</function>.
$conn = odbc_connect ("webdb", "php", "chicken");
$stmt = odbc_prepare ($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array ($PHP_AUTH_USER);
if (!odbc_execute ($stmt, &amp;$sqldata) || !odbc_fetch_into ($stmt, &amp;$tmp)) {
    // si la pr&eacute;paration ou la lecture &eacute;choue, on cr&eacute;e un tableau vide
    $session_data = array();
} else {
    // les donn&eacute;es sauv&eacute;es sont dasn $tmp[0].
    $session_data = unserialize ($tmp[0]);
    if (!is_array ($session_data)) {
    // Erreur... initialisation &agrave; tableau vide
    $session_data = array();
    }
}
?gt;
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>D&eacute;truit une variable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>unset</function></funcdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>mixed <parameter><optional>var</optional></parameter></paramdef>
      <paramdef><parameter><optional>...</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>unset</function> d&eacute;truit les variables <parameter>var</parameter>,
     et retourne TRUE.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>unset</function></title>
      <programlisting role="php">
&lt;?php
// Destruction d'une seule variable
unset ($foo);
// Destruction d'un &eacute;l&eacute;ment de tableau
unset ($bar['quux']);
// Destruction de plusieurs variables
unset ($foo1, $foo2, $foo3);
?gt;
      </programlisting>
     </example>
    </para>
    <para>
     Le comportement de <function>unset</function> &agrave; l'int&eacute;rieur d'une
     fonction peut varier suivant le type de variable que vous voulez
     d&eacute;truire.
    </para>
    <para>
     Si une variable globale est d&eacute;truite avec <function>unset</function>
     depuis une fonction, seule la variable locale sera d&eacute;truite. Le
     variable globale gardera la valeur acquise avant l'appel &agrave;
     <function>unset</function>.
     <informalexample>
      <programlisting role="php">
&lt;?php
function destroy_foo() {
    global $foo;
    unset($foo);
}
$foo = 'bar';
destroy_foo();
echo $foo;
?gt;
      </programlisting>
     </informalexample>
     L'exemple ci dessus affichera :
     <informalexample>
      <programlisting>
bar
      </programlisting>
     </informalexample>
    </para>
    <para>
     Si une variable qui est pass&eacute;e par r&eacute;f&eacute;rence est d&eacute;truite &agrave;
     l'int&eacute;rieur d'une fonction, seule la variable locale sera
     d&eacute;truite. La variable globale conservera la derni&egrave;re valeur
     qu'elle avait avant l'appel de <function>unset</function>.
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo(&$bar) {
    unset($bar);
    $bar = "bla";
}
$bar = 'truc';
echo "$bar\n";
foo($bar);
echo "$bar\n";
?gt;
      </programlisting>
     </informalexample>
     L'exemple ci dessus va afficher :
     <informalexample>
      <programlisting>
truc
truc
      </programlisting>
     </informalexample>
    </para>
    <para>
     Si une variable statique est d&eacute;truite &agrave; l'int&eacute;rieure d'une fonction
     <function>unset</function> d&eacute;truira la r&eacute;f&eacute;rence &agrave; la variable
     statique, plut&ocirc;t que la variable statique elle m&ecirc;me.
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
    static $a;
    $a++;
       echo "$a\n";
    unset($a);
}
foo();
foo();
foo();
?gt;
      </programlisting>
     </informalexample>
     L'affichage du script ci-dessus donnera :
     <informalexample>
      <programlisting>
1
2
3
      </programlisting>
     </informalexample>
    </para>
    <para>
     Si vous voulez d&eacute;truire une variable globale, depuis une
     fonction, vous pouvez utiliser le tableau
     <parameter>$GLOBALS</parameter> :
     <informalexample>
      <programlisting role="php">
&lt;?php
function foo() {
    unset($GLOBALS['bar']);
}
$bar = "truc";
foo();
?gt;
      </programlisting>
     </informalexample>
    </para>
    <para>
     Voir aussi <function>isset</function> et
     <function>empty</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.var-dump">
   <refnamediv>
    <refname>var_dump</refname>
    <refpurpose>
     Dumpe les informations d'une variable.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>var_dump</function></funcdef>
     <paramdef>mixed <parameter>expression</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Cette fonction retourne les informations structur&eacute;es d'une variable,
     y compris son type et sa valeur. Les tableaux sont explor&eacute;s
     recursivement, avec des indentations, pour mettre en valeur leur structure.
    </simpara>
    <simpara>
     Comparez <function>var_dump</function> et <function>print_r</function>.
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
&lt;pre>
&lt;?php
    $a = array (1, 2, array ("a", "b", "c"));
    var_dump ($a);
?gt;
&lt;/pre>
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
