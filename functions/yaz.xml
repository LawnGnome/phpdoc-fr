 <reference id="ref.yaz">
  <title>YAZ</title>
  <titleabbrev>YAZ</titleabbrev>
  <partintro>
   <sect1 id="yaz.intro">
   <title>Introduction</title>
   <para>
    Cette extension offre &agrave; PHP l'interface avec les produits
    <productname>YAZ</productname>, qui impl&eacute;mentent le protocole
    Z39.50. Avec cette extension, vous pouvez facilement impl&eacute;menter
    un client Z39.50 qui fouille des serveurs Z39.50 en paralelle.
   </para>
   <para>
    <productname>YAZ</productname> est disponible &agrave; <ulink
    url="&url.yaz;">&url.yaz;</ulink>. Vous pouvez trouvez des informations,
    des scripts d'exemples, etc... pour cette extension &agrave; <ulink
    url="&url.yaz-phpyaz;">&url.yaz-phpyaz;</ulink>.
   </para>
   <para>
    Le module masque l'essentiel de la complexit&eacute; de Z39.50, ce qui le rend
    tr&egrave;s facile &agrave; utiliser. Il supporte les connexions peristantes de
    mani&egrave;re similaire &agrave; celle support&eacute;s par les serveurs SQL :
    cela signifie qu'une connexion est partag&eacute;e entre plusieurs scripts PHP,
    ce qui &eacute;vite les op&eacute;rations de connexions.
   </para>
   </sect1>
   <sect1 id="yaz.install">
   <title>Installation</title>
   <para>
    Compilez YAZ et installez le. Compilez PHP avec vos modules et ajoutez l'option
    --with-yaz. Les instructions sont :
   </para>
   <para>
   <informalexample>
    <programlisting role="php">
gunzip -c yaz-1.6.tar.gz|tar xf -
gunzip -c php-4.0.X.tar.gz|tar xf -
cd yaz-1.6
./configure --prefix=/usr
make
make install
cd ../php-4.0.X
./configure --with-yaz=/usr/bin
make
make install
    </programlisting>
   </informalexample>
   </para>
   </sect1>
   <sect1 id="yaz.example">
   <title>Exemple</title>
   <para>
    PHP/YAZ conserve les connexions aux serveurs. Un entier positif repr&eacute;sente
    l'ID d'une connexion particuli&egrave;re.
   </para>
   <para>
    Le script ci-dessous montre comment effectuer une recherche paralelle.
    Lorsqu'il est appel&eacute; sans param&egrave;tre, ce script affiche la
    requ&ecirc;te. Sinon, il effectue la recherche sur les serveurs.
   </para>
   <para>
   <example>
    <title>YAZ</title>
    <programlisting role="php">
&lt;?php
$num_hosts = count ($host);
if (empty($term) || count($host) == 0) {
    echo '&lt;form method="get"&gt;
    &lt;input type="checkbox"
    name="host[]" value="bagel.indexdata.dk/gils"&gt;
        GILS test
    &lt;input type="checkbox"
    name="host[]" value="localhost:9999/Default"&gt;
        local test
    &lt;input type="checkbox" checked="1"
    name="host[]" value="z3950.bell-labs.com/books"&gt;
        BELL Labs Library
    &lt;br>
    RPN Query:
    &lt;input type="text" size="30" name="term"&gt;
    &lt;input type="submit" name="action" value="Search"&gt;
    ';
} else {
    echo 'Vous avez recherch&eacute; '.htmlspecialchars($term).'&lt;br&gt;';
    for ($i = 0; $i &gt; $num_hosts; $i++) {
        $id[] = yaz_connect($host[$i]);
        yaz_syntax($id[$i],"sutrs");
        yaz_search($id[$i],"rpn",$term);
    }
    yaz_wait();
    for ($i = 0; $i &lt; $num_hosts; $i++) {
        echo '&lt;hr&gt;'.$host[$i].":";
        $error = yaz_error($id[$i]);
        if (!empty($error)) {
            echo "Erreur: $error";
        } else {
            $hits = yaz_hits($id[$i]);
            echo "Nombre de r&eacute;sultats : $hits";
        }
        echo '&lt;dl&gt;';
        for ($p = 1; $p &lt;= 10; $p++) {
            $rec = yaz_record($id[$i],$p,"string");
            if (empty($rec)) continue;
            echo "&lt;dt&gt;&lt;B&gt;$p&lt;/B&gt;&lt;/dt&gt;&lt;dd&gt;";
            echo ereg_replace("\n", "&lt;br&gt;\n",$rec);
            echo "&lt;/dd&gt;";
        }
        echo '&lt;/dl&gt;';
    }
}
?&gt;
    </programlisting>
   </example>
   </para>
   </sect1>
   </partintro>
  <refentry id="function.yaz-addinfo">
   <refnamediv>
    <refname>yaz_addinfo</refname>
    <refpurpose>Retourne plus de d&eacute;tails apr&egrave;s une erreur</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_addinfo</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_addinfo</function> retourne plus de d&eacute;tails apr&egrave;s
     la derni&egrave;re erreur survenue. Une cha&icirc;ne vide est retourn&eacute;e
     si la derni&egrave;re op&eacute;ration a &eacute;t&eacute; r&eacute;ussie,
     ou bien si aucune autre information n'est disponible.
     </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-close">
   <refnamediv>
    <refname>yaz_close</refname>
    <refpurpose>Ferme une connexion YAZ</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_close</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_close</function> ferme une connexion &agrave; un h&ocirc;te YAZ.
     L'application ne peut plus utiliser l'identifiant de connexoin
     <parameter>id</parameter>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-connect">
   <refnamediv>
    <refname>yaz_connect</refname>
    <refpurpose>
     Retourne un identifiant positif d'association.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_connect</function></funcdef>
      <paramdef>string <parameter>zurl</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_connect</function> pr&eacute;pare une connexion &agrave; un serveur
     Z39.50 target. <parameter>zurl</parameter> est de la forme
     host[:port][/database]. Si port est omis, 210 est utilis&eacute;. Si
     database est omis, Default est utilis&eacute;. Cette fonction n'est pas bloquante,
     et ne tente pas d'&eacute;tablir une socket. En fait, elle ne fait que
     pr&eacute;parer la connexion pour ex&eacute;cution ult&eacute;rieure
     par <function>yaz_wait</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-errno">
   <refnamediv>
    <refname>yaz_errno</refname>
    <refpurpose>Retourne le num&eacute;ro d'erreur</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_errno</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_errno</function> retourne le num&eacute;ro d'erreur de la
     derni&egrave;re requ&ecirc;te. Une valeur positive est retourn&eacute;e
     si le serveur a retourn&eacute;e un diagnostic. La valeur 0 est retourn&eacute;e
     si aucune erreur n'est survenue. Une valeur n&eacute;gative indique
     une erreur sans diagnostic.
    </para>
    <para>
     <function>yaz_errno</function> doit &ecirc;tre appel&eacute;e
     apr&egrave;s chaque requ&ecirc;te. (apr&egrave;s la fin de
     <function>yaz_wait</function>), pour savoir si la transaction
     a r&eacute;ussi ou &eacute;chou&eacute;.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-error">
   <refnamediv>
    <refname>yaz_error</refname>
    <refpurpose>Retourne une description de l'erreur</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_error</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_error</function> retourne un message d'erreur pour la
     derni&egrave;re requ&ecirc;te. Une cha&icirc;icirc;ne vide est
     retourn&eacute;e si la derni&egrave;re requ&ecirc;te a r&eacute;ussi.
    </para>
    <para>
     <function>yaz_error</function> retourne un message en anglais, qui
     correspond au num&eacute;ro d'erreur retourn&eacute; par
     <function>yaz_errno</function>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-hits">
   <refnamediv>
    <refname>yaz_hits</refname>
    <refpurpose>
      Retourne le nombre de r&eacute;sultat de la derni&egrave;re recherche
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_hits</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_hits</function> retourne le nombre de r&eacute;sultat de
     la derni&egrave;re recherche.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-element">
   <refnamediv>
    <refname>yaz_element</refname>
    <refpurpose>
     Sp&eacute;cifie le type d'&eacute;l&eacute;ments &agrave; lire
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_range</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>elementset</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_range</function> est &agrave; utiliser en conjonction
     avec <function>yaz_search</function> pour sp&eacute;cifier le type
     d'&eacute;l&eacute;ments &agrave; lire. La pluspart des serveurs
     supporte <literal>F</literal> (full, tous), et <literal>B</literal>
     (brief, bref).
    </para>
    <para>
     <function>yaz_range</function> retourne <literal>TRUE</literal> en
     cas de succ&egrave;s, et <literal>FALSE</literal> sinon.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-range">
   <refnamediv>
    <refname>yaz_range</refname>
    <refpurpose>
     Sp&eacute;cifie le nombre maximal de r&eacute;sultat &agrave; lire
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_range</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>start</parameter></paramdef>
      <paramdef>int <parameter>number</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_range</function> est utilis&eacute;e conjointement &agrave;
     <function>yaz_search</function>, pour sp&eacute;cifier le
     nombre maximal <parameter>number</parameter> de r&eacute;sultat
     &agrave; lire, ainsi que la position de d&eacute;but de lecture
     avec <parameter>start</parameter>. Si <function>yaz_range</function> n'est pas
     utilis&eacute;e, <parameter>start</parameter> vaudra 1
     et <parameter>number</parameter> vaudra 10.
    </para>
    <para>
     Retourne <literal>TRUE</literal> en cas de succ&egrave;s; <literal>FALSE</literal> en cas d'erreur.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-record">
   <refnamediv>
    <refname>yaz_record</refname>
    <refpurpose>Retourne un r&eacute;sultat</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_record</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>pos</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_record</function> retourne un r&eacute;sultat&agrave; la
     position <parameter>pos</parameter>, ou une cha&icirc;icirc;ne vide si
     aucun r&eacute;sultat n'est disponible &agrave; la position
     <parameter>pos</parameter>.
    </para>
    <para>
     <function>yaz_record</function> recherche une ligne dans le r&eacute;sultat,
     &agrave; la position sp&eacute;cifi&eacute;e. Si aucune ligne
     n'existe &agrave; la position donn&eacute;e, une cha&icirc;icirc;ne
     vide est retourn&eacute;e. L'argument <parameter>type</parameter>
     sp&eacute;cifie la forme du r&eacute;sultat retourn&eacute; : si
     <parameter>type</parameter> vaut "string", la ligne est retourn&eacute;e
     sous la forme d'une cha&icirc;icirc;ne, pr&ecirc;te &agrave;
     l'affichage. Si <parameter>type</parameter> vaut "array", la ligne sera
     retourn&eacute;e sous la forme d'un tableau structur&eacute;.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-search">
   <refnamediv>
    <refname>yaz_search</refname>
    <refpurpose>Pr&eacute;pares une recherche</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_search</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>type</parameter></paramdef>
      <paramdef>string <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_search</function> pr&eacute;pare une recherche sur le serveur
     identifi&eacute; par <parameter>id</parameter>. <parameter>type</parameter>
     repr&eacute;sente le type de requ&ecirc;te : seul RPN est support&eacute;
     actuellement, et dans ce cas, le troisi&egrave;me argument est un
     pr&eacute;fixe de notation de requ&ecirc;te utilis&eacute; par YAZ.
     Comme pour <function>yaz_connect</function>, <function>yaz_search</function> n'est pas
     bloquante, et ne fait que pr&eacute;parer la recherche pour ex&eacute;cution
     ult&eacute;rieure, avec <function>yaz_wait</function>.
    </para>
   </refsect1>
   <refsect1>
    <title>Requ&ecirc;tes RPN</title>
    <para>
     Les requ&ecirc;tes RPN sont des repr&eacute;sentation textuelles des requ&ecirc;tes
     de type Type-1, comme d&eacute;finit dans le standard Z39.50. Cependant,
     dans la repr&eacute;sentation textuelle utilis&eacute;e par YAZ, une notation
     &agrave; pr&eacute;fixage est utilis&eacute;e, c'est &agrave; dire que l'op&eacute;rateur pr&eacute;c&eacute;de
     l'op&eacute;rande. La cha&icirc;ne de requ&ecirc;te est une s&eacute;quence de mots
     reserv&eacute;s, o&ugrave; les espaces sont ignor&eacute;s, &agrave; moins qu'ils n'ai &eacute;t&eacute;
     mis entre guillemets doubles. Les mots reserv&eacute;s qui commencent par
     un arobase (<literal>@</literal>) sont consid&eacute;r&eacute;s comme des op&eacute;rateurs
     et trait&eacute;s comme tels.
    </para>
    <table>
     <title>Op&eacute;rateurs RPN</title>
     <tgroup cols="2">
      <thead>
        <row>
          <entry>Syntaxe</entry>
          <entry>Description</entry>
        </row>
      </thead>
      <tbody>
        <row>
         <entry><literal>@and query1 query2</literal></entry>
         <entry>intersection des requ&ecirc;tes query1 et query2</entry>
        </row>
        <row>
         <entry><literal>@or query1 query2</literal></entry>
         <entry>union des requ&ecirc;tes  query1 et query2</entry>
        </row>
        <row>
         <entry><literal>@not query1 query2</literal></entry>
         <entry>requ&ecirc;tes "query1 et non(query2)"</entry>
        </row>
        <row>
         <entry><literal>@set name</literal></entry>
         <entry>nomme le r&eacute;sultat</entry>
        </row>
        <row>
         <entry><literal>@attrset set query</literal></entry>
         <entry>sp&eacute;cifie le jeu d'attributs de la requ&ecirc;te. Cette construction
         n'est autoris&eacute;e qu'une seule fois, au d&eacute;but d'une requ&ecirc;te.</entry>
        </row>
        <row>
          <entry><literal>@attr set type=value query</literal></entry>
          <entry>Applique les attributs &agrave; une requ&ecirc;te. Le type et la valeur
          sont des entiers indiquant les types et valeurs des attributs, dans
          cet ordre. Le jeu, si fourni, sp&eacute;cifie le jeu d'attribut utilis&eacute;.
         </entry>
        </row>
      </tbody>
     </tgroup>
    </table>
    <para>
     Les requ&ecirc;tes suivantes illustrent des requ&ecirc;tes valides :
     <informalexample>
      <screen>ordinateur</screen>
     </informalexample>
      Recherche les documents qui contiennent le mot "ordinateur". Aucun attribut
      n'est sp&eacute;cifi&eacute;.
    </para>
    <para>
     <informalexample>
      <screen>"serveur rapide"</screen>
     </informalexample>
     Recherche les documents qui contiennent les mots "serveur rapide"
    </para>
    <para>
     <informalexample>
      <screen>@attr 1=4 php</screen>
     </informalexample>
     L'attribut est de type 1 (Bib-1 use), sa valeur est 4 (Title, titre) :
     cette requ&ecirc;te recherche les documents o&ugrave; le mot "php" est dans le titre.
    </para>
    <para>
     <informalexample>
<screen>@attrset gils @and @attr 1=4 php @attr 1=1003 "Rasmus Lerdorf"</screen>
     </informalexample>
     Cette requ&ecirc;te utilise tout le jeu d'attrbuts GILS. Elle recherche
     les documents dont le titre contient "php", et qui contiennent le
     nom "Rasmus Lerdorf" comme auteur.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-syntax">
   <refnamediv>
    <refname>yaz_syntax</refname>
    <refpurpose>
     Sp&eacute;cifie la syntaxe de lecture des lignes
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_syntax</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>syntax</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_syntax</function> est utilis&eacute;e conjointement avec
     <function>yaz_search</function> pour sp&eacute;cifier la m&eacute;thode
     de lecture des lignes.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.yaz-wait">
   <refnamediv>
    <refname>yaz_wait</refname>
    <refpurpose>Ex&eacute;cute une requ&ecirc;te</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>yaz_wait</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>string <parameter>syntax</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>yaz_wait</function> ex&eacute;cute les requ&ecirc;tes pr&eacute;par&eacute;e par les fonctions
     <function>yaz_connect</function>, <function>yaz_search</function>.
     <function>yaz_wait</function> fonctionne en mode bloquant.
     <function>yaz_wait</function> se termine lorsque toutes les requ&ecirc;tes
     se sont termin&eacute;es (succ&egrave;s ou erreur).
    </para>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
