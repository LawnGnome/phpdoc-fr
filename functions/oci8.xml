 <reference id="ref.oci8">
  <title>Oracle 8 functions</title>
  <titleabbrev>OCI8</titleabbrev>
  <partintro>
   <para>
     Ces fonctions vous permettront d'acc&eacute;der aux serveurs Oracle8 et
     Oracle7. Elles utilisent l'interface Oracle8 Call-Interface (OCI8).
     Vous aurez donc besoin des librairies clientes Oracle8 pour pouvoir
     les utiliser.
   </para>
   <para>
     Il faut noter que cette extension est plus souple que l'extension Oracle
     officielle. Elle supporte notamment les liaisons entre les variables
     globales et locales de PHP avec des emplacements Oracle; elle supporte
     compl&egrave;tement les types LOB, FILE et ROWID et vous permet
     d'utiliser des variables de d&eacute;finitions personnalisables.
  </para>
   <para>
    Avant d'utiliser cette extension, assurez vous que vous avez bien
    param&eacute;tr&eacute; vos variables d'environnement Oracle, ainsi que votre
    d&eacute;mon utilisateur. Les variables dont vous pouvez avoir besoin sont :
    <itemizedlist>
     <listitem>
      <simpara>
       ORACLE_HOME
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       ORACLE_SID
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       LD_PRELOAD
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       LD_LIBRARY_PATH
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       NLS_LANG
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       ORA_NLS33
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Apr&egrave;s avoir configur&eacute; ces varaibles pour votre utilisateur "serveur
    web", assurez vous aussi d'ajouter cet utilisateur (nobody, www)
    au group Oracle.
   </para>
   <para>
    <example>
     <title>Aide OCI</title>
      <programlisting role="php">
&lt;?php
// par sergo@bacup.ru
// Utilisez l'option : OCI_DEFAULT pour &eacute;x&eacute;cuter les commandes avec un d&eacute;lai
OCIExecute($stmt, OCI_DEFAULT);
// pour lire les donn&eacute;es apr&egrave;s lecture, utilisez :
$result = OCIResult($stmt, $n);
if (is_object ($result)) $result = $result->load();
// Pour les commandes INSERT ou UPDATE utilisez:
$sql = "insert into table (field1, field2) values (field1 = 'value',
 field2 = empty_clob()) returning field2 into :field2";
OCIParse($conn, $sql);
$clob = OCINewDescriptor($conn, OCI_D_LOB);
OCIBindByName ($stmt, ":field2", &$clob, -1, OCI_B_CLOB);
OCIExecute($stmt, OCI_DEFAULT);
$clob->save ("some text");
?&gt;
     </programlisting>
    </example>
   </para>
   <para>
    Vous pouvez facilement acc&eacute;der aux proc&eacute;dures stock&eacute;es, de la m&ecirc;me
    fa&ccedil;on que vous le feriez par ligne de commande :
    <example>
     <title>Utilisation de proc&eacute;dures stock&eacute;es</title>
      <programlisting role="php">
&lt;?php
// par webmaster@remoterealty.com
$sth = OCIParse ( $dbh, "begin sp_newaddress( :address_id, '$firstname',
 '$lastname', '$company', '$address1', '$address2', '$city', '$state',
 '$postalcode', '$country', :error_code );end;" );
// Ce script appelle la proc&eacute;dure stock&eacute;e sp_newaddress, avec address_id qui est
// une variable entrante/sortante et :error_code une variable sortante.
// Lorsque vous les liez :
   OCIBindByName ( $sth, ":address_id", $addr_id, 10 );
   OCIBindByName ( $sth, ":error_code", $errorcode, 10 );
   OCIExecute ( $sth );
?&gt;
     </programlisting>
    </example>
   </para>
  </partintro>
  <refentry id="function.ocidefinebyname">
   <refnamediv>
    <refname>OCIDefineByName</refname>
    <refpurpose>
      Utilise une variable PHP pour la phase de d&eacute;finition, dans une commande SELECT.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocidefinebyname</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>string <parameter>Column-Name</parameter></paramdef>
      <paramdef>mixed <parameter>variable</parameter></paramdef>
      <paramdef>int <parameter><optional>type</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocidefinebyname</function> copie les valeurs issues de colonnes
     SQL <parameter>Column-Name</parameter> dans les variables PHP.
     M&eacute;fiez-vous des colonnes Oracle qui sont toutes en majuscule,
     tandis que dans les SELECT, vous pouvez aussi les &eacute;crire en minuscules.
     <function>ocidefinebyname</function> s'attend &agrave; ce que
     <parameter>Column-Name</parameter> soit en majuscules.
     Si vous d&eacute;finissez une variable qui n'existe pas dans
     la commande SELECT, vous ne serez pas pr&eacute;venu par une erreur.
    </para>
    <para>
      Si vous avez besoin de d&eacute;finir un type de donn&eacute;es
      abstrait, tel que (LOB/ROWID/BFILE), vous devez lui allouer la
      m&eacute;moire avec <function>ocinewdescriptor</function>.
      Reportez vous aussi &agrave; <function>ocibindbyname</function>.
    </para>
     <example>
      <title>OCIDefineByName</title>
      <programlisting>
&lt;?php
/* Exemple OCIDefineByPos par thies@thieso.net (980219) */
$conn = OCILogon("scott","tiger");
$stmt = OCIParse($conn,"select empno, ename from emp");
/* La d&eacute;finition DOIT &ecirc;tre fa&icirc;te AVANT ociexecute! */
OCIDefineByName($stmt,"EMPNO",&$empno);
OCIDefineByName($stmt,"ENAME",&$ename);
OCIExecute($stmt);
while (OCIFetch($stmt)) {
    echo "empno:".$empno."\n";
    echo "ename:".$ename."\n";
}
OCIFreeStatement($stmt);
OCILogoff($conn);
?></programlisting></example>
   </refsect1>
  </refentry>
  <refentry id="function.ocibindbyname">
   <refnamediv>
    <refname>OCIBindByName</refname>
    <refpurpose>Utilise une variable PHP pour la phase de d&eacute;finition, dans un SELECT.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocibindbyname</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>string <parameter>ph_name</parameter></paramdef>
      <paramdef>mixed &amp;<parameter>variable</parameter></paramdef>
      <paramdef>int <parameter>length</parameter></paramdef>
      <paramdef>int <parameter>
       <optional>type</optional></parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocibindbyname</function> relie la variable PHP
     <parameter>variable</parameter> &agrave; l'emplacement Oracle
     <parameter>ph_name</parameter>. Son utilisation (comme entr&eacute;e
     ou comme sortie) sera d&eacute;finie &agrave; l'ex&eacute;cution,
     et l'espace n&eacute;cessaire sera allou&eacute;. Le param&egrave;tre de
     longueur <parameter>length</parameter> fixe la taille maximum pour
     la liaison. Si vous affectez une longueur de -1,
     <function>ocibindbyname</function> utilisera la longueur de variable
     comme maximum.
    </para>
    <para>
     Si vous devez lier des types abstraits de donn&eacute;es (LOB/ROWID/BFILE),
     vous devrez l'allouer dans un premier temps, avec
     <function>ocinewdescriptor</function>. La longueur
     <parameter>length</parameter> ne sert pas pour ces types et
     devrait &ecirc;tre fix&eacute;e &agrave; -1. La variable
     <parameter>type</parameter> indique au serveur Oracle, quel type de
     pointeur va &ecirc;tre utilis&eacute;. Les valeurs possibles sont :
     OCI_B_FILE (Fichier binaires), OCI_B_CFILE (Fichier texte),
     OCI_B_CLOB (LOB- texte), OCI_B_BLOB (LOB binaire)
     et OCI_B_ROWID (ROWID).
    </para>
    <example>
     <title>OCIDefineByName</title>
     <programlisting>
&lt;?php
/* Exemple OCIBindByPos par thies@thieso.net (980221)
  Ins&egrave;re 3 lignes dans emp, et utilise ROWID pour mettre &agrave; jour
  les lignes, juste apr&egrave;s l'insertion.
*/
$conn = OCILogon("scott","tiger");
$stmt = OCIParse($conn,"insert into emp (empno, ename) ".
		   "values (:empno,:ename) ".
		   "returning ROWID into :rid");
$data = array(1111 => "Larry", 2222 => "Bill", 3333 => "Jim");
$rowid = OCINewDescriptor($conn,OCI_D_ROWID);
OCIBindByName($stmt,":empno",&$empno,32);
OCIBindByName($stmt,":ename",&$ename,32);
OCIBindByName($stmt,":rid",&$rowid,-1,OCI_B_ROWID);
$update = OCIParse($conn,"update emp set sal = :sal where ROWID = :rid");
OCIBindByName($update,":rid",&$rowid,-1,OCI_B_ROWID);
OCIBindByName($update,":sal",&$sal,32);
$sal = 10000;
while (list($empno,$ename) = each($data)) {
	OCIExecute($stmt);
	OCIExecute($update);
}
$rowid->free();
OCIFreeStatement($update);
OCIFreeStatement($stmt);
$stmt = OCIParse($conn,"select * from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
while (OCIFetchInto($stmt,&$arr,OCI_ASSOC)) {
	var_dump($arr);
}
OCIFreeStatement($stmt);
/* Effacement des lignes inutiles dans la table emp .... */
$stmt = OCIParse($conn,"delete from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
OCIFreeStatement($stmt);
OCILogoff($conn);
?>
	 </programlisting>
	</example>
   </refsect1>
  </refentry>
  <refentry id="function.ocilogon">
   <refnamediv>
    <refname>OCILogon</refname>
    <refpurpose>Etablit une connexion &agrave; un serveur Oracle.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocilogon</function></funcdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string
       <parameter><optional>db</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
      <function>ocilogon</function> retourne un identifiant de connexion,
      n&eacute;cessaire &agrave; la plus part des fonctions OCI. Si l'option
      ORACLE_SID n'est pas pr&eacute;cis&eacute;e, PHP utilisera la variable
      d'environnement ORACLE_SID pour d&eacute;terminer le serveur de connexion.
    </para>
    <para>
      Les connexions sont partag&eacute;es, &agrave; l'int&eacute;rieur
      d'une m&ecirc;me page avec <function>ocilogon</function>. Cela signifie
      que COMMIT et ROLLBACK s'appliquent &agrave; toutes les transactions
      commenc&eacute;es &agrave; l'int&eacute;rieur d'une m&ecirc;me page,
      m&ecirc;me si vous avez cr&eacute;&eacute; de multiples connexions.
    </para>
    <para>
     Cet exemple montre comment les connexions sont partag&eacute;es :
     <example>
      <title>OCILogon</title>
      <programlisting>
&lt;?php
print "&lt;HTML>&lt;PRE>";
$db = "";
$c1 = ocilogon("scott","tiger",$db);
$c2 = ocilogon("scott","tiger",$db);
function create_table($conn)
{ $stmt = ociparse($conn,"create table scott.hallo (test
varchar2(64))");
  ociexecute($stmt);
  echo $conn." created table\n\n";
}
function drop_table($conn)
{ $stmt = ociparse($conn,"drop table scott.hallo");
  ociexecute($stmt);
  echo $conn." dropped table\n\n";
}
function insert_data($conn)
{ $stmt = ociparse($conn,"insert into scott.hallo values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}
function delete_data($conn)
{ $stmt = ociparse($conn,"delete from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}
function commit($conn)
{ ocicommit($conn);
  echo $conn." commited\n\n";
}
function rollback($conn)
{ ocirollback($conn);
  echo $conn." rollback\n\n";
}
function select_data($conn)
{ $stmt = ociparse($conn,"select * from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt))
    echo $conn." &lt;".ociresult($stmt,"TEST").">\n\n";
  echo $conn."----done\n\n";
}
create_table($c1);
insert_data($c1);   // Insertion d'une ligne avec c1
insert_data($c2);   // Insertion d'une ligne avec c2
select_data($c1);   // Les r&eacute;sultats des deux insertions sont retourn&eacute;s
select_data($c2);
rollback($c1);      // Annulation avec c1
select_data($c1);   // Les r&eacute;sultats des deux insertions sont annul&eacute;s
select_data($c2);
insert_data($c2);   // Insertion d'une ligne avec c2
commit($c2);        // Validation avec using c2
select_data($c1);   // Le r&eacute;sultat de c2 est retourn&eacute;
delete_data($c1);   // Effacement de toutes les lignes avec c1
select_data($c1);   // Aucune ligne n'est retourn&eacute;e
select_data($c2);   // Aucune ligne n'est retourn&eacute;e
commit($c1);        // Validation avec c1
select_data($c1);   // Aucune ligne n'est retourn&eacute;e
select_data($c2);   // Aucune ligne n'est retourn&eacute;e
drop_table($c1);
print "&lt;/PRE>&lt;/HTML>";
?>
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>ociplogon</function> et <function>ocinlogon</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ociplogon">
   <refnamediv>
    <refname>OCIPLogon</refname>
    <refpurpose>Connection persistante &agrave; un serveur Oracle.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ociplogon</function></funcdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string
       <parameter><optional>db</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ociplogon</function> cr&eacute;e une connexion persistante
     &agrave; un serveur Oracle 8 et s'authentifie. Si l'option ORACLE_SID
     n'est pas sp&eacute;cifi&eacute;e, PHP utilisera la variable
     d'environnement ORACLE_SID pour d&eacute;terminer le serveur de
     connexion.
    </para>
    <simpara>
     Voir aussi <function>ocilogon</function> et <function>ocinlogon</function>.
    </simpara>
   </refsect1></refentry>
  <refentry id="function.ocinlogon">
   <refnamediv>
    <refname>OCINLogon</refname>
    <refpurpose>
      Se connecte &agrave; un serveur Oracle avec une nouvelle connexion.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocinlogon</function></funcdef>
      <paramdef>string <parameter>username</parameter></paramdef>
      <paramdef>string <parameter>password</parameter></paramdef>
      <paramdef>string
       <parameter><optional>db</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocinlogon</function> cr&eacute;e une nouvelle connexion &agrave;
     un serveur Oracle et s'authentifie. Si l'option ORACLE_SID n'est pas
     sp&eacute;cifi&eacute;, PHP utilisera la variable d'environnement
     ORACLE_SID pour d&eacute;terminer le serveur de connexion.
    </para>
    <para>
       <function>ocinlogon</function> force le serveur &agrave;
       &eacute;tablir une nouvelle connexion. Cette fonction ne
       doit &ecirc;tre utilis&eacute;e que si vous voulez isoler un
       ensemble de transactions. Par d&eacute;faut, les connexions
       sont partag&eacute;es au niveau de la page, si vous utilisez
       la fonction <function>ocinlogon</function> ou bien au niveau
       du processus web, si vous utilisez <function>ociplogon</function>.
       Si vous avez de multiples connexions ouvertes avec
       <function>ocinlogon</function>, les validations et annulations
       ne s'appliquent qu'&agrave; la connexion sp&eacute;cif&eacute;e.
    </para>
    <para>
      L'exemple ci dessous montre l'utilisation des connexions
      s&eacute;par&eacute;es.
     <example>
      <title>OCINLogon</title>
      <programlisting>
&lt;?php
print "&lt;HTML>&lt;PRE>";
$db = "";
$c1 = ocilogon("scott","tiger",$db);
$c2 = ocinlogon("scott","tiger",$db);
function create_table($conn)
{ $stmt = ociparse($conn,"create table scott.hallo (test
varchar2(64))");
  ociexecute($stmt);
  echo $conn." created table\n\n";
}
function drop_table($conn)
{ $stmt = ociparse($conn,"drop table scott.hallo");
  ociexecute($stmt);
  echo $conn." dropped table\n\n";
}
function insert_data($conn)
{ $stmt = ociparse($conn,"insert into scott.hallo values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." inserted hallo\n\n";
}
function delete_data($conn)
{ $stmt = ociparse($conn,"delete from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn." deleted hallo\n\n";
}
function commit($conn)
{ ocicommit($conn);
  echo $conn." commited\n\n";
}
function rollback($conn)
{ ocirollback($conn);
  echo $conn." rollback\n\n";
}
function select_data($conn)
{ $stmt = ociparse($conn,"select * from scott.hallo");
  ociexecute($stmt,OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt))
    echo $conn." &lt;".ociresult($stmt,"TEST").">\n\n";
  echo $conn."----done\n\n";
}
create_table($c1);
insert_data($c1);
select_data($c1);
select_data($c2);
rollback($c1);
select_data($c1);
select_data($c2);
insert_data($c2);
commit($c2);
select_data($c1);
delete_data($c1);
select_data($c1);
select_data($c2);
commit($c1);
select_data($c1);
select_data($c2);
drop_table($c1);
print "&lt;/PRE>&lt;/HTML>";
?>
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>ocilogon</function> et
     <function>ociplogon</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ocilogoff">
   <refnamediv>
    <refname>OCILogOff</refname>
    <refpurpose>D&eacute;connection d'un serveur Oracle </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocilogoff</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocilogoff</function> ferme la connexion Oracle.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ociexecute">
   <refnamediv>
    <refname>OCIExecute</refname>
    <refpurpose>Ex&eacute;cute une commande </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ociexecute</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
      <paramdef>int
       <parameter><optional>mode</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ociexecute</function> &eacute;x&eacute;cute une commande
     d&eacute;j&agrave; pr&eacute;par&eacute;e (voir
     <function>ociparse</function>). L'option <parameter>mode</parameter> vous
     permet de sp&eacute;cifier le mode d'ex&eacute;cution (par d&eacute;faut,
     il est &agrave; OCI_COMMIT_ON_SUCCESS). Si vous ne voulez pas que la
     commande soit automatiquement valid&eacute;e, utilisez le mode OCI_DEFAULT.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocicommit">
   <refnamediv>
    <refname>OCICommit</refname>
    <refpurpose>Valide les transactions en cours.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocicommit</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocicommit</function> valide toutes les transactions en
     cours sur la connexion Oracle <parameter>connection</parameter>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocirollback">
   <refnamediv>
    <refname>OCIRollback</refname>
    <refpurpose>Annule les transactions en cours </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocirollback</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocirollback</function> annule les transactions en cours sur la
     connexion Oracle <parameter>connection</parameter>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocinewdescriptor">
   <refnamediv>
    <refname>OCINewDescriptor</refname>
    <refpurpose>Initialise un nouveau pointeur vide de LOB/FILE</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ocinewdescriptor</function></funcdef>
      <paramdef>int <parameter>connection</parameter></paramdef>
      <paramdef>int
       <parameter><optional>type</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocinewdescriptor</function> alloue l'espace
     n&eacute;cessaire pour stocker un descripteur, ou un pointeur
     de LOB. Les valeurs accept&eacute;es pour type sont
     OCI_D_FILE, OCI_D_LOB et OCI_D_ROWID.
      </para>
     <example>
      <title>OCINewDescriptor</title>
      <programlisting>
&lt;?php
    /* Ce script est fait pour &ecirc;tre appel&eacute; dans un formulaire HTML
     * Il attends les variables $user, $password, $table, $where, et $commitsize
     * Le scrip efface alors les lignes selectionn&eacute;es avec ROWID et valide
     * l'effacement apr&egrave;s chaque groupe de $commitsize lignes.
     * (Utilisez avec prudences, car il n'y a pas d'annulation possible).
     */
    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn,"select rowid from $table $where");
    $rowid = OCINewDescriptor($conn,OCI_D_ROWID);
    OCIDefineByName($stmt,"ROWID",&$rowid);
    OCIExecute($stmt);
    while ( OCIFetch($stmt) ) {
       $nrows = OCIRowCount($stmt);
       $delete = OCIParse($conn,"delete from $table where ROWID = :rid");
       OCIBindByName($delete,":rid",&$rowid,-1,OCI_B_ROWID);
       OCIExecute($delete);
       print "$nrows\n";
       if ( ($nrows % $commitsize) == 0 ) {
           OCICommit($conn);
       }
    }
    $nrows = OCIRowCount($stmt);
    print "$nrows effac&eacute;es...\n";
    OCIFreeStatement($stmt);
    OCILogoff($conn);
?>
   </programlisting><programlisting>
&lt;?php
    /* Ce script est fait pour &ecirc;tre appel&eacute; depuis un formulaire HTML.
     * Il attend les variables $user, $password, $table, $where, et $commitsize,
     * donn&eacute;es par le formulaire. Le script efface
     * les lignes selectionn&eacute;es avec ROWID est valide les transactions
     * &agrave; chaque jeu de $commitsize lignes. (Attention : il n'y plus d'annulation) */
  if(!isset($lob_upload) || $lob_upload == 'none'){
?>
&lt;form action="upload.php3" method="post" enctype="multipart/form-data">
Upload file: &lt;input type="file" name="lob_upload">&lt;br>
&lt;input type="submit" value="Upload"> - &lt;input type="reset">
&lt;/form>
&lt;?php
  } else {
     // $lob_upload contains the temporary filename of the uploaded file
     $conn = OCILogon($user, $password);
     $lob = OCINewDescriptor($conn, OCI_D_LOB);
     $stmt = OCIParse($conn,"insert into $table (id, the_blob) values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
     OCIBindByName($stmt, ':the_blob', &$lob, -1, OCI_B_BLOB);
     OCIExecute($stmt);
     if($lob->savefile($lob_upload)){
        OCICommit($conn);
        echo "Blob sauv&eacute;!\n";
     }else{
        echo "Impossible de sauver le Blob\n";
     }
     OCIFreeDescriptor($lob);
     OCIFreeStatement($stmt);
     OCILogoff($conn);
  }
?>
   </programlisting></example>
   </refsect1>
  </refentry>
  <refentry id="function.ocirowcount">
   <refnamediv>
    <refname>OCIRowCount</refname>
    <refpurpose>Retourne le nombre de lignes affect&eacute;es.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocirowcount</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocirowcount</function> retourne le nombre de lignes
     affect&eacute;es par une commande de modification. Cette fonction
     ne vous indiquera pas le nombre de lignes retourn&eacute;es par
     un SELECT : il faut que les lignes aient &eacute;t&eacute; modifi&eacute;es.
    </para>
    <para>
     <example>
      <title>OCIRowCount</title>
      <programlisting>
&lt;?php
    print "&lt;HTML>&lt;PRE>";
    $conn = OCILogon("scott","tiger");
    $stmt = OCIParse($conn,"create table emp2 as select * from emp");
    OCIExecute($stmt);
    print OCIRowCount($stmt) . " rows inserted.&lt;BR>";
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn,"delete from emp2");
    OCIExecute($stmt);
    print OCIRowCount($stmt) . " rows deleted.&lt;BR>";
    OCICommit($conn);
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn,"drop table emp2");
    OCIExecute($stmt);
    OCIFreeStatement($stmt);
    OCILogOff($conn);
    print "&lt;/PRE>&lt;/HTML>";
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocinumcols">
   <refnamediv>
    <refname>OCINumCols</refname>
    <refpurpose>Retourne le nombre de colonnes dans un r&eacute;sultat</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocinumcols</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocinumcols</function> retourne le nombre de colonnes
     dans un r&eacute;sultat.
    </para>
     <example>
      <title>OCINumCols</title>
      <programlisting>
&lt;?php
    print "&lt;HTML>&lt;PRE>\n";
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    while ( OCIFetch($stmt) ) {
        print "\n";
        $ncols = OCINumCols($stmt);
        for ( $i = 1; $i <= $ncols; $i++ ) {
            $column_name  = OCIColumnName($stmt,$i);
            $column_value = OCIResult($stmt,$i);
            print $column_name . ': ' . $column_value . "\n";
        }
        print "\n";
    }
    OCIFreeStatement($stmt);
    OCILogoff($conn);
    print "&lt;/PRE>";
    print "&lt;/HTML>\n";
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>
  <refentry id="function.ociresult">
   <refnamediv>
    <refname>OCIResult</refname>
    <refpurpose>Retourne la valeur d'une colonne dans une ligne lue</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>mixed <function>ociresult</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
      <paramdef>mixed <parameter>column</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ociresult</function> retourne les donn&eacute;es de la colonne
     <parameter>column</parameter>  dans la ligne courante
     (voir <function>ocifetch</function>).
     <function>ocifetch</function> retournera tout les types, sauf
     les types abstraits (ROWIDs, LOBs et FILEs).
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocifetch">
   <refnamediv>
    <refname>OCIFetch</refname>
    <refpurpose>
      Modifie la procha&icirc;ne ligne dans le pointeur interne de r&eacute;sultat.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocifetch</function></funcdef>
      <paramdef>int <parameter>statement</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocifetch</function> place la procha&icirc;ne ligne
     (d'une commande SELECT) dans le pointeur interne de r&eacute;sultat.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocifetchinto">
   <refnamediv>
    <refname>OCIFetchInto</refname>
    <refpurpose>Retourne la ligne suivante dans un tableau.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocifetchinto</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>array &amp;<parameter>result</parameter></paramdef>
      <paramdef>int
       <parameter><optional>mode</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocifetchinto</function> retourne la ligne suivante
     (pour une commande SELECT) dans le tableau <parameter>result</parameter>.
     <function>ocifetchinto</function> &eacute;crasera le contenu de
     <parameter>result</parameter>. Par d&eacute;faut,
     <parameter>result</parameter> sera un tableau &agrave;
     index num&eacute;rique, commencant &agrave; 1, et qui contiendra toute les colonnes qui ne sont pas NULL.
    </para>
    <para>
      L'option <parameter>mode</parameter> vous permet de modifier
      le comportement par d&eacute;faut de la fonction. Vous pouvez
      passer plusieurs modes simplement en les additionnant
      (i.e. OCI_ASSOC+OCI_RETURN_NULLS). Les modes valides sont :
     <simplelist>
      <member>
        <literal>OCI_ASSOC</literal> Retourne un tableau associatif.
      </member>
      <member>
        <literal>OCI_NUM</literal> Retourne un tableau &agrave; index num&eacute;rique
        (DEFAULT, valeur par d&eacute;faut)
      </member>
      <member>
       <literal>OCI_RETURN_NULLS</literal> Retourne les colonnes vides.
      </member>
      <member>
       <literal>OCI_RETURN_LOBS</literal> Retourne la valeur des objets LOB
       plut&ocirc;t que leur descripteur.
      </member>
     </simplelist>
	</para>
   </refsect1>
  </refentry>
  <refentry id="function.ocifetchstatement">
   <refnamediv>
    <refname>OCIFetchStatement</refname>
    <refpurpose>Retourne toutes les lignes d'un r&eacute;sultat.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>int <function>ocifetchstatement</function></funcdef>
     <paramdef>int <parameter>stmt</parameter></paramdef>
     <paramdef>array &<parameter>variable</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>ocifetchstatement</function> retourne toutes les lignes
     d'un r&eacute;sultat dans le tableau variable.
     <function>ocifetchstatement</function> retourne le nombre
     de lignes retourn&eacute;es.
    </para>
     <example>
      <title>OCIFetchStatement</title>
      <programlisting>
&lt;?php
/* exemple OCIFetchStatement par mbritton@verinet.com (990624) */
$conn = OCILogon("scott","tiger");
$stmt = OCIParse($conn,"select * from emp");
OCIExecute($stmt);
$nrows = OCIFetchStatement($stmt,$results);
if ( $nrows > 0 ) {
   print "&lt;TABLE BORDER=\"1\">\n";
   print "&lt;TR>\n";
   while ( list( $key, $val ) = each( $results ) ) {
      print "&lt;TH>$key&lt;/TH>\n";
   }
   print "&lt;/TR>\n";
   for ( $i = 0; $i &lt; $nrows; $i++ ) {
      reset($results);
      print "&lt;TR>\n";
      while ( $column = each($results) ) {
         $data = $column['value'];
         print "&lt;TD>$data[$i]&lt;/TD>\n";
      }
      print "&lt;/TR>\n";
   }
   print "&lt;/TABLE>\n";
} else {
   echo "Rien n'a &eacute;t&eacute; trouv&eacute;&lt;BR>\n";
}
print "$nrows Records Selected&lt;BR>\n";
OCIFreeStatement($stmt);
OCILogoff($conn);
?>
    </programlisting>
   </example>
  </refsect1>
  </refentry>
  <refentry id="function.ocicolumnisnull">
   <refnamediv>
    <refname>OCIColumnIsNULL</refname>
    <refpurpose>Teste si la valeur d'une colonne est NULL </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocicolumnisnull</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>mixed <parameter>column</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocicolumnisnull</function> retourne TRUE si la colonne
     <parameter>col</parameter> du r&eacute;sultat
     <parameter>stmt</parameter> est NULL. Vous pouvez utiliser
     le num&eacute;ro de colonne (l'indexation des colonnes
     commence &agrave; 1) ou le nom de la colonne, pour le
     param&egrave;tre <parameter>col</parameter>.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocicolumnname">
   <refnamediv>
    <refname>OCIColumnName</refname>
    <refpurpose>Retourne le nom d'une colonne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ocicolumnname</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>int <parameter>col</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     <function>ocicolumnname</function> retourne le nom de la colonne
     num&eacute;ro <parameter>col</parameter> (en commen&ccedil;ant &agrave; 1).
    </simpara>
    <para>
     <example>
      <title>OCIColumnName</title>
      <programlisting>
&lt;?php
    print "&lt;HTML>&lt;PRE>\n";
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "&lt;TABLE BORDER=\"1\">";
    print "&lt;TR>";
    print "&lt;TH>Name&lt;/TH>";
    print "&lt;TH>Type&lt;/TH>";
    print "&lt;TH>Length&lt;/TH>";
    print "&lt;/TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i &lt;= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "&lt;TR>";
        print "&lt;TD>$column_name&lt;/TD>";
        print "&lt;TD>$column_type&lt;/TD>";
        print "&lt;TD>$column_size&lt;/TD>";
        print "&lt;/TR>";
    }
    OCIFreeStatement($stmt);
    OCILogoff($conn);
    print "&lt;/PRE>";
    print "&lt;/HTML>\n";
?>
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>ocinumcols</function>,
     <function>ocicolumntype</function>,
     et <function>ocicolumnsize</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ocicolumnsize">
   <refnamediv>
    <refname>OCIColumnSize</refname>
    <refpurpose>Retourne la taille de la colonne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocicolumnsize</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
      <paramdef>mixed <parameter>column</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocicolumnsize</function> retourne la taille de la colonne.
     Vous pouvez utiliser l'index de colonne (l'indexation commence
     &agrave; 1) ou le nom de la colonne dans le param&egrave;tre
     <parameter>col</parameter>.
    </para>
    <para>
     <example>
      <title>OCIColumnSize</title>
      <programlisting>
&lt;?php
    print "&lt;HTML>&lt;PRE>\n";
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "&lt;TABLE BORDER=\"1\">";
    print "&lt;TR>";
    print "&lt;TH>Name&lt;/TH>";
    print "&lt;TH>Type&lt;/TH>";
    print "&lt;TH>Length&lt;/TH>";
    print "&lt;/TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i <= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "&lt;TR>";
        print "&lt;TD>$column_name&lt;/TD>";
        print "&lt;TD>$column_type&lt;/TD>";
        print "&lt;TD>$column_size&lt;/TD>";
        print "&lt;/TR>";
    }
    print "&lt;/TABLE>";
    OCIFreeStatement($stmt);
    OCILogoff($conn);
    print "&lt;/PRE>";
    print "&lt;/HTML>\n";
?>
	  </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>ocinumcols</function>,
     <function>ocicolumnname</function> et
     <function>ocicolumnsize</function>.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ocicolumntype">
   <refnamediv>
    <refname>OCIColumnType</refname>
    <refpurpose>Retourne le type de donn&eacute;es d'une colonne.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>mixed <function>ocicolumnname</function></funcdef>
     <paramdef>int <parameter>stmt</parameter></paramdef>
     <paramdef>int <parameter>col</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>ocicolumntype</function> retourne le type de donn&eacute;es
     de la colonne correspondant au num&eacute;ro de colonne (les
     colonnes sont index&eacute;es &agrave; partir de 1).
    </simpara>
    <para>
     <example>
      <title>OCIColumnType</title>
      <programlisting>
&lt;?php
    print "&lt;HTML>&lt;PRE>\n";
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn,"select * from emp");
    OCIExecute($stmt);
    print "&lt;TABLE BORDER=\"1\">";
    print "&lt;TR>";
    print "&lt;TH>Name&lt;/TH>";
    print "&lt;TH>Type&lt;/TH>";
    print "&lt;TH>Length&lt;/TH>";
    print "&lt;/TR>";
    $ncols = OCINumCols($stmt);
    for ( $i = 1; $i <= $ncols; $i++ ) {
        $column_name  = OCIColumnName($stmt,$i);
        $column_type  = OCIColumnType($stmt,$i);
        $column_size  = OCIColumnSize($stmt,$i);
        print "&lt;TR>";
        print "&lt;TD>$column_name&lt;/TD>";
        print "&lt;TD>$column_type&lt;/TD>";
        print "&lt;TD>$column_size&lt;/TD>";
        print "&lt;/TR>";
    }
    OCIFreeStatement($stmt);
    OCILogoff($conn);
    print "&lt;/PRE>";
    print "&lt;/HTML>\n";
?>
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi <function>ocinumcols</function>, <function>ocicolumnname</function>,
     et <function>ocicolumnsize</function>.
     </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ociserverversion">
   <refnamediv>
    <refname>OCIServerVersion</refname>
    <refpurpose>
       Retourne une cha&icirc;ne contenant les informations de version du serveur.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>string <function>ociserverversion</function></funcdef>
     <paramdef>int <parameter>conn</parameter></paramdef>
    </funcsynopsis>
    <para>
      <function>ociserverversion</function> retourne une cha&icirc;ne contenant les
      informations de version du serveur
     <example>
      <title>OCIServerVersion</title>
      <programlisting>
&lt;?php
   $conn = OCILogon("scott","tiger");
   print "Version du serveur : " . OCIServerVersion($conn);
   OCILogOff($conn);
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocistatementtype">
   <refnamediv>
    <refname>OCIStatementType</refname>
    <refpurpose>Retourne le type de commande OCI.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ocistatementtype</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocistatementtype</function> retourne une des valeurs suivantes :
     <orderedlist>
      <listitem><simpara>			"SELECT"</simpara></listitem>
      <listitem><simpara>			"UPDATE"</simpara></listitem>
      <listitem><simpara>			"DELETE"</simpara></listitem>
      <listitem><simpara>			"INSERT"</simpara></listitem>
      <listitem><simpara>			"CREATE"</simpara></listitem>
      <listitem><simpara>			"DROP"</simpara></listitem>
      <listitem><simpara>			"ALTER"</simpara></listitem>
      <listitem><simpara>			"BEGIN"</simpara></listitem>
      <listitem><simpara>			"DECLARE"</simpara></listitem>
      <listitem><simpara>			"UNKNOWN"</simpara></listitem>
     </orderedlist></para>
    <para>
     <example>
      <title>Exemples</title>
      <programlisting>
&lt;?php
    print "&lt;HTML>&lt;PRE>";
    $conn = OCILogon("scott","tiger");
    $sql  = "delete from emp where deptno = 10";
    $stmt = OCIParse($conn,$sql);
    if ( OCIStatementType($stmt) == "DELETE" ) {
        die "Vous n'etes pas autoris&eacute; &agrave; effacer dans cette table.&lt;BR>";
    }
    OCILogoff($conn);
    print "&lt;/PRE>&lt;/HTML>";
?>
      </programlisting>
	 </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocinewcursor">
   <refnamediv>
    <refname>OCINewCursor</refname>
    <refpurpose>
     Retourne un nouveau pointeur &agrave; utiliser pour lier
     les pointeurs de r&eacute;f&eacute;rences
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>string <function>ociserverversion</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocinewcursor</function> alloue un nouveau pointeur
     de commande, pour la connexion <parameter>conn</parameter>.
    </para>
    <para>
     <example>
      <title>
        Utiliser un REF CURSOR issue d'une proc&eacute;dure enregistr&eacute;e.
      </title>
      <programlisting>
&lt;?php
// supposons que votre proc&eacute;dure stoqu&eacute;e info.output retourne un pointeur
// de curseur dans : data
$conn = OCILogon("scott","tiger");
$curs = OCINewCursor($conn);
$stmt = OCIParse($conn,"begin info.output(:data); end;");
ocibindbyname($stmt,"data",&$curs,-1,OCI_B_CURSOR);
ociexecute($stmt);
ociexecute($curs);
while (OCIFetchInto($curs,&$data)) {
    var_dump($data);
}
OCIFreeCursor($stmt);
OCIFreeStatement($curs);
OCILogoff($conn);
?>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Utiliser un REF CURSOR issue d'une commande SELECT</title>
      <programlisting>
&lt;?php
print "&lt;HTML>&lt;BODY>";
$conn = OCILogon("scott","tiger");
$count_cursor = "CURSOR(select count(empno) num_emps from emp " .
                "where emp.deptno = dept.deptno) as EMPCNT from dept";
$stmt = OCIParse($conn,"select deptno,dname,$count_cursor");
ociexecute($stmt);
print "&lt;TABLE BORDER=\"1\">";
print "&lt;TR>";
print "&lt;TH>DEPT NAME&lt;/TH>";
print "&lt;TH>DEPT #&lt;/TH>";
print "&lt;TH># EMPLOYEES&lt;/TH>";
print "&lt;/TR>";
while (OCIFetchInto($stmt,&$data,OCI_ASSOC)) {
    print "&lt;TR>";
    $dname  = $data["DNAME"];
    $deptno = $data["DEPTNO"];
    print "&lt;TD>$dname&lt;/TD>";
    print "&lt;TD>$deptno&lt;/TD>";
    ociexecute($data[ "EMPCNT" ]);
    while (OCIFetchInto($data[ "EMPCNT" ],&$subdata,OCI_ASSOC)) {
        $num_emps = $subdata["NUM_EMPS"];
        print  "&lt;TD>$num_emps&lt;/TD>";
    }
    print "&lt;/TR>";
}
print "&lt;/TABLE>";
print "&lt;/BODY>&lt;/HTML>";
OCIFreeStatement($stmt);
OCILogoff($conn);
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocifreestatement">
   <refnamediv>
    <refname>OCIFreeStatement</refname>
    <refpurpose>
      Lib&egrave;re toutes les ressources occup&eacute;es par une commande.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocifreestatement</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocifreestatement</function> retourne TRUE en cas de succ&egrave;s,
     et FALSE en cas d'&eacute;chec.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocifreecursor">
   <refnamediv>
    <refname>OCIFreeCursor</refname>
    <refpurpose>
      Lib&egrave;re toutes les ressources occup&eacute;es par un pointeur.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocifreecursor</function></funcdef>
      <paramdef>int <parameter>stmt</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocifreecursor</function> retourne TRUE en cas de
     succ&egrave;s, et FALSE en cas d'&eacute;chec.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ocifreedesc">
   <refnamediv>
    <refname>OCIFreeDesc</refname>
    <refpurpose>Supprime un descripteur de LOB</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ocifreedesc</function></funcdef>
      <paramdef>object <parameter>lob</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>ocifreedesc</function> retourne TRUE en cas de
     succ&egrave;s, et FALSE en cas d'&eacute;chec.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ociparse">
   <refnamediv>
    <refname>OCIParse</refname>
    <refpurpose>Analyse une requ&ecirc;te.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>ociparse</function></funcdef>
      <paramdef>int <parameter>conn</parameter></paramdef>
      <paramdef>strint <parameter>query</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
      <function>ociparse</function> analyse la requ&ecirc;te
      <parameter>query</parameter> sur la connexion
      <parameter>conn</parameter>, et retourne TRUE si la requ&ecirc;te
      <parameter>query</parameter> est valide, et FALSE, si
      ce n'est pas le cas. <parameter>query</parameter> peut
      &ecirc;tre n'importe quelle requ&ecirc;te SQL.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ocierror">
   <refnamediv>
    <refname>OCIError</refname>
    <refpurpose>Retourne la derni&egrave;re erreur de stmt|conn|global.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>array <function>ocierror</function></funcdef>
     <paramdef>int <parameter><optional>stmt|conn</optional></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>ocierror</function> retourne la derni&egrave;re erreur trouv&eacute;e. Si l'option
     <parameter>stmt|conn</parameter> n'est pas fournie, la derni&egrave;re erreur rencontr&eacute;e
     est retourn&eacute;e. Si aucune erreur n'est trouv&eacute;e, <function>ocierror</function>
     retourne FALSE.
    </simpara>
   </refsect1>
  </refentry>
  <refentry id="function.ociinternaldebug">
   <refnamediv>
    <refname>OCIInternalDebug</refname>
    <refpurpose>Active ou d&eacute;sactive l'affichage des donn&eacute;es de debuggage.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcdef>void <function>ociinternaldebug</function></funcdef>
     <paramdef>int <parameter>onoff</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>ociinternaldebug</function> active l'affichage des informations de
     debuggage. Pour les afficher, mettez onoff &agrave; 0, ou sinon &agrave; 1 pour les cacher.
    </simpara>
   </refsect1>
  </refentry>
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
