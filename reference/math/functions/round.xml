<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 329325 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.round" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>round</refname>
  <refpurpose>Arrondit un nombre à virgule flottante</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>float</type><methodname>round</methodname>
    <methodparam><type>float</type><parameter>val</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>precision</parameter><initializer>0</initializer></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PHP_ROUND_HALF_UP</initializer></methodparam>
   </methodsynopsis>
  <para>
   Retourne la valeur arrondie de <parameter>val</parameter>
   à la précision <parameter>precision</parameter> (nombre de
   chiffres après la virgule). Le paramètre <parameter>precision</parameter>
   peut être négatif ou &null; : c'est sa valeur par défaut.
  </para>
  <para>
   <note>
    <simpara>
     PHP ne gère pas correctement les chaînes telles que 
     <literal>"12 300,2"</literal>, par défaut. Reportez-vous à
     <link linkend="language.types.string.conversion">la conversion de
     chaînes</link>.
    </simpara>
   </note>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>val</parameter></term>
     <listitem>
      <para>
       La valeur à arrondir
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>precision</parameter></term>
     <listitem>
      <para>
       Le nombre optionnel de décimales à arrondir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Utilisez une des constantes suivantes pour spécifier le mode d'arrondi.
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Constante</entry>
           <entry>&Description;</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_ROUND_HALF_UP</constant></entry>
           <entry>
            Arrondit <parameter>val</parameter> à une précision <parameter>precision</parameter>
            supérieure de décimal en s'éloignant de zéro lorsqu'il est à mi-chemin. Par exemple, 1.5 deviendra 2 et -1.5
            deviendra -2.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_ROUND_HALF_DOWN</constant></entry>
           <entry>
            Arrondit <parameter>val</parameter> à une précision <parameter>precision</parameter>
            inférieure de décimal en s'approchant de zéro lorsqu'il est à mi-chemin. Par exemple, 1.5 deviendra 1 et
            -1.5 deviendra -1.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_ROUND_HALF_EVEN</constant></entry>
           <entry>
            Arrondit <parameter>val</parameter> à la précision <parameter>precision</parameter>
            de décimal vers la prochaine valeur paire.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_ROUND_HALF_ODD</constant></entry>
           <entry>
            Arrondit <parameter>val</parameter> à la précision <parameter>precision</parameter>
            de décimal vers la prochaine valeur impaire.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La valeur arrondie
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>round</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo round(3.4);         // 3
echo round(3.5);         // 4
echo round(3.6);         // 4
echo round(3.6, 0);      // 4
echo round(1.95583, 2);  // 1.96
echo round(1241757, -3); // 1242000
echo round(5.045, 2);    // 5.05
echo round(5.055, 2);    // 5.06
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec le paramètre <parameter>mode</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
echo round(9.5, 0, PHP_ROUND_HALF_UP);   // 10
echo round(9.5, 0, PHP_ROUND_HALF_DOWN); // 9
echo round(9.5, 0, PHP_ROUND_HALF_EVEN); // 10
echo round(9.5, 0, PHP_ROUND_HALF_ODD);  // 9

echo round(8.5, 0, PHP_ROUND_HALF_UP);   // 9
echo round(8.5, 0, PHP_ROUND_HALF_DOWN); // 8
echo round(8.5, 0, PHP_ROUND_HALF_EVEN); // 8
echo round(8.5, 0, PHP_ROUND_HALF_ODD);  // 9
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Exemple avec les paramètres <parameter>mode</parameter> et <parameter>precision</parameter></title>
    <programlisting role="php">
<![CDATA[
<?phpe
/* Utilisation de PHP_ROUND_HALF_UP avec une précision d'une décimale */
echo round( 1.55, 1, PHP_ROUND_HALF_UP);   //  1.6
echo round( 1.54, 1, PHP_ROUND_HALF_UP);   //  1.5
echo round(-1.55, 1, PHP_ROUND_HALF_UP);   // -1.6
echo round(-1.54, 1, PHP_ROUND_HALF_UP);   // -1.5

/* Utilisation de PHP_ROUND_HALF_DOWN avec une précision d'une décimale */
echo round( 1.55, 1, PHP_ROUND_HALF_DOWN); //  1.5
echo round( 1.54, 1, PHP_ROUND_HALF_DOWN); //  1.5
echo round(-1.55, 1, PHP_ROUND_HALF_DOWN); // -1.5
echo round(-1.54, 1, PHP_ROUND_HALF_DOWN); // -1.5

/* Utilisation de PHP_ROUND_HALF_EVEN avec une précision d'une décimale */
echo round( 1.55, 1, PHP_ROUND_HALF_EVEN); //  1.6
echo round( 1.54, 1, PHP_ROUND_HALF_EVEN); //  1.5
echo round(-1.55, 1, PHP_ROUND_HALF_EVEN); // -1.6
echo round(-1.54, 1, PHP_ROUND_HALF_EVEN); // -1.5

/* Utilisation de PHP_ROUND_HALF_ODD avec une précision d'une décimale */
echo round( 1.55, 1, PHP_ROUND_HALF_ODD);  //  1.5
echo round( 1.54, 1, PHP_ROUND_HALF_ODD);  //  1.5
echo round(-1.55, 1, PHP_ROUND_HALF_ODD);  // -1.5
echo round(-1.54, 1, PHP_ROUND_HALF_ODD);  // -1.5
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Le paramètre <parameter>mode</parameter> a été ajouté.
       </entry>
      </row>
      <row>
       <entry>5.2.7</entry>
       <entry>
        Le fonctionnement interne de <function>round</function>
        a été modifié afin d'être conforme au standard C99.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ceil</function></member>
    <member><function>floor</function></member>
    <member><function>number_format</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->