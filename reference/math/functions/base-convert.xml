<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.10 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry id="function.base-convert">
 <refnamediv>
  <refname>base_convert</refname>
  <refpurpose>Convertit un nombre entre des bases arbitraires</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>string</type><methodname>base_convert</methodname>
    <methodparam><type>string</type><parameter>number</parameter></methodparam>
    <methodparam><type>int</type><parameter>frombase</parameter></methodparam>
    <methodparam><type>int</type><parameter>tobase</parameter></methodparam>
   </methodsynopsis>
  <para>
   Retourne une chaîne contenant l'argument <parameter>number</parameter>
   représenté dans la base <parameter>tobase</parameter>. La base de
   représentation de <parameter>number</parameter> est donnée par
   <parameter>frombase</parameter>. <parameter>frombase</parameter> et
   <parameter>tobase</parameter> doivent être compris entre 2 et 36 inclus.
   Les chiffres supérieurs à 10 des bases supérieures à 10 seront représentés
   par les lettres de A à Z, avec A = 10 et Z = 36.
  </para>
  <warning>
   <simpara>
    <function>base_convert</function> perdra la précision sur les grands nombres dû
    à la propriété interne des types "double" et "float".
    Lire la section sur les
    <link linkend="language.types.float">nombres à virgule flottante</link> de
    ce manuel pour plus d'informations.
   </simpara>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>number</parameter></term>
     <listitem>
      <para>
       Le nombre à convertir
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>frombase</parameter></term>
     <listitem>
      <para>
       La base <parameter>number</parameter> dans laquelle il est
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>tobase</parameter></term>
     <listitem>
      <para>
       La base dans laquelle on doit convertir le nombre
       <parameter>number</parameter>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Le nombre <parameter>number</parameter> converti dans la base <parameter>tobase</parameter>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>base_convert</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$hexadecimal = 'A37334';
echo base_convert($hexadecimal, 16, 2);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
101000110111001100110100
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>intval</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->