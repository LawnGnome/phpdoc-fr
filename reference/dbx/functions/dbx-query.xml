<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.16 $ -->
<!-- EN-Revision: 1.16 Maintainer: yannick Status: ready -->
  <refentry id="function.dbx-query">
   <refnamediv>
    <refname>dbx_query</refname>
    <refpurpose>Envoie une requête et lit tous les résultats DBX</refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>object</type><methodname>dbx_query</methodname>
      <methodparam><type>object</type><parameter>link_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>sql_statement</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
    <simpara>
      <function>dbx_query</function> retourne un objet dbx_result_object ou 
     &one;  en cas de succès (un objet de résultat
     ne sera retourné que pour les requêtes SQL qui retournent un
     résultat), ou 0 en cas d'erreur. L'objet résultant n'est retourné que si la requête
     donnée par <parameter>sql_statement</parameter> produit un jeu d'enregistrements.
     (i.e. une requête SELECT, même si le résultat est vide). La requête
     est exécuté sur la connexion <parameter>link_identifier</parameter>.
    </simpara>
    <example>
     <title>Comment gérer la valeur retournée par <function>dbx_query</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$link   = dbx_connect(DBX_ODBC, "", "db", "username", "password")
    or die("Impossible de se connecter");

$result = dbx_query($link, 'SELECT id, parentid, description FROM table');

if ( is_object($result) ) {
    // ... Faire quelque chose d'utile ici
    // premièrement, afficher les noms des champs et leurs types
    // et tracer un tableau avec les valeurs retournées
} else {
    exit("La requête a échoué");
}

dbx_close($link);
?>
]]>
     </programlisting>
    </example>
    <para>     
     Le paramètre <parameter>flags</parameter> sert à contrôler la quantité
     d'informations retournée. Il peut être n'importe quelle
     combinaisons par l'opérateur OR des constantes ci-après. Les constantes
     remplacent la configuration du &php.ini;.
     <variablelist>
      <varlistentry>
       <term>
        <constant>DBX_RESULT_INDEX</constant>
       </term>
       <listitem>
        <simpara>
         Ce paramètre est <emphasis>toujours</emphasis> activé, 
         c'est à dire que l'objet retourné dispose du membre 
         <property>data</property> qui est un tableau à deux dimensions,
         indexé numériquement. Par exemple, dans l'expression
         <literal>data[2][3]</literal> <literal>2</literal> représente
         le numéro de ligne et <literal>3</literal> représente 
         le numéro de colonne. Les premières lignes et colonnes 
         sont indexées à 0.
        </simpara>
        <simpara>
         Si <constant>DBX_RESULT_ASSOC</constant> est aussi spécifié, l'objet
         retourné contient en plus les informations liées à 
         <constant>DBX_RESULT_INFO</constant>, même s'il n'a pas été spécifié.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <constant>DBX_RESULT_INFO</constant>
       </term>
       <listitem>
        <simpara>
         Cette option fournit des informations sur les colonnes, comme
         les noms des champs et leur type.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <constant>DBX_RESULT_ASSOC</constant>
       </term>
       <listitem>
        <simpara>
         Cette option fait que la valeur des champs peut être accessible
         avec le nom de la colonne, utilisé comme clé dans le tableau du
         membre <property>data</property>.
        </simpara>
        <simpara>
         Les résultats ainsi associés sont des références sur les valeurs
         identifiées par les index numériques, ce qui fait que modifier
         <literal>data[0][0]</literal> fait que 
         <literal>data[0]['nom_de_la_premiere_colonne']</literal> sera aussi
         modifié.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <constant>DBX_RESULT_UNBUFFERED</constant> (CVS uniquement)
       </term>
       <listitem>
        <simpara>
         Cet option ne crée pas de propriété <property>data</property> et 
         la propriété <property>rows</property> sera initialement
         positionnée à 0. Utilisez ce flag pour des jeux d'enregistrements importants
         et utilisez <function>dbx_fetch_row</function> pour retrouver le résultat
         ligne par ligne.
        </simpara>
        <simpara>
         <function>dbx_fetch_row</function> retournera les lignes qui se conforment
         au flag de la requête. Par ailleurs, cela mettra à jour les lignes à chaque 
         appel de la fonction.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <constant>DBX_COLNAMES_UNCHANGED</constant> (disponible depuis &php; 4.3.0)
       </term>
       <listitem>
        <simpara>
         La casse du nom des colonnes retournées ne sera pas modifiée.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <constant>DBX_COLNAMES_UPPERCASE</constant> (disponible depuis &php; 4.3.0)
       </term>
       <listitem>
        <simpara>
         Les noms de colonnes seront mis en majuscules.
        </simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <constant>DBX_COLNAMES_LOWERCASE</constant> (disponible depuis &php; 4.3.0)
       </term>
       <listitem>
        <simpara>
         Les noms de colonnes seront mis en minuscules.
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
     Notez que <constant>DBX_RESULT_INDEX</constant> est toujours active,
     indépendamment de la valeur de <parameter>flags</parameter>. Cela signifie
     que seules les combinaisons suivantes sont utiles : 
     <itemizedlist>
      <listitem>
       <simpara>
        <constant>DBX_RESULT_INDEX</constant>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <constant>DBX_RESULT_INDEX</constant> |
        <constant>DBX_RESULT_INFO</constant>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <constant>DBX_RESULT_INDEX</constant> |
        <constant>DBX_RESULT_INFO</constant> |
        <constant>DBX_RESULT_ASSOC</constant> - c'est la valeur par défaut,
        si <parameter>flags</parameter> est omis.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Un objet dbx_result_object a 5 membres (éventuellement 4, suivant
     les valeurs de <parameter>flags</parameter>) : 
     <variablelist>
      <varlistentry>
       <term>
        <property>handle</property>
       </term>
       <listitem>
        <para>
         Ceci est une ressource représentant la connexion à la 
         base de données, et il peut être utilisé (si nécessaire) avec
         les fonctions spécialisées de la base.
         <example>
          <title>Exemple avec <function>dbx_query</function></title>
          <programlisting role="php">
<![CDATA[
<?php
$result = dbx_query($link, "SELECT id FROM table");
mysql_field_len($result->handle, 0);
?>
]]>
          </programlisting>
         </example>
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <property>cols</property> et <property>rows</property>
       </term>
       <listitem>
        <para>
         Ces deux membres contiennent respectivement 
         le nombre de colonnes et de lignes.
         <example>
          <title>Nombre de lignes et colonnes avec <function>dbx_query</function></title>
          <programlisting role="php">
<![CDATA[
<?php
$result = dbx_query ($link, 'SELECT id FROM table');
echo $result->rows; // nombre de lignes
echo $result->cols; // nombre de champs
?>
]]>
          </programlisting>
         </example>
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <property>info</property> (optionnel)
       </term>
       <listitem>
        <simpara>
         Ce membre est retourné uniquement si <constant>DBX_RESULT_INFO</constant> ou
         <constant>DBX_RESULT_ASSOC</constant> sont spécifiés dans le paramètre
         <parameter>flags</parameter>. C'est un tableau à deux dimensions,
         avec deux lignes (<literal>name</literal> et
         <literal>type</literal>) pour lire les informations de colonnes.
        </simpara>
        <example>
         <title>Listes les types et noms de colonnes avec dbplus</title>
         <programlisting role="php">
<![CDATA[
<?php
$result = dbx_query ($link, 'SELECT id FROM table',
                     DBX_RESULT_INDEX | DBX_RESULT_INFO);

for ($i = 0; $i < $result->cols; $i++ ) {
    echo $result->info['name'][$i] . "\n";
    echo $result->info['type'][$i] . "\n";  
}
?>
]]>
         </programlisting>
        </example>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <property>data</property>
       </term>
       <listitem>
        <simpara>
         Ce membre contient les résultats obtenus, possiblement associés
         avec le nom de colonne, en fonction de la valeur du paramètre 
         <parameter>flags</parameter>. Si <constant>DBX_RESULT_ASSOC</constant> 
         est activé, il est possible d'utiliser aussi
         <literal>$result->data[2]["nom_de_la_colonne"]</literal>.
        </simpara>
        <example>
         <title>Afficher le contenu d'une base avec dbplus</title>
         <programlisting role="php">
<![CDATA[
<?php
$result = dbx_query ($link, 'SELECT id, parentid, description FROM table');

echo "<table>\n";
foreach ( $result->data as $row ) {
    echo "<tr>\n";
    foreach ( $row as $field ) {
        echo "<td>$field</td>";
    }
    echo "</tr>\n";
}
echo "</table>\n";
?>
]]>
         </programlisting>
        </example>
        <example>
         <title>Comment utiliser les requêtes UNBUFFERED</title>
         <programlisting role="php">
<![CDATA[
<?php

$result = dbx_query ($link, 'SELECT id, parentid, description FROM table', DBX_RESULT_UNBUFFERED);

echo "<table>\n";
while ($row = dbx_fetch_row($result)) {
    echo "<tr>\n";
    foreach ($row as $field) {
        echo "<td>$field</td>";
    }
    echo "</tr>\n";
}
echo "</table>\n";

?>
]]>
         </programlisting>
        </example>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <note>
     <para>
      Reportez-vous aussi à la documentation de la base de données que vous
      utilisez.
     </para>
     <para>
      Les noms des colonnes pour les requêtes sur des bases de données Oracle sont
      retournés en minuscules.
     </para>
    </note>
    <para>
     Voir aussi 
     <function>dbx_fetch_row</function>,
     <function>dbx_escape_string</function> et
     <function>dbx_connect</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
