<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.14 $ -->
<!-- EN-Revision: 1.12 Maintainer: yannick Status: ready -->
<!-- Purpose: compression -->
<!-- Membership: bundled, pecl -->
<!-- Reviewed: no -->

<reference id="ref.zip">
 <title>Fonctions ZIP</title>
 <titleabbrev>Zip</titleabbrev>

 <partintro>
  <section id="zip.intro">
   &reftitle.intro;
   <para>
    Ce module vous permet de lire et d'écrire des archives compressées ZIP
    ainsi que les fichiers contenus dans ces archives.
   </para>
  </section>

  <section id="zip.requirements">
   &reftitle.required;
   <section>
    <title>Interne à &php; 4</title>
    <para>
     La version initiale est fournie avec &php; 4 et est disponible
     dans PECL depuis la version 1.0, voir <ulink url="&url.pecl.package;zip">
      &url.pecl.package;zip</ulink>. Elle ne peut que lire les archives ZIP.
    </para>
    <para>
     Cette version utilisent les fonctions de la bibliothèque
     <ulink url="&url.zziplib;">ZZIPlib</ulink> de Guido Draheim.
     Vous devez avoir d'installer la bibliothèque ZZIPlib en version &gt;= 0.10.6.
    </para>
   </section>

   <section>
    <title>PECL et &php; 5.2 ou suivant</title>
    <para>
     La nouvelle version est fournie avec &php; 5.2.0 ou suivant et est disponible
     dans PECL depuis la version 1.1.0 ou suivant. Elle ne nécessite pas
     de bibliothèque externe. Elle peut lire et écrire des archives ZIP
     lorsqu'elle est utilisée avec &php; 5.1 ou suivant et elle ne peut
     que les lire lorsqu'elle est utilisée avec &php; 4.
    </para>
   </section>
  </section>

  &reference.zip.configure;

  <section id="zip.configuration">
   &reftitle.runtime;
   &no.config;
  </section>

  <section id="zip.resources">
   &reftitle.resources;
   <para>
    Il y a deux types de ressources utilisées dans le module ZIP.
    La première représente le dossier ZIP pour l'archive ZIP, la seconde,
    l'entrée ZIP pour les entrées de l'archive.
   </para>
  </section>

  &reference.zip.constants;

  <section id="zip.examples">
   &reftitle.examples;
   <example>
    <title>Création d'une archive ZIP</title>
    <programlisting role="php">
<![CDATA[
<?php

$zip = new ZipArchive();
$filename = "./test112.zip";

if ($zip->open($filename, ZIPARCHIVE::CREATE)!==TRUE) {
    exit("cannot open <$filename>\n");
}

$zip->addFromString("testfilephp.txt" . time(), "#1 Ceci est un test, ajouté en tant que fichier testfilephp.txt.\n");
$zip->addFromString("testfilephp2.txt" . time(), "#2 Ceci est un test, ajouté en tant que fichier testfilephp2.txt.\n");
$zip->addFile($thisdir . "/too.php","/testfromfile.php");
echo "numfiles: " . $zip->numFiles . "\n";
echo "status:" . $zip->status . "\n";
$zip->close();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Affiche les détails de l'archive et liste son contenu</title>
    <programlisting role="php">
<![CDATA[
<?php
$za = new ZipArchive();

$za->open('test_with_comment.zip');
print_r($za);
var_dump($za);
echo "numFiles: " . $za->numFiles . "\n";
echo "status: " . $za->status  . "\n";
echo "statusSys: " . $za->statusSys . "\n";
echo "filename: " . $za->filename . "\n";
echo "comment: " . $za->comment . "\n";

for ($i=0; $i<$za->numFiles;$i++) {
    echo "index: $i\n";
    print_r($za->statIndex($i));
}
echo "Fichier numéro : " . $za->numFiles . "\n";
?>
 ]]>
    </programlisting>
   </example>
   <example>
    <title>Gestionnaire de flux ZIP, lit les méta-informations d'OpenOffice</title>
    <programlisting role="php">
<![CDATA[
<?php
$reader = new XMLReader();

$reader->open('zip://' . dirname(__FILE__) . '/test.odt#meta.xml');
$odt_meta = array();
while ($reader->read()) {
if ($reader->nodeType == XMLREADER::ELEMENT) {
    $elm = $reader->name;
} else {
    if ($reader->nodeType == XMLREADER::END_ELEMENT && $reader->name == 'office:meta') {
        break;
    }
    if (!trim($reader->value)) {
        continue;
    }
    $odt_meta[$elm] = $reader->value;
}
}
print_r($odt_meta);
?>
]]>
    </programlisting>
   </example>
   <para>
    Cet exemple utilise l'ancienne API (&php; 4), il ouvre une archive ZIP,
    lit chaque fichier de l'archive et affiche leurs contenus.
    L'archive <filename>test2.zip</filename> utilisé dans cet exemple
    est une des archives de test des sources de ZZIPlib.
   </para>
   <example>
    <title>Exemple d'utilisation Zip</title>
    <programlisting role="php">
<![CDATA[
<?php

$zip = zip_open("/tmp/test2.zip");

if ($zip) {
    while ($zip_entry = zip_read($zip)) {
        echo "Nom :               " . zip_entry_name($zip_entry) . "\n";
        echo "Taille du fichier :    " . zip_entry_filesize($zip_entry) . "\n";
        echo "Taille compressée :    " . zip_entry_compressedsize($zip_entry) . "\n";
        echo "Méthode de compression : " . zip_entry_compressionmethod($zip_entry) . "\n";

        if (zip_entry_open($zip, $zip_entry, "r")) {
            echo "Contenu du fichier :\n";
            $buf = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));
            echo "$buf\n";

            zip_entry_close($zip_entry);
        }
        echo "\n";

    }

    zip_close($zip);
}
?>
]]>
    </programlisting>
   </example>
  </section>
 </partintro>
 &reference.zip.functions;
 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->