<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.3 Maintainer: yannick Status: ready -->
<section id="outcontrol.configuration">
 &reftitle.runtime;
 &extension.runtime;
 <para>
 <table>
  &ini.table.title;
  <tgroup cols="3">
   <thead>
    &ini.table.top;
   </thead>
    <tbody>
    <row>
     <entry>output_buffering</entry>
     <entry>"0"</entry>
     <entry>PHP_INI_PERDIR|PHP_INI_SYSTEM</entry>
    </row>
    <row>
     <entry>output_handler</entry>
     <entry>NULL</entry>
     <entry>PHP_INI_PERDIR|PHP_INI_SYSTEM</entry>
    </row>
    <row>
     <entry>implicit_flush</entry>
     <entry>"0"</entry>
     <entry>PHP_INI_PERDIR|PHP_INI_SYSTEM</entry>
    </row>
    </tbody>
   </tgroup>
  </table>
 &ini.table.bottom;
 </para>
 &ini.descriptions.title;
 <para>
 <variablelist>
  <varlistentry id="ini.output-buffering">
   <term>
    <parameter>output_buffering</parameter>
    <type>booléen</type>/<type>integer</type>
   </term>
   <listitem>
    <para>
     Vous pouvez activer la bufferisation de sortie pour tous les fichiers
     avec cette directive, en lui passant la valeur de <literal>On</literal>.
     Si vous souhaitez limiter la taille du buffer à une certaine taille,
     vous pouvez alors indiquer un nombre maximum d'octets à la place de 
     <literal>On</literal>. Par exemple, <literal>output_buffering=4096</literal>).
    </para>
   </listitem>
  </varlistentry>

  <varlistentry id="ini.output-handler">
   <term>
    <parameter>output_handler</parameter>
    <type>string</type>
   </term>
   <listitem>
    <para>
     Vous pouvez rediriger le résultat de tous vos scripts à une fonction
     avant leur envoi au navigateur. Par exemple, si vous configurez
     output_handler à <function>mb_output_handler</function>, l'encodage
     des caractères sera adaptée de manière transparente. Configurer
     une telle fonction active automatiquement la bufferisation de sortie.
    </para>
    <note>
     <para>
      Vous ne pouvez pas utiliser simultanément <function>mb_output_handler</function> avec
      <function>ob_inconv_handler</function> et non plus 
      <function>ob_gzhandler</function> et
      <link linkend="ini.zlib.output-compression">zlib.output_compression</link>.
     </para>
    </note>
   </listitem>
  </varlistentry>

  <varlistentry id="ini.implicit-flush">
   <term>
    <parameter>implicit_flush</parameter>
    <type>booléen</type>
   </term>
   <listitem>
    <para>
     &false; par défaut. En changeant cette valeur pour &true; vous indiquez
     à &php; que le buffer de sortie doit être vidé automatiquement après
     chaque fonction d'affichage. Cela revient à appeler la fonction
     <function>flush</function> après chaque appel à 
     <function>print</function> ou <function>echo</function> et pour tous
     les blocs <literal>HTML</literal>.
    </para>
    <para>
     Lorsque vous utilisez &php; en environnement web, activer cette
     option a de sérieuse implications et généralement, cela n'est conseillé
     que pour les débogage. Cette valeur est par défaut à &true; lorsque &php;
     fonctionne en mode <literal>CLI SAPI</literal>.
    </para>
    <para>
     Voir aussi 
     <function>ob_implicit_flush</function>.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 </para>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

