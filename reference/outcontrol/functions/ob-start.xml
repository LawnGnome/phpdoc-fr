<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.15 $ -->
<!-- EN-Revision: 1.14 Maintainer: yannick Status: ready -->
  <refentry id="function.ob-start">
   <refnamediv>
    <refname>ob_start</refname>
    <refpurpose>Enclenche la bufferisation de sortie</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <methodsynopsis>
      <type>bool</type><methodname>ob_start</methodname>
      <methodparam choice="opt"><type>callback</type><parameter>output_callback</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>erase</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ob_start</function> démarre la bufferisation de sortie.
     Tant qu'elle est enclenchée, aucune donnée, hormis
     les en-têtes, n'est envoyée au navigateur, mais
     temporairement mise en buffer.
    </para>
    <para>
     Le contenu de ce buffer peut être copié dans une chaîne
     avec la fonction <function>ob_get_contents</function>.  Pour afficher le
     contenu de ce buffer, utilisez <function>ob_end_flush</function>.  Au
     contraire, <function>ob_end_clean</function> effacera le contenu de ce buffer.
    </para>
    <para>
     Une fonction optionnelle de callback peut être spécifiée
     en troisième argument. <function>ob_start</function> prend une
     chaîne comme paramètre, et retourne une chaîne.
     Elle sera appelée par <function>ob_end_flush</function> ou
     lorsque le buffer sera envoyé au navigateur à la fin du script et
     recevra le contenu du buffer de sortie. Lorsque la fonction
     <parameter>output_callback</parameter> est appelée,
     elle doit retourner un nouveau contenu pour le buffer de sortie :
     celui-ci sera envoyé au navigateur. Si 
     <parameter>output_callback</parameter>
     n'est pas une fonction accessible, la fonction retournera &false;.
     Si la fonction de callback a deux paramètres, le second est composé
     du champs bits constitué par 
     <constant>PHP_OUTPUT_HANDLER_START</constant>,
     <constant>PHP_OUTPUT_HANDLER_CONT</constant> et
     <constant>PHP_OUTPUT_HANDLER_END</constant>.
    </para>
    <note>
     <para>
      En &php; 4.0.4, <function>ob_gzhandler</function> a été
      introduit pour faciliter l'envoi de fichier compressé
      avec gz aux navigateurs web qui supportent les pages
      compressées. <function>ob_gzhandler</function>
      détermine le type d'encodage accepté par un navigateur,
      et retourne le contenu le plus adéquat.
     </para>
    </note>
    <note>
     <para>
      Avant &php; 4.3.2, cette fonction ne retournait pas &false; 
      dans le cas où
      <parameter>output_callback</parameter> ne pouvait être exécuté.
     </para>
    </note>
    <para>
     Si le paramètre optionnel <parameter>chunk_size</parameter> est passé,
     la fonction de callback est appelé à chaque nouvelle ligne après 
     <parameter>chunk_size</parameter> octets d'affichage.
    </para>
    <para>
     Si le paramètre optionnel <parameter>erase</parameter> est défini à
     &false;, le buffer ne sera pas effacé tant que le script ne sera pas terminé
     (depuis &php; 4.3.0).
    </para>
    <para>
     Les buffers de sortie sont gérés par pile,
     c'est-à-dire que vous pouvez appeler plusieurs fois
     <function>ob_start</function> simultanément.
     Assurez-vous que vous appelez <function>ob_end_flush</function>
     suffisamment souvent. Si plusieurs fonctions de callback
     sont actives, les contenus seront filtrés
     séquentiellement, dans l'ordre d'emboîtement.
    </para>
    <para>
     <function>ob_end_clean</function>,
     <function>ob_end_flush</function>, <function>ob_clean</function>,
     <function>ob_flush</function> et <function>ob_start</function>
     ne doivent pas être appelés depuis une fonction de callback.
     Si vous les appelez depuis une fonction de collback, le comportement
     ne sera pas défini. Si vous voulez effacer le contenu du buffer, retournez ""
     (une chaîne vide) comme fonction de callback.
    </para>
    <example>
     <title>Exemple de gestion de sortie avec fonction utilisateur</title>
     <programlisting role="php">
<![CDATA[
<?php

function callback($buffer)
{
    // remplace toutes les pommes par des carottes
    return (ereg_replace("pommes de terre", "carottes", $buffer));
}

ob_start("callback");

?>

<html>
 <body>
 <p>C'est comme comparer des carottes et des pommes de terre.</p>
 </body>
</html>

<?php

ob_end_flush();

?>
]]>
     </programlisting>
     &example.outputs;
      <programlisting role="php">
<![CDATA[
<html>
 <body>
  <p>C'est comme comparer des carottes et des carottes.</p>
 </body>
</html>
]]>
     </programlisting>
    </example>
    <para>
     Voir aussi
     <function>ob_get_contents</function>,
     <function>ob_end_flush</function>,
     <function>ob_end_clean</function>,
     <function>ob_implicit_flush</function>,
     <function>ob_gzhandler</function>,
     <function>ob_iconv_handler</function>,
     <function>mb_output_handler</function> et
     <function>ob_tidyhandler</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
