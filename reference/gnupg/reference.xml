<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.5 Maintainer: yannick Status: ready -->
<!-- Purpose: utilspec.nontext -->
<!-- Membership: pecl -->
<!-- State: beta -->
<!-- Reviewed: no -->

<reference id="ref.gnupg">
 <title>gnupg &Functions;</title>
 <titleabbrev>gnupg</titleabbrev>

 <partintro>
  <section id="gnupg.intro">
   &reftitle.intro;
   <para>
    Ce module vous permet d'interagir avec <ulink
    url="http://www.gnupg.org/">gnupg</ulink>.
    &warn.experimental;
   </para>
  </section>

  <section id="gnupg.requirements">
   &reftitle.required;
   <para>
    L'extension gnupg requiert &php; 4.3.
    Pour utiliser cette extension dans le style orienté objet, &php; 5 est
    requis.
   </para>
   <para>
    Cette extension requière la <ulink
    url="http://www.gnupg.org/(en)/download/index.html#gpgme">bibliothèque
    gpgme</ulink>
   </para>
  </section>

  &reference.gnupg.configure;

  &reference.gnupg.constants;

  <section id="gnupg.notes">
   &reftitle.notes;
   <para>
    Cette extension utilise le trousseau de l'usager courant. Ce trousseau est
    normalement situé dans ~./.gnupg/.
    Pour spécifier un emplacement différent, enregistrer le chemin de votre
    trousseau dans la variable d'environnement GNUPGHOME. Voyez <link
    linkend='function.putenv'>putenv</link> pour plus d'information pour
    savoir comment faire cela.
   </para>
   <para>
    Certaines fonctions requièrent la spécification d'une clé. Cette
    spécification peut être quelque chose qui réfère à une clé unique (userid,
    key-id, fingerprint, ...).
    Cette documentation utilise les fingerprint dans tous les exemples.
   </para>
  </section>

  <section id="gnupg.keylistiterator">
   <title>keylistiterator</title>
   <para>
    Cette extension vient aussi avec un Itérateur pour votre trousseau.
    <programlisting role="php">
<![CDATA[
<?php
// Crée un nouvel itérateur pour lister toutes les clés publiques qui
// correspondent à 'exemple'
$iterator = new gnupg_keylistiterator("exemple");
foreach($iterator as $fingerprint => $userid){
    echo $fingerprint." -> ".$userid."\n";
}
?>
]]>
    </programlisting>
   </para>
  </section>

  <section id="gnupg.examples">
   &reftitle.examples;
   <para>
    Cet exemple signera en clair un texte donné.
   </para>
   <example>
    <title>Exemple avec gnupg clearsign (Style procédural)</title>
    <programlisting role="php">
<![CDATA[
<?php
// initialise gnupg
$res = gnupg_init();
// pas vraiment besoin. Clearsign est par défaut
gnupg_setsignmode($res,GNUPG_SIG_MODE_CLEAR);
// ajoute une clé avec une passphrase 'test' pour signer
gnupg_addsignkey($res,"8660281B6051D071D94B5B230549F9DC851566DC","test");
// signer
$signed = gnupg_sign("juste un test");
echo $signed;
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Exemple avec gnupg clearsign (Style orienté objet)</title>
    <programlisting role="php">
<![CDATA[
<?php
// nouvelle classe
$gnupg = new gnupg();
// pas vraiment besoin. Clearsign est par défaut
$gnupg->setsignmode(gnupg::SIG_MODE_CLEAR);
// ajoute une clé avec une passphrase 'test' pour signer
$gnupg->addsignkey("8660281B6051D071D94B5B230549F9DC851566DC","test");
// signer
$signed = gnupg_sign($res,"just a test");
echo $signed;
?>
]]>
    </programlisting>
   </example>
  </section>
 </partintro>

 &reference.gnupg.functions;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->