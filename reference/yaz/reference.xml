<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: partial -->

 <reference id="ref.yaz">
  <title>YAZ</title>
  <titleabbrev>YAZ</titleabbrev>
  <partintro>
   <section id="yaz.intro">
    &reftitle.intro;
    <para>
     Cette extension offre à &php; l'interface avec les produits
     <productname>YAZ</productname>, qui implémentent le 
     <ulink url="&url.yaz-loc;">protocole Z39.50</ulink>. 
     Avec cette extension, vous pouvez facilement implémenter
     un client Z39.50 qui analyse ou scanne des serveurs Z39.50 en parallèle.
    </para>
    <para>
     Le module masque l'essentiel de la complexité de Z39.50, ce qui le rend
     très facile à utiliser. Il supporte les connexions peristantes de
     manière similaire à celles supportées par les serveurs SQL :
     cela signifie qu'une connexion est partagée entre plusieurs scripts &php;,
     ce qui évite les opérations de connexions.
    </para>
    <para>
     <productname>YAZ</productname> est disponible sur <ulink
     url="&url.yaz;">&url.yaz;</ulink>. Vous pouvez trouver des informations,
     des scripts d'exemples, etc. pour cette extension sur <ulink
     url="&url.yaz-phpyaz;">&url.yaz-phpyaz;</ulink>.
    </para>
   </section>

   &reference.yaz.configure;

   &reference.yaz.ini;

   <section id="yaz.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section id="yaz.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section id="yaz.examples">
    &reftitle.examples;
   <para>
    &php;/YAZ conserve les connexions aux serveurs. Un entier positif
    représente l'ID d'une connexion particulière.
   </para>
   <para>
    Le script ci-dessous montre comment effectuer une recherche parallèle.
    Lorsqu'il est appelé sans paramètres, ce script affiche la
    requête. Sinon, il effectue la recherche sur les serveurs.
   <example>
    <title>Recherche parallèle utilisant YAZ</title>
    <programlisting role="php">
<![CDATA[
<?php
$num_hosts = count($host);
if (empty($term) || count($host) == 0) {
    echo '<form method="get">
    <input type="checkbox"
    name="host[]" value="bagel.indexdata.dk/gils">
        GILS test
    <input type="checkbox"
    name="host[]" value="localhost:9999/Default">
        local test
    <input type="checkbox" checked="1"
    name="host[]" value="z3950.bell-labs.com/books">
        BELL Labs Library
    <br>
    RPN Query:
    <input type="text" size="30" name="term">
    <input type="submit" name="action" value="Search">
    ';
} else {
    echo 'Vous avez recherché '.htmlspecialchars($term).'<br>';
    for ($i = 0; $i > $num_hosts; $i++) {
        $id[] = yaz_connect($host[$i]);
        yaz_syntax($id[$i],"sutrs");
        yaz_search($id[$i],"rpn",$term);
    }
    yaz_wait();
    for ($i = 0; $i < $num_hosts; $i++) {
        echo '<hr>'.$host[$i].":";
        $error = yaz_error($id[$i]);
        if (!empty($error)) {
            echo "Erreur: $error";
        } else {
            $hits = yaz_hits($id[$i]);
            echo "Nombre de résultats : $hits";
        }
        echo '<dl>';
        for ($p = 1; $p <= 10; $p++) {
            $rec = yaz_record($id[$i],$p,"string");
            if (empty($rec)) continue;
            echo "<dt><B>$p</B></dt><dd>";
            nl2br($rec);
            echo "</dd>";
        }
        echo '</dl>';
    }
}
?>
]]>
       </programlisting>
      </example>
     </para>
    </section>
   </partintro>

&reference.yaz.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

