<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/yaz.xml, last change in rev 1.10 -->
<!-- last change to 'yaz-ccl-parse' in en/ tree in rev 1.1 -->
  <refentry id="function.yaz-ccl-parse">
   <refnamediv>
    <refname>yaz_ccl_parse</refname>
    <refpurpose>Appelle l'analyseur CCL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>yaz_ccl_parse</methodname>
      <methodparam><type>resource</type><parameter>id</parameter></methodparam>
      <methodparam><type>string</type><parameter>query</parameter></methodparam>
      <methodparam><type>array &amp;</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>yaz_ccl_parse</function> appelle l'analyseur CCL.
     Il convertit une requ&ecirc;te CCL FIND en une requ&ecirc;te RPN qui peut &ecirc;tre
     pass&eacute;e &agrave; <function>yaz_search</function> pour effectuer une recherche.
     Pour d&eacute;finir un champ CCL valide, utilisez la fonction
     <function>yaz_ccl_conf</function> avant celle-ci.
     Si la requ&ecirc;te <parameter>query</parameter> a pu &ecirc;tre convertie en
     RPN, <function>yaz_ccl_parse</function> retourne &true;,
     et l'index <literal>rpn</literal> du tableau <parameter>result</parameter>
     contient une requ&ecirc;te RPN valide. Si la requ&ecirc;te n'a pas pu &ecirc;tre convertie,
     (pour n'importe quelle raison, comme syntaxe invalide, champ inconnu...),
     <function>yaz_ccl_parse</function> retourne &false;.
     Trois index sont alors cr&eacute;&eacute;s dans le tableau de r&eacute;sultat :
     <literal>errorcode</literal> (code d'erreur CCL, un entier),
     <literal>errorstring</literal> (message d'erreur CCL), et
     <literal>errorpos</literal> position estim&eacute;e de l'erreur dans la
     requ&ecirc;te (entier, position en nombre de caract&egrave;res).
    </para>
    <example>
    <title>Configuration CCL</title>
    <para>
     Dans l'exemple ci-dessous, l'analyseur CCL est configur&eacute; pour supporter
     trois champs CCL : <literal>ti</literal>, <literal>au</literal> et
     <literal>isbn</literal>. Chaque champ correspond &agrave; son &eacute;quivalent
     BIB-1. On suppose que la variable <literal>$id</literal> est la resource de
     connexion.
    <programlisting>
<![CDATA[
<?php
  $fields["ti"] = "1=4";
  $fields["au"] = "1=1";
  $fields["isbn"] = "1=7";
  yaz_ccl_conf($id,$fields);
?>
]]>
      </programlisting>
     </para>
    </example>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
