<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.21 $ -->
<!-- EN-Revision: 1.11 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: yes -->
<refentry id="function.yaz-record">
 <refnamediv>
  <refname>yaz_record</refname>
  <refpurpose>Retourne un résultat</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>yaz_record</methodname>
   <methodparam><type>resource</type><parameter>id</parameter></methodparam>
   <methodparam><type>int</type><parameter>pos</parameter></methodparam>
   <methodparam><type>string</type><parameter>type</parameter></methodparam>
  </methodsynopsis>
  <para>
   La fonction <function>yaz_record</function> retourne un enregistrement dans
   le jeu de résultats courant à la position spécifiée par le paramètre
   <parameter>pos</parameter>.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>id</parameter></term>
     <listitem>
      <para>
       La ressource de connexion retournée par
       <function>yaz_connect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pos</parameter></term>
     <listitem>
      <para>
       La position de l'enregistrement. Les positions des enregistrements dans
       un jeu de résultats sont numérotés 1, 2, ... $hits où $hits est le
       nombre retourné par <function>yaz_hits</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Le <parameter>type</parameter> spécifie la forme du résultat retourné.
      </para>
      <note>
       <para>
        C'est l'application qui est responsable pour s'assurer que les résultats
        retournés à partir du serveur Z39.50/SRW sont dans un format correct.
        Le type donné spécifie seulement une conversion qui doit avoir lieu
        sur le côté client (dans &php;/YAZ).
       </para>
      </note>
      <para>
       Sans compter la conversion du transfert de résultats de chaîne de
       caractères en tableau, &php;/YAZ est aussi possible d'effectuer une
       conversion de jeu de caractères du résultat. En particulier pour
       USMARC/MARC21 qui est recommandé puisque ces résultats sont normalement
       retournés dans le jeu de caractères MARC-8 qui n'est pas supporté par
       les navigateurs, etc. Pour spécifier une conversion, ajoutez <literal>;
       charset=</literal><replaceable>from</replaceable><literal>,</literal>
       <replaceable>to</replaceable> ou <replaceable>from</replaceable> est le
       jeu de caractères orignal du résultat et <replaceable>to</replaceable>
       est le jeu de résultats à obtenir (comme vu par &php;).
      </para>
      <variablelist>
       <varlistentry>
        <term><literal>string</literal></term>
        <listitem>
         <para>
          L'enregistrement est retourné comme une chaîne de caractères pour
          affichage simple. Dans ce mode, tous les enregistrements MARC sont
          convertis dans un format ligne-par-ligne puisque ISO2709 est
          difficile à lire. Les enregistrements XML et SUTRS sont retournés
          dans leur format original. GRS-1 est retourné dans un format
          ligne-par-ligne (laid).
         </para>
         <para>
          Ce format est approprié si les enregistrements seront affichés
          rapidement - pour débogage - ou parce que ce n'est pas faisable
          d'effectuer un affichage approprié.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>xml</literal></term>
        <listitem>
         <para>
          L'enregistrement est retourné comme une chaîne de caractères XML si
          possible. Dans ce mode, tous les enregistrements MARC sont convertis
          en <ulink url="&url.yaz-marcxml;">MARCXML</ulink>.
          Les enregistrements XML et SUTRS sont retournés dans leur format
          original. GRS-1 n'est pas supporté.
         </para>
         <para>
          Ce format est similaire à <parameter>string</parameter> à l'exception
          que les enregistrements MARC sont convertis en MARCXML
         </para>
         <para>
          Ce format est approprié si les enregistrements sont analysés par la
          suite par un analyseur XML ou un processeur XSLT.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>raw</literal></term>
        <listitem>
         <para>
          L'enregistrement est retourné comme une chaîne de caractères dans sa
          forme originale. Ce type est approprié pour MARC, XML et SUTRS. Il
          ne fonctionne pas pour GRS-1.
         </para>
         <para>
          Les enregistrements MARC sont retournés comme une chaîne de
          caractères ISO2709. XML et SUTRS sont retournés comme des chaînes de
          caractères.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>syntax</literal></term>
        <listitem>
         <para>
          La syntaxe de l'enregistrement est retournée comme une chaîne de
          caractères, par exemple <literal>USmarc</literal>,
          <literal>GRS-1</literal>, <literal>XML</literal>, etc.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>database</literal></term>
        <listitem>
         <para>
          Le nom de la base de données associée aux résultats à la position est
          retourné comme une chaîne de caractères.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>array</literal></term>
        <listitem>
         <para>
          L'enregistrement est retourné comme un tableau qui réfléchit la
          structure GRS-1. Ce type est approprié pour MARC et GRS-1. XML,
          SUTRS ne sont pas supportés et, si l'enregistrement actuel est XML ou
          SUTRS, une chaîne de caractères vide sera retournée.
         </para>
         <para>
          Le tableau retourné consiste en une liste correspondant à chaque
          feuille/noeud interne de GRS-1. Chaque item de la liste consiste à
          une sous-liste avec le premier élément <emphasis>path</emphasis> et
          <emphasis>data</emphasis> (si les données sont disponibles).
         </para>
         <para>
          Le chemin, qui est une chaîne de caractères, contient une liste de chaque composant
          de l'arbre (de la structure des enregistrements GRS-1) depuis la racine vers l'extrémité.
         Chaque composant est une paire de type de balise/valeur sous la forme
         <literal>(</literal><replaceable>type</replaceable><literal>,</literal>
         <replaceable>value</replaceable>
         </para>
         <para>
          Les tags de chaîne de caractères ont normalement une correspondance
          avec le type tag 3. MARC peut aussi être retourné comme un tableau
          (ils sont convertis en GRS-1 de manière interne).
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne l'enregistrement à la position <parameter>pos</parameter> ou une
   chaîne vide si aucun enregistrement n'existe à la position donnée.
  </para>
  <para>
   Si aucun enregistrement de base de données n'existe à la position donnée une
   chaîne vide est retournée.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Tableau pour des enregistrements GRS-1</title>
   <para>
    Considérez les enregistrements GRS-1
    <screen>
<![CDATA[
(4,52)Robert M. Pirsig
(4,70)
      (4,90)
            (2,7)Transworld Publishers, ltd.
]]>
    </screen>
    Cet enregistrement a deux noeuds à la racine.
    Le premier élément de la racine est (4,52) [tag type 4, tag value 52],
    et a comme donnée <literal>Robert M. Pirsig</literal>.
    Le deuxième élément de la racine (4,70) a un sous-arbre avec un élément simple (4,90).
    (4,90) a maintenant un sous-arbre (2,7) avec comme donnée <literal>Transworld Publishers,
    ltd.</literal>.
   </para>
   <para>
    Si cet enregistrement est présent à la position $p, alors
    <programlisting role="php">
<![CDATA[
<?php

$ar = yaz_record($id, $p, "array");
print_r($ar);

?>
]]>
    </programlisting>
   </para>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => (4,52)
            [1] => Robert M. Pirsig
        )
    [1] => Array
        (
            [0] => (4,70)
        )
    [2] => Array
        (
            [0] => (4,70)(4,90)
        )
    [3] => Array
        (
            [0] => (4,70)(4,90)(2,7)
            [1] => Transworld Publishers, ltd.
        )
)
]]>
   </screen>
  </example>
  <example>
   <title>Travail avec MARCXML</title>
   <para>
    Le script &php; ci-dessous retourne un enregistrement MARC21/USMARC
    comme MARCXML. L'enregistrement original est retourné dans le jeu de caractères
    marc-8 (inconnu de beaucoup d'analyseur XML), donc nous le convertissons en UTF-8
    (que tous les analyseurs XML supportent).
    <programlisting role="php">
<![CDATA[
<?php
$rec = yaz_record($id, $p, "xml; charset=marc-8,utf-8");
?>
]]>
    </programlisting>
   </para>
   <para>
    L'enregistrement  <literal>$rec</literal> peut être obtenu avec le processeur
    <link linkend="ref.xslt">Sablotron XSLT</link> comme cela :
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php

$xslfile = 'display.xsl';
$processor = xslt_create();
$parms = array('/_xml' => $rec);
$res = xslt_process($processor, 'arg:/_xml', $xslfile, NULL, $parms);
xslt_free($processor);
$res = preg_replace("'</?html[^>]*>'", '', $res);
echo $res;

?>
]]>
    </programlisting>
   </para>
   <para>
    En &php; 5, l'extension <link linkend="ref.xsl">XSL</link> peut être
    utilisée à la place de Sablotron XSLT.
   </para>
  </example>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
