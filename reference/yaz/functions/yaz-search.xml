<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.5 Maintainer: yannick Status: ready -->
  <refentry id="function.yaz-search">
   <refnamediv>
    <refname>yaz_search</refname>
    <refpurpose>Prépare une recherche</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>yaz_search</methodname>
      <methodparam><type>resource</type><parameter>id</parameter></methodparam>
      <methodparam><type>string</type><parameter>type</parameter></methodparam>
      <methodparam><type>string</type><parameter>query</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>yaz_search</function> prépare une recherche sur le serveur
     identifié par <parameter>id</parameter>. <parameter>type</parameter>
     représente le type de requête : seul RPN est supporté
     actuellement, et dans ce cas, le troisième argument est un
     préfixe de notation de requête utilisé par YAZ.
     Comme pour <function>yaz_connect</function>, <function>yaz_search</function>
     n'est pas bloquante, et ne fait que préparer la recherche pour
     exécution ultérieure, avec <function>yaz_wait</function>.
    </para>
   </refsect1>
   <refsect1>
    <title>Requêtes RPN</title>
    <para>
     Les requêtes RPN sont des représentation textuelles des
     requêtes de type Type-1, comme définit dans le standard
     Z39.50. Cependant, dans la représentation textuelle utilisée
     par YAZ, une notation à préfixage est utilisée,
     c'est-à-dire que l'opérateur précède
     l'opérande. La chaîne de requête est une
     séquence de mots réservés, où les espaces sont
     ignorés, à moins qu'ils n'aient été
     mis entre guillemets doubles. Les mots réservés qui commencent
     par un arobase (<literal>&#64;</literal>) sont considérés
     comme des opérateurs et traités comme tels.
    </para>
    <table>
     <title>Opérateurs RPN</title>
     <tgroup cols="2">
      <colspec colwidth="1*" colname="construct"/>
      <colspec colwidth="2*" colname="description"/>
      <thead>
        <row>
          <entry>Syntaxe</entry>
          <entry>Description</entry>
        </row>
      </thead>
      <tbody>
        <row>
         <entry><literal>@and query1 query2</literal></entry>
         <entry>intersection des requêtes query1 et query2</entry>
        </row>
        <row>
         <entry><literal>@or query1 query2</literal></entry>
         <entry>union des requêtes  query1 et query2</entry>
        </row>
        <row>
         <entry><literal>@;not query1 query2</literal></entry>
         <entry>requêtes "query1 et non(query2)"</entry>
        </row>
        <row>
         <entry><literal>@set name</literal></entry>
         <entry>nomme le résultat</entry>
        </row>
        <row>
         <entry><literal>@attrset set query</literal></entry>
         <entry>spécifie le jeu d'attributs de la requête. Cette construction
         n'est autorisée qu'une seule fois, au début d'une requête.</entry>
        </row>
        <row>
          <entry><literal>@attr set type=value query</literal></entry>
          <entry>Applique les attributs à une requête. Le type et la valeur
          sont des entiers indiquant les types et valeurs des attributs, dans
          cet ordre. Le jeu, si fourni, spécifie le jeu d'attributs utilisé.
         </entry>
        </row>
      </tbody>
     </tgroup>
    </table>
    <example>
    <title>Exemples de requêtes</title>
    <para>
     Vous pouvez rechercher des termes simples comme
     <screen>ordinateur</screen>
     qui identifieront les documents où "ordinateur" apparait.
     Aucun attribut n'est spécifié.
    </para>
     <para>
     La requête <screen>"knuth donald"</screen>
     recherche les documents où "knuth donald" apparait (en
     supposant que le serveur supporte la recherche par phrase).
     </para>
     <para>
     Cette requête applique deux attributs à la phrase recherchée : 
     <screen>@attr 1=1003 @attr 4=1 "knuth donald"</screen>
     Le premier attribut est de type 1 (Bib-1), et sa valeur est 1003
     (Auteur).
     Le second attribut est de type 4 (structure), valeur 1 (phrase),
     ce qui fait que la requête recherche les documents dont 
     Donald Knuth est l'auteur.
     </para>
     <para>
      Cette requête 
      <screen>@and @or a b @not @or c d e</screen>
      sera traduite en notation infix comme ceci : 
        <literal>(a or b) and ((c or d) not e)</literal>.
     </para>
     <para>
     Un autre exemple plus complexe : 
<screen>@attrset gils @and @attr 1=4 art @attr 1=2000 company</screen>.
     La requête utilise l'ensemble de sous attributs GILS. La requête
     recherche les documents où le mot <literal>art</literal>
     apparaît dans le titre (GILS,BIB-1) et dont la société 
     (<literal>company</literal>) apparaît comme distributeur (GILS).
     </para>
    </example>
    <para>
     Vous pouvez trouver plus d'informations sur les requêtes et attributs
     sur le site de 
     <ulink url="&url.yaz-loc-bib1;">Z39.50 Maintenance Agency</ulink>.
    </para>
    <note>
     <para>
      Si vous préférez une notation plus conviviale, utilisez l'analyseur
      CCL  : <function>yaz_ccl_conf</function> et <function>yaz_ccl_parse</function>.
     </para>
    </note>

   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
