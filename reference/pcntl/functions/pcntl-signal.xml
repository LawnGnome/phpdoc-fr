<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/pcntl.xml, last change in rev 1.1 -->
<!-- last change to 'pcntl-signal' in en/ tree in rev 1.2 -->
 <refentry id="function.pcntl-signal">
  <refnamediv>
   <refname>pcntl_signal</refname>
   <refpurpose>Installe un gestionnaire de signaux</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>bool</type><methodname>pcntl_signal</methodname>
     <methodparam><type>int</type><parameter>signo</parameter></methodparam>
     <methodparam><type>callback</type><parameter>handle</parameter></methodparam>
     <methodparam choice="opt"><type>bool</type><parameter>restart_syscalls</parameter></methodparam>
    </methodsynopsis>
   <para>
    <function>pcntl_signal</function> installe un nouveau gestionnaire
    de signaux pour le signal indiqué par le paramètre 
    <parameter>signo</parameter>.  Le gestionnaire de signaux est affecté
    à <parameter>handler</parameter> qui peut être le nom d'une fonction
    utilisateur, ou bien l'une des deux constantes globales
    <constant>SIG_IGN</constant> et <constant>SIG_DFL</constant>.
    Le paramètre optionnel <parameter>restart_syscalls</parameter> 
    spécifie si l'appel système de redémarrage (restarting) doit être utilisé
    lorsque ce signal arrive, et par défaut, ce paramètre vaut &true;.
   </para>
   <para>
    &return.success;
   </para>
   <note>
    <para>
     La possibilité d'utiliser une méthode d'objet comme fonction de callback
     est disponible depuis &php; 4.3.0. Notez que lorsque vous configurez le
     gestionnaire avec une méthode d'objet, le compteur de référence de l'objet
     est incrémenté, ce qui le rend persistant jusqu'à ce que vous changiez le
     gestionaire de signeux pour un autre, ou que le script se termine.
    </para>
   </note>
   <example>
    <title>Exemple avec <function>pcntl_signal</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// l'usage des tick est nécessaire depuis PHP 4.3.0
declare (ticks = 1);

// gestionnaire de siganux système
function sig_handler($signo) {

     switch($signo) {
         case SIGTERM:
             // gestion de l'extinction
             exit;
             break;
         case SIGHUP:
             // gestion du redémarrage
             break;
         case SIGUSR1:
             print "Reçu le signe SIGUSR1...\n";
             break;
         default:
             // gestion des autres signaux
     }

}

print "Installation du gestionnaire de signaux...\n";

// Installation des gestionnaires de signaux
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP,  "sig_handler");
pcntl_signal(SIGUSR1, "sig_handler");

// ou bien utilisez un objet (disponible depuis PHP 4.3.0)
// pcntl_signal(SIGUSR1, array($obj, "faire_quelquechose");

print "Génération d'un signal SIGTERM à moi même...\n";

// envoi de SIGUSR1 à l'identifiant de processus courant
posix_kill(posix_getpid(), SIGUSR1);

print "Done\n"

?>
]]>
    </programlisting>
   </example>
   <para>
    Voir aussi 
    <function>pcntl_fork</function> et
    <function>pcntl_waitpid</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
