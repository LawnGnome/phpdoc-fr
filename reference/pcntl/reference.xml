<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
 <reference id="ref.pcntl">
  <title>Contrôle des processus</title>
  <titleabbrev>PCNTL</titleabbrev>
  <partintro>
   <section id="pcntl.intro">
    &reftitle.intro;
    <para>
     Le système de contrôle des processus de PHP implémente un système
     de création, gestion et terminaison des processus comme sous Unix.
     Cette extension ne doit pas être activée pour une utilisation
     en serveur web, car les résultats pourraient être inattendus.
    </para>
    <para>
     Cettte documentation explique l'utilisation générale des fonctions
     du gestionaire de processus. Pour des informations plus détaillées
     sur le contrôle des processus Unix, nous vous encourageons à
     consulter votre documentation système, incluant notamment 
     fork(2), waitpid(2) and signal(2), ou bien à compulser un
     ouvrage de référence comme "Advanced Programming in the
     UNIX Environment" par W. Richard Stevens (Addison-Wesley).
   </para>
   &note.no-windows.extension;
   </section>

   <section id="pcntl.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.pcntl.configure;

   <section id="pcntl.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="pcntl.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.pcntl.constants;

   <section id="pcntl.example">
    &reftitle.examples;
    <para>
     Cet exemple forke un processus démon, avec un gestionnaire de signaux.
    </para>
    <example>
     <title>Exemple de contrôle de processus</title>
     <programlisting role="php">
<![CDATA[
<?php

$pid = pcntl_fork();
if ($pid == -1) {
     die("impossible de forker"); 
} else if ($pid) {
     exit(); // nous sommes le processus père
} else {
     //nous sommes le processus fils
}

// détachons le processus du terminal
if (!posix_setsid()) {
    die("impossible de se détacher du terminal
}

// configuration des gestinnaires de signaux
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP, "sig_handler");

// boucle infinie
while(1) {
    // exécution de quelque chose
}

function sig_handler($signo) {

     switch($signo) {
         case SIGTERM:
             // gestion des tâches de terminaison
             exit;
             break;
         case SIGHUP:
             // gestion des tâches de redémarrage
             break;
         default:
             // gestion des autres tâches
     }

}

?>
]]>
     </programlisting>
    </example>
   </section>

   <section id="pcntl.seealso">
    &reftitle.seealso;
    <para>
     Jetez un oeil à la section sur les fonctions
     <link linkend="ref.posix">POSIX</link>.
    </para>
   </section>

  </partintro>

&reference.pcntl.functions;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

