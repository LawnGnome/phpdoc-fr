<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
 <reference id="ref.pcntl">
  <title>Contr&ocirc;le des processus</title>
  <titleabbrev>PCNTL</titleabbrev>
  <partintro>
   <section id="pcntl.intro">
    &reftitle.intro;
    <para>
     Le syst&egrave;me de contr&ocirc;le des processus de PHP impl&eacute;mente un syst&egrave;me
     de cr&eacute;ation, gestion et terminaison des processus comme sous Unix.
     Cette extension ne doit pas &ecirc;tre activ&eacute;e pour une utilisation
     en serveur web, car les r&eacute;sultats pourraient &ecirc;tre inattendus.
    </para>
    <para>
     Cettte documentation explique l'utilisation g&eacute;n&eacute;rale des fonctions
     du gestionaire de processus. Pour des informations plus d&eacute;taill&eacute;es
     sur le contr&ocirc;le des processus Unix, nous vous encourageons &agrave;
     consulter votre documentation syst&egrave;me, incluant notamment 
     fork(2), waitpid(2) and signal(2), ou bien &agrave; compulser un
     ouvrage de r&eacute;f&eacute;rence comme "Advanced Programming in the
     UNIX Environment" par W. Richard Stevens (Addison-Wesley).
   </para>
   &note.no-windows.extension;
   </section>

   <section id="pcntl.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.pcntl.configure;

   <section id="pcntl.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="pcntl.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.pcntl.constants;

   <section id="pcntl.example">
    &reftitle.examples;
    <para>
     Cet exemple forke un processus d&eacute;mon, avec un gestionnaire de signaux.
    </para>
    <example>
     <title>Exemple de contr&ocirc;le de processus</title>
     <programlisting role="php">
<![CDATA[
<?php

$pid = pcntl_fork();
if ($pid == -1) {
     die("impossible de forker"); 
} else if ($pid) {
     exit(); // nous sommes le processus p&egrave;re
} else {
     //nous sommes le processus fils
}

// d&eacute;tachons le processus du terminal
if (!posix_setsid()) {
    die("impossible de se d&eacute;tacher du terminal
}

// configuration des gestinnaires de signaux
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP, "sig_handler");

// boucle infinie
while(1) {
    // ex&eacute;cution de quelque chose
}

function sig_handler($signo) {

     switch($signo) {
         case SIGTERM:
             // gestion des t&acirc;ches de terminaison
             exit;
             break;
         case SIGHUP:
             // gestion des t&acirc;ches de red&eacute;marrage
             break;
         default:
             // gestion des autres t&acirc;ches
     }

}

?>
]]>
     </programlisting>
    </example>
   </section>

   <section id="pcntl.seealso">
    &reftitle.seealso;
    <para>
     Jetez un oeil &agrave; la section sur les fonctions
     <link linkend="ref.posix">POSIX</link>.
    </para>
   </section>

  </partintro>

&reference.pcntl.functions;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

