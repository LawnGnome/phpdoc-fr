<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.17 $ -->
<!-- EN-Revision: 1.13 Maintainer: yannick Status: ready -->
<!-- Purpose: fileprocess.process -->
<!-- Membership: bundled -->
<!-- Reviewed: yes -->

 <reference xml:id="ref.pcntl" xmlns="http://docbook.org/ns/docbook">
  <title>Contrôle des processus</title>
  <titleabbrev>PCNTL</titleabbrev>
  <partintro>
   <section xml:id="pcntl.intro">
    &reftitle.intro;
    <para>
     Le système de contrôle des processus de &php; implémente un système
     de création, gestion et terminaison des processus comme sous Unix.
     Cette extension ne doit pas être activée pour une utilisation
     en serveur web, car les résultats pourraient être inattendus.
    </para>
    <para>
     Cette documentation explique l'utilisation générale des fonctions
     du gestionaire de processus. Pour des informations plus détaillées
     sur le contrôle des processus Unix, nous vous encourageons à
     consulter votre documentation système, incluant notamment 
     fork(2), waitpid(2) et signal(2), ou bien à compulser un
     ouvrage de référence comme "Advanced Programming in the
     UNIX Environment" par W. Richard Stevens (Addison-Wesley).
   </para>
   <para>
    PCNTL utilise maintenant les ticks comme mécanisme de callback
    du gestionnaire de signaux, ce qui est beaucoup plus rapide que la
    version précédente. Ce changement suit la même sémantique que
    l'utilisation de "ticks utilisateurs". Vous utilisez 
    <function>declare</function> pour spécifier les endroits de votre
    programme où les callbacks peuvent être appelés. Cela vous permet de
    minimaliser la consommation dûe à la gestion d'événements asynchrones.
    Par le passé, compiler &php; avec pcntl revenait toujours à souffrir cette
    consommation, même si votre script n'utilisait pas pcntl.
   </para>
   <para>
    Il y'a un ajustement à faire pour tous les scripts pcntl basés sur une
    version antérieure à &php; 4.3.0 afin qu'ils puissent fonctionner : il faut
    soit utiliser <function>declare</function> dans la section où vous voulez
    avoir le callback, soit l'activer pour tout le script avec la nouvelle
    syntaxe globale de <function>declare</function>.
   </para>
   &note.no-windows.extension;
   </section>

   <section xml:id="pcntl.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.pcntl.configure;

   <section xml:id="pcntl.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section xml:id="pcntl.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.pcntl.constants;

   <section xml:id="pcntl.example">
    &reftitle.examples;
    <para>
     Cet exemple forke un processus démon, avec un gestionnaire de signaux.
    </para>
    <example>
     <title>Exemple de contrôle de processus</title>
     <programlisting role="php">
<![CDATA[
<?php

$pid = pcntl_fork();
if ($pid == -1) {
  die("impossible de forker"); 
} elseif ($pid) {
   exit(); // nous sommes le processus père
} else {
   //nous sommes le processus fils
}

// détachons le processus du terminal
if (!posix_setsid()) {
  die("impossible de se détacher du terminal");
}

// setup signal handlers
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP, "sig_handler");

// boucle infinie
while(1) {
    // exécution de quelque chose
}

function sig_handler($signo) 
{
     switch($signo) {
         case SIGTERM:
             // gestion des tâches de terminaison
             exit;
             break;
         case SIGHUP:
             // gestion des tâches de redémarrage
             break;
         default:
             // gestion des autres tâches
     }

}

?>
]]>
     </programlisting>
    </example>
   </section>

   <section xml:id="pcntl.seealso">
    &reftitle.seealso;
    <para>
     Un tour par la section sur les fonctions
     <link linkend="ref.posix">POSIX</link> peut être utile.
    </para>
   </section>

  </partintro>

&reference.pcntl.entities.functions;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->