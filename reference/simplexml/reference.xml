<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.15 Maintainer: yannick Status: ready -->
 <reference id="ref.simplexml">
  <title>Fonctions SimpleXML</title>
  <titleabbrev>SimpleXML</titleabbrev>

  <partintro>
   <section id="simplexml.intro">
    &reftitle.intro;
    <para>
     L'extension SimpleXML fournit des outils très simples et faciles à
     utiliser pour convertir du XML en un objet qui peut être manipulé avec ses
     propriétés et les itérateurs de tableaux.
    </para>
   </section>
   
   <section id="simplexml.requirements">
    &reftitle.required;
    <para>
     L'extension SimpleXML requière &php; 5.
    </para>
   </section>

   &reference.simplexml.configure;   
 
   <section id="simplexml.examples">
    &reftitle.examples;
    <para>
     Plusieurs exemples de ce chapitre requièrent une chaîne XML. Plutôt que
     de la repéter à chaque exemple, nous allons la placer dans un fichier que
     nous incluerons à chaque exemple. Le contenu de ce fichier est montré
     dans l'exemple qui suit. Alternativement, vous pouvez créer un document
     XML et le lire avec <function>simplexml_load_file</function>.
    </para>
    <para>
     <example>
      <title>Fichier avec une chaîne XML qui sera inclus partout : example.php</title>
      <programlisting role="php" id="simplexml.examples.movie">
<![CDATA[
<?php
$xmlstr = <<<XML
<?xml version='1.0' standalone='yes'?>
<movies>
 <movie>
  <title>PHP: Behind the Parser</title>
  <characters>
   <character>
    <name>Ms. Coder</name>
    <actor>Onlivia Actora</actor>
   </character>
   <character>
    <name>Mr. Coder</name>
    <actor>El Act&oacute;r</actor>
   </character>
  </characters>
  <plot>
   So, this language. It's like, a programming language. Or is it a
   scripting language? All is revealed in this thrilling horror spoof
   of a documentary.
  </plot>
  <rating type="thumbs">7</rating>
  <rating type="stars">5</rating>
 </movie>
</movies>
XML;
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     La simplicité de SimpleXML apparaît plus clairement lorsqu'on essaye
     d'extraire une chaîne ou un nombre d'un document XML basique.
     <example>
      <title>Obtenir <literal>&lt;plot&gt;</literal></title>
      <programlisting role="php">
<![CDATA[
<?php
include 'example.php';

$xml = simplexml_load_string($xmlstr);

echo $xml->movie[0]->plot; // "So this language. It's like..."
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Accéder à un élément non-unique avec SimpleXML</title>
      <simpara>
       Lorsque plusieurs instances d'un élément existent en tant que fils d'un
       élément père unique, les techniques normales d'itération peuvent être
       appliquées.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'example.php';

$xml = simplexml_load_string($xmlstr);

/* Pour chaque <movie>, nous affichons un <plot>. */
foreach ($xml->movie as $movie) {
   echo $movie->plot, '<br />';
}

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Utilisation des attributs</title>
      <simpara>
       Jusque là, nous n'avons couvert que la lecture des noms d'éléments, et
       leurs valeurs. SimpleXML peut aussi atteindre leurs attributs.
       L'accès aux attributs d'un élément se fait de la même façon que l'accès
       aux éléments d'un tableau.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'example.php';

$xml = simplexml_load_string($xmlstr);

/* Accès au node <rating> du premier <movie>.
 * Affichage des attributs de <rating> également. */
foreach ($xml->movie[0]->rating as $rating) {
    switch((string) $rating['type']) { // Récupération des attributs comme indices d'éléments
    case 'thumbs':
        echo $rating, ' thumbs up';
        break;
    case 'stars':
        echo $rating, ' stars';
        break;
    }
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Comparaison des éléments et des attributs avec du texte</title>
      <simpara>
       Pour comparer un élément ou un attribut avec une chaîne de caractères
       ou pour le passer à une fonction qui nécessite une chaîne de caractères,
       vous devez le transtiper en une chaîne en utilisant <literal>(string)</literal>.
       Sinon, &php; traitera l'élément comme un objet.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php     
include 'example.php';

$xml = simplexml_load_string($xmlstr);

if ((string) $xml->movie->title == 'PHP: Behind the Parser') {
    echo 'My favorite movie.';
}

htmlentities((string) $xml->movie->title);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Utilisation de  Xpath</title>
      <simpara>
       SimpleXML inclut le support embarqué de <acronym>Xpath</acronym>.
       Pour trouver tous les éléments <literal>&lt;character&gt;</literal> :
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'example.php';
$xml = simplexml_load_string($xmlstr);

foreach ($xml->xpath('//character') as $character) {
    echo $character->name, 'played by ', $character->actor, '<br />';
}
?>
]]>
      </programlisting>
      <simpara>
       '<literal>//</literal>' sert de joker. Pour spécifier un chemin absolu,
       enlevez un slash.
      </simpara>
     </example>
    </para>
    <para>
     <example>
      <title>Attribuer des valeurs</title>
      <simpara>
       Les données dans SimpleXML n'ont pas à être constantes. L'objet permet
       la manipulation de tous ces éléments.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'example.php';
$xml = simplexml_load_string($xmlstr);

$xml->movie[0]->characters->character[0]->name = 'Miss Coder';

echo $xml->asXML();
?>
]]>
      </programlisting>
      <simpara>
       L'exemple précédent affichera un nouveau document XML, tout comme l'original
       mise à part que le nouveau document XML définie
       <literal>Ms. Coder</literal> a <literal>Miss Coder</literal>.
      </simpara>
     </example>
    </para>
    <para>
     <example>
      <title>Interopérabilité DOM</title>
      <simpara>
       &php; possède un mécanisme pour convertir les nodes XML entre les formats 
       SimpleXML et DOM. Cet exemple montre comment changer un élément DOM en
       SimpleXML.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
$dom = new domDocument;
$dom->loadXML('<books><book><title>blah</title></book></books>');
if (!$dom) {
     echo 'Error while parsing the document';
     exit;
}

$s = simplexml_import_dom($dom);

echo $s->book[0]->title;
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  &reference.simplexml.constants;
  </partintro>

&reference.simplexml.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

