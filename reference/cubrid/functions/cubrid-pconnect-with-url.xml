<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 323191 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.cubrid-pconnect-with-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_pconnect_with_url</refname>
  <refpurpose>Ouvre une connexion persistante vers un serveur CUBRID</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_pconnect_with_url</methodname>
   <methodparam><type>string</type><parameter>conn_url</parameter></methodparam>  
   <methodparam choice="opt"><type>string</type><parameter>userid</parameter></methodparam>  
   <methodparam choice="opt"><type>string</type><parameter>passwd</parameter></methodparam>  
  </methodsynopsis>
  <para>
   Établit une connexion persistante vers un serveur CUBRID.
  </para>
  <para>
   <function>cubrid_pconnect_with_url</function> agit de la même façon que la
   fonction <function>cubrid_connect_with_url</function>, avec deux différences majeures.
  </para>
  <para>
   Tout d'abord, lors de la connexion, la fonction tentera tout d'abord de trouver
   un lien (persistant) déjà ouvert avec le même hôte, sur le même port, sur la
   même base de données dbname et utilisant le même userid. Si une telle connexion
   est trouvée, son identifiant sera retourné au lieu d'ouvrir une nouvelle
   connexion.
  </para>
  <para>
   Ensuite, la connexion vers le serveur MySQL ne sera pas fermée lorsque la fin
   du script sera atteint. Au lieu de cela, la connexion restera ouverte
   pour une utilisation future ( la fonction <function>cubrid_close</function> ou la fonction
   <function>cubrid_disconnect</function> ne fermera pas la connexion établie par la fonction
   <function>cubrid_pconnect_with_url</function>).
  </para>
  <para>
   Ce type de lien était appelé, auparavant, 'persistant'.
  </para>
  <para>
   &lt;url&gt; ::= CUBRID:&lt;host&gt;:&lt;db_name&gt;:&lt;db_user&gt;:&lt;db_password&gt;:[?&lt;properties&gt;]
   &lt;properties&gt; ::= &lt;property&gt; [&amp;&lt;property&gt;]
   &lt;properties&gt; ::= autocommit=&lt;autocommit_mode&gt;
   &lt;alternative_hosts&gt; ::= &lt;standby_broker1_host&gt;:&lt;port&gt; [,&lt;standby_broker2_host&gt;:&lt;port&gt;]
   &lt;host&gt; := HOSTNAME | IP_ADDR
   &lt;time&gt; := SECOND
  </para>
  <para>
   or &lt;url&gt; ::= cci:CUBRID:&lt;host&gt;:&lt;db_name&gt;:......
  </para>
  <para>
   <simplelist>
    <member>host : Un nom d'hôte ou une adresse IP du serveur maître de base de données</member>
    <member>db_name : Un nom de base de données</member>
    <member>db_user : Un nom d'utilisateur de la base de données</member>
    <member>db_password : Un mot de passe pour l'utilisateur de la base de données</member>
    <member>autocommit : Le mode auto-commit de la connexion à la base de données</member>
    <member>alhosts: Spécifie l'information du broker du serveur, qui sera utilisé comme point de sortie
     lorsqu'il est impossible de se connecter au serveur actif. Vous pouvez spécifier plusieurs brokers dans ce cas,
     et la connexion aux brokers sera tentée dans l'ordre de la configuration alhosts</member>
    <member>rctime : Un intervalle de temps à attendre avant de tenter une connexion vers un broker lorsqu'une erreur
     survient. Après qu'une erreur soit survenue, le système tentera une connexion vers un broker spécifié par
     althosts, termine la transaction, et ensuite, tente de se connecter au broker actif du serveur maître
     de base de données. La valeur par défaut est de 600 secondes.</member>
   </simplelist>
  </para>
  <note>
   <para>
    Les caractères <literal>?</literal> et <literal>:</literal>
    utilisés comme identifiants dans les URLs de connexion PHP ne peuvent
    être inclus dans le mot de passe. Voici un exemple de mot de passe
    invalide, car utilisant ce type de caractères dans l'URL de connexion.
   </para>
   <para>
    $url = "CUBRID:localhost:33000:tdb:dba:12?:?autocommit=off";
   </para>
   <para>
    Les mots de passe contenant le caractère <literal>?</literal> ou le
    caractère <literal>:</literal> peuvent être passés en tant que paramètre séparé.
   </para>
   <para>
    $url = "CUBRID:localhost:33000:tbd:::?autocommit=off";
    $conn = cubrid_connect_with_url ($url, "dba", "12?");
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>conn_url</parameter></term>
     <listitem>
      <para>
       Une &string; qui contient les informations de connexion pour le serveur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>userid</parameter></term>
     <listitem>
      <para>
       Nom d'utilisateur pour la base de données.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>passwd</parameter></term>
     <listitem>
      <para>
       Mot de passe pour l'utilisateur.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Identifiant de connexion, lorsque le processus réussit.
  </para>
  <para>
   &false;, lorsqu'une erreur survient.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>cubrid_connect_with_url</function> sans propriétés</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn_url = "CUBRID:127.0.0.1:33000:demodb:dba:123456:?autocommit=off"
$con = cubrid_pconnect_with_url ($conn_url);

if ($con) {
   echo "Connexion réussie";
   $req =cubrid_execute($con, "insert into person values(1,'James')");

   if ($req) {
      cubrid_close_request ($req);
      cubrid_commit ($con);
   } else {
      cubrid_rollback ($con);
   }
   cubrid_disconnect ($con);
}
?>
]]>
   </programlisting>
  </example>
  
  <example>
   <title><function>cubrid_connect_with_url</function> url with properties example</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn_url = "CUBRID:127.0.0.1:33000:demodb:dba:123456:?autocommit=off&althost=10.34.63.132:33088&rctime=100"
$con = cubrid_connect_with_url ($conn_url);

if ($con) {
   echo "Connexion réussie";
   $req =cubrid_execute($con, "insert into person values(1,'James')");

   if ($req) {
      cubrid_close_request ($req);
      cubrid_commit ($con);
   } else {
      cubrid_rollback ($con);
   }
   cubrid_disconnect ($con);
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_connect</function></member>
    <member><function>cubrid_pconnect</function></member>
    <member><function>cubrid_pconnect_with_url</function></member>
    <member><function>cubrid_disconnect</function></member>
    <member><function>cubrid_close</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
