<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
 <reference id="ref.sockets">
  <title>Socket</title>
  <titleabbrev>Sockets</titleabbrev>

  <partintro>
   <section id="sockets.intro">
    &reftitle.intro;
   <simpara>
    L'extension socket impl&eacute;mente une interface bas niveau avec les fonctions
    de communication par socket, bas&eacute;es sur les sockets BSD si populaires, 
    et fournit la possibilit&eacute; de fonctionner aussi bien sous forme de client 
    que de serveur.
   </simpara>
   <para>
     Pour une interface socket cliente plus g&eacute;n&eacute;rique, voyez 
    <function>fsockopen</function> et <function>pfsockopen</function>.
   </para>
   <para>
    Lorsque vous utilisez ces fonctions, il est important de vous
    rappeler que si de nombreuses fonctions ont le m&ecirc;me nom que leur
    alter ego en langage C, elles ont souvent des d&eacute;clarations diff&eacute;rentes.
    Lisez attentivement les descriptions pour &eacute;viter des confusions.
   </para>
   <para>
    Cela dit, ceux qui ne sont pas familiers avec la programmation par socket
    peuvent toujours trouver beaucoup de documentation dans les pages de
    manuel Unix appropri&eacute;es, et il y a une grande quantit&eacute; d'introductions
    en langage C sur le web, qui peuvent &ecirc;tre facilement r&eacute;utilis&eacute;s, avec
    des adaptations mineures. 
    <ulink url="&url.socket.faq;">UNIX Socket FAQ</ulink> 
    est un bon d&eacute;but.
   </para>
   &warn.experimental;
   </section>
   
   <section id="sockets.requirements">
    &reftitle.required;
    &no.requirement;
   </section>
   
   &reference.sockets.configure;
   
   <section id="sockets.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="sockets.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.sockets.constants;

   <section id="sockets.errors">
    <title>Socket Errors</title>
    <para>
    L'extension socket a &eacute;t&eacute; &eacute;crite pour fournir une interface utilisable
    avec les puissantes sockets fournies par BSD. Un soin particulier a &eacute;t&eacute;
    apport&eacute; pour que les fonctions soient aussi efficaces sous Unix que sous
    Windows32. Presque toutes les fonctions de sockets peuvent &eacute;chouer
    dans certaines circonstances, et &eacute;mettent ainsi un message d'alerte
    <constant>E_WARNING</constant> d&eacute;crivant l'erreur. Parfois, cela ne
    se fait pas selon les souhaits du d&eacute;veloppeur. Par exemple, la fonction
    <function>socket_read</function> peut tout &agrave; coup &eacute;mettre un 
    message <constant>E_WARNING</constant> car la connexion a &eacute;t&eacute; 
    inopin&eacute;ment interrompu. Il est commun de supprimer les erreurs avec
    l'op&eacute;rateur <literal>@</literal> et de traiter les erreurs avec la 
    fonction <function>socket_last_error</function>, au niveau application. 
    Vous pouvez appeler <function>socket_strerror</function> avec le code
    d'erreur pour conna&icirc;tre le message d'erreur, humainement lisible.
    Reportez vous &agrave; leur description pour plus de d&eacute;tails.
   </para>
   <note>
    <para>
     Les messages <constant>E_WARNING</constant> g&eacute;n&eacute;r&eacute; par l'extension
     socket sont en anglais, mais le message d'erreur s'affichera en fonction
     de la configuration locale (<constant>LC_MESSAGES</constant>):
     <programlisting role="php">
<![CDATA[
Warning - socket_bind() unable to bind address [98]: Die Adresse wird bereits verwendet
]]>
     </programlisting>
    </para>
   </note>
   </section>
   
   <section id="sockets.examples">
    &reftitle.examples;
    <para>
    <example>
     <title>Exemple de socket : serveur TCP/IP simple</title>
     <para>
      Cet exemple montre comment cr&eacute;er un serveur simple.
      Changez les variables <varname>address</varname> et 
      <varname>port</varname> pour vous adapter &agrave; votre configuration,
      et ex&eacute;cutez le. Vous pourrez alors vous connecter au serveur
      avec une commande comme ceci : <command>telnet 192.168.1.53
      10000</command> (en supposant que l'adresse et le port correspondent
      &agrave; votre configuration). Tout ce que vous saisissez apr&egrave;s cela sera
      envoy&eacute; au serveur, et affich&eacute; en retour. Pour vous d&eacute;connecter,
      tapez 'quit'.
     <programlisting role="php">
<![CDATA[
#!/usr/local/bin/php -q
<?php
error_reporting(E_ALL);

/* Autorise l'ex&eacute;cution infinie du script, en attente de connexion. */
set_time_limit(0);

/* Active le vidage implicite des buffers de sortie, pour que nous
 * puissions vois ce que nous lisons au fur et a mesure. */
ob_implicit_flush();

$address = '192.168.1.53';
$port = 10000;

if (($sock = socket_create(AF_INET, SOCK_STREAM, SQL_TCP)) < 0) {
    echo "socket_create() a &eacute;chou&eacute; : raison : " . socket_strerror($sock) . "\n";
}

if (($ret = socket_bind($sock, $address, $port)) < 0) {
    echo "socket_bind() a &eacute;chou&eacute; : raison : " . socket_strerror ($ret) . "\n";
}

if (($ret = socket_listen($sock, 5)) < 0) {
    echo "socket_listen() a &eacute;chou&eacute; : raison : " . socket_strerror ($ret) . "\n";
}

do {
    if (($msgsock = socket_accept($sock)) < 0) {
        echo "socket_accept() a &eacute;chou&eacute; : raison : " . socket_strerror ($msgsock) . "\n";
        break;
    }
    /* Send instructions. */
    $msg = "\Bienvenue sur le serveur de test PHP.\n" .
        "Pour quitter, tapez 'quit'. Pour &eacute;teindre le serveur, tapez 'shutdown'.\n";
    socket_write($msgsock, $msg, strlen($msg));

    do {
        if (FALSE === ($buf = socket_read($msgsock, 2048))) {
            echo "socket_read() a &eacute;chou&eacute; : raison : " . socket_strerror ($ret) . "\n";
            break 2;
        }
        if (!$buf = trim($buf)) {
            continue;
        }
        if ($buf == 'quit') {
            break;
        }
        if ($buf == 'shutdown') {
            socket_close ($msgsock);
            break 2;
        }
        $talkback = "PHP: You said '$buf'.\n";
        socket_write($msgsock, $talkback, strlen($talkback));
        echo "$buf\n";
    } while (true);
    socket_close ($msgsock);
} while (true);

socket_close ($sock);
?>
]]>
      </programlisting>
     </para>
    </example>
   </para>
   <para>
    <example>
     <title>Exemple avec les sockets : Client TCP/IP simple</title>
     <para>
      Ce exemple illustre un client HTTP simple. Il se connecte simplement
      &agrave; une page, envoie une requ&ecirc;te HEAD, affiche le r&eacute;sultat, et se termine.
     </para>
     <programlisting>
<![CDATA[
<?php
error_reporting(E_ALL);

echo "<h2>Connexion TCP/IP</h2>\n";

/* Lit le port du service WWW. */
$service_port = getservbyname('www', 'tcp');

/* Lit l'adresse IP du serveur de destination */
$address = gethostbyname('www.exemple.com');

/* Cree une socket TCP/IP. */
$socket = socket_create(AF_INET, SOCK_STREAM, SQL_TCP);
if ($socket < 0) {
    echo "socket_create() a &eacute;chou&eacute; : raison :  " . socket_strerror ($socket) . "\n";
} else {
    echo "OK.\n";
}

echo "Essai de connexion &agrave; '$address' sur le port '$service_port'...";
$result = socket_connect($socket, $address, $service_port);
if ($result < 0) {
    echo "socket_connect() a &eacute;chou&eacute; : raison : ($result) " . socket_strerror($result) . "\n";
} else {
    echo "OK.\n";
}

$in = "HEAD / HTTP/1.0\r\n\r\n";
$out = '';

echo "Envoi de la requ&ecirc;te HTTP HEAD...";
socket_write($socket, $in, strlen($in));
echo "OK.\n";

echo "Lire la r&eacute;ponse : \n\n";
while ($out = socket_read($socket, 2048)) {
    echo $out;
}

echo "Fermeture de la socket...";
socket_close($socket);
echo "OK.\n\n";
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.sockets.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

