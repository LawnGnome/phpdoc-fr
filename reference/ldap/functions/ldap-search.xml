<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.7 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
  <refentry id="function.ldap-search">
   <refnamediv>
    <refname>ldap_search</refname>
    <refpurpose>Recherche sur le serveur LDAP</refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>resource</type><methodname>ldap_search</methodname>
      <methodparam><type>resource</type><parameter>link_identifier</parameter></methodparam>
      <methodparam><type>string</type><parameter>base_dn</parameter></methodparam>
      <methodparam><type>string</type><parameter>filter</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>attributes</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>attrsonly</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>sizelimit</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>timelimit</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>deref</parameter></methodparam>
     </methodsynopsis>
    <para>
     <methodname>ldap_search</methodname> retourne un identifiant de résultat,
     ou bien &false; en cas d'erreur.
    </para>
    <para>  
     <function>ldap_search</function> effectue une recherche avec le 
     filtre <parameter>filter</parameter> dans le dossier
     <parameter>base_dn</parameter> avec le paramétrage
     <constant>LDAP_SCOPE_SUBTREE</constant>.  C'est l'équivalent 
     d'une recherche dans le dossier. <parameter>base_dn</parameter> 
     spécifie le DN de base du dossier.
    </para>
    <para>
     Il y a un quatrième paramètre optionnel, qui peut être fourni pour
     restreindre les attributs et valeurs retournées par le serveur,
     afin de les adapter à vos besoins. C'est bien plus efficace que
     le comportement par défaut (qui retourne tous les attributs et leurs
     valeurs associées). L'utilisation de ce quatrième paramètre est donc vivement
     recommandée.
    </para>
    <para>
     Le quatrième paramètre est un tableau de chaînes &php; avec
     les attributs demandés, par exemple : 
     <literal>array("mail","sn","cn")</literal>. Notez que le
     <literal>"dn"</literal> est toujours retourné, indépendamment
     des attributs demandés.
    </para>
    <para>
     Notez aussi que certains serveurs de dossiers sont configurés pour 
     retourner un nombre limité d'entrées. Si
     cette situation survient, le serveur indiquera qu'il a renvoyé un
     résultat partiel. C'est aussi le cas si le sixième paramètre 
     <parameter>sizelimit</parameter> a été utilisé pour limiter le nombre
     d'entrées retournées.
    </para> 
    <para>
     Le cinquième paramètre <parameter>attrsonly</parameter> doit être
     mis à 1 si seuls les types d'attributs sont désirés. Si ce paramètre
     est mis à 0, les types d'attributs et leurs valeurs seront retournées : 
     c'est le comportement par défaut.
    </para> 
    <para>
     Avec le sixième paramètre <parameter>sizelimit</parameter>, il est possible
     de limiter le nombre d'entrées lues dans le résultat. En utilisant 0, on
     indique qu'il n'y a pas de limite.
     NOTE : ce paramètre NE peut PAS remplacer la configuration du serveur.
     Vous pouvez au mieux baisser encore cette limite.
    </para> 
    <para>
     Le septième paramètre <parameter>timelimit</parameter> permet de spécifier
     le nombre de secondes de durée de la recherche. En utilisant la valeur
     0, la recherche pourra durer indéfiniment. 
     NOTE : ce paramètre NE peut PAS remplacer la configuration du serveur.
     Vous pouvez au mieux baisser encore cette limite.
    </para> 
    <para>
     Le huitième paramètre <parameter>deref</parameter> spécifie comment les
     alias doivent être gérés durant la recherche. Ce paramètre peut prendre
     l'une des valeurs suivantes : 
     <itemizedlist>
     <listitem>
      <simpara>
       LDAP_DEREF_NEVER - (par défaut) les alias ne sont jamais "déréférencés".
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       LDAP_DEREF_SEARCHING - les alias sont "déréférencés" durant la recherche,
       mais pas durant la localisation du dossier de recherche.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       LDAP_DEREF_FINDING - les alias sont "déréférencés" durant la localisation
       du dossier de recherche, mais pas durant la recherche.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       LDAP_DEREF_ALWAYS - les alias sont toujours "déréférencés".
      </simpara>
     </listitem>
     </itemizedlist>
    </para>  
    <note>
     <para>
      Ces paramètres optionnels ont été ajoutés en 4.0.2 :
      <parameter>attrsonly</parameter>,
      <parameter>sizelimit</parameter>,
      <parameter>timelimit</parameter> et 
      <parameter>deref</parameter>.
     </para>
    </note>
    <para>
     Le filtre de recherche peut être simple ou avancé, et utiliser ces 
     opérateurs booléen au format décrit dans la documentation LDAP 
     (reportez-vous à <ulink url="&url.ldap.filters;">Netscape Directory SDK</ulink>
     pour plus d'informations sur les filtres).
    </para>
    <para>
     L'exemple ci-dessous lit le nom du service, le nom, le prénom et 
     l'email des employés de la société "Ma Compagnie", dont le nom ou
     le prénom contient la sous-chaîne : $person. Cet exemple illustre
     l'utilisation de filtres pour indiquer au serveur de faire une 
     recherche sur deux attributs.
     <example>
      <title>Recherche LDAP</title>
      <programlisting role="php">
<![CDATA[
<?php
// $ds doit être une ressource de connexion valide

// $person est un nom ou une partie de nom (par exemple, "Jean")

$dn = "o=Ma Compagnie, c=FR";
$filter="(|(sn=$person*)(givenname=$person*))";
$justthese = array( "ou", "sn", "givenname", "mail");

$sr=ldap_search($ds, $dn, $filter, $justthese);

$info = ldap_get_entries($ds, $sr);

echo $info["count"]." entrées trouvées.\n";
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Depuis &php; 4.0.5, il est possible de faire des recherches parallèles. Pour cela,
     vous devez utiliser un tableau de ressources de connexion comme premier argument,
     au lieu d'une ressource simple. Si vous ne voulez pas utiliser le même
     dossier de base DN et le même filtre pour toutes les recherches, 
     vous pouvez aussi utiliser un tableau de DN et de filtres. Ces
     tableaux doivent alors être de la même taille que le tableau de
     ressources de connexion : la première entrée du tableau de ressources
     sera utilisée avec le premier DN et le premier filtre, etc.
     Lorsque vous faites une recherche parallèle, un tableau de résultats
     est retourné, sauf en cas d'erreur, auquel cas l'entrée contiendra
     &false;. C'est très proche du comportement habituel, hormis le fait
     qu'un résultat est toujours retourné lorsqu'une recherche est faite.
     Il y a de rares cas où une recherche renvoi &false;, alors qu'une
     autre en parallèle retourne un identifiant.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
