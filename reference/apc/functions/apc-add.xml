<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.apc-add" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>apc_add</refname>
  <refpurpose>Met en cache une variable dans le magasin de données</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>apc_add</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>ttl</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Met en cache une variable dans le magasin de données, uniquement si elle ne s'y trouve
   pas déjà.
  </para>
  <note>
   <simpara>
    Contrairement aux autres mécanismes en PHP, les variables stockées
    en utilisant la fonction <function>apc_add</function> seront
    persistantes entre les requêtes (jusqu'à ce que la valeur soit effacée du cache).
   </simpara>
  </note>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       Stocke la variable en utilisant son nom. La clé <parameter>key</parameter>
       est unique dans le cache, donc utilisez la fonction <function>apc_add</function>
       pour stocker une donnée avec une clé qui existe déjà n'efface pas la donnée
       existante, mais retournera &false;. (C'est la seule différence entre
       la fonction <function>apc_add</function> et la fonction <function>apc_store</function>.)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable à stocker
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ttl</parameter></term>
     <listitem>
      <para>
       Durée de vie ; stocke la variable <parameter>var</parameter> dans le cache
       pendant <parameter>ttl</parameter> secondes. Après ce délai, la variable
       stockée sera effacée du cache (à la requête suivante). Si le
       paramètre <parameter>ttl</parameter> n'est pas fourni (ou s'il vaut &zero;),
       la valeur persistera tant qu'elle ne sera pas effacée manuellement du cache, ou si elle
       n'existe plus dans le cache (effacement, redémarrage, etc.).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>apc_add</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$bar = 'BAR';
apc_add('foo', $bar);
var_dump(apc_fetch('foo'));
echo "\n";
$bar = 'NEVER GETS SET';
apc_add('foo', $bar);
var_dump(apc_fetch('foo'));
echo "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "BAR"
string(3) "BAR"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>apc_store</function></member>
    <member><function>apc_fetch</function></member>
    <member><function>apc_delete</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->