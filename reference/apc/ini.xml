<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.15 $ -->
<!-- EN-Revision: 1.13 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<section xml:id="apc.configuration" xmlns="http://docbook.org/ns/docbook">
 &reftitle.runtime;
 &extension.runtime;
 <para>
  Bien que la configuration par défaut d'APC soit suffisante pour la plupart des installations,
  les utilisateurs avancés devraient affiner les paramètres suivants.
 </para>
 <para>
  Il y a deux décisions importantes que vous devez faire. D'abord, la quantité
  de mémoire partagée que vous voulez allouer à APC et ensuite, si vous voulez
  qu'APC vérifie si un fichier a été vérifié à chaque demande. Les deux options
  de configuration concernées sont <literal>apc.shm_size</literal> et
  <literal>apc.stat</literal>. Lisez avec attention la section suivante sur
  ces deux options de configuration.
 </para>
 <para>
  Une fois que vous avez un serveur qui fonctionne, vous devez copier le script
  <literal>apc.php</literal> fourni avec l'extension dans un endroit accessible
  par le serveur web, puis, appelez-le depuis votre navigateur. Il vous fournit tous les
  détails de votre cache. Si GD est actif sur votre configuration &php;, il y aura aussi
  de jolis graphiques. La première chose à vérifier est s'il y a actuellement des
  fichiers en cache. En supposant que cela fonctionne, vous devez donc faire attention
  au nombre <literal>Cache full count</literal> sur la gauche. Il indique le temps
  depuis lequel le cache a été créé et qui doit effacer les entrées non utilisées depuis
  <literal>apc.ttl</literal> secondes. Vous devriez configurer votre cache pour
  minimiser ce nombre. Si vous remplissez constamment votre cache, la génération
  du cache résultant va prendre beaucoup de ressources. Vous devriez soit allouer
  plus de mémoire pour APC, soit utiliser <literal>apc.filters</literal> pour mettre
  en cache moins de scripts.
 </para>
 <para>
  <table>
   <title>Options de configuration APC</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>Nom</entry>
      <entry>Défaut</entry>
      <entry>Modifiable</entry>
      <entry>Changelog</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>apc.enabled</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>PHP_INI_ALL avec APC &lt;= 3.0.12p2</entry>
     </row>
     <row>
      <entry>apc.shm_segments</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.shm_size</entry>
      <entry>"30"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.optimization</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.num_files_hint</entry>
      <entry>"1000"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.user_entries_hint</entry>
      <entry>"4096"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.ttl</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.user_ttl</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.gc_ttl</entry>
      <entry>"3600"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.cache_by_default</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry>PHP_INI_SYSTEM avec APC &lt;= 3.0.12p2</entry>
     </row>
     <row>
      <entry>apc.filters</entry>
      <entry>NULL</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.mmap_file_mask</entry>
      <entry>NULL</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.slam_defense</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.file_update_protection</entry>
      <entry>"2"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry>apc.enable_cli</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt; APC 3.0.6</entry>
     </row>
     <row>
      <entry>apc.max_file_size</entry>
      <entry>"1M"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt; APC 3.0.6</entry>
     </row>
     <row>
      <entry>apc.stat</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt; APC 3.0.9</entry>
     </row>
     <row>
      <entry>apc.write_lock</entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt;= APC 3.0.11</entry>
     </row>
     <row>
      <entry>apc.report_autofilter</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt;= APC 3.0.11</entry>
     </row>
     <row>
      <entry>apc.include_once_override</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt;= APC 3.0.12</entry>
     </row>
     <row>
      <entry>apc.rfc1867</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt;= APC 3.0.13</entry>
     </row>
     <row>
      <entry>apc.rfc1867_prefix</entry>
      <entry>"upload_"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt;= APC 3.0.15</entry>
     </row>
     <row>
      <entry>apc.rfc1867_name</entry>
      <entry>"APC_UPLOAD_PROGRESS"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt;= APC 3.0.15</entry>
     </row>
     <row>
      <entry>apc.rfc1867_freq</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt;= APC 3.0.15</entry>
     </row>
     <row>
      <entry>apc.localcache</entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt;= APC 3.0.14</entry>
     </row>
     <row>
      <entry>apc.localcache.size</entry>
      <entry>"512"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>&gt;= APC 3.0.14</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  &ini.php.constants;
 </para>

 &ini.descriptions.title;

 <para>
  <variablelist>
   <varlistentry xml:id="ini.apc.enabled">
    <term>
     <parameter>apc.enabled</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      <literal>apc.enabled</literal> peut être défini à 0 pour
      désactiver APC. Ceci est utile lorsque APC est compilé statiquement
      dans &php;, et qu'il n'y a donc aucun autre moyen de le
      désactiver (lorsque compilé en tant que DSO, la ligne
      <literal>extension</literal> dans le <literal>php.ini</literal>
      peut juste être commentée).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.shm-segments">
    <term>
     <parameter>apc.shm_segments</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Le nombre de segments mémoire à allouer pour le cache compilé.
      Si APC fonctionne en dehors de la mémoire partagée mais
      que vous avez déjà défini <literal>apc.shm_size</literal>
      aussi élevé que votre système le permet, vous pouvez tenter
      de relever cette valeur.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.shm-size">
    <term>
     <parameter>apc.shm_size</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      La taille de chaque segment de mémoire partagé en MB.
      Par défaut, quelques systèmes (incluant la plupart des BSD)
      ont une limite basse de la taille d'un segment mémoire partagé.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.optimization">
    <term>
     <parameter>apc.optimization</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Le degré d'optimisation. Zéro désactive l'optimiseur,
      et de hautes valeurs utilisent des optimisations
      agressives. Attendez-vous à des améliorations très modestes
      de vitesse. Ceci est expérimental.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.num-files-hint">
    <term>
     <parameter>apc.num_files_hint</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Un "conseil" au sujet du nombre de fichiers sources distincts
      qui seront inclus ou demandés sur votre serveur web.
      Placez à zéro ou omettez-le si vous n'êtes pas sûr ;
      cet arrangement est principalement utile pour les sites
      qui ont des milliers de fichiers sources.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.user-entries-hint">
    <term>
     <parameter>apc.user_entries_hint</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Tout comme <link linkend="ini.apc.num-files-hint">apc.num_files_hint</link>,
      un "hint" à propos du nombre de variables utilisateur distinctes de cache à
      stocker. Définissez le à 0 ou ne le définissez pas si vous n'êtes pas sûr.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.ttl">
    <term>
     <parameter>apc.ttl</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Le nombre de secondes qu'une entrée de cache est autorisée
      à stagner dans un slot dans le cas où ce slot d'entrée de cache
      est nécessaire pour une autre entrée. Laisser à zéro signifie
      que votre cache pourrait potentiellement remplir d'autres entrées
      tant que d'autres entrées ne seront pas mises en cache.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.user-ttl">
    <term>
     <parameter>apc.user_ttl</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Le nombre de secondes qu'une entrée utilisateur du cache est autorisé à
      résider dans un slot dans le cas où ce slot d'entrée de cache est nécessaire
      par une autre entrée. Laisser cette option à zéro signifie que votre cache
      peut potentiellement être complété avec des entrées éventées lorsqu'il n'y
      a eu jamais d'entrées mises en cache.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.gc-ttl">
    <term>
     <parameter>apc.gc_ttl</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Le nombre de secondes qu'une entrée de cache peut
      rester dans la liste de la collection. Cette valeur fournit
      une sécurité dans le cas où le processus du serveur
      meurt lors de l'exécution d'un fichier source mis en cache ;
      si cette source est modifiée, la mémoire allouée pour l'ancienne
      version ne sera pas demandée tant que ce TTL ne sera pas atteint.
      Définissez-le à zéro pour désactiver cette fonctionnalité.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.cache-by-default">
    <term>
     <parameter>apc.cache_by_default</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Actif par défaut, mais peut être désactivé et utilisé
      en conjonction avec un <literal>apc.filters</literal>
      positif donc ces fichiers seront uniquement mis en cache s'ils correspondent
      à un filtre positif.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.filters">
    <term>
     <parameter>apc.filters</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      Une liste séparée par des virgules d'expressions rationnelles POSIX.
      Si un seul masque correspond à un nom de fichier source,
      le fichier ne sera pas mis en cache. Notez que le nom du fichier utilisé
      pour le masque est celui passé aux instructions include/require, et non
      un chemin absolu. Si le premier caractère de l'expression est un
      <literal>+</literal> alors l'expression sera additive dans le sens
      que chaque fichier correspondant à l'expression sera mis en cache, et
      si le premier caractère est un <literal>-</literal> alors tout ce qui
      correspond ne sera pas mis en cache. Le cas du <literal>-</literal>
      est celui par défaut, donc, il peut être omis.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.mmap-file-mask">
    <term>
     <parameter>apc.mmap_file_mask</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      Si compilé avec le support MMAP en utilisant <literal>--enable-mmap</literal>,
      ce sera le style mktemp de masque de fichier à passer au module
      MMAP pour déterminer si votre région de mémoire MMAP va être
      mise dans un fichier ou en mémoire partagée. Dans le cas de la mise
      en cache dans un fichier MMAP, définissez ce paramètre comme
      <literal>/tmp/apc.XXXXXX</literal> (exactement 6 <literal>X</literal>).
      Pour utiliser le style POSIX shm_open/mmap, placez un <literal>.shm</literal>
      quelque part dans votre masque, e.g. <literal>/apc.shm.XXXXXX</literal>.
      Vous pouvez également définir ce paramètre à <literal>/dev/zero</literal>
      pour utiliser votre interface kernel <literal>/dev/zero</literal> pour
      la mémoire anonyme MMAP. Le laisser indéfini forcera un MMAP anonyme.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.slam-defense">
    <term>
     <parameter>apc.slam_defense</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Sur les serveurs très surchargés lorsque vous démarrez le serveur
      ou modifiez des fichiers, vous pouvez créer une race contenant
      plusieurs processus pour mettre en cache le même fichier en même
      temps. Cette option définit le pourcentage de processus
      qui évitera de tenter de mettre en cache un fichier non mise en cache.
      Ou pensez à lui comme probabilité d'un processus simple pour éviter
      la mise en cache. Par exemple, définir <literal>apc.slam_defense</literal>
      à <literal>75</literal> signifie qu'il y a 75 % de chances que le processus
      ne mettra pas en cache un fichier qui ne s'y trouvera pas déjà.
      Définir à &zero; pour désactiver cette fonctionnalité.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.file-update-protection">
    <term>
     <parameter>apc.file_update_protection</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Lorsque vous modifiez un fichier sur un serveur web, vous
      devriez le faire d'une façon atomique. Écrivez-le dans un
      fichier temporaire et renommez-le (<literal>mv</literal>)
      vers sa position permanente lorsqu'il est prêt. La plupart des éditeurs
      de texte, cp, tar et les autres programmes de ce genre ne font
      pas cela. Cela signifie qu'il y a une chance pour que le fichier
      soit accédé (et donc, mis en cache) alors qu'il est encore en cours
      d'écriture. Ce paramètre <literal>apc.file_update_protection</literal>
      fait intervenir un délai pour la mise en cache des nouveaux fichiers.
      Par défaut, il vaut 2 secondes, ce qui signifie que si le timestamp
      de modification (<literal>mtime</literal>) d'un fichier montre
      qu'il vaut moins de 2 secondes, ce fichier ne sera pas mis en cache.
      La personne malheureuse qui a accédé à ce dossier moitié-écrit immobile
      verra une ébauche, mais au moins lui ne persistera pas.
      Si vous êtes certain de mettre toujours et automatiquement à jour
      vos fichiers en utilisant quelque chose comme rsync qui fait cela correctement,
      vous pouvez désactiver cette protection en le définissant à 0.
      Si vous avez un système qui flood avec io causant des procédures de mise
      à jour mettant plus de temps que 2 secondes, vous pourriez vouloir
      augmenter cette valeur.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.enable-cli">
    <term>
     <parameter>apc.enable_cli</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Pour tester et déboguer. Définir ceci active APC pour la
      version CLI de &php;. Normalement, vous ne devriez pas vouloir
      créer, peupler et démonter le cache APC à chaque requête CLI,
      mais pour divers scénarios de test, elle est maniable afin de pouvoir
      activer facilement APC pour la version CLI d'APC.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.max_file_size">
    <term>
     <parameter>apc.max_file_size</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Permet d'éviter la mise en cache des fichiers dont la taille est supérieure à
      cette valeur. Par défaut, 1M.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.stat">
    <term>
     <parameter>apc.stat</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Faites très attention si vous modifiez cette valeur. Par défaut, APC vérifie
      le script à chaque demande pour voir s'il a été modifié ou non. S'il a été
      modifié, il sera compilé à nouveau et la nouvelle version sera mise en cache.
      En désactivant cette option, aucune vérification n'aura lieu. Cela signifie
      que si vous voulez activer les modifications, vous devez redémarrer le
      serveur web. Sur un serveur de production où vous modifiez rarement le
      code, le fait de désactiver cette option permet de gagner en performances
      de manière significative.
     </para>
     <para>
      Pour les fichiers inclus/requis, cette option est également appliquée,
      mais notez que si vous utilisez des chemins relatifs (n'importe quel chemin
      qui ne commence pas par un / sous Unix), APC doit identifier de manière
      unique le fichier à vérifier. Si vous utilisez des chemins absolus pour vos
      inclusions, APC peut éviter ces vérifications et utiliser ce chemin absolu
      en tant qu'identifiant unique du fichier.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.write-lock">
    <term>
     <parameter>apc.write_lock</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Sur les serveurs très chargés, lorsque vous démarrez le serveur, ou
      lorsque beaucoup de fichiers sont modifiés, vous pouvez en finir avec
      les processus qui tentent de compiler et mettre en cache le même fichier.
      Lorsque write_lock est activé, uniquement un seul processus à la fois
      tentera de compiler un script de mise en cache tandis que les autres
      processus exécuteront les fichiers non mis en cache au lieu d'attendre
      que le verrou se libère.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.report-autofilter">
    <term>
     <parameter>apc.report_autofilter</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Logs tous les scripts qui sont automatiquement exclus de la mise en cache
      à cause de problèmes de liage.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.include-once-override">
    <term>
     <parameter>apc.include_once_override</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Optimiseles appels aux fonctions <function>include_once</function> et
      <function>require_once</function> et évite ainsi de surcharger le système
      appelant.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867">
    <term>
     <parameter>apc.rfc1867</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Le gestionnaire de progression de téléchargement de fichier RFC1867
      n'est disponible que si vous avez compilé APC avec &php; 5.2.0 ou supérieur.
      Lors le support est actif, les fichiers téléchargés qui incluent
      un champ appelé <literal>APC_UPLOAD_PROGRESS</literal> avant le champ "file"
      d'un formulaire de téléchargement fera qu'APC créera automatiquement
      une entrée de cache utilisateur nommée upload_<emphasis>key</emphasis> où
      <emphasis>key</emphasis> est la valeur de l'entrée de formulaire
      <literal>APC_UPLOAD_PROGRESS</literal>.
     </para>
     <para>
      Notez que la surveillance du téléchargement de fichier n'est pas compatible
      avec les threads pour le moment, ainsi, les nouveaux téléchargements survenant
      tandis qu'un précédent est toujours en cours désactivera la surveillance précédente.
     </para>
     <para>
      <example>
       <title>Exemple avec apc.rfc1867</title>
       <programlisting role="php">
<![CDATA[
<?php
print_r(apc_fetch("upload_$_POST[APC_UPLOAD_PROGRESS]"));
?>
]]>
       </programlisting>
       &example.outputs.similar;
       <screen>
<![CDATA[
Array
(
    [total] => 1142543
    [current] => 1142543
    [rate] => 1828068.8
    [filename] => test
    [name] => file
    [temp_filename] => /tmp/php8F
    [cancel_upload] => 0
    [done] => 1
)
]]>
       </screen>
      </example>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867_prefix">
    <term>
     <parameter>apc.rfc1867_prefix</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      Préfixe de la clé à utiliser pour l'entrée de cache utilisateur généré
      par la fonctionnalité de progression de téléchargement RFC1867.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867_name">
    <term>
     <parameter>apc.rfc1867_name</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      Spécifie le nom de l'entrée cachée du formulaire qui active la progression
      du téléchargement et spécifie le suffixe de la clé du cache utilisation.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867_freq">
    <term>
     <parameter>apc.rfc1867_freq</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
      La fréquence à laquelle la mise à jour doit être effectuée pour l'entrée
      du cache utilisateur pour la progression du téléchargement. Peut prendre
      la forme d'un pourcentage de la taille totale du fichier ou une taille,
      en octets, optionnellement suffixée par 'k', 'm', ou 'g' pour kilo-octets,
      méga-octets ou giga-octets (insensible à la casse).
      Si vous définissez cette option à 0, la mise à jour intervient aussi
      souvent que possible, ce qui peut rendre le téléchargement plus lent.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.localcache">
    <term>
     <parameter>apc.localcache</parameter>
     <type>boolean</type>
    </term>
    <listitem>
     <para>
      Ceci active un processus d'interface locale libre de cache, ce qui réduit
      les controverses de verrous lorsque le cache est sur le point d'être écrit.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.localcache.size">
    <term>
     <parameter>apc.localcache.size</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      La taille du processus d'interface locale libre de cache, doit être
      définit à une valeur suffisamment élevée, soit approximativement
      la moitié de la valeur de
      <link linkend="ini.apc.num-files-hint">apc.num_files_hint</link>.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->