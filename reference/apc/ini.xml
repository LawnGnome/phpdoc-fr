<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325214 Maintainer: jpauli Status: ready -->
<!-- Reviewed: yes Maintainer: pmartin -->

<section xml:id="apc.configuration" xmlns="http://docbook.org/ns/docbook">
 &reftitle.runtime;
 &extension.runtime;
 <para>
  Bien que la configuration par défaut d'APC soit suffisante pour la
  plupart des installations, les utilisateurs avancés devraient 
  affiner certains paramètres.
 </para>
 <para>
  Il y a deux décisions importantes que vous devez prendre lorsque vous configurez APC.
  Tout d'abord, quelle quantité de mémoire partagée va être allouée à APC, et
  ensuite, si vous voulez qu'APC vérifie à chaque requête si un fichier a été modifié.
  Les deux directives de configuration correspondantes
  sont <literal>apc.shm_size</literal> et <literal>apc.stat</literal>. 
  Lisez avec attention la section suivante sur ces deux directives de 
  configuration.
 </para>
 <para>
  Une fois que vous avez un serveur qui fonctionne, vous devriez copier le script
  <literal>apc.php</literal> fourni avec l'extension vers un endroit accessible
  par le serveur web, puis l'appeler depuis votre navigateur. Il vous fournira de nombreux
  détails sur votre cache. Si GD est actif sur votre configuration PHP, il y aura aussi
  des graphiques intéressants. La première chose à vérifier, bien évidemment, est que APC
  stocke effectivement des fichiers en cache.
  Si cela fonctionne, le nombre <literal>Cache full count</literal> sur la gauche indiquera le
  nombre de fois où le cache a atteint sa capacité maximale, et où APC a dû effacer de force
  des entrées qui n'avaient pas été accédées dans les dernières <literal>apc.ttl</literal> secondes.
  Dans le cas d'un cache bien configuré, ce nombre est minimisé.
  Si le cache est constamment rempli, et donc vidé de force, les opérations résultantes auront un
  impact dévastateur sur les performances. La manière la plus simple de minimiser ce nombre est
  d'allouer plus de mémoire pour APC. Ceci dit, la directive <literal>apc.filters</literal> peut
  être utilisée pour mettre en cache moins de scripts.
 </para>
 <para>
  Lorsque APC est compilé avec le support mmap (Memory Mapping), il n'utilisera qu'un seul
  segment mémoire, alors que APC compilé avec le support SHM (SysV Shared Memory) utilisera
  plusieurs segments mémoires. MMAP n'a pas de limite maximale comme SHM dans
  <literal>/proc/sys/kernel/shmmax</literal>. En général MMAP est recommandé car il accèdera
  à la mémoire de manière plus rapide lorsque le serveur web est redémarré et il réduit aussi
  les impacts des allocations mémoire au démarrage.
 </para>
 <para>
  <table>
   <title>&ConfigureOptions; APC</title>
   <tgroup cols="4">
    <thead>
     <row>
      <entry>&Name;</entry>
      <entry>&Default;</entry>
      <entry>&Changeable;</entry>
      <entry>&Changelog;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><link linkend="ini.apc.enabled">apc.enabled</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>PHP_INI_SYSTEM avec APC 2. PHP_INI_ALL avec APC &lt;= 3.0.12</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.shm-segments">apc.shm_segments</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.shm-size">apc.shm_size</link></entry>
      <entry>"32M"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.optimization">apc.optimization</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry>PHP_INI_SYSTEM avec APC 2. Supprimé depuis APC 3.0.13.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.num-files-hint">apc.num_files_hint</link></entry>
      <entry>"1000"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.user-entries-hint">apc.user_entries_hint</link></entry>
      <entry>"4096"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.ttl">apc.ttl</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.user-ttl">apc.user_ttl</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.gc-ttl">apc.gc_ttl</link></entry>
      <entry>"3600"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.cache-by-default">apc.cache_by_default</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry>PHP_INI_SYSTEM avec APC &lt;= 3.0.12. Disponible depuis APC 3.0.0.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.filters">apc.filters</link></entry>
      <entry>NULL</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.mmap-file-mask">apc.mmap_file_mask</link></entry>
      <entry>NULL</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.slam-defense">apc.slam_defense</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.0. Avant la version 3.1.4 d'APC, la valeur par défaut était <literal>"0"</literal> (désactivé).</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.file-update-protection">apc.file_update_protection</link></entry>
      <entry>"2"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.6.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.enable-cli">apc.enable_cli</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.7.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.max-file-size">apc.max_file_size</link></entry>
      <entry>"1M"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.7.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.use-request-time">apc.use_request_time</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_ALL</entry>
      <entry>Disponible depuis APC 3.1.3.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.stat">apc.stat</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.10.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.write-lock">apc.write_lock</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.11.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.report-autofilter">apc.report_autofilter</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.11.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.include-once-override">apc.include_once_override</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.12.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.rfc1867">apc.rfc1867</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.13.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.rfc1867-prefix">apc.rfc1867_prefix</link></entry>
      <entry>"upload_"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.rfc1867-name">apc.rfc1867_name</link></entry>
      <entry>"APC_UPLOAD_PROGRESS"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row> 
      <entry><link linkend="ini.apc.rfc1867-freq">apc.rfc1867_freq</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry></entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.rfc1867-ttl">apc.rfc1867_ttl</link></entry>
      <entry>"3600"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.1.1.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.localcache">apc.localcache</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.14.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.localcache.size">apc.localcache.size</link></entry>
      <entry>"512"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.14.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.coredump-unmap">apc.coredump_unmap</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.16.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.stat-ctime">apc.stat_ctime</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.0.13.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.preload-path">apc.preload_path</link></entry>
      <entry>NULL</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.1.1.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.file-md5">apc.file_md5</link></entry>
      <entry>"0"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.1.1.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.canonicalize">apc.canonicalize</link></entry>
      <entry>"1"</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.1.1.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.lazy-functions">apc.lazy_functions</link></entry>
      <entry>0</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.1.3.</entry>
     </row>
     <row>
      <entry><link linkend="ini.apc.lazy-classes">apc.lazy_classes</link></entry>
      <entry>0</entry>
      <entry>PHP_INI_SYSTEM</entry>
      <entry>Disponible depuis APC 3.1.3.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  &ini.php.constants;
 </para>

 &ini.descriptions.title;

 <para>
  <variablelist>
   <varlistentry xml:id="ini.apc.enabled">
    <term>
     <parameter>apc.enabled</parameter>
     &boolean;
    </term>
    <listitem>
     <para>
      <literal>apc.enabled</literal> peut être défini à 0 pour
      désactiver APC. Ceci est principalement utile lorsque APC est compilé statiquement
      dans PHP, et qu'il n'y a donc aucun autre moyen de le
      désactiver (lorsque compilé en tant que DSO, la ligne
      <literal>extension</literal> dans le <literal>php.ini</literal>
      peut juste être commentée).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.shm-segments">
    <term>
     <parameter>apc.shm_segments</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Le nombre de segments mémoire à allouer pour le cache compilé.
      Si APC arrive à court de mémoire partagée, mais
      que vous avez déjà défini <literal>apc.shm_size</literal>
      à une valeur aussi élevée que votre système le permet, vous pouvez tenter
      de relever cette valeur.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.shm-size">
    <term>
     <parameter>apc.shm_size</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      La taille de chaque segment de mémoire partagée en MB.
      Par défaut, quelques systèmes (incluant la plupart des BSD)
      ont une limite de taille d'un segment mémoire partagé très basse.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.optimization">
    <term>
     <parameter>apc.optimization</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Le degré d'optimisation. Zéro désactive l'optimiseur,
      et de hautes valeurs utilisent des optimisations
      agressives. Attendez-vous à des améliorations très modestes
      de vitesse. Ceci est expérimental.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.num-files-hint">
    <term>
     <parameter>apc.num_files_hint</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Un "conseil" au sujet du nombre de fichiers sources distincts
      qui seront inclus ou demandés sur votre serveur web.
      Définissez le à zéro ou omettez-le si vous n'êtes pas sûr ;
      ce paramètre est principalement utile pour les sites
      qui ont des milliers de fichiers sources.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.user-entries-hint">
    <term>
     <parameter>apc.user_entries_hint</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Tout comme <link linkend="ini.apc.num-files-hint">apc.num_files_hint</link>,
      un "conseil" à propos du nombre de variables de cache utilisateur distinctes à
      stocker. Définissez le à 0 ou ne le définissez pas si vous n'êtes pas sûr.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.ttl">
    <term>
     <parameter>apc.ttl</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Le nombre de secondes pendant lesquelles une entrée de cache est autorisée
      à stagner dans un slot dans le cas où ce slot d'entrée de cache
      est nécessaire pour une autre entrée.
      Laisser ce paramètre à zéro signifie que le cache d'APC pourrait potentiellement se remplir
      de vieilles entrées alors que de nouvelles entrées ne seraient pas mises en cache.
      Dans le cas d'un cache arrivant totalement à court de mémoire disponible, celui-ci sera
      totalement vidé si ttl est égal à 0.
      Dans le cas contraire, si le ttl est supérieur à 0, APC essayera de supprimer des entrées
      ayant expirées.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.user-ttl">
    <term>
     <parameter>apc.user_ttl</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Le nombre de secondes pendant lesquelles une entrée du cache utilisateur est autorisée à
      résider dans un slot dans le cas où ce slot d'entrée de cache est demandé
      par une autre entrée. Laisser cette option à zéro signifie que votre cache
      peut potentiellement se remplir d'entrées obsolètes alors que de nouvelles entrées ne seront
      pas mises en cache.
      Dans le cas où le cache est totalement à court d'espace, il sera totalement vidé si ttl vaut 0.
      Sinon, si le ttl est supérieur à 0, APC tentera de supprimer les entrées qui ont dépassées
      leur date d'expiration.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.gc-ttl">
    <term>
     <parameter>apc.gc_ttl</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Le nombre de secondes pendant lesquelles une entrée de cache peut rester
      dans la liste de ramasse-miettes.
      Cette directive fournit une sécurité dans le cas où un processus serveur meurt
      pendant qu'il exécute un fichier source mis en cache ; si ce fichier source est modifié,
      la mémoire allouée pour l'ancienne version ne sera pas récupérée tant que la durée
      spécifiée par ce TTL ne sera pas écoulée.
      Positionnez cette directive à zéro pour désactiver cette fonctionnalité.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.cache-by-default">
    <term>
     <parameter>apc.cache_by_default</parameter>
     &boolean;
    </term>
    <listitem>
     <para>
      Actif par défaut, mais peut être désactivé et utilisé
      en conjonction avec un <literal>apc.filters</literal>
      positif pour que les fichiers soient mis en cache uniquement
      s'ils correspondent à un filtre positif.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.filters">
    <term>
     <parameter>apc.filters</parameter>
     &string;
    </term>
    <listitem>
     <para>
      Une liste d'expressions rationnelles POSIX étendues séparées par des virgules.
      Si un masque correspond à un nom de fichier source,
      alors celui-ci ne sera pas mis en cache. Notez que le nom du fichier utilisé
      pour la comparaison est celui passé aux instructions <function>include</function> ou
      <function>require</function>, et non un chemin absolu.
      Si le premier caractère de l'expression est un
      <literal>+</literal>, alors l'expression sera additive dans le sens
      que chaque fichier correspondant à l'expression sera mis en cache, et
      si le premier caractère est un <literal>-</literal> alors tout ce qui
      correspond ne sera pas mis en cache. Le cas du <literal>-</literal>
      est celui par défaut, il peut donc être omis.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.mmap-file-mask">
    <term>
     <parameter>apc.mmap_file_mask</parameter>
     &string;
    </term>
    <listitem>
     <para>
      Si compilé avec le support MMAP en utilisant <literal>--enable-mmap</literal>,
      ce sera le masque de fichier de style mktemp à passer au module
      MMAP pour déterminer si votre région de mémoire MMAP va être
      mise dans un fichier ou en mémoire partagée. Pour de la mise
      en cache vers un fichier MMAP, définissez ce paramètre comme
      <literal>/tmp/apc.XXXXXX</literal> (exactement 6 <literal>X</literal>).
      Pour utiliser shm_open/mmap de style POSIX, placez un <literal>.shm</literal>
      quelque part dans votre masque, comme <literal>/apc.shm.XXXXXX</literal>.
      Vous pouvez également définir ce paramètre à <literal>/dev/zero</literal>
      pour utiliser l'interface<literal>/dev/zero</literal> de votre kernel vers
      de la mémoire anonyme MMAP. Le laisser indéfini forcera un MMAP anonyme.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.slam-defense">
    <term>
     <parameter>apc.slam_defense</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Sur les serveurs très surchargés, lorsque vous démarrez le serveur
      ou modifiez des fichiers, vous pouvez créer une course d'un grand nombre
      de processus essayant tous de mettre en cache le même fichier au même
      moment. Cette option définit le pourcentage de processus
      qui éviteront de tenter de mettre en cache un fichier non mis en cache.
      Ou pensez à elle comme à la probabilité qu'a un processus d'éviter
      la mise en cache. Par exemple, définir <literal>apc.slam_defense</literal>
      à <literal>75</literal> signifie qu'il y aura 75 % de chances qu'un processus donné
      ne mette pas en cache un fichier qui ne s'y trouvera pas déjà.
      Positionnez cette directive à <literal>0</literal> pour désactiver cette fonctionnalité.
     </para>
     <para>
      Cette directive a été rendue obsolète par <link linkend="ini.apc.write-lock">apc.write_lock</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.file-update-protection">
    <term>
     <parameter>apc.file_update_protection</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Lorsque qu'un fichier est modifié sur un serveur web, il
      faudrait vraiment que ce soit fait d'une façon atomique.
      Typiquement, cela peut se faire en écrivant vers un fichier temporaire, et en
      renommant (<literal>mv</literal>) celui-ci vers son emplacement permanent
      lorsqu'il est prêt. La plupart des éditeurs de texte, <command>cp</command>,
      <command>tar</command> et d'autres programmes de ce genre ne font
      pas cela. Cela signifie qu'il y a une chance pour qu'un fichier
      soit accédé (et donc, mis en cache) alors qu'il est encore en cours
      d'écriture. Le paramètre <literal>apc.file_update_protection</literal>
      fait intervenir un délai avant la mise en cache des nouveaux fichiers.
      Par défaut, il vaut 2 secondes, ce qui signifie que si le timestamp
      de modification (<literal>mtime</literal>) d'un fichier montre
      qu'il est agé de moins de 2 secondes au moment où il est accédé,
      ce fichier ne sera pas mis en cache.
      La malheureuse personne qui a accédé à ce fichier à moitié écrit
      verra toujours quelque chose d'étrange, mais au moins, ceci ne persistera pas en cache.
      Si tous les fichiers du serveurs sont modifiés de manière atomique, à l'aide d'une
      méthode comme <command>rsync</command> qui fait cela correctement,
      cette protection peut être désactivée en définissant cette directive à 0.
      Si le système est noyé sous les entrées/sorties et que des procédures de mise
      à jour durent plus de 2 secondes, cette valeur devrait être augmentée, pour activer
      la protection sur ces opérations d'écritures plus lentes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.enable-cli">
    <term>
     <parameter>apc.enable_cli</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Principalement pour tester et déboguer. Définir ceci active APC pour la
      version CLI de PHP.
      Dans des circonstances normales, il n'est pas idéal de créer, peupler, et détruire
      le cache APC à chaque requête CLI, mais pour divers scénarios de test, il est utile de
      pouvoir activer facilement APC pour la version CLI de PHP.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.max-file-size">
    <term>
     <parameter>apc.max_file_size</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Permet d'éviter la mise en cache de fichiers dont la taille est supérieure à
      cette valeur. Par défaut, 1Mo.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ini.apc.stat">
    <term>
     <parameter>apc.stat</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Faites très attention si vous modifiez cette valeur. Elle vaut par défaut on,
      ce qui force APC à vérifier (stat) le script à chaque requête pour déterminer
      s'il a été modifié ou non. S'il a été modifié, il sera compilé à nouveau et la
      nouvelle version sera mise en cache.
      En désactivant cette option, aucune vérification n'aura lieu. Cela signifie
      généralement que si vous voulez forcer APC à détecter des modifications, vous
      devrez redémarrer le serveur web, ou vider manuellement le cache.
      Notez que les configurations FastCGI de serveurs peuvent ne pas vider le cache
      au redémarrage.
      Sur un serveur de production où vous modifiez rarement le code, le fait de
      désactiver cette option permet de réaliser un gain de performances significatif.
     </para>
     <para>
      Cette option est également prise en compte pour les fichiers inclus/requis,
      mais notez que si vous utilisez des chemins relatifs (n'importe quel chemin
      qui ne commence pas par un / sous Unix), APC doit vérifier de manière à identifier
      le fichier de manière unique. Si vous utilisez des chemins absolus pour vos
      inclusions, APC peut éviter ces vérifications et utiliser ce chemin absolu
      en tant qu'identifiant unique du fichier.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.write-lock">
    <term>
     <parameter>apc.write_lock</parameter>
     &boolean;
    </term>
    <listitem>
     <para>
      Sur les serveurs très chargés, lorsque vous démarrez le serveur ou
      lorsque beaucoup de fichiers ont été modifiés au même moment, APC peut
      essayer de compiler et de mettre en cache le même fichier plusieurs fois.
      Write_lock garantit qu'un seul processus tentera la compilation et la mise
      en cache d'un script non caché. Les autres processus essayant d'utiliser le
      script fonctionneront sans utiliser le cache d'opcode, au lieu d'être
      bloqués dans l'attente de l'initialisation de celui-ci.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.report-autofilter">
    <term>
     <parameter>apc.report_autofilter</parameter>
     &boolean;
    </term>
    <listitem>
     <para>
      Loggue tous les scripts qui ont été automatiquement exclus de la mise en cache
      à cause de problèmes de liaison.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.include-once-override">
    <term>
     <parameter>apc.include_once_override</parameter>
     &boolean;
    </term>
    <listitem>
     <para>
      Optimise les appels aux fonctions
      <function>include_once</function> et
      <function>require_once</function> et
      évite les appels système coûteux qui auraient autrement été effectués.
     </para>
     <warning>
      <simpara>
       Cette fonctionnalité est <emphasis>EXPERIMENTALE</emphasis>.
       Son comportement, son nom, ainsi que sa documentation peuvent
       être modifiés sans avertissement dans une version future d'APC.
       Cette fonctionnalité doit être utilisée à votre propre risque.
      </simpara>
     </warning>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867">
    <term>
     <parameter>apc.rfc1867</parameter>
     &boolean;
    </term>
    <listitem>
     <para>
      Le gestionnaire de progression de téléchargement de fichier RFC1867
      n'est disponible que si vous avez compilé APC avec PHP 5.2.0 ou supérieur.
      Lorsque le support est actif, les fichiers téléchargés qui incluent
      un champ appelé <literal>APC_UPLOAD_PROGRESS</literal> avant le champ "file"
      d'un formulaire de téléchargement feront qu'APC créera automatiquement
      une entrée de cache utilisateur nommée upload_<emphasis>key</emphasis> où
      <emphasis>key</emphasis> est la valeur de l'entrée de formulaire
      <literal>APC_UPLOAD_PROGRESS</literal>.
     </para>
     <para>
      Notez que le champ caché spécifié par
      <literal>APC_UPLOAD_PROGRESS</literal> doit être placé avant le champ de type
      <literal>file</literal>, sinon le suivi de l'upload ne fonctionnera pas
      correctement.
     </para>
     <para>
      Notez que la surveillance du téléchargement de fichier n'est pas compatible
      avec les threads pour le moment. Ainsi, les nouveaux téléchargements survenant
      tandis qu'un précédent est toujours en cours désactiveront la surveillance précédente.
     </para>
     <para>
      Notez que <literal>rate</literal> n'est disponible que lorsque tous les
      transferts sont terminés.
     </para>
     <para>
      <example>
       <title>Exemple avec apc.rfc1867</title>
       <programlisting role="php">
<![CDATA[
<?php
print_r(apc_fetch("upload_$_POST[APC_UPLOAD_PROGRESS]"));
?>
]]>
       </programlisting>
       &example.outputs.similar;
       <screen>
<![CDATA[
Array
(
    [total] => 1142543
    [current] => 1142543
    [rate] => 1828068.8
    [filename] => test
    [name] => file
    [temp_filename] => /tmp/php8F
    [cancel_upload] => 0
    [done] => 1
)
]]>
       </screen>
      </example>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867-prefix">
    <term>
     <parameter>apc.rfc1867_prefix</parameter>
     &string;
    </term>
    <listitem>
     <para>
      Préfixe de la clé à utiliser pour l'entrée de cache utilisateur générée
      par la fonctionnalité de progression de téléchargement RFC1867.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867-name">
    <term>
     <parameter>apc.rfc1867_name</parameter>
     &string;
    </term>
    <listitem>
     <para>
      Spécifie le nom du champ masqué du formulaire qui active le suivi de la progression
      du téléchargement et spécifie le suffixe de la clé du cache utilisateur.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867-freq">
    <term>
     <parameter>apc.rfc1867_freq</parameter>
     &string;
    </term>
    <listitem>
     <para>
      La fréquence à laquelle des mises à jour doivent être effectuées pour l'entrée
      du cache utilisateur pour la progression du téléchargement. Ceci peut prendre
      la forme d'un pourcentage de la taille totale du fichier ou une taille
      en octets, optionnellement suffixée par <literal>"k"</literal>, <literal>"m"</literal>, 
      ou <literal>"g"</literal> pour kilo-octets, méga-octets ou giga-octets (insensible à la casse).
      Si vous définissez cette option à 0, la mise à jour interviendra aussi
      souvent que possible, ce qui peut rendre le téléchargement plus lent.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.rfc1867-ttl">
    <term>
     <parameter>apc.rfc1867_ttl</parameter>
     <type>bool</type>
    </term>
    <listitem>
     <para>
      <acronym>TTL</acronym> pour les entrées rfc1867.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.localcache">
    <term>
     <parameter>apc.localcache</parameter>
     &boolean;
    </term>
    <listitem>
     <para>
      Ceci active un cache sans verrou, propre au processus courant, qui réduit
      les blocages de verrous lorsque le cache est en cours d'écriture.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.localcache.size">
    <term>
     <parameter>apc.localcache.size</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      La taille du cache propre au processus, qui devrait être
      définie à une valeur suffisamment élevée, soit approximativement
      la moitié de la valeur de
      <link linkend="ini.apc.num-files-hint">apc.num_files_hint</link>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.coredump-unmap">
    <term>
     <parameter>apc.coredump_unmap</parameter>
     &boolean;
    </term>
    <listitem>
     <para>
      Active la gestion APC des signaux, comme SIGSEGV, qui écrit
      les fichiers internes lorsqu'il est émis. Lorsque ces signaux
      sont reçus, APC tentera de détacher les segments de la mémoire
      partagée afin de les exclure du fichier interne. Cette configuration
      devrait rendre plus stable le système lorsque des signaux fatals
      sont reçus et qu'un gros segment APC de mémoire partagée est
      configuré.
     </para>
     <warning>
      <para>
       Cette fonctionnalité est potentiellement dangereuse.
       Le détachement d'un segment de mémoire partagée dans un
       gestionnaire de signaux fatals peut produire à un comportement
       indéterminé si une erreur fatale survient.
      </para>
     </warning>
     <note>
      <para>
       Bien que certains noyaux puissent fournir une fonctionnalité permettant d'ignorer divers
       types de mémoire partagée lors de la génération du fichier interne, ces implémentations
       peuvent également ignorer d'importants segments de mémoire partagée
       tel que le scoreboard d'Apache.
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.stat-ctime">
    <term>
     <parameter>apc.stat_ctime</parameter>
     &integer;
    </term>
    <listitem>
     <para>
      Une vérification avec ctime permet d'éviter les problèmes causés par des
      programmes comme svn ou rsync en s'assurant que les inodes n'ont pas
      été modifiés depuis le dernier appel à stat. APC, normalement,
      n'utilise que mtime pour cela.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.canonicalize">
    <term>
     <parameter>apc.canonicalize</parameter>
     <type>bool</type>
    </term>
    <listitem>
     <para>
      Si activé, les chemins relatifs sont canonisés en mode no-stat.
      Si défini, alors les fichiers inclus via les gestionnaires
      de flux ne pourront pas être mis en cache, puisque que
      la fonction <function>realpath</function> ne supporte pas les
      gestionnaires de flux.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.preload-path">
    <term>
     <parameter>apc.preload_path</parameter>
     <type>string</type>
    </term>
    <listitem>
     <para>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.use-request-time">
    <term>
     <parameter>apc.use_request_time</parameter>
     <type>bool</type>
    </term>
    <listitem>
     <para>
      Utilise le temps de début de requête <acronym>SAPI</acronym>
      pour le <acronym>TTL</acronym>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.file-md5">
    <term>
     <parameter>apc.file_md5</parameter>
     <type>bool</type>
    </term>
    <listitem>
     <para>
      Enregistre un hashage md5 pour les fichiers.
     </para>
    </listitem>
   </varlistentry>
   
   <varlistentry xml:id="ini.apc.lazy-functions">
    <term>
     <parameter>apc.lazy_functions</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Active le chargement à la demande pour les fonctions.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry xml:id="ini.apc.lazy-classes">
    <term>
     <parameter>apc.lazy_classes</parameter>
     <type>integer</type>
    </term>
    <listitem>
     <para>
      Active le chargement à la demande pour les classes.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->