<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.2 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: no -->
<refentry id="function.PDO-pgsqlLOBCreate">
 <refnamediv>
  <refname>PDO::pgsqlLOBCreate</refname>
  <refpurpose>Crée un nouvel objet large</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>PDO::pgsqlLOBCreate</methodname>
   <void/>
  </methodsynopsis>
  <para>
   <function>PDO::pgsqlLOBCreate</function> crée un objet large et retourne le
   OID de cet objet. Vous devrez alors ouvrir un flux sur cet objet en
   utilisant <function>PDO::pgsqlLOBOpen</function> pour lire et écrire des
   données à l'intérieur. Le OID peut être enregistré en colonnes de type OID
   et doit être utilisé pour référencer l'objet large, sans pour autant
   augmenter arbitrairement la grandeur des lignes. L'objet large continuera a
   vivre dans la base de données tant qu'il n'est pas supprimé en appelant
   <function>PDO::pgsqlLOBUnlink</function>.
  </para>
  <para>
   Les objets larges peuvent atteindre une taille jusqu'à 2GO, mais sont
   encombrant à utiliser; vous devez vous assurer que
   <function>PDO::pgsqlLOBUnlink</function> est appelée avant de supprimer la
   dernière ligne qui fait référence son OID de votre base de données. De
   plus, les objets larges n'ont pas de contrôle d'accès. Comme alternative,
   essayez la colonne de type bytea; les nouvelles versions de PostgreSQL
   autorisent les colonnes bytea à atteindre une taille de 1GO et gère de
   manière transparente l'enregistrement pour avoir une ligne de taille
   optimale.
  </para>
  <note>
   <simpara>
    Cette fonction doit être appelée à l'intérieur d'une transaction.
   </simpara>
  </note>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <function>PDO::pgsqlLOBCreate</function> ne prend aucun paramètre.
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le OID du nouvel objet large créé en cas de réussite ou &false; en
   cas d'échec.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>PDO::pgsqlLOBCreate</function></title>
    <para>
     Cet exemple crée un nouvel objet large et copie le contenu d'un fichier à
     l'intérieur. Le OID est alors enregistré dans une table.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$db = new PDO('pgsql:dbname=test host=localhost', $user, $pass);
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$db->beginTransaction();
$oid = $db->pgsqlLOBCreate();
$stream = $db->pgsqlLOBOpen($oid, 'w');
$local = fopen($filename, 'rb');
stream_copy_to_stream($local, $stream);
$local = null;
$stream = null;
$stmt = $db->prepare("INSERT INTO BLOBS (ident, oid) VALUES (?, ?)");
$stmt->execute(array($some_id, $oid));
$db->commit();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::pgsqlLOBOpen</function></member>
    <member><function>PDO::pgsqlLOBUnlink</function></member>
    <member><function>pg_lo_create</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
