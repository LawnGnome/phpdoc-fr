<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<!-- Purpose: basic.vartype -->
<!-- Membership: bundled -->
<!-- State: experimental -->

<book xml:id="book.objaggregation" xmlns="http://docbook.org/ns/docbook">
 <title>Agrégation d'objets/de composition de fonctions</title>
 <titleabbrev>Agrégation d'objets</titleabbrev>

 <preface xml:id="intro.objaggregation">
  &reftitle.intro;
  &warn.experimental;
  <para>
   En programmation objet, il est courant de rencontrer la combinaison
   de classes simples (et de leurs instances) en une classe plus complexe.
   C'est une stratégie habile pour mettre en place des objets complexes,
   et des hiérarchies d'objets. Ce système peut fonctionner comme une
   alternative dynamique à l'héritage multiple. Il y a deux solutions
   pour combiner deux classes, suivant la relation de leurs éléments
   constitutifs : L'<emphasis>Association</emphasis> et
   l'<emphasis>agrégation</emphasis>.
  </para>
 </preface>

 &reference.objaggregation.examples;
 &reference.objaggregation.reference;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

