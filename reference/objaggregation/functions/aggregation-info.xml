<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
 <refentry id="function.aggregation-info">
   <refnamediv>
    <refname>aggregation_info</refname>
    <refpurpose>
     Retourne un tableau associatif d&eacute;crivant les classes aggr&eacute;g&eacute;es
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>array</type><methodname>aggregation_info</methodname>
      <methodparam><type>object</type><parameter>object</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>aggregation_info</function> retourne les informations d'aggr&eacute;gation
     pour l'objet <parameter>object</parameter>, sous la forme d'un tableau associatif. 
     Les cl&eacute;s de ce tableau sont les noms des classes aggr&eacute;g&eacute;es.
    </para>
    <para>
     Par exemple, le code ci-dessous
     <example>
      <title>Exemple avec <function>aggregation_info</function></title>
      <programlisting role='php'>
<![CDATA[
<?php

class Slicer {
    var $vegetable;

    function Slicer($vegetable) {
        $this->vegetable = $vegetable;
    }

    function slice_it($num_cuts) {
        echo "Tranchage\n";
        for ($i=0; $i < $num_cuts; $i++) {
            // un peu de tranchage some slicing
        }
    }
}

class Dicer {
    var $vegetable;
    var $rotation_angle = 90;   // degr&eacute;s

    function Dicer($vegetable) {
        $this->vegetable = $vegetable;
    }

    function dice_it($num_cuts) {
        echo "Coupe suivant une direction\n";
        for ($i=0; $i < $num_cuts; $i++) {
            // tranchage
        }
        $this->rotate($this->rotation_angle);
        echo "Coupe suivant une autre direction\n";
        for ($i=0; $i < $num_cuts; $i++) {
            // tranchage encoer
        }
    }

    function rotate($deg) {
        echo "Rotation de {$this->vegetable} {$deg} degr&eacute;s\n";
    }

    function _secret_super_dicing($num_cuts) {
        // secret industriel, a ne pas montrer.
    }
}

$obj = new Slicer('onion');
aggregate($obj, 'Dicer');
print_r(aggregate_info($obj));
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     va produire le r&eacute;sultat suivant
     <informalexample>
      <programlisting>
<![CDATA[
Array
(
    [dicer] => Array
        (
            [methods] => Array
                (
                    [0] => dice_it
                    [1] => rotate
                )

            [properties] => Array
                (
                    [0] => rotation_angle
                )

        )

)
]]>
      </programlisting>
     </informalexample>
     Comme vous pouvez le voir, toutes les m&eacute;thodes et propri&eacute;t&eacute;s de
     <classname>Dicer</classname> ont &eacute;t&eacute; aggr&eacute;g&eacute;es dans notre nouvel
     objet, a l'exc&eacute;ption de la classe constructuer, et de la m&eacute;thode
     <methodname>_secret_super_dicing</methodname>
    </para>
    <simpara>
     Voir aussi
     <function>aggregate</function>,
     <function>aggregate_methods</function>,
     <function>aggregate_methods_by_list</function>,
     <function>aggregate_methods_by_regexp</function>,
     <function>aggregate_properties</function>,
     <function>aggregate_properties_by_list</function>,
     <function>aggregate_properties_by_regexp</function> et
     <function>deaggregate</function>

    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
