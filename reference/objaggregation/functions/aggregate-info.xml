<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.7 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
 <refentry xml:id="function.aggregate-info" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>aggregate_info</refname>
    <refpurpose>
     Retourne un tableau associatif avec les méthodes et propriétés de chaque classe
     qui a été agrégée
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>array</type><methodname>aggregate_info</methodname>
      <methodparam><type>object</type><parameter>object</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>aggregate_info</function> retourne un tableau associatif avec
     les méthodes et propriétés de chaque classe qui a été agrégée pour former
     l'objet <parameter>object</parameter>. La clé du tableau principal
     est le nom de la classe agrégée.
    </para>
    <para>
     Pour un exemple, voir le code ci-dessous.
     <example>
      <title>Exemple avec <function>aggregate_info</function></title>
      <programlisting role="php">
<![CDATA[
<?php

class Slicer {
    var $legume;

    function Slicer($legume) {
        $this->legume = $legume;
    }

    function slice_it($num_cuts) {
        echo "Coupe en tranches\n";
        for ($i=0; $i < $num_cuts; $i++) {
            // coupe en tranches
        }
    }
}

class Dicer {
    var $legume;
    var $rotation_angle = 90;   // degrés

    function Dicer($legume) {
        $this->legume = $legume;
    }

    function dice_it($num_cuts) {
        echo "Couper dans une direction\n";
        for ($i=0; $i < $num_cuts; $i++) {
            // coupe
        }
        $this->rotate($this->rotation_angle);
        echo "Couper dans une seconde direction\n";
        for ($i=0; $i < $num_cuts; $i++) {
            // coupe encore
        }
    }

    function rotate($deg) {
        echo "Maintenant tourne {$this->legume} {$deg} degrees\n";
    }

    function _secret_super_dicing($num_cuts) {
        // tellement secret que nous ne pouvons vous montrer ;-)
    }
}

$obj = new Slicer('onion');
aggregate($obj, 'Dicer');
print_r(aggregate_info($obj));
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
    [dicer] => Array
        (
            [methods] => Array
                (
                    [0] => dice_it
                    [1] => rotate
                )

            [properties] => Array
                (
                    [0] => rotation_angle
                )

        )

)
]]>
      </screen>
     </example>
     Comme vous pouvez le voir, toutes les méthodes et propriétés de la
     classe <classname>dicer</classname> ont été agrégées dans notre nouvel
     objet, à l'exception de la classe constructeur et de la méthode
     privée <methodname>_secret_super_dicing</methodname>
    </para>
    <simpara>
     Voir aussi
     <function>aggregate</function>,
     <function>aggregate_methods</function>,
     <function>aggregate_methods_by_list</function>,
     <function>aggregate_methods_by_regexp</function>,
     <function>aggregate_properties</function>,
     <function>aggregate_properties_by_list</function>,
     <function>aggregate_properties_by_regexp</function> et
     <function>deaggregate</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
