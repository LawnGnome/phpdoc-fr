<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.token-get-all" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>token_get_all</refname>
  <refpurpose>Scinde un code source en éléments de base</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>token_get_all</methodname>
   <methodparam><type>string</type><parameter>source</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>token_get_all</function> analyse la chaîne donnée
   <parameter>source</parameter> en utilisant l'analyseur lexical du moteur Zend.
  </para>
  <para>
   Pour une liste des tokens, voir <xref linkend="tokens"/>, ou utilisez la fonction
   <function>token_name</function> pour traduire une valeur token dans une
   représentation sous forme de chaîne de caractères.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>source</parameter></term>
     <listitem>
      <para>
       Le source PHP à analyser.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un tableau contenant la liste des descriptions des éléments. Chaque élément
   du tableau peut être un caractère unique (i.e.: <literal>;</literal>,
   <literal>.</literal>, <literal>&gt;</literal>, <literal>!</literal>, etc.)
   ou bien un tableau contenant un identifiant de token dans l'élément 0,
   la représentation de ce code source dans l'élément 1 et le numéro de la ligne dans
   l'élément 2.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>token_get_all</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$tokens = token_get_all('<?php echo; ?>'); /* => array(
                                                  array(T_OPEN_TAG, '<?php'),
                                                  array(T_ECHO, 'echo'),
                                                  ';',
                                                  array(T_CLOSE_TAG, '?>') ); */
/* Notez que dans l'exemple suivant, la chaîne est parsée
comme T_INLINE_HTML plutôt que l'attendu T_COMMENT (T_COMMENT dans PHP inférieur
à la version 5), car il n'y a pas d'ouverture/fermeture de balises utilisées dans le "code".
Cela revient à mettre un commentaire à l'extérieur des balises <?php ?> dans
un fichier normal. */
$tokens = token_get_all('/* comment */'); // => array(array(T_INLINE_HTML, '/* comment */'));
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.2</entry>
       <entry>Les numéros de lignes sont retournés dans l'élément 2
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->