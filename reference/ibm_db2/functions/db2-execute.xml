<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.10 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.db2-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_execute</refname>
  <refpurpose>
   Exécute une requête SQL préparée
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_execute</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parameters</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>db2_execute</function> exécute une requête SQL qui a été
   préparée par <function>db2_prepare</function>.
  </para>
  <para>
   Si la requête SQL retourne un jeu de résultats, par exemple, une requête
   SELECT ou CALL à une procédure d'enregistrement retourne un ou
   plusieurs jeux de résultats, vous pouvez récupérer une ligne en tant que
   tableau à partir de la ressource <literal>stmt</literal> en utilisant
   <function>db2_fetch_assoc</function>,
   <function>db2_fetch_both</function> ou
   <function>db2_fetch_array</function>. Alternativement, vous pouvez utiliser
   <function>db2_fetch_row</function> pour déplacer le pointeur à
   la ligne suivante et récupérer une colonne à la fois de cette ligne avec la
   fonction <function>db2_result</function>.
  </para>
  <para>
   Référez-vous à <function>db2_prepare</function> pour une brève discussion
   sur les avantages de l'utilisation de <function>db2_prepare</function> et
   <function>db2_execute</function> plutôt que <function>db2_exec</function>.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Une requête préparée retournée par <function>db2_prepare</function>.
      </para>
     </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>parameters</parameter></term>
     <listitem>
      <para>
       Un tableau des paramètres d'entrée qui contient les marqueurs de
       variables contenus dans la requête préparée.
      </para>
     </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Préparation et exécution d'une requête SQL avec des marqueurs</title>
    <para>
     L'exemple suivant prépare une requête INSERT qui accepte quatre
     marqueurs, ensuite itère sur le tableau contenant les valeurs d'entrées
     qui sera passé à la fonction <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$pet = array(0, 'chat', 'Pook', 3.2);

$insert = 'INSERT INTO animaux (id, race, nom, poids)
    VALUES (?, ?, ?, ?)';

$stmt = db2_prepare($conn, $insert);
if ($stmt) {
    $result = db2_execute($stmt, $pet);
    if ($result) {
        print "Ajout d'un nouvel animal réussi.";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Ajout d'un nouvel animal réussi.
]]>
    </screen>
   </example>
   <example>
    <title>Appel d'une procédure d'enregistrement avec un paramètre de SORTIE</title>
    <para>
     L'exemple suivant prépare une requête CALL qui accepte un marqueur qui
     représente un paramètre de SORTIE, lie la variable PHP <literal>$my_pets</literal>
     au paramètre en utilisant la fonction
     <function>db2_bind_param</function> et appelle la fonction
     <function>db2_execute</function> pour exécuter la requête
     CALL. Une fois que la requête CALL a été exécutée, la valeur de
     <literal>$num_pets</literal> change pour réfléchir la valeur retournée
     par la procédure d'enregistrement pour ce paramètre de SORTIE.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$num_pets = 0;
$res = db2_prepare($conn, "CALL count_my_pets(?)");
$rc = db2_bind_param($res, 1, "num_pets", DB2_PARAM_OUT);
$rc = db2_execute($res);
print "Je possède $num_pets animaux !";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Je possède 7 animaux !
]]>
    </screen>
   </example>
   <example>
    <title>Retourne des données XML en tant que ResultSet SQL</title>
    <para>
     L'exemple suivant démontre comment utiliser des documents enregistrés
     dans une colonne XML en utilisant la base de données SAMPLE. En
     utilisant un simple SQL/XML, cet exemple retourne quelques noeuds dans un
     document XML dans un format ResultSet SQL dont la plupart des
     utilisateurs sont familiers.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = 'SELECT * FROM XMLTABLE(
    XMLNAMESPACES (DEFAULT \'http://posample.org\'),
    \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
    COLUMNS
    "CID" VARCHAR (50) PATH \'@Cid\',
    "NAME" VARCHAR (50) PATH \'name\',
    "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
    ) AS T
    WHERE NAME = ?
    ';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
        printf("$row->CID     $row->NAME     $row->PHONE\n");
    }
}
db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1000     Kathy Smith     416-555-1358
1001     Kathy Smith     905-555-7258
]]>
    </screen>
   </example>
   <example>
    <title>Exécuter un "JOIN" avec des données XML</title>
    <para>
     L'exemple suivant fonctionne avec des documents enregistrés dans deux
     colonnes différentes dans la base de données SAMPLE. Cela crée deux
     tables temporaires provenant des documents XML de deux différentes
     colonnes XML et retourne un ResultSet SQL avec les informations contenant
     le statut de livraison pour un client.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS
FROM
XMLTABLE(
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
COLUMNS
"CID" BIGINT PATH \'@Cid\',
"NAME" VARCHAR (50) PATH \'name\',
"PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
) as A,
PURCHASEORDER AS B,
XMLTABLE (
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("PURCHASEORDER.PORDER")/PurchaseOrder\'
COLUMNS
"PONUM"  BIGINT PATH \'@PoNum\',
"STATUS" VARCHAR (50) PATH \'@Status\'
) as C
WHERE A.CID = B.CUSTID AND
        B.POID = C.PONUM AND
        A.NAME = ?
';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
        printf("$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1001     Kathy Smith     905-555-7258     5002     Shipped
]]>
    </screen>
   </example>
   <example>
    <title>Retourne des données SQL faisant partie d'un document XML large</title>
    <para>
     L'exemple suivant utilise une portion des documents de
     PRODUCT.DESCRIPTION dans la base de données SAMPLE. Cela crée un document
     XML contenant la description du produit (données XML) et les informations
     concernant le prix (données SQL).
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT
XMLSERIALIZE(
XMLQUERY(\'
    declare boundary-space strip;
    declare default element namespace "http://posample.org";
    <promoList> {
        for $prod in $doc/product
        where $prod/description/price < 10.00
        order by $prod/description/price ascending
        return(
            <promoitem> {
                $prod,
                <startdate> {$start} </startdate>,
                <enddate> {$end} </enddate>,
                <promoprice> {$promo} </promoprice>
            } </promoitem>
        )
    } </promoList>
\' passing by ref DESCRIPTION AS "doc",
PROMOSTART as "start",
PROMOEND as "end",
PROMOPRICE as "promo"
RETURNING SEQUENCE)
AS CLOB (32000))
AS NEW_PRODUCT_INFO
FROM PRODUCT
WHERE PID = ?
';

$stmt = db2_prepare($conn, $query);

$pid = "100-100-01";

if ($stmt) {
    db2_bind_param($stmt, 1, "pid", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_array($stmt)){
        printf("$row[0]\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<promoList xmlns="http://posample.org">
    <promoitem>
    <product pid="100-100-01">
        <description>
            <name>Snow Shovel, Basic 22 inch</name>
            <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip</details>
            <price>9.99</price>
            <weight>1 kg</weight>
        </description>
    </product>
    <startdate>2004-11-19</startdate>
    <enddate>2004-12-19</enddate>
    <promoprice>7.25</promoprice>
    </promoitem>
</promoList>
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_exec</function></member>
    <member><function>db2_fetch_array</function></member>
    <member><function>db2_fetch_assoc</function></member>
    <member><function>db2_fetch_both</function></member>
    <member><function>db2_fetch_row</function></member>
    <member><function>db2_prepare</function></member>
    <member><function>db2_result</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
