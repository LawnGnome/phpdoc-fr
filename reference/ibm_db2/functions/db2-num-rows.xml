<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.4 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: no -->
<refentry id="function.db2-num-rows">
 <refnamediv>
  <refname>db2_num_rows</refname>
  <refpurpose>
   Retourne le nombre de lignes affectées par une requête SQL
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>db2_num_rows</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
  </methodsynopsis>

  <para>
   Retourne le nombre de lignes supprimées, ajoutées, mises à jour par une
   requête SQL.
  </para>
  <para>
   Afin de déterminer le nombre de lignes que retournera une requête SELECT,
   utilisez la requête SELECT COUNT(*) avec les mêmes attributs lorsque vous
   avez effectué la requête SELECT et la récupération des valeurs.
  </para>
  <para>
   Si la logique de votre application vérifie le nombre de ligne retournée par
   une requête SELECT et effectue le saut si le nombre de ligne est 0,
   modifiez votre application pour tenter de retourner la première ligne avec
   <function>db2_fetch_assoc</function>, <function>db2_fetch_both</function>,
   <function>db2_fetch_array</function> ou <function>db2_fetch_row</function>,
   et effectuez le saut si la fonction retourne &false;.
  </para>

  <note>
   <para>
    Si vous envoyez une requête SELECT avec un curseur flottant,
    <function>db2_num_rows</function> retournera le nombre de lignes retournées
    par la requête SELECT. Cependant, le temps système associé avec des
    curseurs flottants dégrade considérablement les performances de votre
    application, alors si cela est la seule raison pour laquelle vous utilisez
    des curseurs flottants, vous devriez utiliser des curseurs à avancement
    seul et de plus appeler SELECT COUNT(*) ou compter sur les valeurs de
    retour des fonctions de type <type>boolean</type> pour obtenir
    l'équivalent de fonctionnalité avec une performance bien meilleure.
   </para>
  </note>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Une ressource <literal>stmt</literal> valide contenant le jeu de
       résultats.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le nombre de lignes affectées par la dernière requête SQL envoyée
   par une fonction qui exécute les requêtes SQL.
  </para>
 </refsect1>

 <!-- Use when examples exist
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>db2_num_rows</function> example</title>
    <para>
     Any text that describes the purpose of the example, or
     what goes on in the example should go here (inside the
     <example> tag, not out
    </para>
    <programlisting role="php">
<![CDATA[
<?php
if ($anexample === true) {
    echo 'Use the PEAR Coding Standards';
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Use the PEAR Coding Standards
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 -->


 <!-- Use when adding See Also links
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function></function></member>
    <member>Or <link linkend="somethingelse">something else</link></member>
   </simplelist>
  </para>
 </refsect1>
 -->


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
