<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.7 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: no -->
<refentry id="function.db2-exec">
 <refnamediv>
  <refname>db2_exec</refname>
  <refpurpose>
   Exécute une requête SQL directement
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>db2_exec</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>

  <para>
   Prépare et exécute une requête SQL.
  </para>
  <para>
   Si vous prévoyez intercaler des variables PHP dans la requête SQL, vous
   devez comprendre que c'est l'une des plus communes failles de sécurité.
   Considérez qu'il faut appeler la fonction <function>db2_prepare</function>
   pour préparer une requête SQL qui contient des marqueurs pour des variables d'entrée.
   Ensuite, vous pouvez appeler la fonction <function>db2_execute</function>
   pour passer les valeurs d'entrée et ainsi éviter les attaques par
   injections SQL.
  </para>
  <para>
   Si vous prévoyez appeler à plusieurs reprises la même requête SQL avec des
   paramètres différents, considérez qu'il est préférable d'appeler la
   fonction <function>db2_prepare</function> et
   <function>db2_execute</function> pour permettre au serveur de base de
   données de réutiliser son plan d'accès et ainsi augmenter l'efficacité de
   votre accès à la base de données.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       Une variable ressource de connexion valide retournée par
       <function>db2_connect</function> ou <function>db2_pconnect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Une requête SQL. La requête ne peut contenir de marqueur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Un tableau associatif contenant les options de la requête. Vous pouvez
       utiliser ce paramètre pour demander un curseur flottant sur les
       serveurs de base de données qui supportent cette fonctionnalité. 
       <variablelist>
        <varlistentry>
         <term><parameter>cursor</parameter></term>
         <listitem>
          <para>
           La valeur <literal>DB2_FORWARD_ONLY</literal> demande un curseur
           d'avancement seul pour cette requête SQL. Cette valeur est le
           type par défaut pour un curseur et est supportée par tous les
           serveurs de base de données. C'est aussi beaucoup plus rapide qu'un
           curseur flottant.
          </para>
          <para>
           La valeur <literal>DB2_SCROLLABLE</literal> demande un curseur
           flottant pour cette requête SQL. Ce type de curseur permet de
           récupérer les lignes de manière non séquentielle du serveur de base
           de données. Cependant, cela est supporté que par les serveurs DB2
           et est beaucoup plus lent que les curseurs d'avancement seul.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne une variable ressource si la requête SQL était envoyée
   correctement ou &false; si la base de données n'a pas réussi à exécuter la
   requête SQL.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Création d'une table avec <function>db2_exec</function></title>
    <para>
     L'exemple suivant utilise la fonction <function>db2_exec</function> pour
     envoyer un ensemble de requêtes DDL afin de créer une table.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$conn = db2_connect($database, $user, $password);

// Create the test table
$create = 'CREATE TABLE animaux (id INTEGER, race VARCHAR(32),
    nom CHAR(16), poids DECIMAL(7,2))';
$result = db2_exec($conn, $create);
if ($result) {
    print "La table a été créée correctement.\n";
}

// Remplit la table de test
$animaux = array(
    array(0, 'chat', 'Pook', 3.2),
    array(1, 'chien', 'Peaches', 12.3),
    array(2, 'cheval', 'Smarty', 350.0),
    array(3, 'cyprin doré', 'Bubbles', 0.1),
    array(4, 'perruche', 'Gizmo', 0.2),
    array(5, 'chèvre', 'Rickety Ride', 9.7),
    array(6, 'lama', 'Sweater', 150)
);

foreach ($animaux as $animal) {
    $rc = db2_exec($conn, "INSERT INTO animaux (id, race, nom, poids)
      VALUES ({$animal[0]}, '{$animal[1]}', '{$animal[2]}', {$animal[3]})");
    if ($rc) {
        print "Insertion... ";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
La table a été créée correctement.
Insertion... Insertion... Insertion... Insertion... Insertion... Insertion... Insertion... 
]]>
    </screen>
   </example>

   <example>
    <title>Exécution d'une requête SELECT avec un curseur flottant</title>
    <para>
     L'exemple suivant montre comment demander un curseur flottant pour une
     requête SQL envoyée avec la fonction <function>db2_exec</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$conn = db2_connect($database, $user, $password);
$sql = "SELECT nom FROM animaux
    WHERE poids < 10.0
    ORDER BY nom";
if ($conn) {
    require_once('prepare.inc');
    $stmt = db2_exec($conn, $sql, array('cursor' => DB2_SCROLLABLE));
    while ($row = db2_fetch_array($stmt)) {
        print "$row[0]\n";
    }
} 
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Bubbles
Gizmo
Pook
Rickety Ride
]]>
    </screen>
   </example>
  </para>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_execute</function></member>
    <member><function>db2_prepare</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
