<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 299488 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.hash-pbkdf2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>hash_pbkdf2</refname>
  <refpurpose>Génère une clé PBKDF2 dérivée du mot de passe fourni</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="procedural">
   <type>string</type><methodname>hash_pbkdf2</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>raw_output</parameter><initializer>false</initializer></methodparam>
  </methodsynopsis>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>algo</parameter></term>
    <listitem>
     <para>
      Nom de l'algorithme de hashage sélectionné
      (i.e. "md5", "sha256", "haval160,4", etc..).
      Voir la fonction <function>hash_algos</function> pour une liste
      des algorithmes supportés.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>password</parameter></term>
    <listitem>
     <para>
      Le mot de passe à utiliser pour la dérivation.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>salt</parameter></term>
    <listitem>
     <para>
      Le salt à utiliser pour la dérivation.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>iterations</parameter></term>
    <listitem>
     <para>
      Le nombre d'itérations internes pour effectuer la
      dérivation.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>length</parameter></term>
    <listitem>
     <para>
      La longueur de la clé dérivée à afficher.
      Si vaut "0", la longueur de l'algorithme choisi
      sera utilisé.
     </para>
    </listitem>
     </varlistentry>
     <varlistentry>
      <term><parameter>raw_output</parameter></term>
      <listitem>
       <para>
        Lorsque définit à &true;, la fonction affichera les données
        binaires brutes. Si vaut &false;, l'affichage se fera
        en minuscule.
       </para>
      </listitem>
     </varlistentry>
     </variablelist>
 </refsect1>
 
 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Retourne une chaîne contenant la clé dérivée en minuscule,
   à moins que le paramètre <parameter>raw_output</parameter> ne
   soit positionné à &true; auquel cas, la représentation binaire brute
   de la clé dérivée sera retournée.
   </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Une alerte de type E_WARNING sera émise si l'algorithme n'est pas connu,
   si le paramètre iterations est inférieur ou égal à 0, si la longueur
   est inférieure ou égale à 0 ou si le salt est trop long
   (plus grand que INT_MAX - 4).
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
     </thead>
     <tbody>
      <row>
       <entry>5.5.0</entry>
       <entry>
        Ajout de la fonction
        </entry>
       </row>
     </tbody>
      </tgroup>
  </informaltable>
 </refsect1><!-- }}} -->
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>hash_pbkdf2</function></title>
    <programlisting role="php">
<![CDATA[
   <?php
   $password = "password";
   $salt = "salt";
   $hash = hash_pbkdf2("sha256", $password, $salt, 1, 20);
   echo $hash;
   ?>
   ]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
   120fb6cffcf8b32c43e7
   ]]>
    </screen>
     </example>
     </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    La méthode PBKDF2 peut être utilisée pour hasher des mots de passe
    pour le stockage (elle est approuvée pour cette utilisation).
    Cependant, vous devez garder à l'esprit que
    CRYPT_BLOWFISH est meilleur pour cet usage et nous vous recommandons
    de l'utiliser.
   </para>
   </caution>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>crypt</function></member>
    <member><function>hash</function></member>
    <member><function>hash_algos</function></member>
    <member><function>hash_init</function></member>
    <member><function>hash_hmac</function></member>
    <member><function>hash_hmac_file</function></member>
     </simplelist>
     </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
