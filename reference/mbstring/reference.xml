<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: partial -->
<reference id="ref.mbstring">
 <title>Chaînes de caractères multi-octets</title>
 <titleabbrev>Chaînes de caractères multi-octets</titleabbrev>
 <partintro>
   <section id="mbstring.intro">
    &reftitle.intro;
    <para>
     Même si la plupart des langues peuvent être représentées grâce
     à un jeu de 128 caractères, il y a d'autres langues qui requièrent
     des jeux de caractères bien plus grands. Des méthodes de caractères
     multi-octets ont été développées pour résoudre ce type de problème.
    </para>
    <para>
     Lorsque vous manipulez des chaînes de caractères multi-octets,
     pour couper, rechercher ou nettoyer une chaîne, vous devez utiliser deux
     octets consécutifs, qui représentent un seul caractère. Si vous n'y prenez
     pas garde, vous allez obtenir une chaîne corrompue et invalide, avec
     une représentation totalement incompréhensible.
    </para>
    <para>
     <literal>mbstring</literal> fournit les fonctions spécifiques de manipulations
     des chaînes multi-octets pour &php;, qui ne supporte que les jeux
     mon-octets. De plus, <literal>mbstring</literal> gère la traduction
     entre les jeux de caractères disponibles.
    </para>
    <para>
     <literal>mbstring</literal> est aussi conû pour gérer l'Unicode, comme
     UTF-8 et UCS-2 ainsi que de nombreux autres jeux mono-octets, même si
     <literal>mbstring</literal> a été conçu à la base pour les pages
     web japonaises.
    </para>

    <section id="mbstring.php4.req">
     <title>Pré-requis de l'encodage en &php;</title>
     <para>
      Les jeux de caractères suivants sont bien supportés par &php;.
      <itemizedlist>
       <listitem>
        <para>
         Jeux de caractères mono-octets : 
         <itemizedlist>
          <listitem>
           <simpara>
            qui sont compatibles avec la norme ASCII (compatible ISO646)
            pour les caractères de l'intervalle <literal>00h</literal> à
            <literal>7fh</literal>.
           </simpara>
          </listitem>
         </itemizedlist>
        </para>
       </listitem>
       <listitem>
        <para>
         Jeux de caracètres multi-octets : 
         <itemizedlist>
          <listitem>
           <simpara>
            qui sont compatibles avec la norme ASCII (compatible ISO646)
            pour les caractères de l'intervalle <literal>00h</literal> à
            <literal>7fh</literal>.
           </simpara>
          </listitem>
          <listitem>
           <simpara>
            qui n'utilisent pas les séquences de type ISO2022.
           </simpara>
          </listitem>
          <listitem>
           <simpara>
            qui n'utilisent pas de valeur dans l'intervalle <literal>00h</literal> à
            <literal>7fh</literal> dans les séquences composées, qui
            représentent un caractère unique.
           </simpara>
          </listitem>
         </itemizedlist>  
        </para>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      Les jeux de caractères suivants risquent de ne pas fonctionner en &php;.
      <example>
       <title>Jeux de caractères qui risquent de ne pas fonctionner en &php;</title>
       <programlisting>
<![CDATA[
JIS, SJIS, ISO-2022-JP, BIG-5
]]>
       </programlisting>
      </example>
     </para>
     <para>
      Même si aucun script &php; écrit avec ces jeux de caractères ne fonctionne,
      notamment si des chaînes encodées sont utilisées comme identifiants,
      ou valeurs littérales dans le script, vous pouvez éviter d'utiliser ces
      jeux en activant le filtre transparent <literal>mbstring</literal> pour les
      données d'entrées HTTP.
     </para>
     <note>
      <para>
       Il est déconseillé d'utiliser les jeux SJIS, BIG5, CP936, CP949 et
       GB18030 pour l'encodage interne, à moins que vous ne soyez très familiers
       avec l'analyseur, le scanneur et le jeu de caractère lui-même.
      </para>
     </note>
     <note>
      <para>
       Si vous avez une base de données connectée à &php;, il est recommandé
       d'utiliser le même jeux de caractères dans la base et comme
       <literal>jeu interne</literal> pour améliorer le confort d'utilisation
       et les performances.
      </para>
      <para>
       Si vous utilisez PostgreSQL, le jeu de caractères utilisé dans la base
       de données et celui de &php; peuvent différer car cette base supporte
       la traduction automatique de jeu de caractères.
      </para>
     </note>
    </section>
   </section>

 &reference.mbstring.configure;

 &reference.mbstring.ini;

   <section id="mbstring.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.mbstring.constants;

    <section id="mbstring.http">
     <title>Entrées/Sorties HTTP</title>
     <para>
      La conversion automatiques des entrées/sorties HTTP peuvent
      aussi convertir des données binaires. Les utilisateurs
      doivent contrôler les conversions, si des données binaires doivent
      être utilisées via HTTP.
     </para>
     <para>
      Si l'option <literal>enctype</literal> d'un formulaire HTML vaut
      <literal>multipart/form-data</literal>,
      <literal>mbstring</literal> ne convertira pas les données du POST. Dans ce
      cas, les chaînes de caractères doivent être convertis manuellement.
     </para>
     <para>
      <itemizedlist>
       <listitem>
	<simpara>
	 Entrée HTTP
	</simpara>
	<para>
	 Il n'y a pas de moyen de contrôler la conversion des caractères
	 HTTP en entrée, depuis un script PHP. Pour désactiver cette conversion,
	 il faut le faire dès le fichier &php.ini;.
	 <example>
	  <title>
	   Désactive la conversion HTTP dans le php.ini
	  </title>
	  <programlisting role="php">
<![CDATA[
;; Désactive la conversion HTTP
mbstring.http_input = pass
;; Désactive la conversion HTTP (PHP 4.3.0 ou plus récent)
mbstring.encoding_translation = Off
]]>
	  </programlisting>
	 </example>
	</para>
	<para>
	 Lorsque vous utilisez PHP comme module Apache, il est possible
	 d'annuler la configuration du &php.ini; pour
	 chaque Virtual Host dans le fichier
	 &httpd.conf; ou par dossier avec le fichier
	 <literal>.htaccess</literal>. Reportez vous à la section de
	 <link linkend="configuration">configuration</link> ainsi qu'au
	 manuel Apache.
	</para>
       </listitem>
       <listitem>
	<simpara>
	 Sorties HTTP
	</simpara>
	<para>
	 Il y a plusieurs moyens d'activer la conversion en sortie de script
	 PHP. L'un d'entre eux utilise &php.ini;, un autre
	 utilise <function>ob_start</function> avec la fonction
	 <function>mb_output_handler</function> comme fonction de call-back.
	</para>
	<note>
	 <para>
	  Pour les utilisateurs PHP3-i18n, le système de conversion de
	  <literal>mbstring</literal> diffère de celui de PHP3-i18n.
	  Le jeu de caractère est converti avec un buffer de sortie.
	 </para>
	</note>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      <example>
       <title>Exemple de configuration de mbstring dans &php.ini;</title>
       <programlisting role="php">
<![CDATA[
;; Active la conversion de sortie pour toute les pages PHP

;; Active la bufferisation de sortie
output_buffering    = On

;; Choisi mb_output_handler pour effectuer la conversion de sortie
output_handler      = mb_output_handler
]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title>Exemple de script avec mbstring</title>
       <programlisting role="php">
<![CDATA[
<?php

// Active la conversion de caractère uniquement pour cette page

// Choisi le jeu de caractères SJIS
mb_http_output('SJIS');

// Commence la bufferisation et spécifie "mb_output_handler"
// comme fonction de callback
ob_start('mb_output_handler');
?>
]]>
       </programlisting>
      </example>
     </para>
    </section>
    <section id="mbstring.supported-encodings">
     <title>Jeux de caractères supportés</title>
     <simpara>
      Actuellement, les jeux de caractères suivants sont
      supportés par <literal>mbstring</literal>. L'encodage
      de caractère peut être spécifié
      par les paramètres <literal>encoding</literal> dans les fonctions
      <literal>mbstring</literal>.
     </simpara>
     <para>
      Les jeux de caractères suivants sont supportés par
      <literal>mbstring</literal> :
     </para>
     <para>
      <literal>UCS-4</literal>, <literal>UCS-4BE</literal>,
      <literal>UCS-4LE</literal>, <literal>UCS-2</literal>,
      <literal>UCS-2BE</literal>, <literal>UCS-2LE</literal>,
      <literal>UTF-32</literal>, <literal>UTF-32BE</literal>,
      <literal>UTF-32LE</literal>, <literal>UCS-2LE</literal>,
      <literal>UTF-16</literal>, <literal>UTF-16BE</literal>,
      <literal>UTF-16LE</literal>, <literal>UTF-8</literal>,
      <literal>UTF-7</literal>, <literal>ASCII</literal>,
      <literal>EUC-JP</literal>, <literal>SJIS</literal>,
      <literal>eucJP-win</literal>, <literal>SJIS-win</literal>,
      <literal>ISO-2022-JP</literal>, <literal>JIS</literal>,
      <literal>ISO-8859-1</literal>, <literal>ISO-8859-2</literal>,
      <literal>ISO-8859-3</literal>, <literal>ISO-8859-4</literal>,
      <literal>ISO-8859-5</literal>, <literal>ISO-8859-6</literal>,
      <literal>ISO-8859-7</literal>, <literal>ISO-8859-8</literal>,
      <literal>ISO-8859-9</literal>, <literal>ISO-8859-10</literal>,
      <literal>ISO-8859-13</literal>, <literal>ISO-8859-14</literal>,
      <literal>ISO-8859-15</literal>, <literal>byte2be</literal>,
      <literal>byte2le</literal>, <literal>byte4be</literal>,
      <literal>byte4le</literal>, <literal>BASE64</literal>,
      <literal>7bit</literal>, <literal>8bit</literal> et
      <literal>UTF7-IMAP</literal>.
     </para>
     <para>
      Depuis PHP 4.3.0, les jeux de caractèrs suivants sont ajoutés, mais restent
      expérimentaux : 
      <literal>EUC-CN</literal>, <literal>CP936</literal>, <literal>HZ</literal>, 
      <literal>EUC-TW</literal>, <literal>CP950</literal>, <literal>BIG-5</literal>, 
      <literal>EUC-KR</literal>, <literal>UHC</literal> (<literal>CP949</literal>), 
      <literal>ISO-2022-KR</literal>,
      <literal>Windows-1251</literal> (<literal>CP1251</literal>),
      <literal>Windows-1252</literal> (<literal>CP1252</literal>),
      <literal>CP866</literal> et
      <literal>KOI8-R</literal>.
     </para>
     <para>
      Les entrées du fichiers &php.ini;, qui acceptent des
      noms de jeux de caractères, acceptent aussi les valeurs
      &quot;<literal>auto</literal>&quot; et
      &quot;<literal>pass</literal>&quot;.
      Les fonctions <literal>mbstring</literal>,qui acceptent des
      noms de jeux de caractères, acceptent aussi la valeur
      &quot;<literal>auto</literal>&quot;/
     </para>
     <para>
      Si &quot;<literal>pass</literal>&quot; est utilisée, aucune conversion
      n'est effectuée.
     </para>
     <para>
      Si &quot;<literal>auto</literal>&quot; est utilisée, elle est remplacée
      par &quot;<literal>ASCII,JIS,UTF-8,EUC-JP,SJIS</literal>&quot;.
     </para>
     <para>
      Voir aussi <function>mb_detect_order</function>.
     </para>
     <note>
      <para>
       Un jeu de caractère supporté n'est pas forcément un bon choix comme
       jeu de caractères interne.
      </para>
     </note>
    </section>

   
   <section id="mbstring.overload">
     <title>
      Exploitation des chaînes multi-octets en PHP
     </title>
     <para>
      Comme presque tout PHP est écrit pour des langues qui sont
      simple octets, il y a des difficultés à gérer le japonais. Toutes
      les fonctions PHP de gestion des chaînes de caractères, comme
      par exemple <function>substr</function> ne supportent par 
      les chaînes multi octets.
     </para>
     <para>
      L'extension Multibyte (multi-octets, alias mbstring) dispose de fonctions
      de chaînes, qui supportent le multi-octet, comme par exemple 
      <function>mb_substr</function>, qui est un remplaçant de <function>substr</function>.
     </para>
     <para>
      mbstring supporte aussi le remplacement de fonction, pour
      permettre le support des chaînes multi-octets sans modifier les
      scripts PHP. En utilisant ce système de remplacement de fonctions,
      certains fonctions PHP seront remplacées par leur équivalent
      de mbstring. Par exemple <function>mb_substr</function> remplacera
      <function>substr</function>. Ce système de remplacement transparent,
      permet un portage simple et efficace des applications.
     </para>
     <para>
      <literal>mbstring.func_overload</literal>, dans le &php.ini;,
      doit être configuré avec une valeur positive : 
      1 remplace la fonction d'envoi de mail; 2 active les
      fonction de chaînes; 4 active les fonctions d'expression régulières.
      Par exemple, avec la valeur 7, toutes les fonctions possibles sont
      remplacées. Voici la liste complète des fonctions remplacées, avec
      leur fonction de remplacement.
      <table>
      <title>Fonctions de remplacement</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Valeur de mbstring.func_overload</entry>
          <entry>Fonction originale</entry>
          <entry>Fonction de remplacement</entry>
         </row>
       </thead>
       <tbody>
         <row>
          <entry>1</entry>
          <entry><function>mail</function></entry>
          <entry><function>mb_send_mail</function></entry>
         </row>
         <row>
          <entry>2</entry>
          <entry><function>strlen</function></entry>
          <entry><function>mb_strlen</function></entry>
         </row>
         <row>
          <entry>2</entry>
          <entry><function>strpos</function></entry>
          <entry><function>mb_strpos</function></entry>
         </row>
         <row>
          <entry>2</entry>
          <entry><function>strrpos</function></entry>
          <entry><function>mb_strrpos</function></entry>
         </row>
         <row>
          <entry>2</entry>
          <entry><function>substr</function></entry>
          <entry><function>mb_substr</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>ereg</function></entry>
          <entry><function>mb_ereg</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>eregi</function></entry>
          <entry><function>mb_eregi</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>ereg_replace</function></entry>
          <entry><function>mb_ereg_replace</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>eregi_replace</function></entry>
          <entry><function>mb_eregi_replace</function></entry>
         </row>
         <row>
          <entry>4</entry>
          <entry><function>split</function></entry>
          <entry><function>mb_split</function></entry>
        	</row>
        </tbody>
       </tgroup>
      </table>
     </para>
   </section>


  <section id="mbstring.ja-basic">
  <title>Cas des caractères japonais</title>
  <para>
   La plupart des caractères japonais demandent plus d'un octet
   pour être représentés. De plus, plusieurs jeux de caractères
   japonais existent : il y a notamment EUC-JP, Shift_JIS et
   ISO-2022-JP. Unicode devient de plus en plus populaire, et
   UTF-8 aussi. Pour développer des applications Web en environnement
   japonais, il faut savoir que les encodages ci-dessus dépendent de
   l'application qu'on en fait : entrée/sortie HTTP, bases de données
   ou courrier électronique.
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      La taille nécessaire à un caractère peut aller jusqu'à 4 octets.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Un caractère multi-octets occupe généralement deux octets,
      à comparer avec les caractères simple-octet traditionnellement
      utilisé. Les caractères les plus gros sont appelés "zen-kaku"
      (i.e. grande largeur) et les plus petits sont appelés "han-kaku"
      (i.e. demi-largeur). Les caractères "zen-kaku" sont
      généralement de taille constante.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Certains encodage de caractères définissent des séquences de
      début/fin pour les sections multi-octets.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Les bases de données allouent des tailles de stockages différentes
      de celles utilisées par PHP, même si le même encodage
      de caractère est utilisé (par exemple, PostGreSQL).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Le courrier électronique utilise généralement ISO-2022-JP.
     </simpara>
    </listitem>
    <listitem>
     <para>
      Les sites web en &quot;i-mode&quot; utilisent Shift_JIS.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  </section>
    <section id="mbstring.ref">
     <title>Références</title>
     <para>
      Les jeux de caractères multi-octets et leurs techniques sont très complexes.
       Il n'est pas possible de couvrir tous les aspects en détails ici. Reportez-vous aux
       URL suivantes, pour d'autres ressouces complémentaires :
      <itemizedlist>
       <listitem>
	<para>
	 Unicode/UTF/UCS/etc
	</para>
	<para>
     <ulink url="&url.unicode;">&url.unicode;</ulink>
	</para>
       </listitem>
       <listitem>
	<para>
	 Japonais/coréen/Chinois
	</para>
	<para>
	 <literal>
	 ftp://ftp.ora.com/pub/examples/nutshell/ujip/doc/cjk.inf
	 </literal>
	</para>
       </listitem>
      </itemizedlist>
     </para>
  </section>
 </partintro>

&reference.mbstring.functions;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
