<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

  <refentry id="function.bcompiler-read">
   <refnamediv>
    <refname>bcompiler_read</refname>
    <refpurpose>Lit et crée les classes depuis un descripteur de fichier</refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>bool</type><methodname>bcompiler_read</methodname>
      <methodparam><type>resource</type><parameter>filehandle</parameter></methodparam>
     </methodsynopsis>
   &warn.experimental.func;
   <note>
    <para>
     Utiliser les structures include ou require pour parser les bytecodes, c'est plus portable
     et plus commode que d'utiliser cette fonction.
    </para>
   </note>
    <para>
     <function>bcompiler_read</function> lit les données depuis un fichier ouvert 
     représenté par le descripteur <parameter>filehandle</parameter> et crée les 
     classes depuis le bytecode.
     Notez que cette fonction n'exécute pas le corps du script contenu dans le fichier bytecode.
    </para>
    <example>
     <title>Exemple avec <function>bcompiler_read</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$fh = fopen("/tmp/example","r");
bcompiler_read($fh);
fclose($fh);
print_r(get_defined_classes());

?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
