<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/mnogosearch.xml, last change in rev 1.8 -->
<!-- last change to 'udm-load-ispell-data' in en/ tree in rev 1.18 -->
 <refentry id="function.udm-load-ispell-data">
  <refnamediv>
   <refname>udm_load_ispell_data</refname>
   <refpurpose>Charge les donn&eacute;es ispell</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>int</type><methodname>udm_load_ispell_data</methodname>
     <methodparam><type>int</type><parameter>agent</parameter></methodparam>
     <methodparam><type>int</type><parameter>var</parameter></methodparam>
     <methodparam><type>string</type><parameter>val1</parameter></methodparam>
     <methodparam><type>string</type><parameter>val2</parameter></methodparam>
     <methodparam><type>int</type><parameter>flag</parameter></methodparam>
    </methodsynopsis>
   <para>
    <function>udm_load_ispell_data</function>  charge des donn&eacute;es ispell.
    <function>udm_load_ispell_data</function> retourne &true;
    en cas de succ&egrave;s, et &false; en cas d'erreur.
   </para>
   <para>
    <parameter>agent</parameter> - Agent mnoGoSearch obtenu apr&egrave;s un appel &agrave;
    <function>udm_alloc_agent</function>.
   </para>
   <para>
    <parameter>var</parameter> - param&egrave;tre indiquant la source des donn&eacute;es ispell.
   </para>
   <para>
    Apr&egrave;s avoir utilis&eacute; cette fonction, pensez &agrave; lib&eacute;rer les donn&eacute;es de la
    m&eacute;moire avec <function>udm_free_ispell_data</function>, m&ecirc;me si vous
    utilisez le mode UDM_ISPELL_TYPE_SERVER.
   </para>
   <para>
    Le mode de plus rapide est UDM_ISPELL_TYPE_SERVER. UDM_ISPELL_TYPE_TEXT est
    plus lent, et UDM_ISPELL_TYPE_DB est le plus lent. Ce classement est vrai
    pour mnoGoSearch 3.1.10 - 3.1.11. Il est pr&eacute;vu d'acc&eacute;l&eacute;rer le mode DB dans les
    versions futures, et cela sera plus rapide que le mode TEXT.
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      UDM_ISPELL_TYPE_DB indique que les donn&eacute;es ispell doivent
      &ecirc;tre charg&eacute;e depuis la base SQL. Dans ce cas, les
      param&egrave;tres <parameter>val1</parameter> et
      <parameter>val2</parameter> sont ignor&eacute;s et doivent &ecirc;tre
      laiss&eacute;s vides. <parameter>flag</parameter> doit valoir
      <literal>1</literal>.
      </simpara>
     <note>
      <para>
       <parameter>flag</parameter> indique qu'apr&egrave;s le chargement des donn&eacute;es ispell
       &agrave; partir de la source, elles doivent &ecirc;tre tri&eacute;es (c'est n&eacute;cessaire au bon
       fonctionnement d'ispell). Dans le cas o&ugrave; vous chargez les donn&eacute;es depuis un fichier,
       il peut y avoir plusieurs appels &agrave; <function>udm_load_ispell_data</function>,
       et il ne vaut pas la peine de trier les valeurs apr&egrave;s chaque appel, mais uniquement
       &agrave; la fin. Etant donn&eacute; qu'en mode DB, toutes les donn&eacute;es sont charg&eacute;es en une seule
       fois, ce param&egrave;tre doit avoir la valeur de <literal>1</literal>. Dans ce mode, en
       cas d'erreur, par exemple si la table ispell est absente, la fonction retournera
       &false; et le code d'erreur, avec son message, seront accessibles avec
       <function>udm_error</function> et <function>udm_errno</function>.
      </para>
     </note>
     <simpara>Exemple avec <function>udm_load_ispell_data</function></simpara>
     <informalexample>
      <programlisting role="C">
<![CDATA[
if (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_DB,'','',1)) {
  printf("Erreur #%d: '%s'\n", udm_errno($udm), udm_error($udm));
  exit;
}
]]>
      </programlisting>
     </informalexample>
    </listitem>
    <listitem>
     <para>
      UDM_ISPELL_TYPE_AFFIX indique que les donn&eacute;es ispell doivent &ecirc;tre charg&eacute;e
      depuis un fichier et initie le chargement. Dans ce cas, <parameter>val1</parameter>
      d&eacute;finit le code de langue en deux lettre, et <parameter>val2</parameter> est le chemin
      jusqu'aux fichiers. Notez que si vous utilisez un chemin relatif, le module recherche
      les fichiers non pas dans UDM_CONF_DIR, mais directement avec le chemin courant,
      o&ugrave; le script est ex&eacute;cut&eacute;. En cas d'erreur avec ce mode, si le fichier est absent,
      la fonction retourne &false;, et un message d'erreur sera affich&eacute;.
      Les messages d'erreur ne sont pas accessibles avec <function>udm_error</function> et
      <function>udm_errno</function>, puisque ces fonctions ne traitent que les messages
      SQL. Reportez-vous &agrave; la description du param&egrave;tre <parameter>flag</parameter>.
     </para>
     <simpara>Exemple avec <function>udm_load_ispell_data</function></simpara>
     <informalexample>
      <programlisting role="C">
<![CDATA[
     if ((! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_AFFIX,'en','/opt/ispell/en.aff',0)) ||
        (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_AFFIX,'ru','/opt/ispell/ru.aff',0)) ||
        (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_SPELL,'en','/opt/ispell/en.dict',0)) ||
        (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_SPELL,'ru','/opt/ispell/ru.dict',1))) {
     exit;
     }
]]>
      </programlisting>
     </informalexample>
     <note>
      <para>
       <parameter>flag</parameter> prend la valeur <literal>1</literal> si c'est le dernier appel
       &agrave; cette fonction.
      </para>
     </note>
    </listitem>
    <listitem>
     <para>
      UDM_ISPELL_TYPE_SPELL indique que les donn&eacute;es ispell doivent &ecirc;tre charg&eacute;es
      depuis un fichier, et initie le chargement du dictionnaire. Dans ce cas,
      <parameter>val1</parameter> d&eacute;finit le code langue sur deux lettres, et
      <parameter>val2</parameter> le chemin du fichier.  Notez que si vous utilisez
      un chemin relatif, le module recherche les fichiers non pas dans UDM_CONF_DIR,
      mais directement avec le chemin courant, o&ugrave; le script est ex&eacute;cut&eacute;. En cas d'erreur
      avec ce mode, si le fichier est absent, la fonction retourne &false;,
      et un message d'erreur sera affich&eacute;. Les messages d'erreur ne sont pas accessibles avec
      <function>udm_error</function> et <function>udm_errno</function>, puisque ces fonctions
      ne traitent que les messages SQL. Reportez-vous &agrave; la description du param&egrave;tre
      <parameter>flag</parameter>.
     </para>
     <simpara>Exemple avec <function>udm_load_ispell_data</function></simpara>
     <informalexample>
      <programlisting role="C">
<![CDATA[
<?php
     if ((! Udm_Load_Ispell_Data($udm,UDM_ISPELL_TYPE_AFFIX,'en','/opt/ispell/en.aff',0)) ||
        (! Udm_Load_Ispell_Data($udm,UDM_ISPELL_TYPE_AFFIX,'ru','/opt/ispell/ru.aff',0)) ||
        (! Udm_Load_Ispell_Data($udm,UDM_ISPELL_TYPE_SPELL,'en','/opt/ispell/en.dict',0)) ||
        (! Udm_Load_Ispell_Data($udm,UDM_ISPELL_TYPE_SPELL,'ru','/opt/ispell/ru.dict',1))) {
      exit;
      }
?>
]]>
      </programlisting>
     </informalexample>
     <note>
      <para>
       <parameter>flag</parameter> prend la valeur <literal>1</literal> si c'est le dernier appel
       &agrave; cette fonction.
      </para>
     </note>
    </listitem>
    <listitem>
     <para>
      UDM_ISPELL_TYPE_SERVER active le support des serveurs ispell. <parameter>val1</parameter>
      indique alors l'adresse de l'h&ocirc;te qui supporte le serveur ispall. <parameter>val2</parameter>
      n'est pas encore utilis&eacute;, mais dans les cas futurs, il indiquera le num&eacute;ro de port
      utilis&eacute; par le serveur ispell. <parameter>flag</parameter> n'est pas utile, car les
      donn&eacute;es sont d&eacute;j&agrave; tri&eacute;es.
     </para>
     <para>
      Les serveurs Spelld lisent les donn&eacute;es d'orthographe dans une
      configuration s&eacute;par&eacute;e (par d&eacute;faut <filename>/usr/local/mnogosearch/etc/spelld.conf</filename>),
      les trie et les stockes en m&eacute;moire. Avec les clients, le serveur communique
      de deux fa&ccedil;ons : vers les indexeurs, tout le contenu de la m&eacute;moire
      est transf&eacute;r&eacute; pour que l'indexeur travaille plus vite; vers le
      moteur de recherche, il re&ccedil;oit les mots &agrave; normaliser, et les rend
      au client corrig&eacute;s. Cela permet une plus grande rapidit&eacute; d'ex&eacute;cution,
      en comparaison des modes db et text (notamment, les tris et les
      chargements sont beaucoup plus rapides).
     </para>
     <para>
      <function>udm_load_ispell_data</function> en mode UDM_ISPELL_TYPE_SERVER
      ne charge pas vraiment les donn&eacute;es ispell, mais d&eacute;finit simplement l'adresse
      du serveur. En fait, le serveur sera automatiquement utilis&eacute; par
      <function>udm_find</function> lors des recherches. En cas d'erreur,
      (par exemple si le serveur ispell ne fonctionne pas ou que l'h&ocirc;te indiqu&eacute;
      est invalide), la conversion sera annul&eacute;e, mais aucun message d'erreur ne
      sera affich&eacute;.
     </para>
     <note>
      <para>
       Cette fonction est disponible &agrave; partir de mnoGoSearch 3.1.12.
      </para>
     </note>
     <simpara>Exemple avec <function>udm_load_ispell_data</function></simpara>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
  if (!udm_load_ispell_data($udm,UDM_ISPELL_TYPE_SERVER,'','',1)) {
    printf("Erreur au chargement de la librairie ispell sur le serveur<BR>\n");
    exit;
  }
?>
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </itemizedlist>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
