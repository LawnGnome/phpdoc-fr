<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.6 Maintainer: yannick Status: ready -->
 <refentry id="function.udm-load-ispell-data">
  <refnamediv>
   <refname>udm_load_ispell_data</refname>
   <refpurpose>Charge les données ispell</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>bool</type><methodname>udm_load_ispell_data</methodname>
     <methodparam><type>resource</type><parameter>agent</parameter></methodparam>
     <methodparam><type>int</type><parameter>var</parameter></methodparam>
     <methodparam><type>string</type><parameter>val1</parameter></methodparam>
     <methodparam><type>string</type><parameter>val2</parameter></methodparam>
     <methodparam><type>int</type><parameter>flag</parameter></methodparam>
    </methodsynopsis>
   <para>
    <function>udm_load_ispell_data</function> charge des données ispell.
    &return.success;
   </para>
   <para>
    <parameter>agent</parameter> - Agent mnoGoSearch obtenu après un appel à
    <function>udm_alloc_agent</function>.
   </para>
   <para>
    <parameter>var</parameter> - paramètre indiquant la source des données ispell.
   </para>
   <para>
    Après avoir utilisé cette fonction, pensez à libérer les données de la
    mémoire avec <function>udm_free_ispell_data</function>, même si vous
    utilisez le mode <constant>UDM_ISPELL_TYPE_SERVER</constant>.
   </para>
   <para>
    Le mode le plus rapide est <constant>UDM_ISPELL_TYPE_SERVER</constant>. <constant>UDM_ISPELL_TYPE_TEXT</constant> est
    plus lent, et <constant>UDM_ISPELL_TYPE_DB</constant> est le plus lent. Ce classement est vrai
    pour mnoGoSearch 3.1.10 - 3.1.11. Il est prévu d'accélérer le mode DB dans les
    versions futures, et cela sera plus rapide que le mode TEXT.
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      <constant>UDM_ISPELL_TYPE_DB</constant> indique que les données ispell doivent
      être chargées depuis la base SQL. Dans ce cas, les
      paramètres <parameter>val1</parameter> et
      <parameter>val2</parameter> sont ignorés et doivent être
      laissés vides. <parameter>flag</parameter> doit valoir
      <literal>1</literal>.
      </simpara>
     <note>
      <para>
       <parameter>flag</parameter> indique qu'après le chargement des données ispell
       à partir de la source, elles doivent être triées (c'est nécessaire au bon
       fonctionnement d'ispell). Dans le cas où vous chargez les données depuis un fichier,
       il peut y avoir plusieurs appels à <function>udm_load_ispell_data</function>,
       et il ne vaut pas la peine de trier les valeurs après chaque appel, mais uniquement
       à la fin. Etant donné qu'en mode DB, toutes les données sont chargées en une seule
       fois, ce paramètre doit avoir la valeur de <literal>1</literal>. Dans ce mode, en
       cas d'erreur, par exemple si la table ispell est absente, la fonction retournera
       &false; et le code d'erreur, avec son message, seront accessibles avec
       <function>udm_error</function> et <function>udm_errno</function>.
      </para>
     </note>
     <example>
	  <title>Exemple avec <function>udm_load_ispell_data</function></title>
      <programlisting role="php">
<![CDATA[
<?php
if (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_DB,'','',1)) {
  printf("Erreur #%d: '%s'\n", udm_errno($udm), udm_error($udm));
  exit;
}
?>
]]>
      </programlisting>
     </example>
    </listitem>
    <listitem>
     <para>
      <constant>UDM_ISPELL_TYPE_AFFIX</constant> indique que les données ispell doivent être chargée
      depuis un fichier et initie le chargement. Dans ce cas, <parameter>val1</parameter>
      définit le code de langue en deux lettre, et <parameter>val2</parameter> est le chemin
      jusqu'aux fichiers. Notez que si vous utilisez un chemin relatif, le module recherche
      les fichiers non pas dans <constant>UDM_CONF_DIR</constant>, mais directement avec le chemin courant,
      où le script est exécuté. En cas d'erreur avec ce mode, si le fichier est absent,
      la fonction retourne &false;, et un message d'erreur sera affiché.
      Les messages d'erreur ne sont pas accessibles avec <function>udm_error</function> et
      <function>udm_errno</function>, puisque ces fonctions ne traitent que les messages
      SQL. Reportez-vous à la description du paramètre <parameter>flag</parameter>.
     </para>
     <example>
	  <title>Exemple avec <function>udm_load_ispell_data</function> et <constant>UDM_ISPELL_TYPE_AFFIX</constant></title>
      <programlisting role="php">
<![CDATA[
<?php
if ((! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_AFFIX,'en','/opt/ispell/en.aff',0)) ||
     (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_AFFIX,'ru','/opt/ispell/ru.aff',0)) ||
     (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_SPELL,'en','/opt/ispell/en.dict',0)) ||
     (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_SPELL,'ru','/opt/ispell/ru.dict',1))) {
     exit;
}
?>
]]>
      </programlisting>
     </example>
     <note>
      <para>
       <parameter>flag</parameter> prend la valeur <literal>1</literal> si c'est le dernier 
       appel à cette fonction.
      </para>
     </note>
    </listitem>
    <listitem>
     <para>
      <constant>UDM_ISPELL_TYPE_SPELL</constant> indique que les données ispell 
      doivent être chargées depuis un fichier, et initie le chargement du dictionnaire. Dans ce cas,
      <parameter>val1</parameter> définit le code langue sur deux lettres, et
      <parameter>val2</parameter> le chemin du fichier.  Notez que si vous utilisez
      un chemin relatif, le module recherche les fichiers non pas dans 
      <constant>UDM_CONF_DIR</constant>,
      mais directement avec le chemin courant, où le script est exécuté. En cas d'erreur
      avec ce mode, si le fichier est absent, la fonction retourne &false;,
      et un message d'erreur sera affiché. Les messages d'erreur ne sont pas accessibles avec
      <function>udm_error</function> et <function>udm_errno</function>, puisque ces 
      fonctions ne traitent que les messages SQL. Reportez-vous à la description du paramètre
      <parameter>flag</parameter> dans UDM_ISPELL_TYPE_DB.
     </para>
     <example>
	  <title>Exemple avec <function>udm_load_ispell_data</function> et 
	  <constant>UDM_ISPELL_TYPE_SPELL</constant></title>
      <programlisting role="php">
<![CDATA[
<?php
     if ((! Udm_Load_Ispell_Data($udm,UDM_ISPELL_TYPE_AFFIX,'en','/opt/ispell/en.aff',0)) ||
        (! Udm_Load_Ispell_Data($udm,UDM_ISPELL_TYPE_AFFIX,'ru','/opt/ispell/ru.aff',0)) ||
        (! Udm_Load_Ispell_Data($udm,UDM_ISPELL_TYPE_SPELL,'en','/opt/ispell/en.dict',0)) ||
        (! Udm_Load_Ispell_Data($udm,UDM_ISPELL_TYPE_SPELL,'ru','/opt/ispell/ru.dict',1))) {
      exit;
      }
?>
]]>
      </programlisting>
     </example>
     <note>
      <para>
       <parameter>flag</parameter> prend la valeur <literal>1</literal> si c'est le dernier 
       appel à cette fonction.
      </para>
     </note>
    </listitem>
    <listitem>
     <para>
      <constant>UDM_ISPELL_TYPE_SERVER</constant> active le support des serveurs ispell. <parameter>val1</parameter>
      indique alors l'adresse de l'hôte qui supporte le serveur ispall. <parameter>val2</parameter>
      n'est pas encore utilisé, mais dans les cas futurs, il indiquera le numéro de port
      utilisé par le serveur ispell. <parameter>flag</parameter> n'est pas utile, car les
      données sont déjà triées.
     </para>
     <para>
      Les serveurs Spelld lisent les données d'orthographe dans une
      configuration séparée (par défaut <filename>/usr/local/mnogosearch/etc/spelld.conf</filename>),
      les trie et les stockes en mémoire. Avec les clients, le serveur communique
      de deux façons : vers les indexeurs, tout le contenu de la mémoire
      est transféré pour que l'indexeur travaille plus vite; vers le
      moteur de recherche, il reçoit les mots à normaliser, et les rend
      au client corrigés. Cela permet une plus grande rapidité d'exécution,
      en comparaison des modes db et text (notamment, les tris et les
      chargements sont beaucoup plus rapides).
     </para>
     <para>
      <function>udm_load_ispell_data</function> en mode <constant>UDM_ISPELL_TYPE_SERVER</constant>
      ne charge pas vraiment les données ispell, mais définit simplement l'adresse
      du serveur. En fait, le serveur sera automatiquement utilisé par
      <function>udm_find</function> lors des recherches. En cas d'erreur,
      (par exemple si le serveur ispell ne fonctionne pas ou que l'hôte indiqué
      est invalide), la conversion sera annulée, mais aucun message d'erreur ne
      sera affiché.
     </para>
     <note>
      <para>
       Cette fonction est disponible à partir de mnoGoSearch 3.1.12.
      </para>
     </note>
     <example>
	  <title>Exemple avec <function>udm_load_ispell_data</function> et 
	  <constant>UDM_ISPELL_TYPE_SERVER</constant></title>
      <programlisting role="php">
<![CDATA[
<?php
if (!udm_load_ispell_data($udm,UDM_ISPELL_TYPE_SERVER,'','',1)) {
    echo "Erreur au chargement de la bibliothèque ispell sur le serveur<br />\n";
    exit;
}
?>
]]>
      </programlisting>
     </example>
    </listitem>
   </itemizedlist>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
