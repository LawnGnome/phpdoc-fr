<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.5 Maintainer: yannick Status: ready -->
 <refentry id="function.ereg">
  <refnamediv>
   <refname>ereg</refname>
   <refpurpose>Expression rationnelle standard</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>bool</type><methodname>ereg</methodname>
     <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
     <methodparam><type>string</type><parameter>string</parameter></methodparam>
     <methodparam choice="opt"><type>array</type><parameter>regs</parameter></methodparam>
    </methodsynopsis>
   <note>
    <para>
     <function>preg_replace</function>, qui utilise la syntaxe des expressions
      rationnelles compatibles PERL, est une alternative plus rapide de 
      <function>ereg_replace</function>.
    </para>
   </note>
   <simpara>
    Recherche dans la chaîne <parameter>string</parameter> les
    séquences de caractères qui correspondent au masque
    <parameter>pattern</parameter> sans tenir compte de la casse.
   </simpara>
   <simpara>
    Si au moins une séquence est trouvée
    (éventuellement dans les parenthèses capturantes de
    <parameter>pattern</parameter>), et que la fonction est appelée
    avec un troisième argument <parameter>regs</parameter>, les
    résultats seront enregistrés dans
    <parameter>regs</parameter>. $regs[1] contiendra
    la première parenthèse capturante (celle qui commence le
    plus tôt), $regs[2] contiendra la deuxième
    parenthèse capturante (celle qui commence après
    la première), et ainsi de suite.
    $regs[0] contient une copie de la chaîne.
   </simpara>
   <note>
     <simpara>
      Pour les version de &php; supérieurs ou égales à 4.1.0, 
      <varname>$regs</varname> sera rempli d'exactement dix éléments, même si
      il y a plus ou moins de dix parenthèses capturantes. Celà n'a aucun effet
      sur <function>ereg</function> pour chercher plus de sous-chaînes.
      Si aucun résultat n'est trouvé, <literal>$regs</literal> ne sera pas altéré
      par <function>ereg</function>.
     </simpara>
   </note>
   <para>
    <function>ereg</function> retourne &true; si une occurrence
    a été trouvée dans la chaîne <parameter>string</parameter> et
    &false; dans le cas contraire, ou si une erreur est survenue.
   </para>
   <para>
    L'exemple suivant prend une date au format ISO (YYYY-MM-DD) et l'affiche sous
    la forme DD.MM.YYYY :
    <example>
     <title>Exemple avec <function>ereg</function></title>
     <programlisting role="php">
<![CDATA[
<?php
if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs)) {
    echo "$regs[3].$regs[2].$regs[1]";
} else {
    echo "Format de date invalide : $date"; 
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Voir aussi 
    <function>eregi</function>, 
    <function>preg_match</function>,     
    <function>ereg_replace</function>,
    <function>eregi_replace</function>, 
    <function>strpos</function> et
    <function>strstr</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
