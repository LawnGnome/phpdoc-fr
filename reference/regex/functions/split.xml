<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.13 $ -->
<!-- EN-Revision: 1.5 Maintainer: yannick Status: ready -->
 <refentry id="function.split">
  <refnamediv>
   <refname>split</refname>
   <refpurpose>
    Scinde une chaîne en un tableau, grâce à une expression rationnelle
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
   <methodsynopsis>
    <type>array</type><methodname>split</methodname>
    <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
    <methodparam><type>string</type><parameter>string</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
   </methodsynopsis>
   <tip>
     <para>
      <function>preg_split</function>, qui utilise la syntaxe des expressions rationnelles 
      compatibles PERL, est une alternative plus rapide à <function>split</function>.
      Si vous n'avez pas besoin de la puissant des expressions rationnelles, il est plus
      rapide d'utiliser <function>explode</function>, qui n'utilise pas le moteur
      d'expressions rationnelles.
     </para>
    </tip>
   <para>
    <function>split</function> retourne un tableau de chaînes :
    chacune d'entre elle est une sous-chaîne de
    <parameter>string</parameter> délimitée par les
    occurrences trouvées de l'expression rationnelle
    <parameter>pattern</parameter>. Si <parameter>limit</parameter>
    est défini, le tableau retourné contiendra un maximum de 
    <parameter>limit</parameter> éléments avec le dernier élément contenant
    le reste de la chaîne <parameter>string</parameter>.
    Si une erreur survient, retourne
    &false;.
   </para>
   <para>
    Pour lire les 5 premiers champs d'une ligne du fichier
    <filename>/etc/passwd</filename>:
    <example>
     <title>Exemple avec <function>split</function></title>
     <programlisting role="php">
<![CDATA[
<?php
list($user, $pass, $uid, $gid, $extra)= split (":", $passwd_line, 5);
?>
]]>
     </programlisting>
    </example>
   </para>
    <simpara>
     S'il y a <replaceable>n</replaceable> occurrences de 
     <parameter>pattern</parameter>, le tableau retourné
     contiendra <literal><replaceable>n</replaceable>+1</literal> éléments.
     Par exemple, s'il n'y a aucune occurrence de <parameter>pattern</parameter>,
     un tableau d'un seul élément sera retourné. Bien sûr, cela reste vrai
     si <parameter>string</parameter> est une chaîne vide.
    </simpara>
   <para>
    Pour analyser une date qui est délimitée par des /,
    des points ou des tirets :
   </para>
   <para>
    <example>
     <title>Exemple avec <function>split</function></title>
     <programlisting role="php">
<![CDATA[
<?php
// Les délimiteurs peuvent être des tirets, points ou slash
$date = "04/30/1973";  
list($month, $day, $year) = split('[/.-]', $date);
echo "Month: $month; Day: $day; Year: $year<br />\n";
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Pour les utilisateurs qui recherchent le moyen d'émuler
    la commande Perl <command>@chars = split('', $str)</command>,
    voyez <function>preg_split</function>.
   </para>
   <para>
    Notez aussi que <parameter>pattern</parameter> est une
    expression rationnelle. Si vous voulez utiliser
    n'importe quel caractère spécial des expressions
    rationnelles, vous devez les échapper. Si vous
    pensez que <function>split</function> (ou toute autre expression
    rationnelle) se comporte bizarrement, lisez d'abord
    le fichier <filename>regex.7</filename>, inclus dans le dossier
    <filename>regex/</filename> de la distribution &php; . Il est au
    format manpage, et vous pourrez le lire avec une commande telle que
    <command>man /usr/local/src/regex/regex.7</command>.
   </para>
   <para>
    Voir aussi  
     <function>preg_split</function>,
      <function>spliti</function>,
     <function>explode</function>, 
     <function>implode</function>,
     <function>chunk_split</function> et
     <function>wordwrap</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
