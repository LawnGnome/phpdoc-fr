<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->

<!-- splitted from ./fr/functions/regex.xml, last change in rev 1.11 -->
<!-- last change to 'split' in en/ tree in rev 1.7 -->
 <refentry id="function.split">
  <refnamediv>
   <refname>split</refname>
   <refpurpose>
    Scinde une chaîne en un tableau, grâce à une
    expression régulière.
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
     <methodsynopsis>

    <type>array</type><methodname>split</methodname>
    <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
    <methodparam><type>string</type><parameter>string</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
     </methodsynopsis>
   <para>
    <function>split</function> retourne un tableau de chaînes :
    chacune d'entre elle est une sous-chaîne de
    <parameter>string</parameter> délimitée par les
    occurrences trouvées de l'expression régulière
    <parameter>pattern</parameter>. Si une erreur survient, retourne
    &false;.
   </para>
   <para>
    Pour lire les 5 premiers champs d'une ligne du fichier
    <filename>/etc/passwd</filename>:
    <example>
     <title>Exemple avec <function>split</function></title>
     <programlisting role="php">
<![CDATA[
<?php
list($user,$pass,$uid,$gid,$extra)= split (":", $passwd_line, 5);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Pour analyser une date qui est délimitée par des /,
    des points ou des tirets :
    <example>
     <title>Exemple avec <function>split</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$date = "04/30/1973";  // Les délimiteurs peuvent être des tirets, points ou slash
list ($month, $day, $year) = split ('[/.-]', $date);
echo "Month: $month; Day: $day; Year: $year<br>\n";
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Notez que <parameter>pattern</parameter> est insensible à la casse
   </para>
   <para>
    Notez bien que si vous n'avez pas besoin de la puissance
    des expressions régulières, il est plus rapide
    d'utiliser <function>explode</function>, qui n'utilise pas le
    moteur d'expressions régulières.
   </para>
   <para>
    Pour les utilisateurs qui recherchent le moyen d'émuler
    la commande Perl <command>@chars = split('', $str)</command>,
    voyez <function>preg_split</function>.
   </para>
   <para>
    Notez aussi que <parameter>pattern</parameter> est une
    expression régulière. Si vous voulez utiliser
    n'importe quel caractère spécial des expressions
    régulières, vous devez les échapper. Si vous
    pensez que <function>split</function> (ou toute autre expression
    régulière) se comporte bizarrement, lisez d'abord
    le fichier <filename>regex.7</filename>, inclus dans le dossier
    <filename>regex/</filename> de la distribution PHP . Il est au
    format manpage, et vous pourrez le lire avec une commande telle que
    <command>man /usr/local/src/regex/regex.7</command>.
   </para>
   <para>
    Voir aussi  
     <function>preg_split</function>,
      <function>spliti</function>,
     <function>explode</function>, 
     <function>implode</function>,
     <function>chunk_split</function> et
     <function>wordwrap</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
