<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.17 $ -->
<!-- EN-Revision: 1.9 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.ereg-replace">
 <refnamediv>
  <refname>ereg_replace</refname>
  <refpurpose>>Remplacement par expression rationnelle</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>ereg_replace</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>replacement</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Cette fonction effectue une recherche par expression rationnelle dans la chaîne
   <parameter>string</parameter> en recherchant les occurrences de
   <parameter>pattern</parameter>, puis les remplace par la chaîne
   <parameter>replacement</parameter>.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       Une expression rationnelle POSIX.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replacement</parameter></term>
     <listitem>
      <para>
       Si <parameter>pattern</parameter> contient des parenthèses
       capturantes, <parameter>replacement</parameter> pourra contenir des
       séquences de la forme <literal>\\<replaceable>digit</replaceable></literal>,
       qui seront remplacées par le texte capturé par la n-ième
       parenthèse capturante. <literal>\\0</literal> correspond
       à la chaîne originale complète. De 0 à
       9 parenthèses capturantes peuvent être utilisées.
       Les parenthèses peuvent être imbriquées, et leur
       numéro d'ordre est défini par leurs parenthèses
       ouvrantes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La chaîne d'entrée.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La chaîne modifiée est retournée. (Ce qui
   signifie que la chaîne originale sera retournée si
   aucune occurrence n'est trouvée.)
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Par exemple, le code suivant affiche "Ceci est un test"
   trois fois :
  </para>
  <para>
   <example>
    <title>Exemple avec <function>ereg_replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$string = "This is a test";
echo str_replace(" is", " was", $string);
echo ereg_replace("( )is", "\\1was", $string);
echo ereg_replace("(( )is)", "\\2was", $string);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Il est à noter que si vous utilisez une valeur entière avec
   <parameter>replacement</parameter>, vous n'obtiendrez pas le résultat
   escompté, car <function>ereg_replace</function> interprétera le nombre
   comme la valeur ordinale d'un caractère et l'appliquera. Par exemple :
  </para>
  <para>
   <example>
    <title>Exemple avec <function>ereg_replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/* Ceci ne fonctionne pas comme attendu */
$num = 4;
$string = "This string has four words.";
$string = ereg_replace('four', $num, $string);
echo $string;   /* Affiche : 'This string has   words.' */

/* Ceci fonctionne comme attendu */
$num = '4';
$string = "This string has four words.";
$string = ereg_replace('four', $num, $string);
echo $string;   /* Affiche : 'This string has 4 words.' */
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Remplacer les URL par des liens cliquables</title>
    <programlisting role="php">
<![CDATA[
<?php
$text = ereg_replace("[[:alpha:]]+://[^<>[:space:]]+[[:alnum:]/]",
                     "<a href=\"\\0\">\\0</a>", $text);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <tip>
   <para>
    <function>preg_replace</function>, qui utilise la syntaxe des expressions
    rationnelles compatibles PERL, est une alternative plus rapide de
    <function>ereg_replace</function>.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ereg</function></member>
    <member><function>eregi</function></member>
    <member><function>eregi_replace</function></member>
    <member><function>str_replace</function></member>
    <member><function>preg_match</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
