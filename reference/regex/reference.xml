<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.17 $ -->
<!-- EN-Revision: 1.12 Maintainer: yannick Status: ready -->
<!-- Purpose: basic.text -->
<!-- Membership: core -->
<!-- Reviewed: yes -->

 <reference id="ref.regex">
  <title>Expressions rationnelles</title>
  <titleabbrev>Regex POSIX</titleabbrev>

  <partintro>
   <section id="regex.intro">
    &reftitle.intro;
    <tip>
     <para>
      &php; supporte aussi des expressions rationnelles compatibles Perl, avec
      l'extension <link linkend="ref.pcre">PCRE functions</link>. Ces fonctions
      supportent des recherches non-gourmandes, des assertions, des sous-masques
      conditionnels et toute une gamme de fonctionnalités absentes des
      expressions rationnelles POSIX.
     </para>
    </tip>
    <warning>
     <para>
      Ces expressions rationnelles ne sont pas compatibles avec les
      données binaires. Les <link linkend="ref.pcre">expressions PCRE</link>
      le sont.
     </para>
    </warning>
    <para>
     Les expressions rationnelles sont utilisées pour de complexes
     manipulations sur les chaînes de caractères.
     &php; utilise les expressions rationnelles
     avancées de POSIX (POSIX 1003.2). Pour avoir tous les détails
     sur ces expressions, reportez-vous aux <ulink url="&url.regex.man;">pages de manuel</ulink>
     inclues dans le répertoire de la distribution &php;. Elles sont au format manpage :
     pour les lire, vous devrez utiliser la ligne de commande
     <command>man /usr/local/src/regex/regex.7</command>.
    </para>
   </section>

   <section id="regex.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.regex.configure;

   <section id="regex.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="regex.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section id="regex.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section id="regex.examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Expressions rationnelles</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Retourne &true; si "abc"
   est trouvé quelque part dans la chaîne $string. */
ereg ("abc", $string);

/* Retourne &true; si  "abc"
   est trouvé au début de la chaîne $string. */
ereg ("^abc", $string);

/* Retourne &true; si  "abc"
   est trouvé à la fin de la chaîne  $string. */
ereg ("abc$", $string);

/* Retourne &true; si  le client
   est Netscape 2, 3 ou MSIE 3. */
eregi ("(ozilla.[23]|MSIE.3)", $HTTP_USER_AGENT);

/* Recherche trois mots séparés par des espaces
   dans les chaînes $regs[1], $regs[2] et $regs[3]. */
ereg ("([[:alnum:]]+) ([[:alnum:]]+) ([[:alnum:]]+)", $string,$regs);

/* Insère une balise <br /> au début de la chaîne $string. */
$string = ereg_replace ("^", "<br />", $string);

/* Insère une balise <br /> à la fin de la chaîne $string. */
$string = ereg_replace ("$", "<br />", $string);

/* Supprime toutes les nouvelles lignes de $string. */
$string = ereg_replace ("\n", "", $string);

?>
]]>
      </programlisting>
     </example>
    </para>
   </section>

   <section id="regex.seealso">
    &reftitle.seealso;
    <para>
     Pour des expressions rationnelles compatibles Perl, voyez l'extension
     <link linkend="ref.pcre">PCRE</link>. Les commandes de recherche plus
     simples (avec support des caractères jokers) sont fournies par la fonction
     <function>fnmatch</function>.
    </para>
   </section>
  </partintro>

  &reference.regex.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

