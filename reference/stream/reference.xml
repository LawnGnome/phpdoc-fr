<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
 <reference id="ref.stream">
  <title>Flux</title>
  <titleabbrev>Flux</titleabbrev>

  <partintro>

   <section id="stream.intro">
    &reftitle.intro;
    <simpara>
     Les flux ("streams" en anglais) ont &eacute;t&eacute; introduits en &php; 4.3.0
     comme m&eacute;thode de g&eacute;n&eacute;ralisation des fichiers, sockets, connexions
     r&eacute;seau, donn&eacute;es compress&eacute;es et autres op&eacute;rations du m&ecirc;me type, 
     qui partagent des op&eacute;rations communes. Dans sa d&eacute;finition la plus simple,
     un flux est une ressource qui pr&eacute;sente des capacit&eacute;s de flux : 
     c'est &agrave; dire que ces objets peuvent &ecirc;tre lus ou recevoir des
     &eacute;critures de mani&egrave;re lin&eacute;aire, et dispose aussi de moyen d'acc&egrave;der
     &agrave; des positions arbitraires dans le flux.
    </simpara>
    <simpara>
     Un gestionnaire (dit <literal>wrapper</literal> en anglais), est une
     fonction qui indique comment le flux se comporte sp&eacute;cifiquement. C'est le
     cas du gestionnaire <literal>http</literal>, qui sait comment traduire
     une URL en une requ&ecirc;te sur un serveur distant. Il existe de nombreux
     gestionnaires int&eacute;gr&eacute; &agrave; &php; par d&eacute;faut (voir <xref linkend="wrappers"/>),
     et de plus, des gestionnaires sp&eacute;cifiques peuvent &ecirc;tre ajout&eacute; dans
     les scripts &php; avec la fonction <function>stream_register_wrapper</function>,
     ou bien directement par une autre extension, en utilisant l'API C de <xref linkend="streams"/>.
     Gr&acirc;ce &agrave; la souplesse des gestionnaires qui peuvent &ecirc;tre ajout&eacute;s &agrave; &php;,
     il n'y a pas de limites aux possibilit&eacute;s offertes. Pour conna&icirc;tre la liste
     des gestionnaires actuellement enregistr&eacute;s, utilisez la fonction
     <function>stream_get_wrappers</function>.
    </simpara>
   </section>

   <section id="stream.filters">
    <title>Filtres de flux</title>
    <simpara>
     Un <literal>filtre</literal> est une fonction finale qui effectue des op&eacute;rations
     sur les donn&eacute;es qui sont lues ou &eacute;crites dans un flux. Un nombre arbitraire de
     filtre peuvent &ecirc;tre ajout&eacute;s sur un flux. Des filtres personnalis&eacute;s peuvent aussi
     &ecirc;tre ajout&eacute;s avec la fonction <function>stream_register_filter</function>, ou bien
     dans une extension avec l'API C de <xref linkend="streams"/>. Pour conna&icirc;tre la liste
     des gestionnaires actuellement enregistr&eacute;s, utilisez la fonction
     <function>stream_get_filters</function>.
    </simpara>
    <para>
     Un flux est identifi&eacute; dans la forme 
     <parameter>protocole</parameter>://<parameter>serveur</parameter>
     <itemizedlist>
      <listitem>
       <simpara>
        <parameter>protocole</parameter>(&string;) -
        Le nom du protocole utilis&eacute;. Par exemple : file, 
        http, https, ftp, ftps, compress.zlib, compress.bz2, ssl, tls et php. 
        Voyez <xref linkend="wrappers"/> pour une liste de gestionnaires int&eacute;gr&eacute;s
        &agrave; &php;. Si aucun gestionnaire n'est sp&eacute;cifi&eacute;, la fonction utilise
        par d&eacute;faut <literal>file</literal>://).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <parameter>serveur</parameter> - 
        D&eacute;pend du gestionnaire utilis&eacute;. Pour les flux li&eacute;s au syst&egrave;me de fichier,
        c'est g&eacute;n&eacute;ralement un chemin et un nom de fichier. Pour les objets
        r&eacute;seau, c'est g&eacute;n&eacute;ralement un nom de serveur, et un chemin. Encore une
        fois, reportez vous &agrave; <xref linkend="wrappers"/> pour une description
        des diff&eacute;rents serveurs de gestionnaire.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>
   
   <section id="stream.contexts">
    <title>Contextes de flux</title>
    <simpara>
     Un <literal>contexte</literal> est un jeu de param&egrave;tres et d'options
     sp&eacute;cifiques &agrave; un gestionnaire qui modifie ou am&eacute;liore le comportement
     d'un flux. Les contextes sont cr&eacute;&eacute;s en utilisant la fonction
     <function>stream_context_create</function> et peuvent &ecirc;tre donn&eacute; aux
     fonctions de cr&eacute;ations de flux sur le syst&egrave;me de fichier 
     (i.e. <function>fopen</function>, <function>file</function>, 
     <function>file_get_contents</function>, etc...).
    </simpara>
    <simpara>
     Les options peuvent &ecirc;tre sp&eacute;cifi&eacute;es en appelant 
     <function>stream_context_create</function>, ou plus tard, avec
     <function>stream_context_set_option</function>.
	 Une liste des options sp&eacute;cifiques &agrave; des gestionnaires est disponible
	 dans la liste des gestionnaires int&eacute;gr&eacute;s (voyez <xref linkend="wrappers"/>).
    </simpara>
    <simpara>
     De plus, les param&egrave;tres peuvent &ecirc;tre envoy&eacute;s &agrave; un contexte en utilisant
     la fonction <function>stream_context_set_params</function>. Actuellement, le
     seul param&egrave;tre de contexte support&eacute; par &php; est <literal>notification</literal>. 
     La valeur de ce param&egrave;tre doit &ecirc;tre le nom d'une fonction qui sera appel&eacute;e
     lorsqu'un &eacute;v&eacute;nement survient pour un flux. La fonction d'alerte
     est appel&eacute; durant la reception de l'&eacute;v&eacute;nement, et doit accepter 6 param&egrave;tres : 
     </simpara>
    <methodsynopsis>
     <type>void</type><methodname>my_notifier</methodname>
     <methodparam><type>int</type><parameter>notification_code</parameter></methodparam>
     <methodparam><type>int</type><parameter>severity</parameter></methodparam>
     <methodparam><type>string</type><parameter>message</parameter></methodparam>
     <methodparam><type>int</type><parameter>message_code</parameter></methodparam>
     <methodparam><type>int</type><parameter>bytes_transferred</parameter></methodparam>
     <methodparam><type>int</type><parameter>bytes_max</parameter></methodparam>
    </methodsynopsis>
    <simpara>
     <parameter>notification_code</parameter> et <parameter>severity</parameter>
     sont des valeurs num&eacute;riques qui correspondent aux constantes <constant>STREAM_NOTIFY_*</constant>
     list&eacute;es ci-dessous. Si un message descriptif est disponible dans un flux, les
     param&egrave;tre <parameter>message</parameter> et <parameter>message_code</parameter> 
     en seront &eacute;quip&eacute;. La signification de ces valeurs est d&eacute;pendante du gestionnaire.

     <parameter>bytes_transferred</parameter> et <parameter>bytes_max</parameter> seront
     fournies lorsque possible.
    </simpara>
   </section>
   
   <section id="stream.installation">
    &reftitle.install; 
    <para>
     Les flux font parti de &php; depuis la version 4.3.0. Aucune &eacute;tape suppl&eacute;mentaire
     n'est requise pour les activer.
    </para>
   </section>

   <section id="stream.resources">
    <title>Classes Stream</title>
    <simpara>
     Des gestionnaires personnalis&eacute;s peuvent &ecirc;tre enregistr&eacute;s via la fonction 
     <function>stream_register_wrapper</function>, en utilisant la d&eacute;finition de
     classe d&eacute;crite dans ce manuel.
    </simpara>
    <simpara>
     La classe php_user_filter est pr&eacute;d&eacute;finie et est une classe abstraite
     &agrave; utiliser avec les filtres personnalis&eacute;s. Voyez le manuel de la fonction
     <function>stream_register_filter</function> pour plus de d&eacute;tails sur les
     impl&eacute;mentation de filtres utilisateurs.
    </simpara>
   </section>

   &reference.stream.constants;

   <section id="stream.errors">
    <title>Erreurs de flux</title>
    <para>
     Comme avec n'importe quel fichier ou socket, les op&eacute;rations sur un flux
     peuvent &eacute;chouer pour une grande vari&eacute;t&eacute; de raisons (par exemple : impossible
     de se connecter au serveur distant, fichier introuvable, etc...). Un flux peut aussi
     &eacute;chouer parceque le gestionnaire n'est pas configur&eacute; sur le syst&egrave;me en
     cours. Voyez le tableau retourn&eacute; par la fonction 
     <function>stream_get_wrappers</function> pour conna&icirc;tre la liste des gestionnaires
     configur&eacute;s sur votre installation de &php;. Comme avec la plupart des fonctions
     internes de &php;, si une erreur survient, un message de type 
     <constant>E_WARNING</constant> sera g&eacute;n&eacute;r&eacute; pour indiquer la nature
     de l'erreur.
    </para>
   </section>
   
   <section id="stream.examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Exemples avec <function>file_get_contents</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// Lit un fichier local dans le dossier /home/bar
  $localfile = file_get_contents("/home/bar/foo.txt");                         

// Identique au precedent, mais utilise explicitement le gestionnaire FILE
  $localfile = file_get_contents("file:///home/bar/foo.txt");                  

// Lit un fichier distant sur le serveur www.exemple.com avec le protocole HTTP 
  $httpfile  = file_get_contents("http://www.exemple.com/foo.txt");
  
// Lit le meme fichier sur le serveur www.exemple.com avec le protocole HTTPS
  $httpsfile = file_get_contents("https://www.exemple.com/foo.txt");           

// Lit un fichier distant sur le serveur ftp.exemple.com en utilisant le protocole FTP 
  $ftpfile   = file_get_contents("ftp://user:pass@ftp.example.com/foo.txt");   

// Lit un fichier distant sur le serveur ftp.exemple.com en utilisant le protocole FTPS 
  $ftpsfile  = file_get_contents("ftps://user:pass@ftp.example.com/foo.txt");  
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Envoie d'une requ&ecirc;te de type POST sur une serveur s&eacute;curis&eacute;</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Envoi d'une requ&ecirc;te POST sur le serveur https://secure.example.com/form_action.php
 * Inclusion des variables "foo" et "bar"
 */

$sock = fsockopen("ssl://secure.example.com", 443, $errno, $errstr, 30);
if (!$sock) die("$errstr ($errno)\n");

$data = "foo=" . urlencode("Valeur de Foo") . "&bar=" . urlencode("Valeur de Bar");

fputs($sock, "POST /form_action.php HTTP/1.0\r\n");
fputs($sock, "Host: secure.example.com\r\n");
fputs($sock, "Content-type: application/x-www-form-urlencoded\r\n");
fputs($sock, "Content-length: " . strlen($data) . "\r\n");
fputs($sock, "Accept: */*\r\n");
fputs($sock, "\r\n");
fputs($sock, "$data\r\n");
fputs($sock, "\r\n");

$headers = "";
while ($str = trim(fgets($sock, 4096)))
  $headers .= "$str\n";

print "\n";

$body = "";
while (!feof($sock))
  $body .= fgets($sock, 4096);

fclose($sock);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Ecrire des donn&eacute;es dans un fichier compress&eacute;</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Cr&eacute;ation d'un fichier compress&eacute; contenant une cha&icirc;ne arbitraire
 * Le fichier peut etre lu en utilisant le gestionnaire compress.zlib
 * ou simplement decompresse; en ligne de commande avec 'gzip -d foo-bar.txt.gz'
 */
$fp = fopen("compress.zlib://foo-bar.txt.gz","w");
if (!$fp) die("Impossible de cr&eacute;er le fichier.");

fwrite($fp, "Ceci est un test.\n");

fclose($fp);
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.stream.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

