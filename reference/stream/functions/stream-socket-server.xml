<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: partial -->
  <refentry id="function.stream-socket-server">
   <refnamediv>
    <refname>stream_socket_server</refname>
    <refpurpose>
     Crée une socket serveur Unix ou Internet
    </refpurpose> 
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>resource</type><methodname>stream_socket_server</methodname>
      <methodparam><type>string</type><parameter>local_socket</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>&amp;errno</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>&amp;errstr</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
      <methodparam choice="opt"><type>resource</type><parameter>context</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>stream_socket_server</function> crée un flux ou un datagramme
     sur la socket spécifiée <parameter>local_socket</parameter>. Le type
     de socket créé est déterminé par le transport spécifié avec le formattage
     URL suivant : <literal>transport://target</literal>. Pour une socket Internet,
     (<constant>AF_INET</constant>) comme TCP et UDP, la <literal>cible</literal> 
     de <parameter>remote_socket</parameter> sera une adresse IP ou un nom d'hôte.
     Pour une socket Unix,la <literal>cible</literal> doit être un fichier de
     socket du système.
    </para>
    <para>
     <parameter>flags</parameter> est un champ de bits qui peut être la combinaison
     de n'importe quelle option de connexion. Actuellement, les valeurs possibles
     pour ces options sont <constant>STREAM_CLIENT_ASYNC_CONNECT</constant> et
     <constant>STREAM_CLIENT_PERSISTENT</constant>. La valeur par défaut est
     <constant>STREAM_SERVER_BIND</constant> | <constant>STREAM_SERVER_LISTEN</constant>.
    </para>
    <para>
     <function>stream_socket_server</function> ne fait que créer une socket,
     et pour accepter des connexions, vous devez utiliser 
     <function>stream_socket_accept</function>.
    </para>
    <para>
     Si l'appel échoue, <function>stream_socket_server</function> va retourner
     &false; et si les paramètres optionnels <parameter>errno</parameter> et
     <parameter>errstr</parameter> sont fournis, ils recevront l'erreur
     exacte qui est survenue dans le système lors de l'appel à 
     <literal>connect()</literal>. Si la valeur retournée dans
     <parameter>errno</parameter> est <literal>0</literal> et que la fonction
     a retournée &false;, c'est une indication que l'erreur est survenue
     avant l'appel à <literal>connect()</literal>. Cela est probablement du
     à un problème d'initialisation de la socket. Notez que 
     <parameter>errno</parameter> et<parameter>errstr</parameter> 
     doivent être passés par référence.
    </para>
     <para>
     Suivant votre environnement, les sockets Unix ou le délai d'expiration
     peuvent ne pas être disponibles. Une liste des transports disponibles
     sur le système est accessible via
     <function>stream_get_transports</function>.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>stream_socket_server</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$socket = stream_socket_server("tcp://0.0.0.0:8000", $errno, $errstr);
if (!$socket) {
  echo "$errstr ($errno)<br>\n";
} else {
  while ($conn = stream_socket_accept($socket)) {
    fputs ($conn, 'Merci de vous connecter à mon serveur. L\'heure locale est ' . date('n/j/Y g:i a') . "\n");
    fclose ($conn);
  }
  fclose($socket);
}
?>
]]>
      </programlisting>
     </example>
     L'exemple ci-dessous vous montre comment lire la date et l'heure
     sur un service UDP de type "daytime" (port 13) sur votre propre machine,
     tel que présenté avec la fonction <function>stream_socket_client</function> :
     <note>
      <simpara>La plupart des systèmes ont besoin d'un accès administrateur
      pour ouvrir une socket au dela des ports 1024.
      </simpara>
     </note>
     <example>
     <title>Utiliser un serveur de socket UDP</title>
     <programlisting role="php">
<![CDATA[
<?php
$socket = stream_socket_server("udp://0.0.0.0:13", $errno, $errstr);
if (!$socket) {
    echo "ERROR: $errno - $errstr<br>\n";
} else {
  while ($conn = stream_socket_accept($socket)) {
    fwrite($conn, date("D M j H:i:s Y\r\n"));
    fclose($conn);
  }
  fclose($socket);
}
?>
]]>
     </programlisting>
     </example>
     &ipv6.brackets;
    </para>
    <para>
     Voir aussi 
     <function>stream_socket_client</function>, 
     <function>stream_set_blocking</function>,
     <function>stream_set_timeout</function>, 
     <function>fgets</function>,
     <function>fgetss</function>, 
     <function>fputs</function>,
     <function>fclose</function>, 
     <function>feof</function> et
     l'<link linkend="ref.curl">extension CURL</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
