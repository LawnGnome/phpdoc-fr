<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<section id="errorfunc.constants">
 &reftitle.constants;
 &extension.constants.core;
  <note>
   <simpara>
    Vous pouvez utiliser ces constantes dans le fichier &php.ini; mais pas 
    hors de &php;, comme dans le fichier &httpd.conf;, o&ugrave;
    vous devez utiliser les valeurs de champs de bits.
   </simpara>
  </note>
 <table id="errorlevels">
  <title>Erreurs et historique</title>
  <tgroup cols="4">
   <thead>
    <row>
     <entry>Valeur</entry>
     <entry>Constante</entry>
     <entry>Description</entry>
     <entry>Note</entry>
    </row>
   </thead>
   <tbody>
    <row id="e-error">
     <entry>1</entry>
     <entry>
      <constant>E_ERROR</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Les erreurs sont aussi affich&eacute;es par d&eacute;faut, et 
      l'ex&eacute;cution du script est interrompue. Elles indiquent 
      des erreurs qui ne peuvent pas &ecirc;tre ignor&eacute;es, comme 
      des probl&egrave;mes d'allocation de m&eacute;moire, par exemple. 
     </entry>
     <entry></entry>
    </row>

    <row id="e-warning">
     <entry>2</entry>
     <entry>
      <constant>E_WARNING</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Les alertes sont affich&eacute;es par d&eacute;faut, mais n'interrompent 
      pas l'ex&eacute;cution du script. Elles indiquent un 
      probl&egrave;me qui doit &ecirc;tre intercept&eacute; par le script 
      durant l'ex&eacute;cution du script. Par exemple, appeler <function>ereg</function>
      avec une regex invalide. 
     </entry>
     <entry></entry>
    </row>

    <row id="e-parse">
     <entry>4</entry>
     <entry>
      <constant>E_PARSE</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
       Les erreurs d'analyse ne doivent &ecirc;tre g&eacute;n&eacute;r&eacute;es
       que par l'analyseur. Elles ne sont cit&eacute;es ici que dans le 
       but d'&ecirc;tre exhaustif. 
     </entry>
     <entry></entry>
    </row>

    <row id="e-notice">
     <entry>8</entry>
     <entry>
      <constant>E_NOTICE</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Les notes ne sont pas affich&eacute;es par d&eacute;faut, et indique que 
      le script a rencontr&eacute; quelque chose qui peut &ecirc;tre une erreur, 
      mais peut aussi &ecirc;tre un &eacute;v&eacute;nement normal dans la vie 
      du script. Par exemple, essayer d'acc&eacute;der &agrave; une valeur qui 
      n'a pas &eacute;t&eacute; d&eacute;clar&eacute;e, ou appeler stat sur 
      un fichier qui n'existe pas. 
     </entry>
     <entry></entry>
    </row>

    <row id="e-core-error">
     <entry>16</entry>
     <entry>
      <constant>E_CORE_ERROR</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Elles sont similaires aux erreurs <constant>E_ERROR</constant>, mais 
      elles sont g&eacute;n&eacute;r&eacute;es par le code de &php;. Les fonctions 
      ne doivent pas g&eacute;n&eacute;rer ce genre d'erreur. 
     </entry>
     <entry>&php; 4 seulement</entry>
    </row>

    <row id="e-core-warning">
     <entry>32</entry>
     <entry>
      <constant>E_CORE_WARNING</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Elles sont similaires &agrave; E_WARNING, mais elles sont 
      g&eacute;n&eacute;r&eacute;es par le code de &php;. Les fonctions ne doivent
      pas g&eacute;n&eacute;rer ce genre d'erreur. 
     </entry>
     <entry>&php; 4 seulement</entry>
    </row>

    <row id="e-compile-error">
     <entry>64</entry>
     <entry>
      <constant>E_COMPILE_ERROR</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Elles sont similaires &agrave; E_ERROR, mais elles sont g&eacute;n&eacute;r&eacute;es
      par Zend Scripting Engine. Les fonctions ne doivent pas g&eacute;n&eacute;rer ce genre
      d'erreur. 
     </entry>
     <entry>&php; 4 seulement</entry>
    </row>

    <row id="e-compile-warning">
     <entry>128</entry>
     <entry>
      <constant>E_COMPILE_WARNING</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Elles sont similaires &agrave; E_WARNING, mais elles sont g&eacute;n&eacute;r&eacute;es
      par Zend Scripting Engine. Les fonctions ne doivent pas g&eacute;n&eacute;rer ce genre 
      d'erreur. 
     </entry>
     <entry>&php; 4 seulement</entry>
    </row>

    <row id="e-user-error">
     <entry>256</entry>
     <entry>
      <constant>E_USER_ERROR</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      E_USER_ERROR est comparable &agrave; E_ERROR. Elle est g&eacute;n&eacute;r&eacute;e en &php;
      par l'utilisation de la fonction <function>trigger_error</function>. Les fonctions ne doivent
      pas g&eacute;n&eacute;rer ce genre d'erreur. 
     </entry>
     <entry>&php; 4 seulement</entry>
    </row>

    <row id="e-user-warning">
     <entry>512</entry>
     <entry>
      <constant>E_USER_WARNING</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      E_USER_WARNING est comparable &agrave; E_WARNING. Elle est g&eacute;n&eacute;r&eacute;e en &php; 
      par l'utilisation de la fonction <function>trigger_error</function>. Les fonctions ne doivent pas
      g&eacute;n&eacute;rer ce genre d'erreur. 
     </entry>
     <entry>&php; 4 seulement</entry>
    </row>

    <row id="e-user-notice">
     <entry>1024</entry>
     <entry>
      <constant>E_USER_NOTICE</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      E_USER_WARNING est comparable &agrave; E_NOTICE. Elle est 
      g&eacute;n&eacute;r&eacute;e en &php; par l'utilisation de la 
      fonction <function>trigger_error</function>. Les fonctions 
      ne doivent pas g&eacute;n&eacute;rer ce genre d'erreur. 
     </entry>
     <entry>&php; 4 seulement</entry>
    </row>

    <row id="e-all">
     <entry>2047</entry>
     <entry>
      <constant>E_ALL</constant> 
      (<type>integer</type>)
     </entry>
     <entry>
      Toutes les erreurs et alertes support&eacute;es.
     </entry>
    </row>

   </tbody>
  </tgroup>
 </table>

 <para>
  Les valeurs ci-dessus (num&eacute;rique ou symbolique) sont utilis&eacute;es pour
  constituer des champs de bits, qui sp&eacute;cifie le niveau de rapport d'erreur.
  Vous pouvez utiliser les 
  <link linkend="language.operators.bitwise">op&eacute;rateurs de bits</link> 
  pour combiner ces valeurs pour en faire des masques qui filtrent certaines erreurs.
  Notez bien que seuls '|', '~', '!', et '&amp;' seront compris dans le fichier &php.ini;,
  et que aucun op&eacute;rateur logique ne sera compris en <filename>php3.ini</filename>. 
 </para>
</section> 

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

