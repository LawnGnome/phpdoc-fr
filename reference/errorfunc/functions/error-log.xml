<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.16 $ -->
<!-- EN-Revision: 1.14 Maintainer: yannick Status: ready -->

<refentry id="function.error-log">
 <refnamediv>
  <refname>error_log</refname>
  <refpurpose>Stocke un message d'erreur</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>error_log</methodname>
   <methodparam><type>string</type><parameter>message</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>message_type</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>destination</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>extra_headers</parameter></methodparam>
  </methodsynopsis>
  <para>
   Envoie un message d'erreur à
   l'historique du serveur web, à un port <acronym>TCP</acronym> ou un
   fichier.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>message</parameter></term>
     <listitem>
      <para>
       Le message d'erreur qui doit être stocké.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>message_type</parameter></term>
     <listitem>
      <para>
       Spécifie où le message d'erreur doit aller. Les types possibles de messages
       sont :
      </para>
      <para>
       <table>
        <title><function>error_log</function> log types</title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry>0</entry>
           <entry>
            <parameter>message</parameter> est envoyé à l'historique
            &php;, qui est basé sur l'historique système ou un fichier,
            en fonction de la configuration de <link
            linkend="ini.error-log">error_log</link>. C'est l'option par défaut.
           </entry>
          </row>
          <row>
           <entry>1</entry>
           <entry>
            <parameter>message</parameter> est envoyé par email à
            l'adresse <parameter>destination</parameter>. C'est le seul type qui
            utilise le quatrième paramètre
            <parameter>extra_headers</parameter>.
           </entry>
          </row>
          <row>
           <entry>2</entry>
           <entry>
            <parameter>message</parameter> est envoyé par la connexion de
            débogage &php;. Cette option n'est disponible que si l'option
            <link linkend="configure.enable-debugger">remote_debugging</link> a
            été désactivée. Dans ce cas, le paramètre <parameter>destination</parameter> 
            spécifie l'hôte ou l'adresse IP, et optionnellement le numéro de
          port, de la socket qui recevra les informations de débogage. Cette option
          est uniquement disponible en &php; 3.
           </entry>
          </row>
          <row>
           <entry>3</entry>
           <entry>
            <parameter>message</parameter> est ajouté au fichier
            <parameter>destination</parameter>. Une nouvelle ligne
            est automatiquement ajoutée à la fin de la chaîne
            <parameter>message</parameter>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>destination</parameter></term>
     <listitem>
      <para>
       La destination. Cela dépend du paramètre
       <parameter>message</parameter> décrit ci-dessus.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extra_headers</parameter></term>
     <listitem>
      <para>
       Les en-têtes supplémentaires. Ils sont utilisés lorsque le paramètre
       <parameter>message</parameter> est défini à 
       &one;. Ce type de message utilise la même fonction interne
       que la fonction <function>mail</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example role="php">
    <title><function>error_log</function> examples</title>
    <programlisting role="php">
<![CDATA[
<?php
// Envoi une notification par l'historique du serveur web,
// si la connexion à la base de données est impossible.
if (!Ora_Logon($username, $password)) {
  error_log("Base Oracle indisponible !", 0);
}

// Indiquer à l'administrateur, par email, qu'il n'y a plus de FOO
if (!($foo = allocate_new_foo())) {
  error_log("Aya!, Il ne reste plus de FOO disponibles !", 1,
  "operateur@example.com");
}

// D'autres manières d'appeler error_log():
error_log("Grosse bourde !", 2, "127.0.0.1:7000");
error_log("Grosse bourde !", 2, "loghost");
error_log("Grosse bourde !", 3, "/var/tmp/mes-erreurs.log");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->