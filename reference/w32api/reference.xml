<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
 <reference id="ref.w32api">
  <title>API windows</title>
  <titleabbrev>W32api</titleabbrev>

  <partintro>
   <section id="w32api.intro">
    &reftitle.intro;
    <para>
     Cette extension est une API g&eacute;n&eacute;rique d'acc&egrave;s aux DLL. Elle a &eacute;t&eacute;
     originalement &eacute;crite pour acc&eacute;der aux API Win32 depuis &php;, mais vous
     pouvez l'utiliser pour acc&eacute;der &agrave; d'autres fonctions export&eacute;es par des
     DLL.
    </para>
    <para>
     Actuellement, les types support&eacute;s sont les types &php; g&eacute;n&eacute;riques
     (cha&icirc;nes de caract&egrave;res, bool&eacute;ens, nombres, entiers et NULL), et les types
     que vous d&eacute;finissez avec <function>w32api_deftype</function>.
    </para>
    &warn.experimental;
   </section>

   <section id="w32api.requirements">
    &reftitle.required;
    <para>
     Cette extension ne fonctionne qu'avec le syst&egrave;me Windows.
    </para>
   </section>
   
   <section id="w32api.installation">
    &reftitle.install;
    &no.install;
   </section>
   
   <section id="w32api.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="w32api.resources">
    &reftitle.resources;
    <para>
     Cette extension d&eacute;finit un type de ressource, utilis&eacute; pour les
     types de donn&eacute;es cr&eacute;&eacute; par l'utilisateur. Le nom de cette
     ressource est <literal>"dynaparm"</literal>.
    </para>
   </section>

   &reference.w32api.constants;
   
   <section id="w32api.examples">
    &reftitle.examples;
    <para>
     Cet exemple lit la dur&eacute;e de vie du syst&egrave;me, et l'affiche dans une bo&icirc;te : 
    </para>
    <example>
     <title>Lit la dur&eacute;e de vie de la machine, et l'affiche</title>
     <programlisting role="php">
<![CDATA[
<?php
// D&eacute;finit les constantes n&eacute;cessaire, issues de
// Visual Studio/Tools/Winapi/WIN32API.txt
define("MB_OK", 0);

// Chargement de l'extension
dl("php_w32api.dll");

// Enregistrement de la fonction GetTickCount, provenant de kernel32.dll
w32api_register_function("kernel32.dll", 
                         "GetTickCount",
                         "long");
                         
// Enregistrement de la fonction MessageBoxA issue de User32.dll
w32api_register_function("User32.dll",
                         "MessageBoxA",
                         "long");

// Lecture de la dur&eacute;e de vie de la machine
$ticks = GetTickCount();

// Conversion en texte lisible
$secs  = floor($ticks / 1000);
$mins  = floor($secs / 60);
$hours = floor($mins / 60);

$str = sprintf("Vous utilisez cet ordinateur depuis  : ".
                "\r\n %d millisecondes, ou \r\n %d secondes".
                "ou \r\n %d minutes ou\r\n %d heures %d minutes.",
                $ticks,
                $secs,
                $mins,
                $hours,
                $mins - ($hours*60));

// Affiche le message dans une bo&icirc;te de dialogue avec un bouton OK
MessageBoxA(NULL, 
            $str, 
            "Uptime Information", 
            MB_OK);
?>
]]>
     </programlisting>
    </example>
   </section>
  </partintro>

&reference.w32api.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

