<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325456 Maintainer: itanea Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mysqlinfo.concepts" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Concepts</title>
 <para>
  Ces concepts sont spécifiques aux drivers MySQL pour PHP.
 </para>

 <section xml:id="mysqlinfo.concepts.buffering">
  <title>Requêtes mises ou non en mémoire tampon</title>
  
  <para>
   Les requêtes utilisent par défaut le mode Mémoire tampon. Cela signifie que le résultats des requêtes est immédiatement transféré du serveur MySQL à PHP et conservé dans la mémoire du process PHP.
Cela permet des opérations complémentaires comme compter le nombre de résultat, et déplacer(seeking) le pointeur de résultat actuel. Il permet également d'exécuter des requêtes supplémentaires sur la même connexion tout en travaillant sur le jeu de résultats.
   L'inconvénient de la mise en mémoire tampon est que des jeux de résultats importants peuvent demander beaucoup plus de mémoire. La mémoire restera occupée jusqu'à ce que toutes les références sur les jeux de résultats soient désactivés ou que les jeux de résultats soient explicitement libérés, ce qui arrive de manière automatique à la fin du processus. La terminologie "store result" est également utilisée avec le mode mémoire tampon, comme la totalité des résultats est stocké à la fois.
  </para>

  <note>
   <para>
    Lorsque vous utilisez libmysql comme librairie la limite de mémoire de PHP ne comptera pas la mémoire utilisée pour les jeux de résultats à moins que les données sont lues dans les variables PHP. Avec mysqlnd la mémoire utilisée comprendra le jeu de résultats complet.
   </para>
  </note>
  
  <para>
   Les requêtes n'utilisant pas la mémoire tampon les requêtes MySQL exécutent leur requête et retournent une <type>ressource</type> tandis que les données sont toujours en attente sur le serveur MySQL pour être récupérés. Cela utilise moins de mémoire côté PHP, mais peut augmenter la charge sur le serveur. À moins que le jeu de résultats complet ait été récupéré depuis le serveur aucune autres requêtes peuvent être envoyées sur la même connexion. Les requêtes n'utilisant pas la mémoire tampon peuvent également faire référence à un "fetch result", étant donné que les lignes sont extraites sur demande.
  </para>

  <para>
   Suivant ces caractéristiques les requêtes utilisant la mémoire tampon devraient être utilisées dans les cas où vous vous attendez seulement un jeu de résultats limité ou avez besoin de savoir la quantité de lignes retournées avant de lire toutes les lignes. Le mode sans mémoire tampon doit être utilisé lorsque vous vous attendez plus de résultats.
  </para>
  
  <!-- @TODO
    - Add list of issues people run into with unbuffered queries
    - Add list of specific use cases for when unbuffered queries are useful
    - Question: Unbuffered queries still require all rows to be returned or resource free before executing another? Applies to all extensions?
    - Show "free_result" functions / unset usage with buffered queries 8double-check with Andrey on mysqlnd optimizations
   -->
  
  <para>
   Parce que les requêtes sont mises en mémoire tampon par défaut, les exemples ci-dessous vont vous présenter comment exécuter avec chaque API des requêtes sans mise en mémoire tampon.
  </para>

  <example>
   <title>Exemple de requêtes n'utilisant pas la mémoire tampon: mysqli</title>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli  = new mysqli("localhost", "my_user", "my_password", "world");
$uresult = $mysqli->query("SELECT Name FROM City", MYSQLI_USE_RESULT);

if ($uresult) {
   while ($row = $uresult->fetch_assoc()) {
       echo $row['Name'] . PHP_EOL;
   }
}
$uresult->close();
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Exemple de requêtes n'utilisant pas la mémoire tampon: pdo_mysql</title>
   <programlisting role="php">
<![CDATA[
<?php
$pdo = new PDO("mysql:host=localhost;dbname=world", 'my_user', 'my_pass');
$pdo->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, TRUE);

$uresult = $pdo->query("SELECT Name FROM City");
if ($uresult) {
   while ($row = $uresult->fetch(PDO::FETCH_ASSOC)) {
       echo $row['Name'] . PHP_EOL;
   }
}
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Exemple de requêtes n'utilisant pas la mémoire tampon: mysql</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn = mysql_connect("localhost", "my_user", "my_pass");
$db   = mysql_select_db("world");

$uresult = mysql_unbuffered_query("SELECT Name FROM City");
if ($uresult) {
   while ($row = mysql_fetch_assoc($uresult)) {
       echo $row['Name'] . PHP_EOL;
   }
}
?>
]]>
   </programlisting>
  </example>
 </section>

</chapter>
