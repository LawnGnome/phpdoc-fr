<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.7 Maintainer: didou Status: ready -->
<!-- Reviewed: yes -->

  <refentry xml:id="function.mcrypt-generic" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>mcrypt_generic</refname>
    <refpurpose>Chiffre les données</refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>string</type><methodname>mcrypt_generic</methodname>
      <methodparam><type>resource</type><parameter>td</parameter></methodparam>
      <methodparam><type>string</type><parameter>data</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mcrypt_generic</function> chiffre les données
     <parameter>data</parameter>. Les données sont complétées 
     par des "<literal>\0</literal>" pour obtenir une taille multiple de la taille 
     d'un bloc. Elle retourne les données chiffrées. Notez que la longueur 
     de la chaîne retournée peut être plus longue que celle 
     passée en argument, à cause du complément.
    </para>
    <para>
     Si vous voulez enregistrer les données chiffrées dans une base de données
     assurez-vous d'enregistrer la chaîne entière retournée par cette fonction,
     sinon la chaîne ne sera pas décryptée correctement. Si votre chaîne d'origine
     comporte 10 caractères et que la taille d'un bloc est de 8 (utilisez
     <function>mcrypt_enc_get_block_size</function> pour déterminer cette taille),
     vous aurez besoin d'au moins 16 caractères dans le champ de votre base de données.
     Notez que la chaîne retournée par <function>mdecrypt_generic</function> aura
     16 caractères de long... utilisez <literal>rtrim($str, "\0")</literal> 
     pour supprimer le complément.
    </para>
    <para>
     Par exemple, si vous enregistrez les données dans une base de données MySQL,
     souvenez-vous que les champs de type varchar suppriment automatiquement les
     espaces en trop durant l'insertion. Comme les données chiffrés peuvent se
     terminer avec un espace (ASCII 32), les données seront endommagées par cette
     suppression. Stockez les données dans un champ de type tinyblob/tinytext 
     (ou plus grand) pour que tout fonctionne normalement.
    </para>
    <para>
     Le gestionnaire de chiffrement <parameter>td</parameter> doit être
     initialisé avec la fonction <function>mcrypt_generic_init</function>,
     avec une clé et un VI, avant d'appeler cette fonction. Lorsque le chiffrement
     est réalisé, vous devez libérer les buffers en appelant la fonction
     <function>mcrypt_generic_deinit</function>.
     Voyez <function>mcrypt_module_open</function> pour un exemple.
    </para>
    <para>
     Voir aussi
     <function>mdecrypt_generic</function>,
     <function>mcrypt_generic_init</function> et
     <function>mcrypt_generic_deinit</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
