<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.7 Maintainer: yannick Status: ready -->
  <refentry id="function.openssl-seal">
   <refnamediv>
    <refname>openssl_seal</refname>
    <refpurpose>Scelle des données</refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>int</type><methodname>openssl_seal</methodname>
      <methodparam><type>string</type><parameter>data</parameter></methodparam>
      <methodparam><type>string</type><parameter role="reference">sealed_data</parameter></methodparam>
      <methodparam><type>array</type><parameter role="reference">env_keys</parameter></methodparam>
      <methodparam><type>array</type><parameter>pub_key_ids</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>openssl_seal</function> retourne la longueur des données
     scellées en cas de succès, et &false; sinon.
     En cas de succès, les données scellées sont
     placées dans le paramètre <parameter>sealed_data</parameter>,
     et les clés d'enveloppe dans <parameter>env_keys</parameter>.
    </para>
    <para>
     <function>openssl_seal</function> scelle (chiffre) les données
     <parameter>data</parameter> en utilisant l'algorithme RC4 avec une clé
     secrète générée aléatoirement. La clé
     est chiffrée avec chaque clé publique associée à
     <parameter>pub_key_ids</parameter> et chaque clé ainsi
     chiffrée est retournée dans <parameter>env_keys</parameter>.
     Cela signifie que que vous pouvez envoyez des données scellées
     à plusieurs destinataires (en supposant que chacun ait reçu la
     clé publique). Chaque destinataire doit recevoir les données
     chiffrées et la clé d'enveloppe, qui a été
     chiffrée avec la clé publique du destinataire.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>openssl_seal</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// On suppose que $data contient les données à sceller
// lecture de la clé publique pour chaque destinataire
$fp = fopen("/src/openssl-0.9.6/demos/maurice/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk1 = openssl_get_publickey($cert);
// pour le deuxième destinataire
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk2 = openssl_get_publickey($cert);

// scelle le message : seuls, les possessuers de $pk1 et $pk2 peuvent déchiffrer
// le message $sealed avec les clés $ekeys[0] et $ekeys[1] (respectivement).
openssl_seal($data, $sealed, $ekeys, array($pk1,$pk2));

// libère les clés de la mémoire
openssl_free_key($pk1);
openssl_free_key($pk2);
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi
     <function>openssl_open</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
