<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.16 $ -->
<!-- EN-Revision: 1.19 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.openssl-csr-new" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>openssl_csr_new</refname>
  <refpurpose>Génère une CSR</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>openssl_csr_new</methodname>
   <methodparam><type>array</type><parameter>dn</parameter></methodparam>
   <methodparam><type>resource</type><parameter role="reference">privkey</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>configargs</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>extraattribs</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>openssl_csr_new</function> génère une nouvelle CSR (<literal>Certificate Signing Request</literal>,
   requête de signature de certificat), basée sur les informations apportés par <parameter>dn</parameter>, 
   qui représente le nom unique (<literal>Distinguished Name</literal>) qui doit être utilisé pour ce certificat.
  </para>
  &note.openssl.cnf;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dn</parameter></term>
     <listitem>
      <para>
       Le nom distingué qui doit être utilisé dans le certificat.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>privkey</parameter></term>
     <listitem>
      <para>
       <parameter>privkey</parameter> doit être une clé privée qui a été
       générée par <function>openssl_pkey_new</function> (ou
       obtenue autrement par l'une des fonctions de la famille openssl_pkey)
       La clé publique sera utilisée pour signer la 
       CSR.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>configargs</parameter></term>
     <listitem>
      <para>
       Par défaut, le fichier <literal>openssl.conf</literal> de votre système
       est utilisé pour initialiser la requête; vous pouvez spécifier une section 
       du fichier de configuration en paramétrant la clé <literal>config_section_section</literal> de
       <parameter>configargs</parameter>. Vous pouvez aussi spécifier un fichier de 
       configuration openssl alternatif en paramétrant la valeur de 
       <literal>config</literal> avec le chemin du fichier à utiliser.
       Si les clés suivantes sont présentes dans <parameter>configargs</parameter>, elles se 
       comportent comme leurs équivalents dans <literal>openssl.conf</literal>, selon la
       liste suivante.
       <table>
        <title>Ecrasement de configuration</title>
        <tgroup cols="3">
         <thead>
          <row>
           <entry><parameter>configargs</parameter> key</entry>
           <entry>type</entry>
           <entry>Équivalent de <literal>openssl.conf</literal></entry>
           <entry>description</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>digest_alg</entry>
           <entry><type>string</type></entry>
           <entry>default_md</entry>
           <entry>Sélectionne l'algorithme de hachage à utiliser</entry>
          </row>
          <row>
           <entry>x509_extensions</entry>
           <entry><type>string</type></entry>
           <entry>x509_extensions</entry>
           <entry>Sélectionne quelle extension utiliser lors de la création d'un
           certificat x509</entry>
          </row>
          <row>
           <entry>req_extensions</entry>
           <entry><type>string</type></entry>
           <entry>req_extensions</entry>
           <entry>Sélectionne quelle extension utiliser lors de la création d'une CSR</entry>
          </row>
          <row>
           <entry>private_key_bits</entry>
           <entry><type>integer</type></entry>
           <entry>default_bits</entry>
           <entry>Spécifie la longueur en bits de la clé privée</entry>
          </row>
          <row>
           <entry>private_key_type</entry>
           <entry><type>integer</type></entry>
           <entry>none</entry>
           <entry>Spécifie le type de clé privée à créer. Les valeurs possibles
            sont <constant>OPENSSL_KEYTYPE_DSA</constant>,
            <constant>OPENSSL_KEYTYPE_DH</constant> ou
            <constant>OPENSSL_KEYTYPE_RSA</constant>.
            La valeur par défaut est <constant>OPENSSL_KEYTYPE_RSA</constant> qui 
	    est actuellement le seul type de clé supporté.
           </entry>
          </row>
          <row>
           <entry>encrypt_key</entry>
           <entry><type>boolean</type></entry>
           <entry>encrypt_key</entry>
           <entry>La clé (avec mot de passe) exportée doit-elle être chiffrée?</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extraattribs</parameter></term>
     <listitem>
      <para>
       <parameter>extraattribs</parameter> est utilisé pour spécifier
       des options de configuration supplémentaires pour la CSR. Les deux
       paramètres <parameter>dn</parameter> et
       <parameter>extraattribs</parameter> sont des tableaux associatifs dont les
       clés sont converties en OIDs et appliquées aux parties appropriées de la 
       requête.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la CSR.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Création d'un certificat auto-signé</title>
    <programlisting role="php">
<![CDATA[
<?php
// Assigne les valeurs du nom distingué à utiliser avec le certificat
// Vous devez remplacer les valeurs suivantes pour qu'elles correspondent
// au nom de votre compagnie, ou, plus précisément, le nom de la personne
// qui représente le site de votre compagnie pour qui vous générez des certificats.
// Pour les certificats SSL, le commonName est généralement le nom de domaine
// pour lequel vous installez le certificat, mais pour les certificats S/MIME,
// le commonName sera le nom de la personne qui utilisera le certificat.
$dn = array(
    "countryName" => "UK",
    "stateOrProvinceName" => "Somerset",
    "localityName" => "Glastonbury",
    "organizationName" => "The Brain Room Limited",
    "organizationalUnitName" => "PHP Documentation Team",
    "commonName" => "Wez Furlong",
    "emailAddress" => "wez@example.com"
);

// Génère les clés privée et publique
$privkey = openssl_pkey_new();

// Génère la requête de signature de certificat
$csr = openssl_csr_new($dn, $privkey);

// Vous souhaiterez généralement créer un certificat auto-signé
// une fois que votre autorité de certification accède à votre requête
// Cette commande crée une certificat auto-signé valide 365 jours
$sscert = openssl_csr_sign($csr, null, $privkey, 365);

// Maintenant, vous voulez préserver la clé privée, la CSR et le certificat
// auto-signé, de façon à ce qu'ils puissent être installés sur votre
// serveur web, serveur mail ou client mail (suivant l'utilisation).
// Cet exemple vous montre comment placer ces éléments dans des variables
// mais vous pouvez aussi les mettre directement dans des fichiers.
// Typiquement, vous allez envoyer la CSR à votre autorité de certification
// qui vous émettra un "vrai" certificat.
openssl_csr_export($csr, $csrout) and var_dump($csrout);
openssl_x509_export($sscert, $certout) and var_dump($certout);
openssl_pkey_export($privkey, $pkeyout, "mypassword") and var_dump($pkeyout);

// Affiche les erreurs qui sont survenues
while (($e = openssl_error_string()) !== false) {
    echo $e . "\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
