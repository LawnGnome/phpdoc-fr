<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.13 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
  <refentry id="function.openssl-csr-new">
   <refnamediv>
    <refname>openssl_csr_new</refname>
    <refpurpose>Génère une CSR</refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>bool</type><methodname>openssl_csr_new</methodname>
      <methodparam><type>array</type><parameter>dn</parameter></methodparam>
      <methodparam><type>resource</type><parameter role="reference">privkey</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>configargs</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>extraattribs</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>openssl_csr_new</function> génère une nouvelle CSR 
     (<literal>Certificate Signing Request</literal>,
     requête de signature de certificat), basée sur les informations fournies par 
     <parameter>dn</parameter>, qui représente le nom unique 
     (<literal>Distinguished Name</literal>) qui doit être utilisé pour ce certificat.
    </para>
    <para>
     <parameter>privkey</parameter> doit être une clé privée qui a été
     générée par <function>openssl_pkey_new</function> (ou
     obtenue autrement par l'une des fonctions de la famille openssl_pkey)
     La clé publique sera utilisée pour signer la CSR.
    </para>
    <para>
     <parameter>extraattribs</parameter> est utilisé pour spécifier
     des options de configuration supplémentaires pour la CSR. Les deux
     paramètres <parameter>dn</parameter> et
     <parameter>extraattribs</parameter> sont des tableaux associatifs dont les
     clés sont converties en OIDs et appliquées aux parties appropriées de la 
     requête.
    </para>
    &reference.openssl.note-openssl-cnf;
    <para>
     Par défaut, les informations du fichier <literal>openssl.conf</literal>
     de votre système sont utilisées pour initialiser la requête ; vous pouvez
     spécifier une section du fichier de configuration en utilisant l'index
     <literal>config_section_section</literal> du tableau
     <parameter>configargs</parameter>. Vous pouvez aussi
     spécifier une configuration OpenSSL alternative en utilisant l'index
     <literal>config</literal>, et en lui donnant la valeur du chemin à
     utiliser. Les index suivants, si fournis dans le paramètre 
     <parameter>configargs</parameter>, se comportent comme leur équivalent
     du fichier <literal>openssl.conf</literal>, tel qu'indiqué ci-dessous.
     <table>
      <title>Adaptation des configurations</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Index <parameter>configargs</parameter></entry>
         <entry>Type</entry>
         <entry>Equivalent <literal>openssl.conf</literal></entry>
         <entry>Description</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>digest_alg</entry>
         <entry>&string;</entry>
         <entry>default_md</entry>
         <entry>Sélectionne la méthode "digest" à utiliser</entry>
        </row>
        <row>
         <entry>x509_extensions</entry>
         <entry>&string;</entry>
         <entry>x509_extensions</entry>
         <entry>Sélectionne quelles extensions doivent être utilisées lors de la
         création du certificat x509</entry>
        </row>
        <row>
         <entry>req_extensions</entry>
         <entry>&string;</entry>
         <entry>req_extensions</entry>
         <entry>Sélectionne quelles extensions doivent être utilisées lors de la
         création d'une CSR</entry>
        </row>
        <row>
         <entry>private_key_bits</entry>
         <entry>&integer;</entry>
         <entry>default_bits</entry>
         <entry>Spécifie le nombre de bits à utiliser lors de la génération de la 
         clé privée</entry>
        </row>
        <row>
         <entry>private_key_type</entry>
         <entry>&integer;</entry>
         <entry>none</entry>
         <entry>Spécifie le type de clé privée à générer. Cela peut être l'une des
         constantes suivantes : <constant>OPENSSL_KEYTYPE_DSA</constant>,
          <constant>OPENSSL_KEYTYPE_DH</constant> ou
          <constant>OPENSSL_KEYTYPE_RSA</constant>.
          La valeur par défaut est <constant>OPENSSL_KEYTYPE_RSA</constant>,
          ce qui est le seul type de clé actuellement supporté.
         </entry>
        </row>
        <row>
         <entry>encrypt_key</entry>
         <entry>&boolean;</entry>
         <entry>encrypt_key</entry>
         <entry>Doit être une clé exportée (avec mot de passe) qui sera
         chiffrée?</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <simpara>
     &return.success;
    </simpara>
    <para>
     <example>
      <title>Exemple avec <function>openssl_csr_new</function> - création d'un 
      certificat auto chiffré</title>
      <programlisting role="php">
<![CDATA[
<?php
// Assigne les valeurs du nom distingué à utiliser avec le certificat
// Vous devez remplacer les valeurs suivantes pour qu'elles correspondent
// au nom de votre compagnie, ou, plus préciséement, le nom de la personne
// qui représente le site de votre compagnie pour qui vous générez des
// clés. Pour les certificats SSL, le commonName est généralement le nom de domaine
// pour lequel vous installez le certificat, mais pour les certificats
// le commonName sera le nom de la personne qui utilisera le certificat.
$dn = array(
    "countryName" => "UK",
    "stateOrProvinceName" => "Somerset",
    "localityName" => "Glastonbury",
    "organizationName" => "The Brain Room Limited",
    "organizationalUnitName" => "PHP Documentation Team",
    "commonName" => "Wez Furlong",
    "emailAddress" => "wez@php.net"
);

// Génère les clés privée et publique
$privkey = openssl_pkey_new();

// Génère la requête de signature de certificat
$csr = openssl_csr_new($dn, $privkey);

// Vous souhaiterez généralement créer un certificat auto chiffré
// une fois que votre autorité de certification accède à votre requête
// Cette commande crée une certificat auto chiffré
$sscert = openssl_csr_sign($csr, null, $privkey, 365);

// Maintenant, vous voulez préserver la clé secrête, la CSR et le certificat
// auto chiffré, de façon à ce qu'ils puissent être installés sur votre
// serveur web, serveur mail ou client mail (suivant l'utilisation).
// Cet exemple vous montre comment placer ces éléments dans des variables
// mais vous pouvez aussi les mettre directement dans des fichiers.
// Typiquement, vous allez envoyer la CSR à votre autorité de certification
// qui vous émettra un "vrai" certificat.
openssl_csr_export($csr, $csrout) and var_dump($csrout);
openssl_x509_export($sscert, $certout) and var_dump($certout);
openssl_pkey_export($privkey, $pkeyout, "mypassword") and var_dump($pkeyout);

// Affiche les erreurs qui sont survenues
while (($e = openssl_error_string()) !== false) {
    echo $e . "\n";
}
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
