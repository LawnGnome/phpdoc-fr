<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->
 <reference id="ref.xsl">
  <title>XSL</title>
  <titleabbrev>XSL</titleabbrev>

  <partintro>
   <section id="xsl.intro">
    &reftitle.intro;
    &warn.experimental;
    <para>
     L'extension XSL implémente le standard XSL, et fait
     des transformations XSLT à l'aide de la bibliothèque libxslt.
    </para>
   </section>

   <section id="xsl.installation">
    &reftitle.install;
    <para>
     &php; 5 inclut l'extension XSL par défaut, et elle peut être
     activée en ajoutant l'option à votre ligne de commande,
     lors de la compilation de &php;. 
     <literal>DIR</literal> est le dossier d'installation de 
     libxslt.
    </para>
   </section>
   <section id="xsl.examples">
    &reftitle.examples;
    <para>
     Dans cet exemple d'introduction, nous allons apprendre
     comment transformer un document XML en un document HTML.
    </para>
    <para>
     <example>
      <title>Un arbre XSL simple</title>
      <programlisting role="xml">
<![CDATA[
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <xsl:output method="html" encoding="iso-8859-1" indent="no"/>
 <xsl:template match="collection">
  Hey! Bienvenue dans ma collection de CD !
  <xsl:apply-templates/>
 </xsl:template>
 <xsl:template match="cd">
  <h1><xsl:value-of select="titre"/></h1>
  <h2>par <xsl:value-of select="artiste"/></h2>
  <h3> - <xsl:value-of select="annee"/></h3>
 </xsl:template>
</xsl:stylesheet>
]]>
      </programlisting>
     </example>
     <example>
      <title>L'arbre XML correspondant</title>
      <programlisting role="xml">
<![CDATA[
<collection>
 <cd>
  <titre>PHP Rock</titre>
  <artiste>Joe Coder</artiste>
  <annee>2003</annee>
 </cd>
 <cd>
  <titre>Squashing Typos on a Winter's Eve</titre>
  <artiste>kennyt</artiste>
  <annee>2004</annee>
 </cd>
</collection>
]]>
      </programlisting>
     </example>
    <example>
     <title>Transformation de XML en HTML</title>
     <simpara>
      Le code &php; suivant utilise les extensions 
      XML et XSL pour transformer le code XML en 
      du code HTML présentable.
     </simpara>
     <programlisting role="php">
<![CDATA[
<?php
/* Chargement des sources XML */
$xml = new DomDocument; // dans /ext/dom
$xml->load('exemple.xml');

$xsl = new DomDocument;
$xsl->load('exemple.xsl');

/* Configuration du transformateur */
$proc = new xsltprocessor;
$proc->importStyleSheet($xsl); // Importation des règles XSL
echo $proc->transformToXML($xml); // Transformation
?>
]]>
     </programlisting>
     <simpara>
      Cela doit produire le code HTML suivant : 
     </simpara>
     <screen>
<![CDATA[
Hey! Bienvenue dans ma collection de CD !

<h1>PHP Rock</h1>
<h2>par Joe Coder</h2>
<h3> - 2003</h3>

<h1>Squashing Typos on a Winter's Eve</h1>
<h2> par kennyt</h2>
<h3> - 2004</h3>
]]>
      </screen>
     </example>
    </para>
   </section>
  </partintro>

&reference.xsl.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
