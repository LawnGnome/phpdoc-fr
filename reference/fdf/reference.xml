<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.9 Maintainer: yannick Status: ready -->
<reference id="ref.fdf">
 <title>Forms Data Format</title>
 <titleabbrev>FDF</titleabbrev>
  <partintro>
   <section id="fdf.intro">
   &reftitle.intro;
   <simpara>
   Forms Data Format (FDF) est un format de formulaire pour les documents
   PDF. Vous pouvez lire la documentation (en anglais) à
   <ulink url="&spec.pdf.fdf;">&spec.pdf.fdf;</ulink>
   pour plus de détails sur les tenants et les aboutissants.
   </simpara>
   <simpara>
   L'esprit de FDF est similaire à celui des formulaires HTML. Les
   différences résident dans les moyens de transmission des
   données au serveur, lorsque le bouton "submit" (soumettre) est
   pressé (ce qui est du ressort de Form Data Format) et le format de
   formulaire lui-même (qui est plutôt du ressort de Portable Document
   Format, PDF). Gérer des données FDF est un des objectifs des
   fonctions FDF. Mais il y en a d'autres. Vous pouvez aussi prendre un
   formulaire PDF, et pré-remplir les champs, sans modifier le
   formulaire lui-même. Dans ce cas, on va créer un document FDF
   (<function>fdf_create</function>), remplir les champs
   (<function>fdf_set_value</function>) et l'associer à un fichier PDF
   (<function>fdf_set_file</function>). Finalement, le tout sera envoyé
   au client, avec le type MIME <literal>application/vnd.fdf</literal>. Le module "Acrobat reader"
   de votre navigateur va reconnaître ce type MIME, et lire le fichier
   PDF, puis le remplir avec FDF.
   </simpara>

   <simpara>
   Si vous éditez un fichier FDF avec un éditeur de texte, vous trouverez
   un catalogue d'objet avec le nom de <literal>FDF</literal>. Cet objet
   peut contenir des entrées telles que <literal>Fields</literal>,
   <literal>F</literal>, <literal>Status</literal> etc.
   Les entrées les plus couramment utilisées sont
   <literal>Fields</literal>, qui indique une liste de champs de contrôle,
   et <literal>F</literal> qui contient le nom du fichier PDF a qui
   appartiennent ces données. Ces entrées sont désignées dans la documentation
   PDF sous le nom de /F-Key ou /Status-Key.
   La modification de ces entrées est possible avec les fonctions
   <function>fdf_set_file</function> et <function>fdf_set_status</function>.
   Les champs sont modifiables avec les fonctions
   <function>fdf_set_value</function>, <function>fdf_set_opt</function> etc..
   </simpara>
   </section>

 <section id="fdf.requirements">
    &reftitle.required;
    <para>
     Vous aurez besoin du FDF toolkit SDK, disponible sur le site
     <ulink url="&spec.pdf.fdf;">&spec.pdf.fdf;</ulink>.
     Depuis PHP 4.3, vous aurez besoin du SDK version 5.0. 
     La librairie FDF toolkit est disponible sous forme de librairie
     compilée, éditée par Adobe, sur les systèmes d'exploitation Win32, 
     Linux, Solaris et AIX.
    </para>
   </section>
   
   &reference.fdf.configure;


 <section id="fdf.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="fdf.resources">
    &reftitle.resources;
    <section id="fdf.resources.fdf">
     <title>fdf</title>
     <para>
      La plupart des fonctions FDF nécessite une ressource de type 
      <parameter>fdf</parameter> comme premier argument. Une ressource
      <parameter>fdf</parameter> est une structure qui représente un
      fichier FDF ouvert. Vous pouvez créer des ressources <parameter>fdf</parameter>
      avec les fonctions <function>fdf_create</function>,
      <function>fdf_open</function> et <function>fdf_open_string</function>.
     </para>
    </section>
    </section>

   &reference.fdf.constants;

   <section id="fdf.examples">
   &reftitle.examples;
    <para>
     Les exemples suivants montrent comment évaluer les données
     du formulaire.
     <example>
      <title>Evaluer un document FDF</title>
      <programlisting role="php">
<![CDATA[
<?php
// Ouvrir un fichier FDF depuis une chaîne fournie par l'extension PDF
// Le formulaire PDF contient plusieurs champs texte avec les noms de
// volume, date, comment, publisher, preparer, et two boîtes à cocher
// show_publisher et show_preparer.
$fdf = fdf_open_string($HTTP_FDF_DATA);
$volume = fdf_get_value($fdf, "volume");
echo "Le champ Volume contient la valeur : '<b>$volume</b>'<br />";

$date = fdf_get_value($fdf, "date");
echo "La valeur du champ date était '<b>$date</b>'<br>";

$comment = fdf_get_value($fdf, "comment");
echo "La valeur du champ comment était '<b>$comment</b>'<br />";

if (fdf_get_value($fdf, "show_publisher") == "On") {
  $publisher = fdf_get_value($fdf, "publisher");
  echo "La valeur du champ Publisher était : '<b>$publisher</b>'<br />";
} else
  echo "La valeur du champ Publisher ne doit pas être affichée.<br />";
  
if (fdf_get_value($fdf, "show_preparer") == "On") {
  $preparer = fdf_get_value($fdf, "preparer");
  echo "La valeur du champ Preparer était  '<b>$preparer</b>'<br />";
} else
  echo "La valeur du champ Preparer ne doit pas être affiché.<br />";
fdf_close($fdf);
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>
  &reference.fdf.functions;
 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

