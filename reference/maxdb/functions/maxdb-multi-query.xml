<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.7 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.maxdb-multi-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>maxdb_multi_query</refname>
  <refname>maxdb->multi_query</refname>
  <refpurpose>Exécute une requête sur une base de données</refpurpose>
 </refnamediv>
 <refsect1>
  &reftitle.description;
  &title.procedural;
  <methodsynopsis>
   <type>bool</type><methodname>maxdb_multi_query</methodname>
   <methodparam><type>resource</type><parameter>link</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  &title.oop;
  <classsynopsis>
   <ooclass><classname>maxdb</classname></ooclass>
   <methodsynopsis>
    <type>bool</type>
    <methodname>multi_query</methodname>
    <methodparam><type>string</type><parameter>query</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   <function>maxdb_multi_query</function> fonctionne de la même 
   manière que la fonction 
   <function>maxdb_query</function>. Les requêtes multiples ne sont 
   pas encore supportées.
  </para>
 </refsect1>
 <refsect1>
  &reftitle.returnvalues;
  <para>
   &return.success; 
  </para>
 </refsect1>
 <refsect1>
  &reftitle.examples;
  <example>
   <title>Style orienté objet</title>
   <programlisting role="php">
<![CDATA[
<?php
$maxdb = new maxdb("localhost", "MONA", "RED", "DEMODB");

/* Vérification de la connexion */
if (maxdb_connect_errno()) {
    printf("Echec de la connexion : %s\n", maxdb_connect_error());
    exit();
}

$query  = "SELECT * FROM dual";

/* Exécute de multiples requêtes */
if ($maxdb->multi_query($query)) {
    do {
        /* Stock le premier jeu de résultats */
        if ($result = $maxdb->store_result()) {
            while ($row = $result->fetch_row()) {
                printf("%s\n", $row[0]);
            }
            $result->close();
        }
        /* Affiche une séparation */
        if ($maxdb->more_results()) {
            printf("-----------------\n");
        }
    } while ($maxdb->next_result());
}

/* Fermeture de la connexion */
$maxdb->close();
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Style procédural</title>
   <programlisting role="php">
<![CDATA[
<?php
$link = maxdb_connect("localhost", "MONA", "RED", "DEMODB");

/* Vérification de la connexion */
if (maxdb_connect_errno()) {
    printf("Echec de la connexion : %s\n", maxdb_connect_error());
    exit();
}

$query = "SELECT * FROM dual";

/* Exécute de multiples requêtes */
if (maxdb_multi_query($link, $query)) {
    do {
        /* Stock le premier jeu de résultats */
        if ($result = maxdb_store_result($link)) {
            while ($row = maxdb_fetch_row($result)) {
                printf("%s\n", $row[0]);
            }
            maxdb_free_result($result);
        }
        /* Affiche une séparation */
        if (maxdb_more_results($link)) {
        printf("-----------------\n");
        }
    } while (maxdb_next_result($link));
}

/* Fermeture de la connexion */
maxdb_close($link);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: maxdb_multi_query(): -3008 POS(31) Invalid keyword or missing delimiter <...>
]]>
   </screen>
  </example>
 </refsect1>
 <refsect1>
  &reftitle.seealso;
  <para>
   <function>maxdb_use_result</function>,
   <function>maxdb_store_result</function>,
   <function>maxdb_next_result</function> et
   <function>maxdb_more_results</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->