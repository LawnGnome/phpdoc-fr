<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: dams Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="ref.pdo-4d.sql4d" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Indications sur le SQL supporté par 4D</refname>
  <refpurpose>PDO et SQL 4D</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>
   4D implémente le standard ANSI 89 strict, et le fait respecter.
   Il est recommandé de bien lire la documentation 4D sur les commandes
   disponibles, dans la documentation à l'adresse suivante : 
   <link xlink:href="&url.4d.doc;">&url.4d.doc;</link>.
   La liste des particularités de 4D ci-dessous est une introduction,
   et ne saurait être exhaustive.
  </para>
  <para>
   <table>
    <title>Liste des caractéristiques SQL de 4D</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Caractéristique</entry>
        <entry>Solution</entry>
        <entry>Note</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>INTEGER</entry>
        <entry>INT est le type officiel. Modifier la requête de création de la table.</entry>
        <entry></entry>
       </row>
       <row>
        <entry>UNION</entry>
        <entry>Non supporté. Faire plusieurs requêtes.</entry>
        <entry></entry>
       </row>
       <row>
        <entry>LEFT JOIN</entry>
        <entry>Utiliser  la notation SQL 89 (cf exemple #3 PDO_4D)</entry>
        <entry></entry>
       </row>
       <row>
        <entry>SELECT 1 + 1;</entry>
        <entry>SELECT 1 + 1 FROM _USER_SCHEMAS;</entry>
        <entry></entry>
       </row>
       <row>
        <entry>FLOAT</entry>
        <entry>Transtyper le FLOAT avec la fonction SQL 4D (ROUND, TRUNC ou TRUNCATE)</entry>
        <entry>Non supporté dans le pilote PDO_4D v1.0</entry>
       </row>
       <row>
        <entry>Typage fort : il faut fournir le type que 4D attend. On ne peut pas insérer '1' (la chaîne), dans une colonne entière.</entry>
        <entry></entry>
        <entry>Non supporté</entry>
       </row>
       <row>
        <entry><function>PDO::execute($row)</function> ne fonctionne que si les toutes les colonnes de la table cible sont de type <literal>TEXT</literal></entry>
        <entry>Utiliser les commandes préparées, et spécifier les bons types.</entry>
        <entry>L'extension PDO fait passer toutes les données comme des chaînes, et présume que la base assure le transtypage.</entry>
       </row>
       <row>
        <entry>SELECT NULL FROM TABLE</entry>
        <entry>Il n'est pas autorisé d'utiliser la constante NULL dans les colonnes sélectionnées</entry>
        <entry>N'utilisez pas la constante NULL. Extrayez-la de la table elle-même</entry>
       </row>
       <row>
        <entry>SELECT * FROM TABLE WHERE 1</entry>
        <entry>Une constante ne peut pas être utilisée seule dans une clause WHERE</entry>
        <entry>Utilisez <literal>1 = 1</literal></entry>
       </row>
       <row>
        <entry>SHOW TABLES</entry>
        <entry>La liste es tables, schéma, index, etc. est rassemble dans 7 tables 4D</entry>
        <entry>
         Utilisez les tables
         <literal>_USER_TABLES</literal>,  <literal>_USER_COLUMNS</literal>,  
         <literal>_USER_INDEXES</literal>,  <literal>_USER_CONSTRAINTS</literal>,  
         <literal>_USER_IND_COLUMNS</literal>,  <literal>_USER_CONS_COLUMNS</literal>
         et <literal>_USER_SCHEMAS</literal>.
        </entry>
       </row>
       <row>
        <entry>Délimiteur de structures SQL</entry>
        <entry>Pour la protection des noms d'objets SQL (tables, champs, 
        utilisateurs, groupe, schéma, clé primaire, etc.. ) il faut doubler 
        les crochets fermants et mettre tout l'identifiant entre crochets. 
        </entry>
        <entry>
         Utilisez la fonction de protection suivante sur les noms d'objets SQL,
         et placez-le résultat entre crochets : 
         <literal>str_replace(']',']]', $table)</literal>.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
  </para>
  <note>
   <para>
     Dans les versions 11.3 et plus ancien, il n'était pas possible d'utiliser
     la syntaxe SQL suivante, durant la création de tables : 
     <literal>id INT PRIMARY KEY</literal>. Ce problème a été corrigé 
     en 4D 11.4 et plus récent. Il est recommandé de passer à cette
     version de 4D.
   </para>
  </note>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

