<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.5 Maintainer: dams Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.sca-localproxy-createdataobject" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SCA_LocalProxy::createDataObject</refname>
  <refpurpose> Crée un SDO </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>SDO_DataObject</type>
   <methodname>SCA_LocalProxy::createDataObject</methodname>
   <methodparam>
    <type>string</type>
    <parameter>type_namespace_uri</parameter>
   </methodparam>
   <methodparam>
    <type>string</type>
    <parameter>type_name</parameter>
   </methodparam>
  </methodsynopsis>
  
  &warn.experimental.func;
  
  <para> 
   Cette méthode est utilisée dans un script PHP ordinaire ou un
   composant SCA qui a besoin d'obtenir un objet SDO pour le passer
   à un service local. Le paramètre <parameter>type_namespace_uri</parameter> 
   est l'URI de l'espace de nom désiré pour l'objet SDO, et le nom du type.
   L'espace de noms et le type doivent être définis dans l'interface
   du composant qui est appelé, ce qui fait que l'espace de noms et 
   le type doivent être définis dans un des fichiers de schéma qui sont
   spécifiés dans les annotations @types dans le composant dont
   <classname>SCA_LocalProxy</classname> est le proxy. 
  </para>
  
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>type_namespace_uri</parameter>
     </term>
     <listitem>
      <para> 
       L'espace de noms de types. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>type_name</parameter>
     </term>
     <listitem>
      <para> 
       Le nom du type. 
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para> 
   Retourne un nouvel objet <classname>SDO_DataObject</classname>. 
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>SDO_TypeNotFoundException</parameter>
     </term>
     <listitem>
      <para> 
       Émet cette exception si l'URI d'espace de noms <parameter>type_namespace_uri</parameter>
       et <parameter>type_name</parameter> ne correspondent pas à un type
       spécifié dans l'un des espaces de noms définis dans les fichiers
       de schéma définis dans les annotations @types, à l'intérieur du 
       composant <classname>SCA_LocalProxy</classname>. 
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <!-- Use when a CHANGELOG exists
 <refsect1 role="changelog">
 &reftitle.changelog;
 <para>
 <informaltable>
 <tgroup cols="2">
 <thead>
 <row>
 <entry>&Version;</entry>
 <entry>&Description</entry>
 </row>
 </thead>
 <tbody>
 <row>
 <entry>Enter the PHP version of change here
 <entry>Description of change
 </row>
 </tbody>
 </tgroup>
 </informaltable>
 </para>
 </refsect1>
 -->
 
 <!-- Use when examples exist
 <refsect1 role="examples">
 &reftitle.examples;
 <para>
 <example>
 <title>A <function>xxx::xxx</function> example</title>
 <para>
 Any text that describes the purpose of the example, or
 what goes on in the example should go here (inside the
 <example> tag, not out
 </para>
 <programlisting role="php">
 <![CDATA[
 <?php
 if ($anexample === true) {
 echo 'Use the PEAR Coding Standards';
 }
 ?>
 ]]>
 </programlisting>
 &example.outputs;
 <screen>
 <![CDATA[
 Use the PEAR Coding Standards
 ]]>
 </screen>
 </example>
 </para>
 </refsect1>
 -->
 
 <!-- Use when adding See Also links
 <refsect1 role="seealso">
 &reftitle.seealso;
 <para>
 <simplelist>
 <member><function></function></member>
 <member>Or <link linkend="somethingelse">something else</link></member>
 </simplelist>
 </para>
 </refsect1>
 -->
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
