<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision$ -->
<!-- EN-Revision: 297078 Maintainer: dams Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="ref.sca" xmlns="http://docbook.org/ns/docbook">
 <title>&Functions; SCA</title>
 
 <partintro>
  <!-- FIXME: This needs to be upgraded to the new oo-markup -->
  <!-- Class definition section -->
  <section xml:id='sca.classes'><!-- {{{ -->
   &reftitle.classes;
   <para> 
    La plupart de l'interface SCA se définit via les annotations dans 
    les composants SCA, ce qui fait qu'il y a peu de classes et de méthodes.
    La seule classe SCA que les scripts ou les composants peuvent appeler 
    est la classe <classname>SCA</classname> elle-même, et les classe proxy 
    <classname>SCA_LocalProxy</classname> et <classname>SCA_SoapProxy</classname>.
   </para>
   
   <section xml:id='sca.class'><!-- {{{ -->
    <title><classname>SCA</classname></title>
    <para>
     L'essentiel du travail de la classe SCA est effectué lors de l'inclusion
     du fichier <filename>SCA.php</filename>, qui est inclus avec le composant SCA. Cependant,
     un script PHP peut inclure <filename>SCA.php</filename> et appeler 
     la méthode <function>getService</function> de la classe SCA pour obtenir
     un proxy pour un service. Un composant n'aura pas besoin de faire cela
     car les proxy sont obtenus à l'aide d'une variable définie avec 
     l'annotation @reference.
    </para>
    <para> 
     Les composants qui doivent créer un SDO à retourner à leur appelant doivent
     créer une usine de données à appeler. Pour cela, la classe SCA supporte
     la méthode <function>createDataObject</function>, qui va créer un
     objet SDO en focntion du modèle défini par les annotations
     de composants @types. Les arguments arguments de
     <function>createDataObject</function> sont les mêmes que ceux
     du service XML Data Access Service de SDO. 
    </para>
    
    <section xml:id='sca.class.SCA.methods'><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link linkend='function.sca-getservice'>
         getService</link> : obtient un proxy pour un service
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend='function.sca-createdataobject'>
         createDataObject</link> : crée un SDO
       </para>
      </listitem>
     </itemizedlist>
    </section> <!-- }}} -->
   </section><!-- }}} -->
   
   <section xml:id='sca-local-proxy.class'><!-- {{{ -->
    <title>
     <classname>SCA_LocalProxy</classname>
    </title>
    <para>
     Quand <function>getService</function> est appelée avec une ressource
     cible qui est un composant PHP local, un proxy local est retourné. 
     Un proxy local qui est définit est aussi injecté dans les variables
     d'instance du composant, qui ont été annotées avec @reference et
     @binding.php. Lorsque le script ou le composant font appel au proxy
     local, ils sont passés au composant cible lui-même.
    </para>
    <para> 
     Les composants qui doivent créer un SDO à retourner à leur appelant doivent
     créer une usine de données à appeler. Pour cela, la classe SCA_LocalProxy supporte
     la méthode <function>createDataObject</function>, qui va créer un
     objet SDO en fonction du modèle défini par les annotations
     de composants @types. Les arguments arguments de
     <function>createDataObject</function> sont les mêmes que ceux
     du service XML Data Access Service de SDO. 
    </para>
    
    <section xml:id='sca.class.SCA-LocalProxy.methods'><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link
         linkend='function.sca-localproxy-createdataobject'>
         createDataObject</link> : crée un SDO
       </para>
      </listitem>
     </itemizedlist>
    </section><!-- }}} -->
   </section><!-- }}} -->
   
   <section xml:id='sca-soap-proxy.class'><!-- {{{ -->
    <title>
     <classname>SCA_SoapProxy</classname>
    </title>
    <para>
     Quand <function>getService</function> est appelée avec une ressource
     cible qui est un composant PHP distant, un proxy distant est retourné. 
     Un proxy local qui est définit est aussi injecté dans les variables
     d'instance du composant, qui ont été annotées avec @reference et
     @binding.php. Lorsque le script ou le composant font appel au proxy
     distant, ils sont organisés en requête Web SOAP et passé au serveur
     distant, avec l'aide de l'extension SOAP.
    </para>
    <para> 
     Les composants qui doivent créer un SDO à retourner à leur appelant doivent
     créer une usine de données à appeler. Pour cela, la classe
     <classname>SCA_SoapProxy</classname> supporte
     la méthode <function>createDataObject</function>, qui va créer un
     objet SDO en fonction du modèle défini par les annotations
     de composants @types. Les arguments arguments de
     <function>createDataObject</function> sont les mêmes que ceux
     du service XML Data Access Service de SDO. 
    </para>
    
    <section xml:id='sca.class.SCA-SoapProxy.methods'><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link
         linkend='function.sca-soapproxy-createdataobject'>
         createDataObject</link> : crée un SDO
       </para>
      </listitem>
     </itemizedlist>
    </section><!-- }}} -->
   </section><!-- }}} -->
  </section>
  <!-- }}} -->

 </partintro>
 
 &reference.sca.entities.functions;
 
</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
