<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297109 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="cairosurface.createsimilar" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>CairoSurface::createSimilar</refname>
  <refpurpose>Le but de createSimilar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>CairoSurface::createSimilar</methodname>
   <methodparam><type>CairoSurface</type><parameter>other</parameter></methodparam>
   <methodparam><type>int</type><parameter>content</parameter></methodparam>
   <methodparam><type>string</type><parameter>width</parameter></methodparam>
   <methodparam><type>string</type><parameter>height</parameter></methodparam>
  </methodsynopsis>
  <para>
   Crée une nouvelle surface le plus compatible
   possible avec la surface existante. Par exemple,
   la nouvelle surface aura la même résolution
   mais aussi la même police de caractères.
   Générallement, la nouvelle surface utilisera
   également le même moteur, sauf si d'autres raisons
   l'en empêche. Le type de la surface retourné
   pourra être examiné avec la méthode
   CairoSurface::getType().
   Initialement, le contenu de la surface sera
   positionné à 0 (transparent si le contenu
   a de la transparence, noir sinon).
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>other</parameter></term>
     <listitem>
      <para>
       Une surface existante utilisée pour sélectionner
       le moteur de la nouvelle surface
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>content</parameter></term>
     <listitem>
      <para>
       Le contenu de la nouvelle surface.
       Voir la classe CairoContent pour les valeurs possibles.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>width</parameter></term>
     <listitem>
      <para>
       Largeur de la nouvelle surface (en utilisant l'unité d'espacement définie).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>height</parameter></term>
     <listitem>
      <para>
       Hauteur de la nouvelle surface (en utilisant l'unité d'espacement définie).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un nouvel objet CairoSurface
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <methodname>CairoSurface::createSimilar</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php
/* ... */
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
...
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>CairoContent</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
