<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 294366 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.cairooperator" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>La classe CairoOperator</title>
 <titleabbrev>CairoOperator</titleabbrev>
 
 <partintro>
  
  <!-- {{{ CairoOperator intro -->
  <section xml:id="cairooperator.intro">
   &reftitle.intro;
   <para>
    La classe est utilisée pour définir l'opération de composition pour toutes
    les opérations de dessin Cairo.
   </para>
   <para>
    L'opérateur par défaut est <constant>CairoOperator::OVER</constant>
   </para>
   <para>
    Les opérateurs marqués comme non bornés modifient leurs destinations, même en
    dehors de la couche des masques (aussi, leur effet n'est pas lié à la couche des masques).
    Cependant, leur effet peut toujours être limité par voie de saturation.
   </para>
   <para>
    Pour garder ceci simple, la description des opérateurs de ce manuel parte du principe qu'à la fois
    la source et la destination sont soit totalement transparents, soit totalement opaques.
    L'implémentation actuel fonctionne aussi avec les couches translucides. Pour plus d'explications
    sur les effets de chaque opérateur, y compris les définitions mathématiques, reportez-vous
    à http://cairographics.org/operators/.
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="cairooperator.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>CairoOperator</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>CairoOperator</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.clear">CairoOperator::CLEAR</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.source">CairoOperator::SOURCE</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.over">CairoOperator::OVER</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.in">CairoOperator::IN</varname>
     <initializer>3</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.out">CairoOperator::OUT</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.atop">CairoOperator::ATOP</varname>
     <initializer>5</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest">CairoOperator::DEST</varname>
     <initializer>6</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest-over">CairoOperator::DEST_OVER</varname>
     <initializer>7</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest-in">CairoOperator::DEST_IN</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest-out">CairoOperator::DEST_OUT</varname>
     <initializer>9</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest-atop">CairoOperator::DEST_ATOP</varname>
     <initializer>10</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.xor">CairoOperator::XOR</varname>
     <initializer>11</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.add">CairoOperator::ADD</varname>
     <initializer>12</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.saturate">CairoOperator::SATURATE</varname>
     <initializer>13</initializer>
    </fieldsynopsis>
    
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  <!-- {{{ CairoOperator constants -->
  <section xml:id="cairooperator.constants">
   &reftitle.constants;
   <section xml:id="cairooperator.constants.types">
    <title>Types de nœud CairoOperator</title>
    <variablelist>
     
     <varlistentry xml:id="cairooperator.constants.clear">
      <term><constant>CairoOperator::CLEAR</constant></term>
      <listitem>
       <para>
        Nettoie le calque de destination (borné).
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.source">
      <term><constant>CairoOperator::SOURCE</constant></term>
      <listitem>
       <para>
        Remplace le calque de destination (borné).
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.over">
      <term><constant>CairoOperator::OVER</constant></term>
      <listitem>
       <para>
        Dessine le calque source en haut du calque de destination (borné).
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.in">
      <term><constant>CairoOperator::IN</constant></term>
      <listitem>
       <para>
        Dessine la source à l'endroit où se trouve le contenu sur la destination
        (non borné).
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.out">
      <term><constant>CairoOperator::OUT</constant></term>
      <listitem>
       <para>
        Dessine la source à l'endroit où ne se trouve aucun contenu sur la destination
        (non borné).
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.atop">
      <term><constant>CairoOperator::ATOP</constant></term>
      <listitem>
       <para>
        Dessine la source en haut du contenu de la destination, et uniquement là.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.dest">
      <term><constant>CairoOperator::DEST</constant></term>
      <listitem>
       <para>
        Ignore le source.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.dest-over">
      <term><constant>CairoOperator::DEST_OVER</constant></term>
      <listitem>
       <para>
        Dessine la destination en haut de la source.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.dest-in">
      <term><constant>CairoOperator::DEST_IN</constant></term>
      <listitem>
       <para>
        Quitte la destination uniquement où il y a du contenu sur la source (non borné).
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.dest-out">
      <term><constant>CairoOperator::DEST_OUT</constant></term>
      <listitem>
       <para>
        Quitte la destination uniquement où il n'y a pas de contenu sur la source.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.dest-atop">
      <term><constant>CairoOperator::DEST_ATOP</constant></term>
      <listitem>
       <para>
        Quitte la destination en haut du contenu de la source et uniquement là
        (non borné).
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.xor">
      <term><constant>CairoOperator::XOR</constant></term>
      <listitem>
       <para>
        Source et destination sont montrés lorsqu'il n'y a qu'un seul des 2.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.add">
      <term><constant>CairoOperator::ADD</constant></term>
      <listitem>
       <para>
        Les calques source et destination sont cumulés.
       </para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="cairooperator.constants.saturate">
      <term><constant>CairoOperator::SATURATE</constant></term>
      <listitem>
       <para>Comme <constant>CairoOperator::OVER</constant>,
        mais en assumant que la source et la destination sont à géométrie disjointe.
       </para>
      </listitem>
     </varlistentry>
     
    </variablelist>
   </section>
  </section>
  <!-- }}} -->  
  
 </partintro> 
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
