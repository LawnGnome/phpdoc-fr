<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 294366 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="cairocontext.closepath" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>CairoContext::closePath</refname>
  <refname>cairo_close_path</refname>
  <refpurpose>Ferme le chemin courant</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <para>Style orienté objet (méthode) :</para>
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>CairoContext::closePath</methodname>
   <void />
  </methodsynopsis>
  <para>Style procédural :</para>
  <methodsynopsis>
   <type>void</type><methodname>cairo_close_path</methodname>
   <methodparam><type>CairoContext</type><parameter>context</parameter></methodparam>
  </methodsynopsis>
  <para>
   Ajoute un segment de ligne au chemin depuis le point courant jusqu'au début
   du sous-chemin courant (le point le plus récent passé à la méthode
   <methodname>CairoContext::moveTo</methodname>), et ferme le sous chemin. Après cet appel,
   le point courant sera à la jointure du dernier point du sous chemin.
  </para>
  <para>
   Le comportement de close_path() est distinct d'un simple appel à
   <methodname>CairoContext::lineTo</methodname> avec des coordonnées équivalentes dans le cas
   d'un stroking. Lorsqu'un sous chemin fermé est stroké, il n'y aura pas de bouchons aux
   extrémités du sous chemin. À la place, il y aura une ligne de jointe connectant le segment
   final et initial du sous chemin.
  </para>
  <para>
   S'il n'y a pas de point courant avant l'appel à la méthode
   <methodname>CairoContext::closePath</methodname>, cette fonction n'aura aucun effet.
  </para>
  
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       Un objet <classname>CairoContext</classname> valide créé avec
       <methodname>CairoContext::__construct</methodname> ou <function>cairo_create</function>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Style orienté objet</title>
    <programlisting role="php">
<![CDATA[
<?php

$surface = new CairoImageSurface(CairoFormat::ARGB32, 50, 50);

$context = new CairoContext($surface);

$context->closePath();

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Style procédural</title>
    <programlisting role="php">
<![CDATA[
<?php

$surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 50, 50);

$context = cairo_create($surface);

cairo_close_path($context);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>CairoContext::copyPath</methodname></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
