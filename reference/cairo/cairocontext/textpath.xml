<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 303752 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="cairocontext.textpath" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>CairoContext::textPath</refname>
  <refname>cairo_text_path</refname>
  <refpurpose>Le but de textPath</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop;</para>
   <methodsynopsis role="oop">
   <modifier>public</modifier> <type>void</type><methodname>CairoContext::textPath</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   </methodsynopsis>
  <para>&style.procedural;</para>
  <methodsynopsis role="procedural">
   <type>void</type><methodname>cairo_text_path</methodname>
   <methodparam><type>CairoContext</type><parameter>context</parameter></methodparam>
   <methodparam><type>string</type><parameter>text</parameter></methodparam>
  </methodsynopsis>
  <para>
   Ajoute les chemins fermés pour le texte dans le chemin courant. Le chemin généré, si rempli,
   a un effet similaire à <methodname>CairoContext::showText</methodname>.
  </para>
  <para>
   La conversion et le positionnement de texte sont effectués de manière similaire à
   <methodname>CairoContext::showText</methodname>.
  </para>
  <para>
   Comme <methodname>CairoContext::showText</methodname>, après cet appel le point courant est
   déplacé vers l'origine du prochain glyph. Ceci permet le chainage des appels à
   <methodname>CairoContext::showText</methodname> sans avoir à affecter le point courant entre
   les appels.
  </para>
  <para>
   Note: La méthode <methodname>CairoContext::textPath</methodname> fait parti de ce que les
   concepteurs de cairo appelent l'API de texte "toy". Cela convient aux démos et aux
   programmes simples, mais n'est pas adéquat pour les applications plus sérieuses ou
   complexes. Voyez <methodname>CairoContext::glyphPath</methodname> pour l'API "réelle"
   de chemin de texte avec cairo.
  </para>
   
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>text</parameter></term>
     <listitem>
      <para>
       Description...
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       Description...
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Description...
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Style orienté objet</title>
    <programlisting role="php">
<![CDATA[
<?php
/* ... */
?>
]]>
     </programlisting>
     &example.outputs.similar;
     <screen>
<![CDATA[
...
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Style procédural</title>
    <programlisting role="php">
<![CDATA[
<?php
/* ... */
?>
]]>
     </programlisting>
     &example.outputs.similar;
     <screen>
<![CDATA[
...
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Classname::Method</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
