<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.12 Maintainer: dams Status: ready -->

  <refentry id="function.ocinewdescriptor">
   <refnamediv>
    <refname>ocinewdescriptor</refname>
    <refpurpose>Initialise un nouveau pointeur vide de LOB/FILE</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>object</type><methodname>ocinewdescriptor</methodname>
      <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ocinewdescriptor</function> alloue l'espace
     nécessaire pour stocker un descripteur, ou un pointeur
     de LOB sur la connexion <parameter>connection</parameter>. 
     Les valeurs acceptées pour <parameter>type</parameter> sont
     OCI_D_FILE, OCI_D_LOB et OCI_D_ROWID. 
     Pour les pointeurs de LOB, les méthodes load, save, et savefile sont
     associées avec le pointeur. Pour les pointeurs de type BFILE,
     seule la méthode load existe. Voyez le second exemple pour une
     illustration.
      </para>
     <example>
      <title>Exemple avec <function>ocinewdescriptor</function></title>
      <programlisting role="php">
<![CDATA[
<?php   
    /* Ce script est fait pour être appelé dans un formulaire HTML
     * Il attends les variables $user, $password, $table, $where, et $commitsize
     * Le script efface alors les lignes sélectionnées avec ROWID et valide
     * l'effacement après chaque groupe de $commitsize lignes.
     * (Utilisez avec prudence, car il n'y a pas d'annulation possible).
     */
    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn,"select rowid from $table $where");
    $rowid = OCINewDescriptor($conn,OCI_D_ROWID);
    OCIDefineByName($stmt,"ROWID",&$rowid);   
    OCIExecute($stmt);
    while ( OCIFetch($stmt) ) {      
       $nrows = OCIRowCount($stmt);
       $delete = OCIParse($conn,"delete from $table where ROWID = :rid");
       OCIBindByName($delete,":rid",&$rowid,-1,OCI_B_ROWID);
       OCIExecute($delete);      
       print "$nrows\n";
       if ( ($nrows % $commitsize) == 0 ) {
           OCICommit($conn);      
       }   
    }
    $nrows = OCIRowCount($stmt);   
    print "$nrows deleted...\n";
    OCIFreeStatement($stmt);  
    OCILogoff($conn);
?>  
]]>
   </programlisting>
   <programlisting role="php">
<![CDATA[
<?php
    /* Ce script est fait pour être appelé depuis un formulaire HTML.
     * Il attends les variables $user, $password, $table, $where, et $commitsize,
     * données par le formulaire. Le script efface
     * les lignes sélectionnées avec ROWID est valide les transactions
     * à chaque jeu de $commitsize lignes. (Attention : il n'y plus d'annulation) */
  if(!isset($lob_upload) || $lob_upload == 'none'){
?>
<form action="upload.php" method="post" enctype="multipart/form-data">
Fichier à télécharger : <input type="file" name="lob_upload"><br />
<input type="submit" value="Envoyer"> - <input type="reset">
</form>
<?php
  } else {

     // $lob_upload contient le nom temporaire du fichier téléchargé

     // voir aussi la section fonctionnalités sur les téléchargements de
     // fichiers si vous voulez utiliser des téléchargements sécurisés
     
     $conn = OCILogon($user, $password);
     $lob = OCINewDescriptor($conn, OCI_D_LOB);
     $stmt = OCIParse($conn,"insert into $table (id, the_blob) 
               values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
     OCIBindByName($stmt, ':the_blob', &$lob, -1, OCI_B_BLOB);
     OCIExecute($stmt, OCI_DEFAULT);
     if($lob->savefile($lob_upload)){
        OCICommit($conn);
        echo 'Blob bien téléchargé'."\n";
     }else{
        echo 'Impossible de télécharger le Blob'."\n";
     }
     OCIFreeDesc($lob);
     OCIFreeStatement($stmt);
     OCILogoff($conn);
  }
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>Exemple avec <function>ocinewdescriptor</function></title>
     <programlisting>
<![CDATA[
<?php   
    /* Appel d'une procédure PL/SQL stockée qui prend un clobs
     * en entrée (PHP 4 >= 4.0.6). 
     * Exemple de signateure de procédure stockée PL/SQL :
     *
     * PROCEDURE save_data
     *   Nom de l'argument              Type                    In/Out Default?
     *   ------------------------------ ----------------------- ------ --------
     *   KEY                            NUMBER(38)              IN
     *   DATA                           CLOB                    IN
     *
     */

    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn, "begin save_data(:key, :data); end;");
    $clob = OCINewDescriptor($conn, OCI_D_LOB);
    OCIBindByName($stmt, ':key', $key);
    OCIBindByName($stmt, ':data', $clob, -1, OCI_B_CLOB);
    $clob->WriteTemporary($data);
    OCIExecute($stmt, OCI_DEFAULT);
    OCICommit($conn);
    $clob->close();
    $clob->free();
    OCIFreeStatement($stmt);
?>
]]>
     </programlisting>
    </example>
    <note>
     <para>
      Cette fonction a été renommée en <function>oci_new_descriptor</function> 
      pour &php; version 5.0.0 et plus récent. Pour la compatibilité
      ascendante, <function>ocinewdescriptor</function> peut toujours être utilisée.
      Toutefois, elle est obsolète.
     </para>
    </note>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
