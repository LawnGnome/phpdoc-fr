<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/oci8.xml, last change in rev 1.4 -->
<!-- last change to 'ocinewdescriptor' in en/ tree in rev 1.2 -->
  <refentry id="function.ocinewdescriptor">
   <refnamediv>
    <refname>ociNewDescriptor</refname>
    <refpurpose>Initialise un nouveau pointeur vide de LOB/FILE</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>resource</type><methodname>ocinewdescriptor</methodname>
      <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ocinewdescriptor</function> alloue l'espace
     n&eacute;cessaire pour stocker un descripteur, ou un pointeur
     de LOB. Les valeurs accept&eacute;es pour type sont
     oci_D_FILE, oci_D_LOB et oci_D_ROWID.
      </para>
     <example>
      <title>ocinewdescriptor</title>
      <programlisting role="php">
&lt;?php
    /* Ce script est fait pour &ecirc;tre appel&eacute; dans un formulaire HTML
     * Il attends les variables $user, $password, $table, $where, et $commitsize
     * Le script efface alors les lignes s&eacute;lectionn&eacute;es avec ROWID et valide
     * l'effacement apr&egrave;s chaque groupe de $commitsize lignes.
     * (Utilisez avec prudence, car il n'y a pas d'annulation possible).
     */
    $conn = ociLogon($user, $password);
    $stmt = ociparse($conn,"select rowid from $table $where");
    $rowid = ociNewDescriptor($conn,oci_D_ROWID);
    ociDefineByName($stmt,"ROWID",&amp;$rowid);
    ociexecute($stmt);
    while ( ociFetch($stmt) ) {
       $nrows = ociRowCount($stmt);
       $delete = ociparse($conn,"delete from $table where ROWID = :rid");
       ociBindByName($delete,":rid",&amp;$rowid,-1,oci_B_ROWID);
       ociexecute($delete);
       print "$nrows\n";
       if ( ($nrows % $commitsize) == 0 ) {
           ociCommit($conn);
       }
    }
    $nrows = ociRowCount($stmt);
    print "$nrows effac&eacute;es...\n";
    ociFreeStatement($stmt);
    ociLogoff($conn);
?&gt;
   </programlisting>
   <programlisting role="php">
&lt;?php
    /* Ce script est fait pour &ecirc;tre appel&eacute; depuis un formulaire HTML.
     * Il attends les variables $user, $password, $table, $where, et $commitsize,
     * donn&eacute;es par le formulaire. Le script efface
     * les lignes s&eacute;lectionn&eacute;es avec ROWID est valide les transactions
     * &agrave; chaque jeu de $commitsize lignes. (Attention : il n'y plus d'annulation) */
  if(!isset($lob_upload) || $lob_upload == 'none'){
?&gt;
&lt;form action="upload.php3" method="post" enctype="multipart/form-data">
Upload file: &lt;input type="file" name="lob_upload">&lt;br&gt;
&lt;input type="submit" value="Upload"> - &lt;input type="reset">
&lt;/form>
&lt;?php
  } else {
     // $lob_upload contains the temporary filename of the uploaded file
     $conn = ociLogon($user, $password);
     $lob = ociNewDescriptor($conn, oci_D_LOB);
     $stmt = ociparse($conn,"insert into $table (id, the_blob) values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
     ociBindByName($stmt, ':the_blob', &amp;$lob, -1, oci_B_BLOB);
     ociexecute($stmt, oci_DEFAULT);
     if($lob->savefile($lob_upload)){
        ociCommit($conn);
        echo "Blob sauv&eacute;!\n";
     }else{
        echo "Impossible de sauver le Blob\n";
     }
     ociFreeDescriptor($lob);
     ociFreeStatement($stmt);
     ociLogoff($conn);
  }
?&gt;
     </programlisting>
    </example>
    <example>
     <title>Exemple avec <function>ocinewdescriptor</function></title>
     <programlisting>
&lt;?php   
    /* Appel d'une proc&eacute;dure PL/SQL stock&eacute;e qui prend un clobs
     * en entr&eacute;e (PHP 4 >= 4.0.6). 
     * Exemple de signateure de proc&eacute;dure stock&eacute;e PL/SQL :
     *
     * PROCEDURE save_data
     *   Nom de l'argument              Type                    In/Out Default?
     *   ------------------------------ ----------------------- ------ --------
     *   KEY                            NUMBER(38)              IN
     *   DATA                           CLOB                    IN
     *
     */

    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn, "begin save_data(:key, :data); end;");
    $clob = OCINewDescriptor($conn, OCI_D_LOB);
	OCIBindByName($stmt, ':key', $key);
	OCIBindByName($stmt, ':data', $clob, -1, OCI_B_CLOB);
	$clob->WriteTemporary($data);
	OCIExecute($stmt, OCI_DEFAULT);
	OCICommit($conn);
	$clob->close();
	$clob->free();
	OCIFreeStatement($stmt);
?&gt;
     </programlisting>
    </example>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
