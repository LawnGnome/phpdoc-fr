<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.4 Maintainer: damien Status: ready -->
<!-- Reviewed: yes -->
  <refentry id="function.oci-define-by-name">
   <refnamediv>
    <refname>oci_define_by_name</refname>
    <refpurpose>
     Utilise une variable &php; pour la phase de définition, dans une 
     commande SELECT Oracle
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>bool</type><methodname>oci_define_by_name</methodname>
      <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
      <methodparam><type>string</type><parameter>column_name</parameter></methodparam>
      <methodparam><type>mixed</type><parameter role="reference">variable</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>oci_define_by_name</function> copie les valeurs issues de 
     la colonne <parameter>column_name</parameter> de la commande 
     exécutée <parameter>statement</parameter>, dans la variable &php;
     <parameter>&amp;variable</parameter>.
     Méfiez-vous des colonnes Oracle qui sont toutes en majuscules,
     tandis que dans les SELECT, vous pouvez aussi les écrire en minuscules.
     <function>oci_define_by_name</function> s'attend à ce que
     <parameter>column_name</parameter> soit en majuscules.
     Si vous définissez une variable qui n'existe pas dans
     la commande SELECT, vous ne serez pas prévenu par une erreur.
    </para>
    <para>
      <parameter>type</parameter> est le type de données à lire.
      Si vous avez besoin de définir un type de données
      abstrait, tel (LOB/ROWID/BFILE), vous devez lui allouer la
      mémoire avec <function>oci_new_descriptor</function>.
      Reportez-vous aussi à <function>oci_bind_by_name</function>.
    </para>
     <example>
      <title>Exemple avec <function>oci_define_by_name</function></title>
      <programlisting role="php">
<![CDATA[
<?php
/* Exemple oci_define_by_name - thies at thieso dot net (980219) */

$conn = oci_connect("scott", "tiger");

$stmt = oci_parse($conn, "SELECT empno, ename FROM emp");

/* La définition doit intervenir avant oci_execute! */

oci_define_by_name($stmt, "EMPNO", $empno);
oci_define_by_name($stmt, "ENAME", $ename);

oci_execute($stmt);

while (oci_fetch($stmt)) {
    echo "empno : " . $empno . "\n";
    echo "ename : " . $ename . "\n";
}

oci_free_statement($stmt);
oci_close($conn);
?>
]]>
     </programlisting>
    </example>
    <note>
     <para>
      Dans les versions de &php; antérieures à la version 5.0.0,
      vous devez utiliser la fonction <function>ocidefinebyname</function>. 
      Cet ancien nom est toujours utilisable : un alias a été fait vers
      la fonction <function>oci_define_by_name</function>, pour assurer
      la compatibilité ascendante. Toutefois, il est recommandé de ne
      plus l'utiliser.
     </para>
    </note>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
