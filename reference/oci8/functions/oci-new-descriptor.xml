<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->
  <refentry id="function.oci-new-descriptor">
   <refnamediv>
    <refname>oci_new_descriptor</refname>
    <refpurpose>Initialise un nouveau pointeur vide de LOB/FILE Oracle</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>object</type><methodname>oci_new_descriptor</methodname>
      <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>oci_new_descriptor</function> alloue l'espace
     nécessaire pour stocker un descripteur, ou un pointeur
     de LOB, pour la connexion <parameter>connection</parameter>. 
     Les valeurs acceptées pour <parameter>type</parameter> sont :
     <constant>OCI_D_FILE</constant>, 
     <constant>OCI_D_LOB</constant> et <constant>OCI_D_ROWID</constant>
    </para>
    <para>
     <example>
      <title>Exemple avec <function>oci_new_descriptor</function></title>
      <programlisting role="php">
<![CDATA[
<?php   
/* Ce script est fait pour être appelé dans un formulaire HTML
 * Il attends les variables $user, $password, $table, $where, et $commitsize
 * Le script efface alors les lignes sélectionnées avec ROWID et valide
 * l'effacement après chaque groupe de $commitsize lignes.
 * (Utilisez avec prudence, car il n'y a pas d'annulation possible).
 */
$conn = oci_connect($user, $password);
$stmt = oci_parse($conn, "select rowid from $table $where");
$rowid = oci_new_descriptor($conn, OCI_D_ROWID);
oci_define_by_name($stmt, "ROWID", $rowid);   
oci_execute($stmt);
while (oci_fetch($stmt)) {
  $nrows = oci_num_rows($stmt);
  $delete = oci_parse($conn, "delete from $table where ROWID = :rid");
  oci_bind_by_name($delete, ":rid", $rowid, -1, OCI_B_ROWID);
  oci_execute($delete);      
  echo "$nrows\n";
  if (($nrows % $commitsize) == 0) {
    oci_commit($conn);      
  }   
}
$nrows = oci_num_rows($stmt);   
echo "$nrows deleted...\n";
oci_free_statement($stmt);  
oci_close($conn);
?>  
]]>
      </programlisting>
      <programlisting role="php">
<![CDATA[
<?php
/* Ce script illustre le chargement de LOB
 * Le formulaire utilisé dans cet exemple ressemble à ceci : 
 * <form action="upload.php" method="post" enctype="multipart/form-data">
 * <input type="file" name="lob_upload" />
 * ...
 */
if (!isset($lob_upload) || $lob_upload == 'none'){
?>
<form action="upload.php" method="post" enctype="multipart/form-data">
Upload file: <input type="file" name="lob_upload" /><br />
<input type="submit" value="Upload" /> - <input type="reset" value="Reset" />
</form>
<?php
  } else {

  // $lob_upload contient le fichier temporaire

  // Reportez-vous à la section sur le téléchargement de fichier
  // pour sécuriser vos téléchargements
     
  $conn = oci_connect($user, $password);
  $lob = oci_new_descriptor($conn, OCI_D_LOB);
  $stmt = oci_parse($conn, "insert into $table (id, the_blob) 
               values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
  oci_bind_by_name($stmt, ':the_blob', $lob, -1, OCI_B_BLOB);
  oci_execute($stmt, OCI_DEFAULT);
  if ($lob->savefile($lob_upload)){
    oci_execute($conn);
    echo "BLOB sauvé!\n";
  }else{
    echo "Impossible de charger le BLOB\n";
  }
  oci_free_descriptor($lob);
  oci_free_statement($stmt);
  oci_close($conn);
}
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Exemple ave <function>oci_new_descriptor</function></title>
      <programlisting role="php">
<![CDATA[
<?php   
/* Appel d'une procédure PL/SQL stockée qui prend un clobs
 * en entrée (PHP 4 >= 4.0.6). 
 * Exemple de signateure de procédure stockée PL/SQL :
 *
 * PROCEDURE save_data
 *   Argument Name                  Type                    In/Out Default?
 *   ------------------------------ ----------------------- ------ --------
 *   KEY                            NUMBER(38)              IN
 *   DATA                           CLOB                    IN
 *
 */

$conn = oci_connect($user, $password);
$stmt = oci_parse($conn, "begin save_data(:key, :data); end;");
$clob = oci_new_descriptor($conn, OCI_D_LOB);
oci_bind_by_name($stmt, ':key', $key);
oci_bind_by_name($stmt, ':data', $clob, -1, OCI_B_CLOB);
$clob->write($data);
oci_execute($stmt, OCI_DEFAULT);
oci_commit($conn);
$clob->free();
oci_free_statement($stmt);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>oci_new_descriptor</function> retourne &false; en cas d'erreur.
    </para>
    <note>
     <para>
      Dans les versions de &php; antérieures à la version 5.0.0,
      vous devez utiliser la fonction <function>ocinewdescriptor</function>. 
      Cet ancien nom est toujours utilisable : un alias a été fait vers
      la fonction <function>oci_new_descriptor</function>, pour assurer
      la compatibilité ascendante. Toutefois, il est recommandé de ne
      plus l'utiliser.
     </para>
    </note>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
