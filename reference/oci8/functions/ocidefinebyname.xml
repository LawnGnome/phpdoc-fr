<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.13 Maintainer: dams Status: ready -->
<!-- Reviewed: yes -->
  <refentry id="function.ocidefinebyname">
   <refnamediv>
    <refname>ocidefinebyname</refname>
    <refpurpose>
     Utilise une variable &php; pour la phase de définition, dans une 
     commande SELECT Oracle
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>bool</type><methodname>ocidefinebyname</methodname>
      <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
      <methodparam><type>string</type><parameter>column_name</parameter></methodparam>
      <methodparam><type>mixed</type><parameter role="reference">variable</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ocidefinebyname</function> copie les valeurs issues des colonnes
     SQL <parameter>column_name</parameter> de la commande <parameter>stmt</parameter>
     dans les variables &php;.
     Méfiez-vous des colonnes Oracle qui sont toutes en majuscule,
     tandis que dans les SELECT, vous pouvez aussi les écrire en minuscules.
     <function>ocidefinebyname</function> s'attend à ce que
     <parameter>column-name</parameter> soit en majuscules.
     Si vous définissez une variable qui n'existe pas dans
     la commande SELECT, vous ne serez pas prévenu par une erreur.
    </para>
    <para>
      
      Si vous avez besoin de définir un type de données <parameter>type</parameter>
      abstrait, tel (LOB/ROWID/BFILE), vous devez lui allouer la
      mémoire avec <function>ocinewdescriptor</function>.
      Reportez-vous aussi à <function>ocibindbyname</function>.
    </para>
     <example>
      <title>Exemple avec <function>ocidefinebyname</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$conn = OCILogon("scott","tiger");

$stmt = OCIParse($conn,"select empno, ename from emp");

/* La définition DOIT intervenir AVANT l'exécution! */

OCIDefineByName($stmt,"EMPNO",$empno);
OCIDefineByName($stmt,"ENAME",$ename);

OCIExecute($stmt);

while (OCIFetch($stmt)) {
    echo "empno :".$empno."\n";
    echo "ename :".$ename."\n";
}

OCIFreeStatement($stmt);
OCILogoff($conn);
?>
]]>
     </programlisting>
    </example>
    <note>
     <para>
      Cette fonction a été renommée en <function>oci_define_by_name</function> 
      pour &php; version 5.0.0 et plus récent. Pour la compatibilité
      ascendante, <function>ocicancel</function> peut toujours être utilisée.
      Toutefois, elle est obsolète.
     </para>
    </note>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
