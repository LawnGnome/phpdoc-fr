<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.2 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="oci8.connection" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Gestion de la connexion</title>
 <para>
  L'extension oci8 fournit 3 fonctions différentes pour se connecter
  à Oracle. Il vous appartient d'utiliser la fonction la plus appropriée
  pour votre application ; les informations contenues dans cette section
  vont vous aider à faire le bon choix.
 </para>
 <para>
  La connexion à un serveur Oracle est une opération résonnablement couteuse
  en terme de temps que cela prend. La fonction <function>oci_pconnect</function>
  utilise un cache persistent de connexion qui peut être réutilisé à travers
  différents scripts. Cela signifie qu'une seule connexion sera utilisée par
  processus &php; (ou enfant Apache).
 </para>
 <para>
  Si votre application se connecte à Oracle en utilisant un jeu différent de crédance
  pour chaque utilisateur web, le cache persistent utilisé
  par la fonction <function>oci_pconnect</function> devient moins approprié
  car l'augmentation du nombre concurrent d'utilisateurs va affecté les performances
  de votre serveur Oracle, car il devra maintenir trop de connexions en cache.
  Si votre application est de ce type, il est recommandé d'optimiser votre application
  en utilisant les options de configuration <link
  linkend="ini.oci8.max_persistent">oci8.max_persistent</link> et <link
  linkend="ini.oci8.persistent_timeout">oci8.persistent_timeout</link>
  (elles vous donnent le contrôle sur la taille et la durée de vie du cache
  de connexions persistentes) ou utilisez
  <function>oci_connect</function> à la place.
 </para>
 <para>
  Les fonctions <function>oci_connect</function> et <function>oci_pconnect</function>
  employent un cache de connexion ; si vous faites des appels multiples
  à <function>oci_connect</function>, en utilisant les mêmes paramètres dans
  un script donné, le second appel ainsi que les suivants retourneront le gestionnaire
  de connexion existant. Le cache utilisé par la fonction <function>oci_connect</function>
  est nettoyé à la fin de l'exécution du script ou lorsque vous fermez explicitement
  le gestionnaire de connexion. <function>oci_pconnect</function> a un comportement
  sensiblement identique, à la différence que le cache est maintenu séparemment
  et est conservé entre les requêtes.
 </para>
 <para>
  Il est important de se souvenir de cette fonctionnalité de cache, car il donne
  l'apparence que les deux gestionnaires ne sont pas isolés transactionnellement (ils
  sont en faite le même gestionnaire de connexion, ils ne sont donc absolument pas
  isolés). Si votre connexion a besoin de deux connexions séparées, isolées
  transactionnellement, vous devez utiliser la fonction <function>oci_new_connect</function>.
 </para>
 <para>
  <function>oci_new_connect</function> crée toujours une nouvelle connexion au
  serveur Oracle, indépendamment de l'existante d'autres connexions.
  Les applications web à fort trafic doivent éviter d'utiliser
  <function>oci_new_connect</function>, particulièrement dans les sections
  les plus chargées de l'application.
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

