<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.7 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
 <refentry id="function.ifx-query">
  <refnamediv>
   <refname>ifx_query</refname>
   <refpurpose>Envoie une requête Informix</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>ifx_query</methodname>
      <methodparam><type>string</type><parameter>query</parameter></methodparam>
      <methodparam><type>int</type><parameter>link_identifier</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>cursor_type</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>blobidarray</parameter></methodparam>
     </methodsynopsis>
   <para>
    <function>ifx_query</function> retourne un identifiant positif de
    résultat Informix en cas de succès, et &false; en cas d'erreur.
   </para>
   <para>
    L'entier de type "identifiant de résultat" est utilisé par
    d'autres fonctions pour lire les résultats. Pour un exemple,
    reportez-vous à <function>ifx_affected_rows</function> afin de
    connaître le nombre de lignes affectées.
   </para>
   <para>
    <function>ifx_query</function> envoie une requête au serveur
    actif courant, associé à l'identifiant de connexion
    <parameter>link_identifier</parameter>. <!-- Si
    <parameter>link_identifier</parameter> n'est pas fourni,
    la dernière connexion ouverte sera utilisée. Si aucune connexion
    n'a été ouverte, <function>ifx_query</function> va essayer d'en
    créer une, en appelant <function>ifx_connect</function>. -->
   </para>
   <para>
    Exécute la requête <parameter>query</parameter> sur la connexion
    <parameter>conn_id</parameter>. Pour les requêtes de type SELECT, un
    pointeur est déclaré, et ouvert. L'option
    <parameter>cursor_type</parameter> permet de choisir le type de
    pointeur, "scroll" et/ou "hold". <parameter>cursor_type</parameter> accepte
    les deux valeurs séparées, et leur combinaison. Les
    requêtes d'autre type sont à exécution immédiate.
   </para>
   <para>
    Le nombre de lignes affectées (estimé ou exact) est
    enregistré pour être lu avec <function>ifx_affected_rows</function>.
   </para>
   <para>
    Si vous avez une colonne de type BLOB (BYTE ou TEXT) dans une requête de
    modification, vous pouvez passer un paramètre
    <parameter>blobidarray</parameter> qui contiendra les identifiants
    des BLOB à modifier, et vous devrez remplacer cette colonne par
    un point d'interrogation (?) dans la requête.
   </para>
   <para>
    Si le contenu d'une colonne est de type TEXT (ou BYTE) vous pouvez
    aussi utiliser les fonctions <function>ifx_textasvarchar</function> et
    <function>ifx_byteasvarchar</function>. Cela vous permettra d'utiliser
    les colonnes TEXT ( ou BYTE ) comme des colonnes de type VARCHAR (mais
    plus long, tout de même), et vous n'aurez pas besoin de l'identifiant
    de BLOB.
   </para>
   <para>
    Avec les fonctions <function>ifx_textasvarchar</function> et
    <function>ifx_byteasvarchar</function> (valeurs par défaut), les
    requêtes SELECT retourneront des identifiants de BLOB. Ces identifiants
    peuvent être une chaîne ou un fichier, suivant la configuration
    (voir plus loin).
   </para>
   <para>
    <example>
     <title>
      Afficher toutes les lignes de la table "ordres" sous la forme html du serveur IFX
     </title>
     <programlisting role="php">
<![CDATA[
<?php
ifx_textasvarchar(1);      // Utilisation du mode "text mode" pour les BLOBs
$res_id = ifx_query("select * from orders", $conn_id);
if (! $res_id) {
    printf("Impossible de sélectionner des lignes dans : %s\n<br />%s<br />\n", ifx_error());
    ifx_errormsg();
    die;
}
ifx_htmltbl_result($res_id, "border=\"1\"");
ifx_free_result($res_id);
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>Insertion de valeurs dans la table "catalogue" IFX</title>
     <programlisting role="php">
<![CDATA[
<?php

// créer un identifiant de BLOB pour une colonne de type BYTE et une de type TEXT
$textid = ifx_create_blob(0, 0, "Colonne Text en mémoire");
$byteid = ifx_create_blob(1, 0, "Colonne Byte en mémoire");

// Stocke l'identifiant du BLOB dans le tableau BLOBid
$BLOBidarray[] = $textid;
$BLOBidarray[] = $byteid;

// exécute la requête
$query = "insert into catalog (stock_num, manu_code, " .
         "cat_descr,cat_picture) values(1,'HRO',?,?)";
$res_id = ifx_query($query, $conn_id, $BLOBidarray);
if (! $res_id) {
//  ... erreur ...
}

// libération du résultat
ifx_free_result($res_id);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Voir aussi
    <function>ifx_connect</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
