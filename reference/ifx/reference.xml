<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<reference id="ref.ifx">
 <title>Informix</title>
 <titleabbrev>Informix</titleabbrev>
 <partintro>
  <para>
   Les pilotes d'acc&egrave;s &agrave; Informix pour Online (ODS) 7.x, SE 7.x,
   Universal Server (IUS) 9.x et IDS 2000 sont impl&eacute;ment&eacute;s dans
   "functions/ifx.ec" et "functions/php3_ifx.h". Le support ODS 7.x est
   plut&ocirc;t complet, et accepte les colonnes de type BYTE et TEXT.
   Le support IUS 9.x est partiellement fini, de nouveaux types sont disponibles,
   mais SLOB et CLOB sont toujours en cours de d&eacute;veloppement.
  </para>
  <note>
   <title>Notes de configuration</title>
   <para>
    Vous avez besoin d'une version de ESQL/C pour compiler le pilote PHP d'Informix.
    Les versions ESQL/C 7.2x sont utilisables. ESQL/C fait partie du SDK
    Informix Client.
   </para>
   <para>
    Avant que vous ne lanciez le script "configure", assurez-vous que la variable
    d'environnement "INFORMIXDIR" a &eacute;t&eacute; correctement
    param&eacute;tr&eacute;e, et que $INFORMIXDIR/bin est dans votre PATH.
   </para>
   <para>
    Le script de configuration va d&eacute;tecter automatiquement les librairies
    disponibles, et inclure les dossiers si vous lancer le script avec l'option
    <link linkend="install.configure.with-informix"><option role="configure">--with-informix=yes</option></link>.
    Vous pouvez ignorer cette d&eacute;tection
    en sp&eacute;cifiant "IFX_LIBDIR", "IFX_LIBS" et "IFX_INCDIR" dans votre
    environnement. Le script de
    configuration va aussi essayer de d&eacute;tecter la version de votre serveur Informix.
    Il modifiera alors la condition de compilation "HAVE_IFX_IUS" si votre serveur
    Informix est d'une version plus r&eacute;cente que 9.00.
   </para>
  </note>
  <note>
   <title>Notes d'ex&eacute;cutions</title>
   <para>
    Assurez-vous que les variables d'environnement INFORMIXDIR et
    INFORMIXSERVER sont accessibles au pilote PHP, et que le dossier bin
    INFORMIX est aussi dans la variable PATH. Vous pouvez le voir en lan&ccedil;ant un
    script qui contient un appel &agrave; <function>phpinfo</function> avant
    que vous ne commenciez &agrave; tester. La fonction
    <function>phpinfo</function> affiche une liste des variables
    d'environnement. Cela fonctionne aussi bien en mode
    mod_php, qu'en mode CGI. Il vous faudra fixer les valeurs dans le script
    de d&eacute;marrage d'Apache.
   </para>
   <para>
    Les "Informix shared libraries" doivent aussi &ecirc;tre accessibles au
    chargement (v&eacute;rifiez LD_LINBRARY_PATH ou ld.so.conf/ldconfig).
   </para>
  </note>
  <note>
   <title>Notes sur l'utilisation des BLOBs (TEXT et BYTE)</title>
   <para>
    Les objets de type BLOBs sont normalement g&eacute;r&eacute;s par des
    identifiants de BLOB. Les requ&ecirc;tes de s&eacute;lection retournent
    un identifiant de BLOB pour chaque colonne de type BYTE et TEXT. Vous
    pouvez en lire le contenu, avec des commandes de types
    "string_var = ifx_get_blob($BLOB_id);" ; si vous souhaitez ramener le BLOB en
    m&eacute;moire (avec: "ifx_blobinfile_mode(0);"). Si vous pr&eacute;f&eacute;rez
    recevoir le contenu d'une colonne BLOB dans un fichier, utilisez
    <function>ifx_blobinfile_mode</function>, et ifx_get_blob($BLOB_id)
    vous retournera le nom du fichier. Utilisez les fonctions habituelles
    d'acc&egrave;s aux fichiers pour lire son contenu.
   </para>
   <para>
    Pour les requ&ecirc;tes INSERT/UPDATE, vous devez cr&eacute;er les identifiants
    de BLOB par vous m&ecirc;me, avec la fonction <function>ifx_create_blob</function>.
    Puis, vous placez l'identifiant de BLOB dans un tableau, et remplacez
    la colonne par un point d'interrogation. Pour les UPDATE/INSERT, vous
    &ecirc;tes responsable du contenu du BLOB, avec la fonction
    <function>ifx_update_blob</function>.
   </para>
   <para>
    Le comportement par d&eacute;faut des colonnes de type BLOB peut &ecirc;tre
    modifi&eacute; en affectant de nouvelles valeurs aux variables de configuration
    (m&ecirc;me &agrave; la vol&eacute;e) :
   </para>
   <para>
    Variable de configuration : ifx.textasvarchar
   </para>
   <para>
    Variable de configuration  : ifx.byteasvarchar
   </para>
   <para>
    Fonctions &agrave; utiliser lors de l'ex&eacute;cution :
   </para>
   <para>
    ifx_textasvarchar(0) : Utilise l'identifiant de BLOB avec des colonnes de type
    TEXT, dans les requ&ecirc;tes SELECT
   </para>
   <para>
    ifx_byteasvarchar(0) : Utilise l'identifiant de BLOB avec des colonnes de type
    BYTE, dans les requ&ecirc;tes SELECT
   </para>
   <para>
    ifx_textasvarchar(1) : Retourne les colonnes de type TEXT sous la forme de
    VARCHAR, sans utiliser les identifiants de BLOB dans les requ&ecirc;tes SELECT.
   </para>
   <para>
    ifx_byteasvarchar(1) : Retourne les colonnes de type BYTE sous la forme de
    VARCHAR, sans utiliser les identifiants de BLOB dans les requ&ecirc;tes SELECT.
   </para>
   <para>
    Variable de configuration : ifx.BLOBinfile
   </para>
   <para>
    Fonctions &agrave; utiliser lors de l'ex&eacute;cution :
   </para>
   <para>
    ifx_blobinfile_mode(0) : Retourne les colonnes de type BYTE en m&eacute;moire,
    l'identifiant de BLOB vous donnera acc&egrave;s au contenu.
   </para>
   <para>
    ifx_blobinfile_mode(1) : Retourne les colonnes de type BYTE dans un fichier,
    l'identifiant de BLOB vous donnera acc&egrave;s au nom de ce fichier.
   </para>
   <para>
    En affectant la valeur de 1 &agrave; ifx_text/byteasvarchar, vous pouvez
    utiliser les colonnes de type TEXT et BYTE dans les requ&ecirc;tes SELECT
    comme des champs VARCHAR (mais plus long). Etant donn&eacute; la gestion
    des cha&icirc;nes par PHP, cette technique conserve les donn&eacute;es
    binaires. Les donn&eacute;es retourn&eacute;es peuvent contenir n'importe
    quoi, et vous &ecirc;tes responsable de la bonne manipulation de ces valeurs.
   </para>
   <para>
    En affectant la valeur de 1 &agrave; <function>ifx_blobinfile_mode</function>,
    utilisez le nom de fichier retourn&eacute; par <function>ifx_get_blob</function>
    pour acc&eacute;der au contenu du BLOB. Notez bien que vous &ecirc;tes tenu
    responsable de l'effacement des fichiers temporaires, cr&eacute;&eacute;s par
    Informix. Chaque nouvelle ligne lue sur le serveur va cr&eacute;er un nouveau
    fichier temporaire, pour chaque colonne de type BYTE.
   </para>
   <para>
    L'emplacement des fichiers temporaire peut &ecirc;tre modifi&eacute;, gr&acirc;ce
    &agrave; la variable "blobdir", (par d&eacute;faut, ".", c'est-&agrave;-dire,
    le dossier courant). Une valeur telle que BLOBdir="tmpBLOB" simplifiera le
    nettoyage des fichiers temporaires, accidentellement oubli&eacute;s (les noms
    commencent tous par "blb").
   </para>
  </note>
  <note>
   <title>Suppression automatique des espaces (SQLCHAR et SQLNCHAR)</title>
   <para>
    Elle peut &ecirc;tre mise en place avec la variable de configuration.
   </para>
   <para>
    ifx.charasvarchar : avec la valeur 1, les espaces de fin de champs seront
    automatiquement supprim&eacute;s.
   </para>
  </note>
  <note>
   <title>NULL values</title>
   <para>
    Lorsque la variable de configuration ifx.nullformat (ou que la fonction
    <function>ifx_nullformat</function>) est &agrave; un, les colonnes contenant
    la valeur NULL retourneront la cha&icirc;ne "NULL", et sinon, retourneront
    une cha&icirc;ne vide. Cela vous permet de faire la diff&eacute;rence entre
    les colonnes vides et celles qui contiennent la valeur NULL.
   </para>
  </note>
 </partintro>

&reference.ifx.functions;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

