<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.session-set-save-handler">
 <refnamediv>
  <refname>session_set_save_handler</refname>
  <refpurpose>Configure les fonctions de stockage de sessions</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>session_set_save_handler</methodname>
   <methodparam><type>callback</type><parameter>open</parameter></methodparam>
   <methodparam><type>callback</type><parameter>close</parameter></methodparam>
   <methodparam><type>callback</type><parameter>read</parameter></methodparam>
   <methodparam><type>callback</type><parameter>write</parameter></methodparam>
   <methodparam><type>callback</type><parameter>destroy</parameter></methodparam>
   <methodparam><type>callback</type><parameter>gc</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>session_set_save_handler</function> configure les fonctions
   de stockage de sessions, et permet de choisir des fonctions utilisateurs
   pour sauver et relire toutes les sessions. Cette fonction est
   très pratique lorsqu'il faut sauver les données de sessions
   en utilisant une autre technique que le système par fichier fourni
   par défaut : notamment, stockage en base de données.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>open</parameter></term>
     <listitem>
      <para>
       Fonction d'ouverture, qui fonctionne comme un constructeur dans une
       classe, et qui est exécutée quand la session est ouverte. La fonction
       d'ouverture attend deux paramètres : le premier est le chemin de sauvegarde,
       et le second est le nom de la session.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>close</parameter></term>
     <listitem>
      <para>
       Fonction de fermeture, qui fonctionne comme un destructeur de classe,
       et qui est exécuté lorsque le script se termine.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read</parameter></term>
     <listitem>
      <para>
       La fonction de lecture doit toujours retourner une chaîne,
       pour que le gestionnaire fonctionne comme prévu. Vous devez
       retourner une chaîne vide s'il n'y a pas de données à lire.
       Les valeurs retournées par les autres gestionnaires sont
       converties en booléen avant d'être retournées au script.
       &true; pour la réussite, &false; pour l'échec.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>write</parameter></term>
     <listitem>
      <para>
       <note>
        <para>
         Le gestionnaire d'écriture n'est pas exécuté tant que le
         flot de sortie est ouvert. Par conséquent, l'affichage
         de messages de déboguage durant le gestionnaire d'écriture
         ne sera donc jamais visible depuis le navigateur. Si vous
         avez besoin de déboguage, nous vous suggérons d'écrire
         vos messages dans un fichier.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>destroy</parameter></term>
     <listitem>
      <para>
       Le gestionnaire de destruction est exécuté quand une session est
       détruite avec la fonction <function>session_destroy</function>. Il prend
       l'identifiant de session comme seul paramètre. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>gc</parameter></term>
     <listitem>
      <para>
       Le collecteur est exécuté quand le collecteur de session est appelé, et il prend
       comme paramètre unique la durée de vie maximale d'une session.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>session_set_save_handler</function></title>
    <para>
     L'exemple suivant fournit un exemple de stockage des sessions
     semblable au système par défaut (par fichiers).
     Cet exemple peut facilement être adapté pour réaliser des
     sauvegardes en base de données, avec votre serveur préféré.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function open($save_path, $session_name)
{
  global $sess_save_path;

  $sess_save_path = $save_path;
  return(true);
}

function close()
{
  return(true);
}

function read($id)
{
  global $sess_save_path;

  $sess_file = "$sess_save_path/sess_$id";
  return (string) @file_get_contents($sess_file);
}

function write($id, $sess_data)
{
  global $sess_save_path;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "w")) {
    $return = fwrite($fp, $sess_data);
    fclose($fp);
    return $return;
  } else {
    return(false);
  }

}

function destroy($id)
{
  global $sess_save_path;

  $sess_file = "$sess_save_path/sess_$id";
  return(@unlink($sess_file));
}

function gc($maxlifetime)
{
  global $sess_save_path;

  foreach (glob("$sess_save_path/sess_*") as $filename) {
    if (filemtime($filename) + $maxlifetime < time()) {
      @unlink($filename);
    }
  }
  return true;
}

session_set_save_handler("open", "close", "read", "write", "destroy", "gc");

session_start();

// Utilisez vos sessions comme d'habitude

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Les gestionnaires d'écriture et de fermeture sont appelés après la destruction
    des objets depuis PHP 5.0.5. Ces destructeurs peuvent utiliser les sessions
    mais le gestionnaire de session ne peut pas utiliser les objets. Dans les versions
    antérieures, ils étaient appelés dans l'ordre inverse.
   </para>
   <para>
    Il est possible d'appeler <function>session_write_close</function> depuis
    le destructeur pour résoudre ce problème.
   </para>
  </warning>
  <warning>
   <para>
    Le dossier de travail courant change suivant les SAPIs si la session
    est fermée à la fin du script. Il est possible de fermer la session
    plus tard, grâce à la fonction <function>session_write_close</function>.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     La directive de configuration <link linkend="ini.session.save-handler">session.save_handler</link>
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->