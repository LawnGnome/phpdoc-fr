<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
 <reference id="ref.session">
  <title>Sessions</title>
  <titleabbrev>Sessions</titleabbrev>
	
  <partintro>
   <para>
    Le support des sessions de PHP est un moyen de préserver
    des données entre plusieurs accès. Cela vous permet de
    créer des applications personnalisées, et d'augmenter 
    l'attractivité de votre site.
   </para>
   <para>
    SI vous êtes familier avec la gestion de session de la 
    librairie PHPLIB, vous remarquerez que certains concepts
    sont similaires.
   </para>
   <para>
    Chaque visiteur accédant à votre page web se voit assigné un
    identifiant unique, appelé 'identifiant de session'. Il peut
    être stocké soit dans un cookie, soit propagé dans l'URL.
   </para>
   <para>
    Le support des sessions vous permet d'enregistrer un
    nombre illimité de variables qui doivent être préservées
    entre les requêtes. Lorsqu'un visiteur accède à votre site,
    PHP va vérifier automatiquement (si session.auto_start est
    activé1)  ou sur demande (explicitement avec 
    <function>session_start</function> ou  implicitement avec 
    <function>session_register</function>) si il existe une
    session du même nom. Si c'est le cas, l'environnement
    précédemment sauvé sera recréé.
   </para>
   <para>
    Toutes les variables sont sérialisées après l'exécution du
    script PHP. Les variables qui sont indéfinies sont marquées
    comme telles. Lors des accès ultérieurs, elles ne seront pas
    définies, jusqu'à ce que l'utilisateur le fasse.
   </para>
   <para>
    Les options de configuration 
    <link linkend="ini.track-vars"><literal>track_vars</literal></link> et 
    <link linkend="ini.register-globals"><literal>register_globals</literal></link> 
    influencent la manière de stockage et déstockage des variables.
   </para>
   <note>
    <para>
     Depuis PHP 4.0.3, <link linkend="ini.track-vars"><literal>track_vars</literal></link>
     est toujours activé.
    </para>
   </note>
   <note>
    <para>
     Depuis PHP 4.1.0, <varname>$_SESSION</varname> est disponible
     comme variable tout comme <varname>$_POST</varname>,
     <varname>$_GET</varname>, <varname>$_REQUEST</varname>, etc..
     Contrairement à <varname>$HTTP_SESSION_VARS</varname>,
     <varname>$_SESSION</varname> est toujours global. Par conséquent,
     <literal>global</literal> should not be used for
     <varname>$_SESSION</varname>.
    </para>
   </note>
   <para>
    Si <link linkend="ini.track-vars"><literal>track_vars</literal></link> est
    activé et <link linkend="ini.register-globals"><literal>register_globals</literal></link>
    est désactivé, seuls les éléments du tableau global
    <varname>$HTTP_SESSION_VARS</varname> contiendront les variables 
    enregistrées dans la session. Les variables de sessions relues seront
    uniquement disponibles dans <varname>$HTTP_SESSION_VARS</varname>.
    <example>
     <title>
      Enregistrer une variable avec 
      <link linkend="ini.track-vars"><literal>track_vars</literal></link>
      activé
     </title>
     <programlisting role="php">
<![CDATA[
<?php
session_start();
if (isset($HTTP_SESSION_VARS['compteur'])) {
   $HTTP_SESSION_VARS['compteur']++;
}
else {
   $HTTP_SESSION_VARS['compteur'] = 0;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    L'utilisation de la variable <varname>$_SESSION</varname> (ou
    <varname>$HTTP_SESSION_VARS</varname> avec PHP 4.0.6 ou plus ancien)
    est recommandé pour des raisons de sécurité et de lisibilité du
    code. Avec <varname>$_SESSION</varname> et
    <varname>$HTTP_SESSION_VARS</varname>, il n'y a pas besoin
    d'utiliser les fonctions 
    <function>session_register</function>, <function>session_unregister</function>
    et <function>session_is_registered</function>. Les utilisateurs peuvent
    utiliser une variable de session comme toute variable classique.
    <example>
     <title>
      Enregistrer une variable avec $_SESSION.
     </title>
     <programlisting role="php">
<![CDATA[
<?php
session_start();
// Utilisez $HTTP_SESSION_VARS avec PHP 4.0.6 ou plus ancien
if (!isset($_SESSION['count'])) {
    $_SESSION['count'] = 0;
} else {
    $_SESSION['count']++;
}
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>
      Annuler l'enregistrement d'une variable avec $_SESSION.
     </title>
     <programlisting role="php">
<![CDATA[
<?php
session_start();
// Utilisez $HTTP_SESSION_VARS avec PHP 4.0.6 ou plus ancien
unset($_SESSION['count']);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Si <link linkend="ini.register-globals"><literal>register_globals</literal></link>
    est activé, alors toutes les variables globales peuvent être
    enregistrées comme variables de session, et toutes les variables de sessions
    seront reconstituées comme variables globales. Comme PHP doit
    savoir quels variables globales sont enregistrées comme variables
    de sessions, l'utilisateur doit enregistrer  les variables avec
    <function>session_register</function> tandis que 
    <varname>$HTTP_SESSION_VARS</varname> et <varname>$_SESSION</varname>
    ne nécessitent pas <function>session_register</function>.
    <caution>
     <para>
      Si vous utilisez 
      <varname>$HTTP_SESSION_VARS</varname> et <varname>$_SESSION</varname>
      et désactivez <link linkend="ini.register-globals"><literal>register_globals</literal></link>,
      n'utilisez pas <function>session_register</function>,
      <function>session_is_registered</function> et
      <function>session_unregister</function>.
     </para>
     <para>
      Si vous activez <link linkend="ini.register-globals"><literal>register_globals</literal></link>,
       <function>session_unregister</function> doit être utilisé, car les
       variables de session sont enregistrés comme variables globales lorsque
       les données de sessions sont relues. Inactiver 
       <link linkend="ini.register-globals"><literal>register_globals</literal></link>
       est recommandé pour des raisons de sécurité et de performances.
     </para>
    </caution>
    <example>
     <title>
      Enregistrer une variable avec 
      <link linkend="ini.register-globals"><literal>register_globals</literal></link>
      activé
     </title>
     <programlisting role="php">
<![CDATA[
<?php
if (!session_is_registered('compteur')) {
    session_register("compteur");
    $compteur = 0;
}
else {
    $compteur++;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Si les deux options 
    <link linkend="ini.track-vars"><literal>track_vars</literal></link> et
    <link linkend="ini.register-globals"><literal>register_globals</literal></link>
    sont activés, alors les variables globales
    <varname>$HTTP_SESSION_VARS</varname>/<varname>$_SESSION</varname>
    représenteront les mêmes valeurs que celles qui sont enregistrées avec les
    variables de même nom.
   </para>
   <para>
    Si l'utilisateur utilise <function>session_register</function> pour
    enregistrer des variables de sessions, 
    <varname>$HTTP_SESSION_VARS</varname>/<varname>$_SESSION</varname>
    ne contiendront pas ces variables jusqu'à ce le tableau soit
    de nouveau générés à partir des informations stockées en session.
   </para>
   <para>
    Il y a deux méthodes de propagation de l'identifiant de session : 
    <itemizedlist>
     <listitem>
      <simpara>
       Cookies
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Paramèter URL
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Le module de session supporte les deux méthodes. Les cookies sont 
    optimaux, mais comme ils ne sont pas s˚rs (tous les internautes 
    ne les acceptent pas), ils ne sont pas fiables. La seconde
    méthode place l'identifiant de session directement dans les URL.
   </para>
   <para>
    PHP est de faire cela de manière transparente, lorsqu'il est compilé
    avec l'option <link linkend="install.configure.enable-trans-sid">
    <literal>--enable-trans-sid</literal></link>. Si vous activez
    cette option, les URL relatives seront modifiées pour contenir
    l'identifiant de session automatiquement. Alternativement,
    vous pouvez utiliser la constante <constant>SID</constant>, qui est
    définie, si le client n'a pas envoyé le cookie approprié. 
    <constant>SID</constant> est soit de la forme 
    <literal>session_name=session_id</literal> ou une chaÓne vide.
    <note>
     <para>
     L'option <link linkend="ini.arg_separator.output">arg_separator.output</link>
     de &php.ini; vous permet de personnaliser le séparateur d'arguments.
     </para>
    </note> 
   </para>
   <para>
    LMexemple suivant vous montre comment enregistrer une variable et comment
    réaliser un lien correct avec une autre page, avec <constant>SID</constant>.
    <example>
     <title>Compter le nombre de hits d'un utilisateur sur une page</title>
     <programlisting role="php">
<![CDATA[
<?php
if (!session_is_registered('compteur')) {
    session_register('compteur');
    $compteur = 1;
}
else {
    $compteur++;
}
?>

Bonjour visiteur, vous avez vu cette page <?php echo $compteur; ?> fois.<p>;

<?php
// Le <?php echo SID?> (<?=SID?> est aussi possible suivant votre configuration)
// est nécessaire pour préserver l'identifiant de sessions
// si jamais l'utilisateur a désactivé les cookies.
?>

Pour continuer, <A HREF="nextpage.php?<?php echo SID?>">cliquez ici</A>.
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <literal>&lt;?=SID?&gt;</literal> n'est pas nécessair, si
    <link linkend="install.configure.enable-trans-sid">
    <literal>--enable-trans-sid</literal></link> a été activé à la compilation de PHP.
   </para>
   <note>
    <para>
     Les URLS non relatives sont considérées comme externes au site, et ne
     recevront pas le SID, car c'est une fuite d'information vers un autre
     site (envoi d'informations importantes).
    </para>
   </note>
   <para>
    Pour implémenter un stockage en base de données, ou toute autre méthode,
    vous aurez besoin de la fonction <function>session_set_save_handler</function> pour
    paramétrer vos propres fonctions de stockage.
   </para>
   <para>
    Le système de session supporte un grand nombre d'options, que vous pouvez
    placer dans le fichier &php.ini; file. En voici une présentation.
    <itemizedlist>
     <listitem>
      <simpara>
       <literal>session.save_handler</literal> defines the name of the
       handler which is used for storing and retrieving data
       associated with a session.  Defaults to
       <literal>files</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.save_path</literal> définit le chemin qui
       doit être passé au gestionnaire de sauvegarde. Si vous 
       décidez de choisir le gestionnaire par défaut (par fichier),
       cet argument sera utilisé comme dossier de sauvegarde
       des sessions. Par défaut, il vaut <filename>/tmp</filename>. Si
       le niveau d'imbrication de <literal>session.save_path</literal>
       est supérieur à 2, le nettoyage des sessions obsolètes ne s'opérera
       pas.
      </simpara>
      <warning>
       <para>
        Si vous laissez cette option configurée avec un dossier
        accessible en lecture à tout le monde, comme par exemple
        <filename>/tmp</filename> (par défaut), les autres utilisateurs
        pourront exploiter ces sessions en obtenant la liste de fichiers
        dans ce dossier.
       </para>
      </warning>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.name</literal> spécifie le nom de la session,
       qui sera utilisé comme nom de cookie. Il ne doit contenir que
       des caractères alphanumérique. Par défaut, c'est
       <literal>PHPSESSID</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.auto_start</literal> spécifie si le module
       de session doit démarrer automatiquement, au début de
       chaque script PHP. Par défaut, c'est <literal>0</literal> (inactivé).
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cookie_lifetime</literal> spécifie la durée de
       vie du cookie en secondes. La valeur de <literal>0</literal>
       siginifie : "Jusqu'à ce que le navigateur soit éteind".
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.serialize_handler</literal> définit le nom
       du gestionnaire qui est utilisé pour linéariser/délinéariser
       les données. Actuellement, un format interne à PHP
       (nommé <literal>php</literal>) et WDDX (nommé
       <literal>wddx</literal>) sont supportés . WDDX est seulement 
       disponible, si PHP a été compilé avec l'option
       <link linkend="ref.wddx">WDDX</link>. Par défaut, c'est <literal>php</literal>.
       </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.gc_probability</literal> specifies the
       probability that the gc (garbage collection) routine is started
       on each request in percent. Defaults to <literal>1</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.gc_maxlifetime</literal> spécifie la durée de
       vie des données sur le serveur, en nombre de secondes. Après
       cette durée, les données seront considérées comme obsolètes,
       et supprimées.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.referer_check</literal> contient une sous-chaÓne
       que vous souhaitez retrouver dans tous les entêtes HTTP Referer. Si
       cet entêtes a été envoyé par le client, et que la sous-chaÓne n'a pas
       été trouvé, l'identifiant de session sera considéré comme invalide. 
       Par défaut, cette option est la chaÓne vide.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.entropy_file</literal> est un chemin jusqu'à
       une source externe (un fichier), qui sera utilisée comme source
       additionnelle d'entropie pour la création de l'identifiant
       de session. Des exemples valides sont <literal>/dev/random</literal> et
       <literal>/dev/urandom</literal>, qui sont disponibles sur
       tous les systèmes Unix.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.entropy_length</literal> spécifie le nombre d'octets
       qui seront lus dans le fichier défini ci-dessus. Par défaut, il
       vaut <literal>0</literal>, c'est à dire inactif.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.use_cookies</literal> spécifie si le module utilisera
       les cookies pour stocker les données de session sur le client.
       Par défaut, il vaut <literal>1</literal>, c'est à dire actif.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.use_only_cookies</literal> spécifie si le module
       doit utiliser <emphasis role="strong">seulement</emphasis> les cookies
       pour stocker les identifiants de sessions du coté du navigateur. Par défaut,
       cette option vaut <literal>0</literal> (inactif, pour compatibilité ascendante).
       En l'activant, vous éviterez les attaques qui utilisent des
       identifiants de sessions dans les URL. Cette configuration a été ajoutée
       en PHP 4.3.0.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cookie_path</literal> spécifie le chemin utilisé
       lors de la création du cookie. Par défaut, il vaut <literal>/</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cookie_domain</literal> spécifie le domaine utilisé
       lors de la création du cookie. Par défaut, il ne vaut rien.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cache_limiter</literal> spécifie le type de
       contrÙle de cache utilisé pour les pages avec sessions. Les
       valeurs possibles sont : 
       none, nocache, private, private_no_expire, public. Par défaut, il vaut
       <literal>nocache</literal>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.cache_expire</literal> spécifie la durée de
       vie des données de sessions, en minute. Cette option n'a aucune
       conséquence sur le contrÙle de cache. Par défaut, il vaut
       <literal>180</literal> (3 heures).
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>session.use_trans_sid</literal> indique si le
       support transparent du SID est activé, grâce à l'option
       de compilation <link linkend="install.configure.enable-trans-sid">
       <literal>--enable-trans-sid</literal></link>.
       Par défaut, il vaut <literal>1</literal> (activé).
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>url_rewriter.tags</literal> spécifie quels sont les balises 
       HTML qui doivent être réécrites si le support transparent du SID
       est activé. Par défaut, il vaut
       <literal>a=href,area=href,frame=src,input=src,form=fakeentry</literal>
      </simpara>
     </listitem>
    </itemizedlist>
    <note>
     <para>
      La gestion des sessions a été ajoutée en PHP 4.0.
     </para>
    </note>
   </para>
  </partintro>

&reference.session.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
