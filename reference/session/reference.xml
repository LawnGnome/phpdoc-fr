<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
 <reference id="ref.session">
   <title>Sessions</title>
  <titleabbrev>Sessions</titleabbrev>
   
  <partintro>
  
   <section id="session.intro">
    &reftitle.intro;
   <para>
    Le support des sessions de PHP est un moyen de pr&eacute;server
    des donn&eacute;es entre plusieurs acc&egrave;s. Cela vous permet de
    cr&eacute;er des applications personnalis&eacute;es, et d'augmenter 
    l'attractivit&eacute; de votre site.
   </para>
   <para>
    Si vous &ecirc;tes familier avec la gestion de session de la 
    librairie PHPLIB, vous remarquerez que certains concepts
    sont similaires.
   </para>
   <para>
    Chaque visiteur acc&eacute;dant &agrave; votre page web se voit assign&eacute; un
    identifiant unique, appel&eacute; 'identifiant de session'. Il peut
    &ecirc;tre stock&eacute; soit dans un cookie, soit propag&eacute; dans l'URL.
   </para>
   <para>
    Le support des sessions vous permet d'enregistrer un
    nombre illimit&eacute; de variables qui doivent &ecirc;tre pr&eacute;serv&eacute;es
    entre les requ&ecirc;tes. Lorsqu'un visiteur acc&egrave;de &agrave; votre site,
    PHP va v&eacute;rifier automatiquement (si session.auto_start est
    activ&eacute;1)  ou sur demande (explicitement avec 
    <function>session_start</function> ou  implicitement avec 
    <function>session_register</function>) si il existe une
    session du m&ecirc;me nom. Si c'est le cas, l'environnement
    pr&eacute;c&eacute;demment sauv&eacute; sera recr&eacute;&eacute;.
   </para>
   <para>
    Toutes les variables sont s&eacute;rialis&eacute;es apr&egrave;s l'ex&eacute;cution du
    script PHP. Les variables qui sont ind&eacute;finies sont marqu&eacute;es
    comme telles. Lors des acc&egrave;s ult&eacute;rieurs, elles ne seront pas
    d&eacute;finies, jusqu'&agrave; ce que l'utilisateur le fasse.
   </para>
    <note>
     <para>
      La gestion des sessions a &eacute;t&eacute; ajout&eacute;e en PHP 4.0.
     </para>
    </note>
   </section>
   
   <section id="session.security">
    <title>Sessions et s&eacute;curit&eacute;</title>
    <para>
     Lien externe : <ulink url="&url.session-fixation;">Session fixation</ulink>
    </para>
    <para>
     Utiliser les sessions ne signifie pas que les donn&eacute;es de sessions ne
     pourront &ecirc;tre vue que par un seul utilisateur. Il est important de
     garder cela en t&ecirc;te, lorsque vous stockez et affichez des donn&eacute;es
     importantes. Lors que vous stockez des donn&eacute;es dans une session,
     il faut se demander quels seront les probl&egrave;mes pos&eacute;s si quelqu'un
     d'autre acc&egrave;de &agrave; cette information, ou comment votre application
     est affect&eacute;e si la session est en fait celle d'un autre.
    </para>
    <para>
     Par exemple, si quelqu'un usurpe une sessoin, il peut alors poster
     un message dans un forum sous une fausse identit&eacute;e. Quelle est la
     gravit&eacute; de ce probl&egrave;me? Ou bien, il peut acc&egrave;der aux commandes
     d'un client, et m&ecirc;me, modifier son panier d'achat. A priori, c'est
     moins probl&eacute;matique pour un fleuriste que pour un pharmacien.
    </para>
    <para>
     Par cons&eacute;quent, lorsque vous manipulez des donn&eacute;es importantes,
     il faut exploiter d'autres m&eacute;thodes pour d&eacute;cider si une session
     est valide ou pas. Les sessions ne fournissent pas une m&eacute;thode 
     fiable d'authentification.
    </para>
    <para>
     Les sessions reposent sur un identifiant de session, ce qui signifie
     que quelqu'un peut voler cet identifiant, rien qu'en volant l'ID. Ce vol
     peut &ecirc;tre rendu tr&egrave;s difficile, comme par exemple en utilisant les
     cookies, mais en aucun cas cela sera impossible. Les sessions d&eacute;pendent
     aussi sur la discipline de l'utilisateur qui referme son navigateur
     &agrave; la fin de la session pour tour clore proprement.
     De plus, m&ecirc;me les cookies de session peuvent &ecirc;tre surveill&eacute; sur un 
     r&eacute;seau, ou bien not&eacute; par un proxy.
    </para>
   </section>

   <section id="session.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.session.configure;

   &reference.session.ini;

   <section id="session.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.session.constants;

   <section id="session.examples">
    &reftitle.examples;
    <note>
     <para>
      Depuis PHP 4.1.0, <varname>$_SESSION</varname> est disponible comme
      variable globale, au m&ecirc;me titre que <varname>$_POST</varname>,
      <varname>$_GET</varname>, <varname>$_REQUEST</varname>, etc..
      Contrairement &agrave; <varname>$HTTP_SESSION_VARS</varname>,
      <varname>$_SESSION</varname> est toujours globale. Par cons&eacute;quent,  vous
      n'avez pas besoin d'utiliser le mot r&eacute;serv&eacute; 
      <link linkend="language.variables.scope"><command>global</command></link>
      avec <varname>$_SESSION</varname>. Notez que cette documentation
      a &eacute;t&eacute; modifi&eacute;e pour utiliser <varname>$_SESSION</varname>. 
      Vous pouvez toujours le remplacer par <varname>$HTTP_SESSION_VARS</varname> 
      si vous pr&eacute;f&eacute;rez l'ancienne version.
     </para>
     <para>
      Les cl&eacute;s du tableau <varname>$_SESSION</varname> sont sujettes
      aux m&ecirc;mes limitations que les variables PHP habituelles, c'est &agrave; dire
      qu'elles ne peuvent pas commencer par un nombre, mais commencer par
      une lettre ou un soulign&eacute; '_'. Pour plus de d&eacute;tails, reportez vous &agrave;
      la section sur les <link linkend="language.variables">variables</link>.
     </para>
    </note>
    <para>
    Si <link linkend="ini.track-vars"><literal>track_vars</literal></link> est
    activ&eacute; et <link linkend="ini.register-globals"><literal>register_globals</literal></link>
    est d&eacute;sactiv&eacute;, seuls les &eacute;l&eacute;ments du tableau global
    <varname>$_SESSION</varname> contiendront les variables 
    enregistr&eacute;es dans la session. Les variables de sessions relues seront
    uniquement disponibles dans <varname>$_SESSION</varname>.
    </para>
    <para>
     L'utilisation de <varname>$_SESSION</varname> (ou
     <varname>$HTTP_SESSION_VARS</varname> avec PHP 4.0.6 et plus ancien) est 
     recommand&eacute; pour une meilleure s&eacute;curit&eacute; et un code plus facilement
     maintenable. Avec <varname>$_SESSION</varname>, il n'y a pas besoin
     d'utiliser les fonctions <function>session_register</function>,
     <function>session_unregister</function> et 
     <function>session_is_registered</function>. Les variables de sessions
     sont accessibles comme toute autre variable.
     <example>
      <title>
       Enregistrer une variable avec $_SESSION.
      </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// Utilisez $HTTP_SESSION_VARS avec PHP 4.0.6 ou plus ancien
if (!isset($_SESSION['count'])) {
    $_SESSION['compteur'] = 0;
} else {
    $_SESSION['compteur']++;
}
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>
       Retirer une variable de session avec $_SESSION et register_globals inactif.
      </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// Utilisez $HTTP_SESSION_VARS avec PHP 4.0.6 ou plus ancien
unset($_SESSION['compteur']);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>
       Retirer une variable de session avec $_SESSION et register_globals activ&eacute;,
       apr&egrave;s l'avoir enregistr&eacute; avec $_SESSION.
      </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// Avec PHP 4.3 et plus r&eacute;cent, vous pouvez simplement utiliser l'exemple pr&eacute;c&eacute;dent
session_unregister('compteur');
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
    Si <link linkend="ini.register-globals"><literal>register_globals</literal></link>
    est activ&eacute;, alors toutes les variables globales peuvent &ecirc;tre
    enregistr&eacute;es comme variables de session, et toutes les variables de sessions
    seront reconstitu&eacute;es comme variables globales. Comme PHP doit
    savoir quels variables globales sont enregistr&eacute;es comme variables
    de sessions, l'utilisateur doit enregistrer  les variables avec
    <function>session_register</function> tandis que 
    <varname>$HTTP_SESSION_VARS</varname> et <varname>$_SESSION</varname>
    ne n&eacute;cessitent pas <function>session_register</function>.
     <caution>
      <para>
      Si vous utilisez 
      <varname>$HTTP_SESSION_VARS</varname> et <varname>$_SESSION</varname>
      et d&eacute;sactivez <link linkend="ini.register-globals"><literal>register_globals</literal></link>,
      n'utilisez pas <function>session_register</function>,
      <function>session_is_registered</function> et
      <function>session_unregister</function>.
     </para>
     <para>
      Si vous activez <link linkend="ini.register-globals"><literal>register_globals</literal></link>,
       <function>session_unregister</function> doit &ecirc;tre utilis&eacute;, car les
       variables de session sont enregistr&eacute;s comme variables globales lorsque
       les donn&eacute;es de sessions sont relues. Inactiver 
       <link linkend="ini.register-globals"><literal>register_globals</literal></link>
       est recommand&eacute; pour des raisons de s&eacute;curit&eacute; et de performances.
      </para>
     </caution>
     <example>
      <title>
 Enregistrer une variable avec 
      <link linkend="ini.register-globals"><literal>register_globals</literal></link>
      activ&eacute;
      </title>
      <programlisting role="php">
<![CDATA[
<?php
if (!session_is_registered('compteur')) {
    session_register("compteur");
    $compteur = 0;
}
else {
    $compteur++;
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Si <link
     linkend="ini.register-globals"><literal>register_globals</literal></link>
     est activ&eacute;, alors les variables globales et les entr&eacute;es dans le tableau
     <varname>$_SESSION</varname> seront des r&eacute;f&eacute;rences sur la m&ecirc;me valeur pour
     les valeurs qui auront &eacute;t&eacute; enregistr&eacute;es avant le d&eacute;marrage de la session
     (donc, dans les page pr&eacute;c&eacute;dentes).
    </para>
    <para>
     De plus, si vous enregistrez une nouvelle variable avec la fonction
     <function>session_register</function>, l'entr&eacute;e dans l'environnement
     globale et <varname>$_SESSION</varname> ne fera pas de r&eacute;f&eacute;rence vers la 
     m&ecirc;me valeur jusqu'&agrave; la prochaine utilisation de 
     <function>session_start</function> (ceci s'applique &agrave; PHP 4.2 est
     avant seulement). C'est &agrave; dire qu'une modification dans les variables
     globales ne seront pas r&eacute;percut&eacute;s dans les entr&eacute;es de <varname>$_SESSION</varname>.
     Il est peu probable que cela ait un impact en pratique, et de plus,
     cela a &eacute;t&eacute; corrig&eacute; en PHP 4.3.
    </para>
   </section>
    
   <section id="session.idpassing">
    <title>Passer l'identifiant de session (session ID)</title>
   <para>
    Il y a deux m&eacute;thodes de propagation de l'identifiant de session : 
    <itemizedlist>
     <listitem>
      <simpara>
       Cookies
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Param&egrave;ter URL
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
    <para>
     The session module supports both methods. Cookies are optimal, but
     since they are not reliable (clients are not bound to accept
     them), we cannot rely on them. The second method embeds the
     session id directly into URLs.
    </para>
   <para>
    Le module de session supporte les deux m&eacute;thodes. Les cookies sont 
    optimaux, mais comme ils ne sont pas s&ucirc;rs (tous les internautes 
    ne les acceptent pas), ils ne sont pas fiables. La seconde
    m&eacute;thode place l'identifiant de session directement dans les URL.
   </para>
   <para>
    PHP est capable de faire cela de mani&egrave;re transparente, lorsqu'il est compil&eacute;
    avec l'option <link linkend="install.configure.enable-trans-sid">
    <literal>--enable-trans-sid</literal></link>. Si vous activez
    cette option, les URL relatives seront modifi&eacute;es pour contenir
    l'identifiant de session automatiquement. Alternativement,
    vous pouvez utiliser la constante <constant>SID</constant>, qui est
    d&eacute;finie, si le client n'a pas envoy&eacute; le cookie appropri&eacute;. 
    <constant>SID</constant> est soit de la forme 
    <literal>session_name=session_id</literal> ou une cha&icirc;ne vide.
    <note>
     <para>
     L'option <link linkend="misc.configuration">arg_separator.output</link>
     de &php.ini; vous permet de personnaliser le s&eacute;parateur d'arguments.
     </para>
    </note> 
   </para>
   <para>
    L'exemple suivant vous montre comment enregistrer une variable et comment
    r&eacute;aliser un lien correct avec une autre page, avec <constant>SID</constant>.
     <example>
      <title>Compter le nombre de hits d'un utilisateur sur une page</title>
      <programlisting role="php">
<![CDATA[
<?php
if (!session_is_registered('compteur')) {
    session_register('compteur');
    $compteur = 1;
}
else {
    $compteur++;
}
?>

Bonjour visiteur, vous avez vu cette page <?php echo $compteur; ?> fois.<p>;

Pour continuer, <A HREF="nextpage.php?<?php echo SID?>">cliquez ici</A>.
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <literal>&lt;?php echo SID?&gt;</literal>
     (ou bien <literal>&lt;?=SID?&gt;</literal> peut &ecirc;tre utilis&eacute; si les
     <link linkend="ini.short-open-tag">short_open_tag</link> sont actifs) est 
     n&eacute;cessaire pour pr&eacute;server l'identifiant de session dans le cas o&ugrave;
     l'utilisateur a d&eacute;sactiv&eacute; les cookies.
     <literal>&lt;? echo SID?&gt;</literal> n'est pas n&eacute;cessaire, si
     <link linkend="install.configure.enable-trans-sid">
     <literal>--enable-trans-sid</literal></link> a &eacute;t&eacute; 
     activ&eacute; &agrave; la compilation de PHP.
   </para>
    <note>
     <para>
     Les URLS non relatives sont consid&eacute;r&eacute;es comme externes au site, et ne
     recevront pas le SID, car c'est une fuite d'information vers un autre
     site (envoi d'informations importantes).
     </para>
    </note>
   </section>
   
   <section id="session.customhandler">
    <title>Gestion personnalis&eacute;e des sessions</title>
    <para>
    Pour impl&eacute;menter un stockage en base de donn&eacute;es, ou toute autre m&eacute;thode,
    vous aurez besoin de la fonction <function>session_set_save_handler</function> pour
    param&eacute;trer vos propres fonctions de stockage.
    </para>
   </section>
  </partintro>

&reference.session.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

