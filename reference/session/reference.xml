<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.14 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: partial -->
 <reference id="ref.session">
   <title>Sessions</title>
  <titleabbrev>Sessions</titleabbrev>
   
  <partintro>
  
   <section id="session.intro">
    &reftitle.intro;
   <para>
    Le support des sessions de PHP est un moyen de préserver
    des données entre plusieurs accès. Cela vous permet de
    créer des applications personnalisées, et d'augmenter 
    l'attractivité de votre site.
   </para>
   <para>
    Si vous êtes familier avec la gestion de session de la 
    librairie PHPLIB, vous remarquerez que certains concepts
    sont similaires.
   </para>
   <para>
    Chaque visiteur accédant à votre page web se voit assigné un
    identifiant unique, appelé 'identifiant de session'. Il peut
    être stocké soit dans un cookie, soit propagé dans l'URL.
   </para>
   <para>
    Le support des sessions vous permet d'enregistrer un
    nombre illimité de variables qui doivent être préservées
    entre les requêtes. Lorsqu'un visiteur accède à votre site,
    PHP va vérifier automatiquement (si session.auto_start est
    activé1)  ou sur demande (explicitement avec 
    <function>session_start</function> ou  implicitement avec 
    <function>session_register</function>) si il existe une
    session du même nom. Si c'est le cas, l'environnement
    précédemment sauvé sera recréé.
   </para>
   <para>
    Toutes les variables sont sérialisées après l'exécution du
    script PHP. Les variables qui sont indéfinies sont marquées
    comme telles. Lors des accès ultérieurs, elles ne seront pas
    définies, jusqu'à ce que l'utilisateur le fasse.
   </para>
    <note>
     <para>
      La gestion des sessions a été ajoutée en PHP 4.0.
     </para>
    </note>
   </section>
   
   <section id="session.security">
    <title>Sessions et sécurité</title>
    <para>
     Lien externe : <ulink url="&url.session-fixation;">Session fixation</ulink>
    </para>
    <para>
     Utiliser les sessions ne signifie pas que les données de session ne
     pourront être vue que par un seul utilisateur. Il est important de
     garder cela en tête, lorsque vous stockez et affichez des données
     importantes. Lorsque vous stockez des données dans une session,
     il faut se demander quels seront les problèmes posés si quelqu'un
     d'autre accède à cette information, ou comment votre application
     est affectée si la session est en fait celle d'un autre.
    </para>
    <para>
     Par exemple, si quelqu'un usurpe une session, il peut alors poster
     un message dans un forum sous une fausse identitée. Quelle est la
     gravité de ce problème? Ou bien, il peut accèder aux commandes
     d'un client, et même, modifier son panier d'achat. A priori, c'est
     moins problématique pour un fleuriste que pour un pharmacien.
    </para>
    <para>
     Par conséquent, lorsque vous manipulez des données importantes,
     il faut exploiter d'autres méthodes pour décider si une session
     est valide ou pas. Les sessions ne fournissent pas une méthode 
     fiable d'authentification.
    </para>
    <para>
     Les sessions reposent sur un identifiant de session, ce qui signifie
     que quelqu'un peut voler cet identifiant, rien qu'en volant l'ID. Ce vol
     peut être rendu très difficile, comme par exemple en utilisant les
     cookies, mais en aucun cas cela sera impossible. Les sessions dépendent
     aussi de la discipline de l'utilisateur qui referme son navigateur
     à la fin de la session pour tout clore proprement.
     De plus, même les cookies de session peuvent être
     surveillés sur un réseau, ou bien notés par un proxy.
    </para>
   </section>

   <section id="session.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.session.configure;

   &reference.session.ini;

   <section id="session.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.session.constants;

   <section id="session.examples">
    &reftitle.examples;
    <note>
     <para>
      Depuis PHP 4.1.0, <varname>$_SESSION</varname> est disponible comme
      variable globale, au même titre que <varname>$_POST</varname>,
      <varname>$_GET</varname>, <varname>$_REQUEST</varname>, etc..
      Contrairement à <varname>$HTTP_SESSION_VARS</varname>,
      <varname>$_SESSION</varname> est toujours globale. Par conséquent,  vous
      n'avez pas besoin d'utiliser le mot réservé 
      <link linkend="language.variables.scope"><command>global</command></link>
      avec <varname>$_SESSION</varname>. Notez que cette documentation
      a été modifiée pour utiliser <varname>$_SESSION</varname>. 
      Vous pouvez toujours le remplacer par <varname>$HTTP_SESSION_VARS</varname> 
      si vous préférez l'ancienne version.
     </para>
     <para>
      Les clés du tableau <varname>$_SESSION</varname> sont sujettes
      aux mêmes limitations que les variables PHP habituelles, c'est à dire
      qu'elles ne peuvent pas commencer par un nombre, mais commencer par
      une lettre ou un souligné '_'. Pour plus de détails, reportez vous à
      la section sur les <link linkend="language.variables">variables</link>.
     </para>
    </note>
    <para>
    Si <link linkend="ini.track-vars"><literal>track_vars</literal></link> est
    activé et <link linkend="ini.register-globals"><literal>register_globals</literal></link>
    est désactivé, seuls les éléments du tableau global
    <varname>$_SESSION</varname> contiendront les variables 
    enregistrées dans la session. Les variables de sessions relues seront
    uniquement disponibles dans <varname>$_SESSION</varname>.
    </para>
    <para>
     L'utilisation de <varname>$_SESSION</varname> (ou
     <varname>$HTTP_SESSION_VARS</varname> avec PHP 4.0.6 et plus ancien) est 
     recommandé pour une meilleure sécurité et un code plus facilement
     maintenable. Avec <varname>$_SESSION</varname>, il n'y a pas besoin
     d'utiliser les fonctions <function>session_register</function>,
     <function>session_unregister</function> et 
     <function>session_is_registered</function>. Les variables de sessions
     sont accessibles comme toute autre variable.
     <example>
      <title>
       Enregistrer une variable avec $_SESSION.
      </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// Utilisez $HTTP_SESSION_VARS avec PHP 4.0.6 ou plus ancien
if (!isset($_SESSION['count'])) {
    $_SESSION['compteur'] = 0;
} else {
    $_SESSION['compteur']++;
}
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>
       Retirer une variable de session avec $_SESSION et register_globals inactif.
      </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// Utilisez $HTTP_SESSION_VARS avec PHP 4.0.6 ou plus ancien
unset($_SESSION['compteur']);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>
       Retirer une variable de session avec $_SESSION et register_globals activé,
       après l'avoir enregistré avec $_SESSION.
      </title>
      <programlisting role="php">
<![CDATA[
<?php
session_start();
// Avec PHP 4.3 et plus récent, vous pouvez simplement utiliser l'exemple précédent
session_unregister('compteur');
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
    Si <link linkend="ini.register-globals"><literal>register_globals</literal></link>
    est activé, alors toutes les variables globales peuvent être
    enregistrées comme variables de session, et toutes les variables de sessions
    seront reconstituées comme variables globales. Comme PHP doit
    savoir quels variables globales sont enregistrées comme variables
    de sessions, l'utilisateur doit enregistrer  les variables avec
    <function>session_register</function> tandis que 
    <varname>$HTTP_SESSION_VARS</varname> et <varname>$_SESSION</varname>
    ne nécessitent pas <function>session_register</function>.
     <caution>
      <para>
      Si vous utilisez 
      <varname>$HTTP_SESSION_VARS</varname> et <varname>$_SESSION</varname>
      et désactivez <link linkend="ini.register-globals"><literal>register_globals</literal></link>,
      n'utilisez pas <function>session_register</function>,
      <function>session_is_registered</function> et
      <function>session_unregister</function>.
     </para>
     <para>
      Si vous activez <link linkend="ini.register-globals"><literal>register_globals</literal></link>,
       <function>session_unregister</function> doit être utilisé, car les
       variables de session sont enregistrés comme variables globales lorsque
       les données de sessions sont relues. Désactiver 
       <link linkend="ini.register-globals"><literal>register_globals</literal></link>
       est recommandé pour des raisons de sécurité et de performances.
      </para>
     </caution>
     <example>
      <title>
 Enregistrer une variable avec 
      <link linkend="ini.register-globals"><literal>register_globals</literal></link>
      activé
      </title>
      <programlisting role="php">
<![CDATA[
<?php
if (!session_is_registered('compteur')) {
    session_register("compteur");
    $compteur = 0;
}
else {
    $compteur++;
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Si <link
     linkend="ini.register-globals"><literal>register_globals</literal></link>
     est activé, alors les variables globales et les entrées dans le tableau
     <varname>$_SESSION</varname> seront des références sur la même valeur pour
     les valeurs qui auront été enregistrées avant le démarrage de la session
     (donc, dans les page précédentes).
    </para>
    <para>
     De plus, si vous enregistrez une nouvelle variable avec la fonction
     <function>session_register</function>, l'entrée dans l'environnement
     globale et <varname>$_SESSION</varname> ne fera pas de référence vers la 
     même valeur jusqu'à la prochaine utilisation de 
     <function>session_start</function> (ceci s'applique à PHP 4.2 est
     avant seulement). C'est à dire qu'une modification dans les variables
     globales ne seront pas répercutés dans les entrées de <varname>$_SESSION</varname>.
     Il est peu probable que cela ait un impact en pratique, et de plus,
     cela a été corrigé en PHP 4.3.
    </para>
   </section>
    
   <section id="session.idpassing">
    <title>Passer l'identifiant de session (session ID)</title>
   <para>
    Il y a deux méthodes de propagation de l'identifiant de session : 
    <itemizedlist>
     <listitem>
      <simpara>
       Cookies
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Par URL
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Le module de session supporte les deux méthodes. Les cookies sont 
    optimaux, mais comme ils ne sont pas sûrs (tous les internautes 
    ne les acceptent pas), ils ne sont pas fiables. La seconde
    méthode place l'identifiant de session directement dans les URL.
   </para>
   <para>
    PHP est capable de faire cela de manière transparente, lorsqu'il est compilé
    avec l'option <link linkend="install.configure.enable-trans-sid">
    <literal>--enable-trans-sid</literal></link>. Si vous activez
    cette option, les URL relatives seront modifiées pour contenir
    l'identifiant de session automatiquement. Alternativement,
    vous pouvez utiliser la constante <constant>SID</constant>, qui est
    définie, si le client n'a pas envoyé le cookie approprié. 
    <constant>SID</constant> est soit de la forme 
    <literal>session_name=session_id</literal> ou une chaîne vide.
    <note>
     <para>
     L'option <link linkend="misc.configuration">arg_separator.output</link>
     de &php.ini; vous permet de personnaliser le séparateur d'arguments.
     </para>
    </note> 
   </para>
   <para>
    L'exemple suivant vous montre comment enregistrer une variable et comment
    réaliser un lien correct avec une autre page, avec <constant>SID</constant>.
     <example>
      <title>Compter le nombre de hits d'un utilisateur sur une page</title>
      <programlisting role="php">
<![CDATA[
<?php
if (!session_is_registered('compteur')) {
    session_register('compteur');
    $compteur = 1;
}
else {
    $compteur++;
}
?>

Bonjour visiteur, vous avez vu cette page <?php echo $compteur; ?> fois.<p>;

Pour continuer, <A HREF="nextpage.php?<?php echo SID?>">cliquez ici</A>.
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <literal>&lt;?php echo SID?&gt;</literal>
     (ou bien <literal>&lt;?=SID?&gt;</literal> peut être utilisé si les
     <link linkend="ini.short-open-tag">short_open_tag</link> sont actifs) est 
     nécessaire pour préserver l'identifiant de session dans le cas où
     l'utilisateur a désactivé les cookies.
     <literal>&lt;? echo SID?&gt;</literal> n'est pas nécessaire, si
     <link linkend="install.configure.enable-trans-sid">
     <literal>--enable-trans-sid</literal></link> a été 
     activé à la compilation de PHP.
   </para>
    <note>
     <para>
     Les URLS non relatives sont considérées comme externes au site, et ne
     recevront pas le SID, car c'est une fuite d'information vers un autre
     site (envoi d'informations importantes).
     </para>
    </note>
   </section>
   
   <section id="session.customhandler">
    <title>Gestion personnalisée des sessions</title>
    <para>
    Pour implémenter un stockage en base de données, ou toute autre méthode,
    vous aurez besoin de la fonction <function>session_set_save_handler</function> pour
    paramétrer vos propres fonctions de stockage.
    </para>
   </section>
  </partintro>

&reference.session.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

