<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/sem.xml, last change in rev 1.2 -->
<!-- last change to 'sem-acquire' in en/ tree in rev 1.2 -->
  <refentry id="function.sem-acquire">
   <refnamediv>
    <refname>sem_acquire</refname>
    <refpurpose>R&eacute;serve un s&eacute;maphore</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>bool</type><methodname>sem_acquire</methodname>
      <methodparam><type>int</type><parameter>sem_identifier</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>sem_acquire</function> se bloque (si n&eacute;cessaire)
     jusqu'&agrave; ce que le s&eacute;maphore puisse &ecirc;tre
     r&eacute;serv&eacute;. Un processus qui tente de r&eacute;server
     un s&eacute;maphore qu'il a d&eacute;j&agrave; reserv&eacute;
     restera en attente ind&eacute;finie, si cette acquisition exc&egrave;de
     le nombre max_acquire de r&eacute;servation simultan&eacute;e.
    </para>
    <para>
     &return.success;
    </para>
    <para>
     A la fin d'un script, tous les s&eacute;maphores r&eacute;serv&eacute;s
     mais non explicitement lib&eacute;r&eacute;s seront lib&eacute;r&eacute;s
     automatiquement, et une alerte sera g&eacute;n&eacute;r&eacute;e.
    </para>
    <para>
     Voir aussi
     <function>sem_get</function> et
     <function>sem_release</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
