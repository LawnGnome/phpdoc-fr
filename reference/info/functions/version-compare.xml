<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.16 $ -->
<!-- EN-Revision: 1.13 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.version-compare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>version_compare</refname>
  <refpurpose>Compare deux chaînes de versions au format des versions &php;</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>version_compare</methodname>
   <methodparam><type>string</type><parameter>version1</parameter></methodparam>
   <methodparam><type>string</type><parameter>version2</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>operator</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>version_compare</function> compare les deux versions de &php;
   standardisées. Cette fonction est pratique pour les programmes qui doivent
   vérifier la version de &php; qui les fait tourner.
  </para>
  <para>
   <function>version_compare</function> remplace dans un premier temps
   <literal>_</literal>, <literal>-</literal> et <literal>+</literal> par un
   point (<literal>.</literal>) dans les chaînes de version et insère aussi des
   points avant et après tout caractère non-numérique pour que, par exemple,
   '4.3.5RC1' devienne '4.3.5.RC.1'. Ensuite, elle découpe les résultats comme
   si vous utilisiez explode('.', $ver). Puis, elle compare les morceaux en
   allant de gauche à droite. Si une part contient des caractères aplhabétiques,
   ils sont gérés dans l'ordre suivant :
   <literal>dev</literal> &lt; <literal>alpha</literal> =
   <literal>a</literal> &lt; <literal>beta</literal> =
   <literal>b</literal> &lt; <literal>RC</literal> &lt;
   <literal>pl</literal>. De cette façon, vous pouvez comparer non seulement des
   versions de différents niveaux, comme '4.1' et '4.1.2', mais aussi des versions
   de développement à la mode de &php;, à n'importe quel stade.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>version1</parameter></term>
     <listitem>
      <para>
       Premier numéro de version.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>version2</parameter></term>
     <listitem>
      <para>
       Second numéro de version.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>operator</parameter></term>
     <listitem>
      <para>
        Si vous spécifiez le troisième argument optionnel <parameter>operator</parameter>,
        vous pouvez tester une relation particulière. Les opérateurs possibles sont :
        <literal>&lt;</literal>,
       <literal>lt</literal>, <literal>&lt;=</literal>,
       <literal>le</literal>, <literal>&gt;</literal>,
       <literal>gt</literal>, <literal>&gt;=</literal>,
       <literal>ge</literal>, <literal>==</literal>,
       <literal>=</literal>, <literal>eq</literal>,
       <literal>!=</literal>, <literal>&lt;&gt;</literal>,
       <literal>ne</literal>. En utilisant cet argument,
       la fonction retournera &true; si la relation est vérifiée et &false; sinon.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne -1 si <parameter>version1</parameter>
   est inférieure à <parameter>version2</parameter>,
   &zero; si elles sont égales, et +1 dans le reste des cas.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>version_compare</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Affiche -1
echo version_compare("4.0.4", "4.0.6");

// Tout ce qui suit retourne 1
echo version_compare("4.0.4", "4.0.6", "<");
echo version_compare("4.0.6", "4.0.6", "eq");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La constante <constant>PHP_VERSION</constant> contient la version courante de &php;.
   </para>
  </note>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->