<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 324522 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="runkit.sandbox-parent" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Runkit_Sandbox_Parent</refname>
  <refpurpose>
   Classe Anti-Sandbox Runkit
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;

  <methodsynopsis>
   <type>void</type><methodname>Runkit_Sandbox_Parent::__construct</methodname>
   <void/>
  </methodsynopsis>

  <para>
   L'instanciation de la classe <classname>Runkit_Sandbox_Parent</classname>
   à l'intérieure d'un environnement sandbox créé à partir de la classe 
   <classname>Runkit_Sandbox</classname> fournit certains moyens (contrôlés)
   pour un sandbox fils pour accéder à son parent.
  </para>

  &note.runkit.sandbox;

  <para>
   Afin de faire fonctionner une des fonctionnalités de
   <classname>Runkit_Sandbox_Parent</classname>, le support doit être activé
   sur une base de chaque sandbox en activant le drapeau
   <literal>parent_access</literal> à partir du contexte parent.
  </para>

  <example>
   <title>Travailler avec des variables dans un sandbox</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();
$sandbox['parent_access'] = true;
?>
]]>
   </programlisting>
  </example>

 </refsect1>

 <refsect1 role="variables">
  <title>Accéder les Variables du Parent</title>
  <para>
   Comme les accès des variables de sandbox, les variables de parent sandbox
   devraient être lues et écrites à partir des propriétés de la classe
   <classname>Runkit_Sandbox_Parent</classname>. L'accès en lecture aux
   variables parentes devraient être activé avec la configuration
   <literal>parent_read</literal> (en plus de la base de configuration
   <literal>parent_access</literal>). L'accès en écriture est activé avec la
   configuration <literal>parent_write</literal>.
  </para>

  <para>
   La portée des variables est différente de l'accès aux variables enfants de
   sandbox; elle n'est pas limitée au variables globales seulement. En
   configurant la configuration <literal>parent_scope</literal> pour un entier
   approprié, les autres portées dans la pile active pourraient être
   inspectée. Une valeur de 0 (Défaut) autorisera l'accès direct aux variables
   dans la portée globale. 1 pointera l'accès des variables à n'importe
   quelles variables dont la portée était active au moment ou le bloc courant
   du code sandbox était exécuté. Des valeurs plus élevées font reculer à travers
   les fonctions qui ont appelées d'autres fonctions qui menent au code sandbox
   en train d'être exécuté et qui essaie d'accéder à ses propres variables
   parentes.
  </para>

  <example>
   <title>Accès aux variables parentes</title>
   <programlisting role="php">
<![CDATA[
<?php
$php = new Runkit_Sandbox();
$php['parent_access'] = true;
$php['parent_read'] = true;

$test = "Global";

$php->eval('$PARENT = new Runkit_Sandbox_Parent;');

$php['parent_scope'] = 0;
one();

$php['parent_scope'] = 1;
one();

$php['parent_scope'] = 2;
one();

$php['parent_scope'] = 3;
one();

$php['parent_scope'] = 4;
one();

$php['parent_scope'] = 5;
one();

function un() {
    $test = "un()";
    two();
}

function deux() {
    $test = "deux()";
    three();
}

function trois() {
    $test = "trois()";
    $GLOBALS['php']->eval('var_dump($PARENT->test);');
}
?>
]]>
   </programlisting>
  </example>
  &example.outputs;
  <screen>
<![CDATA[
string(6) "Global"
string(7) "trois()"
string(5) "deux()"
string(5) "un()"
string(6) "Global"
string(6) "Global"
]]>
  </screen>
 </refsect1>

 <refsect1 role="functions">
  <title>Appel de Fonctions Parentes</title>
  <para>
   Comme l'accès avec sandbox, un sandbox peut accéder ses fonctions parentes
   si les configurations adéquates ont été activées.
   L'activation de <literal>parent_call</literal> autorisera le sandbox
   d'appeler toutes les fonctions disponibles à la portée parente. Les
   constructions de langage sont chacune contrôlées par ses propres
   configurations :
   <function>print</function>
   et <function>echo</function> sont
   activées avec <literal>parent_echo</literal>.
   <function>die</function> et
   <function>exit</function> sont
   activées avec <literal>parent_die</literal>.
   <function>eval</function> est activées avec <literal>parent_eval</literal>
   tandis que <function>include</function>,
   <function>include_once</function>,
   <function>require</function> et
   <function>require_once</function>
   sont activées avec <literal>parent_include</literal>.
  </para>

 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
