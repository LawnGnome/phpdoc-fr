<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.7 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: no -->
<refentry id="runkit.sandbox">
 <refnamediv>
  <refname>Runkit_Sandbox</refname>
  <refpurpose>
   Classe Runkit Sandbox -- Machine Virtuelle &php;
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;

  <para>
   L'instanciation de la classe Runkit_Sandbox crée un nouveau thread avec sa
   propre portée et sa pile de programme. En utilisant les options passées au
   constructeur, cet environnement peut être restreint à un sous-ensemble pour
   lequel l'interpréteur primaire peut exécuter et fournir un environnement
   plus sûr pour l'exécution de code utilisateur.
  </para>

  &note.runkit.sandbox;
 </refsect1>

 <refsect1 role="constructor">
  <title>Constructeur</title>
  <methodsynopsis>
   <type>void</type><methodname>Runkit_Sandbox::__construct</methodname>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>

  <para>
   <parameter>option</parameter> est un tableau associatif contenant n'importe
   quelle combinaison des options ini listées ci-dessous.
  </para>

  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>safe_mode</parameter></term>
     <listitem>
      <para>
       Si un script extérieur qui est instancié avec la classe Runkit_Sandbox
       est configuré avec <literal>safe_mode = off</literal>, alors safe_mod
       devrait être activé pour l'environnement sandbox. Cette configuration
       ne peut être utilisée pour désactiver safe_mode lorsque safe_mode est déjà
       activé dans le script extérieur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>open_basedir</parameter></term>
     <listitem>
      <para>
       <parameter>open_basedir</parameter> peut être fixé à n'importe quel
       chemin sous la configuration courante de open_basedir. Si open_basedir
       n'est pas fixé dans la portée globale, alors il est assumé qu'il est
       dans le répertoire root et peut être fixé à n'importe quelle autre
       emplacement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>allow_url_fopen</parameter></term>
     <listitem>
      <para>
       Comme <parameter>safe_mode</parameter>, cette configuration peut
       seulement être faite plus restrictive, dans ce cas, en mettant &false;
       lorsque la valeur était précédemment &true;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>disable_functions</parameter></term>
     <listitem>
      <para>
       Liste de fonctions séparées par des virgules à désactiver dans le
       sous-interpréteur sandbox.
       Cette liste ne nécessite pas de contenir le nom des fonctions déjà
       désactivées, elles resteront désactivées même si elles ne sont pas listées.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>disable_classes</parameter></term>
     <listitem>
      <para>
       Liste de classes séparées par des virgules à désactiver dans le
       sous-interpréteur sandbox.
       Cette liste ne nécessite pas de contenir le nom des classes déjà
       désactivées, elles resteront désactivées même si elles ne sont pas listées.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>runkit.superglobal</parameter></term>
     <listitem>
      <para>
       Liste des variables qui seront traitées en tant que superglobales dans
       le sous-interpréteur sandbox.
       Ces variables seront utilisées en plus de celles définies à l'interne
       ou à l'aide de la configuration runkit.superglobal.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <example>
   <title>Instanciation d'un sandbox restreint</title>
   <programlisting role="php">
<![CDATA[
<?php
$options = array(
  'safe_mode'=>true,
  'open_basedir'=>'/var/www/users/jdoe/',
  'allow_url_fopen'=>'false',
  'disable_functions'=>'exec,shell_exec,passthru,system',
  'disable_classes'=>'myAppClass');
$sandbox = new Runkit_Sandbox($options);
/* Configurations ini non protégées sont fixées normalement */
$sandbox->ini_set('html_errors',true);
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="variables">
  <title>Accès aux Variables</title>
  <para>
   Toutes les variables dans la portée globale de l'environnement sandbox sont
   accessibles comme étant des propriétés de l'objet sandbox. La première
   chose à noter, c'est puisque la manière de gestion de la mémoire entre les
   deux threads est faite que les objets et les variables de ressources ne peuvent
   pas, jusqu'à présent, être échangées entre les interpréteurs. De plus, tous
   les tableaux sont copiés au complet et toutes références seront perdues.
   Cela veut aussi dire que les références entre les interpréteurs ne sont pas
   possibles.
  </para>

  <example>
   <title>Utilisation des variables dans sandbox</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();

$sandbox->foo = 'bar';
$sandbox->eval('echo "$foo\n"; $bar = $foo . "baz";');
echo "{$sandbox->bar}\n";
if (isset($sandbox->foo)) unset($sandbox->foo);
$sandbox->eval('var_dump(isset($foo));');
?>
]]>
   </programlisting>
  </example>
  <screen>
<![CDATA[
bar
barbaz
bool(false)
]]>
  </screen>
 </refsect1>

 <refsect1 role="variables">
  <title>Appel de Fonctions &php;</title>
  <para>
   Toute fonction définie dans le sandbox peut être appelée en tant que
   méthode sur l'objet sandbox. Ceci inclue aussi quelques constructions de
   pseudo-fonctions : <function>eval</function>
   <function>include</function>, <function>include_once</function>,
   <function>require</function> et <function>require_once</function>. ###
   Les fonctions absentes sont notamment les constructions de langage :
   <function>echo</function>, <function>print</function>,
   <function>die</function> et <function>exit</function>.
   Ces fonctions ne sont pas simples et évite la confusion, car
   la plupart du temps, elles seraient employées incorrectement.
  </para>

  <example>
   <title>Appel de fonctions sandbox</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();

echo $sandbox->str_replace('a','f','abc');
?>
]]>
   </programlisting>
  </example>
  <screen>
<![CDATA[
fbc
]]>
  </screen>

  <para>
   Lors du passage d'arguments à une fonction sandbox, les arguments sont pris
   à partir de l'extérieur de l'instance de &php;. Si vous voulez passer les
   arguments à la portée de sandbox, soyez assuré de les accéder comme étant
   des propriétés de l'objet sandbox comme montré plus haut.
  </para>

  <example>
   <title>Passage d'arguments aux fonctions sandbox</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();

$foo = 'bar';
$sandbox->foo = 'baz';
echo $sandbox->str_replace('a',$foo,'a');
echo $sandbox->str_replace('a',$sandbox->foo,'a');
?>
]]>
   </programlisting>
  </example>
  <screen>
<![CDATA[
bar
baz
]]>
  </screen>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
