<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 324522 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="runkit.sandbox" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Runkit_Sandbox</refname>
  <refpurpose>
   Classe Runkit Sandbox -- Machine Virtuelle PHP
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;

  <para>
   L'instanciation de la classe <classname>Runkit_Sandbox</classname> crée un
   nouveau thread avec sa propre portée et sa pile de programme. En utilisant
   les options passées au constructeur, cet environnement peut être restreint
   à un sous-ensemble pour lequel l'interpréteur primaire peut exécuter et
   fournir un environnement plus sûr pour l'exécution de code utilisateur.
  </para>

  &note.runkit.sandbox;
 </refsect1>

 <refsect1 role="constructor">
  &reftitle.constructor;
  <methodsynopsis>
   <type>void</type><methodname>Runkit_Sandbox::__construct</methodname>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>

  <para>
   <parameter>options</parameter> est un tableau associatif contenant n'importe
   quelle combinaison des options ini listées ci-dessous.
  </para>

  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>safe_mode</parameter></term>
     <listitem>
      <para>
       Si un script extérieur qui est instancié avec la classe
       <classname>Runkit_Sandbox</classname>
       est configuré avec <literal>safe_mode = off</literal>, alors safe_mod
       devrait être activé pour l'environnement sandbox. Cette configuration
       ne peut être utilisée pour désactiver <literal>safe_mode</literal>
       lorsque safe_mode est déjà activé dans le script extérieur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>safe_mode_gid</parameter></term>
     <listitem>
      <para>
       Si le script extérieur qui est instancié avec la classe
       <classname>Runkit_Sandbox</classname> est configuré avec
       <literal>safe_mode_gid = on</literal>, alors safe_mod_gid devrait être
       désactivé pour l'environnement sandbox. Cette configuration ne peut
       être utilisée pour activer <literal>safe_mode_gid</literal> lorsque
       c'est déjà désactivé dans le script extérieur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>safe_mode_include_dir</parameter></term>
     <listitem>
      <para>
       Si le script extérieur qui est instancié avec la classe
       <classname>Runkit_Sandbox</classname> est configuré avec
       <literal>safe_mode_include_dir</literal>, alors un nouveau
       safe_mode_include_dir devrait être fixé pour les environnements de
       sandbox sous la valeur actuellement définie. safe_mode_include_dir peut
       aussi être supprimé pour indiquer que l'évitement de cette
       fonctionnalité est désactivé. Si safe_mode_include_dir était vide dans
       le script extérieur, mais safe_mod n'était pas activé, alors n'importe
       quel safe_mode_include_dir arbitraire peut être fixé en activant le
       safe_mode.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>open_basedir</parameter></term>
     <listitem>
      <para>
       <parameter>open_basedir</parameter> peut être fixé à n'importe quel
       chemin sous la configuration courante de
       <literal>open_basedir</literal>. Si open_basedir n'est pas fixé dans
       la portée globale, alors il est assumé qu'il est dans le répertoire
       root et peut être fixé à n'importe quelle autre emplacement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>allow_url_fopen</parameter></term>
     <listitem>
      <para>
       Comme <parameter>safe_mode</parameter>, cette configuration peut
       seulement être faite plus restrictive, dans ce cas, en mettant &false;
       lorsque la valeur était précédemment &true;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>disable_functions</parameter></term>
     <listitem>
      <para>
       Liste de fonctions séparées par des virgules à désactiver dans le
       sous-interpréteur sandbox.
       Cette liste ne nécessite pas de contenir le nom des fonctions déjà
       désactivées, elles resteront désactivées même si elles ne sont pas listées.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>disable_classes</parameter></term>
     <listitem>
      <para>
       Liste de classes séparées par des virgules à désactiver dans le
       sous-interpréteur sandbox.
       Cette liste ne nécessite pas de contenir le nom des classes déjà
       désactivées, elles resteront désactivées même si elles ne sont pas listées.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>runkit.superglobal</parameter></term>
     <listitem>
      <para>
       Liste des variables qui seront traitées en tant que superglobales dans
       le sous-interpréteur sandbox.
       Ces variables seront utilisées en plus de celles définies à l'interne
       ou à l'aide de la configuration runkit.superglobal.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>runkit.internal_override</parameter></term>
     <listitem>
      <para>
       L'option ini <literal>runkit.internal_override</literal> devrait être
       désactivée (mais non réactivée) à l'intérieur des sandbox.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <example>
   <title>Instanciation d'un sandbox restreint</title>
   <programlisting role="php">
<![CDATA[
<?php
$options = array(
  'safe_mode'=>true,
  'open_basedir'=>'/var/www/users/jdoe/',
  'allow_url_fopen'=>'false',
  'disable_functions'=>'exec,shell_exec,passthru,system',
  'disable_classes'=>'myAppClass');
$sandbox = new Runkit_Sandbox($options);
/* Configurations ini non protégées sont fixées normalement */
$sandbox->ini_set('html_errors',true);
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="variables">
  <title>Portée des variables</title>
  <para>
   Toutes les variables dans la portée globale de l'environnement sandbox sont
   accessibles comme étant des propriétés de l'objet sandbox. La première
   chose à noter, c'est puisque la manière de gestion de la mémoire entre les
   deux threads est faite que les objets et les variables de ressources ne peuvent
   pas, jusqu'à présent, être échangées entre les interpréteurs. De plus, tous
   les tableaux sont copiés au complet et toutes références seront perdues.
   Cela veut aussi dire que les références entre les interpréteurs ne sont pas
   possibles.
  </para>

  <example>
   <title>Utilisation des variables dans sandbox</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();

$sandbox->foo = 'bar';
$sandbox->eval('echo "$foo\n"; $bar = $foo . "baz";');
echo "{$sandbox->bar}\n";
if (isset($sandbox->foo)) unset($sandbox->foo);
$sandbox->eval('var_dump(isset($foo));');
?>
]]>
   </programlisting>
  </example>
  &example.outputs;
  <screen>
<![CDATA[
bar
barbaz
bool(false)
]]>
  </screen>
 </refsect1>

 <refsect1 role="functions">
  <title>Appel de Fonctions PHP</title>
  <para>
   Toute fonction définie dans le sandbox peut être appelée en tant que
   méthode sur l'objet sandbox. Ceci inclut aussi quelques constructions de
   pseudo-fonctions : 
   pseudo-function language constructs: 
   <function>eval</function>,
   <link linkend="function.include"><literal>include</literal></link>,
   <link linkend="function.include-once"><literal>include_once</literal></link>,
   <link linkend="function.require"><literal>require</literal></link>,
   <link linkend="function.require-once"><literal>require_once</literal></link>,
   <link linkend="function.echo"><literal>echo</literal></link>,
   <link linkend="function.print"><literal>print</literal></link>,
   <link linkend="function.die"><literal>die</literal></link>, et
   <link linkend="function.exit"><literal>exit</literal></link>.
  </para>

  <example>
   <title>Appel de fonctions sandbox</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();

echo $sandbox->str_replace('a','f','abc');
?>
]]>
   </programlisting>
  </example>
  &example.outputs;
  <screen>
<![CDATA[
fbc
]]>
  </screen>

  <para>
   Lors du passage d'arguments à une fonction sandbox, les arguments sont pris
   à partir de l'extérieur de l'instance de PHP. Si vous voulez passer les
   arguments à la portée de sandbox, soyez assuré de les accéder comme étant
   des propriétés de l'objet sandbox comme montré plus haut.
  </para>

  <example>
   <title>Passage d'arguments aux fonctions sandbox</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();

$foo = 'bar';
$sandbox->foo = 'baz';
echo $sandbox->str_replace('a',$foo,'a');
echo $sandbox->str_replace('a',$sandbox->foo,'a');
?>
]]>
   </programlisting>
  </example>
  &example.outputs;
  <screen>
<![CDATA[
bar
baz
]]>
  </screen>
 </refsect1>

 <refsect1 role="settings">
  <title>Modification des Configurations de Sandbox</title>
  <para>
   Depuis la version de runkit 0.5, certaines configurations de Sandbox
   peuvent être modifiées à la volée en utilisant la syntaxe ArrayAccess.
   Certaines configurations, comme <parameter>active</parameter> sont en
   lecture seule et permettent de fournir des informations de statut. Les
   autres configurations, comme <parameter>output_handler</parameter> peuvent
   être fixées et lues comme un tableau normal. Les configurations futures
   devraient être en écriture seule, cependant aucune configuration n'existe
   présentement.
  </para>

  <para>
   <table>
    <title>Configurations Sandbox / Indicateurs de Statut</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>Configuration</entry>
       <entry>Type</entry>
       <entry>But</entry>
       <entry>Défaut</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>active</literal></entry>
       <entry>&boolean; (Lecture Seule)</entry>
       <entry>
        &true; si le Sandbox est toujours dans un état utilisable, &false; si
        la requête est en arrêt dû à un appel à die(), exit() ou à cause d'une
        condition d'erreur fatale.
       </entry>
       <entry>&true; (Initial)</entry>
      </row>
      <row>
       <entry><literal>output_handler</literal></entry>
       <entry><type>Callback</type></entry>
       <entry>
        Lorsque fixée à une valeur de retour valide, toutes sorties générées
        par l'instance Sandbox seront traitées à travers la fonction nommée.
        Les sorties de Sandbox suivent les mêmes conventions d'appel pour les
        gestionnaires de sortie du système entier.
       </entry>
       <entry>Aucun</entry>
      </row>
      <row>
       <entry><literal>parent_access</literal></entry>
       <entry>&boolean;</entry>
       <entry>
        Autorise sandbox à utiliser des instances de la classe
        <classname>Runkit_Sandbox_Parent</classname>.
        Doit être activée pour que les autres configurations reliées à
        <classname>Runkit_Sandbox_Parent</classname> fonctionnent.
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_read</literal></entry>
       <entry>&boolean;</entry>
       <entry>
        Autorise sandbox à lire des variables dans son contexte parent.
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_write</literal></entry>
       <entry>&boolean;</entry>
       <entry>
        Autorise sandbox à modifier des variables dans son contexte parent.
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_eval</literal></entry>
       <entry>&boolean;</entry>
       <entry>
        Autorise sandbox à évaluer du code arbitraire dans son contexte
        parent. (<emphasis>DANGEREUX</emphasis>)
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_include</literal></entry>
       <entry>&boolean;</entry>
       <entry>
        Autorise sandbox à inclure des fichiers de code php dans son contexte
        parent. <emphasis>DANGEREUX</emphasis>
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_echo</literal></entry>
       <entry>&boolean;</entry>
       <entry>
        Autorise sandbox à afficher des données dans son contexte parent en
        court-circuitant efficacement son propre output_handler.
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_call</literal></entry>
       <entry>&boolean;</entry>
       <entry>
        Autorise sandbox à appeler des fonctions dans son contexte parent.
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_die</literal></entry>
       <entry>&boolean;</entry>
       <entry>
        Autorise sandbox à tuer son propre parent. (Et donc soi-même)
       </entry>
       <entry>&false;</entry>
      </row>
      <row>
       <entry><literal>parent_scope</literal></entry>
       <entry>&integer;</entry>
       <entry>
        Quelle portée la propriété de l'accès parental vérifiera ?
        0 == Portée Globale, 1 == Portée Appelante,
        2 == Portée précédant la portée appelante,
        3 == La porté avant celle-ci, etc., etc.
       </entry>
       <entry>&zero; (Global)</entry>
      </row>
      <row>
       <entry><literal>parent_scope</literal></entry>
       <entry>&string;</entry>
       <entry>
        Lorsque <literal>parent_scope</literal> est fixée à une valeur d'une
        chaîne de caractères, elle se réfère à une variable tableau nommée
        dans la portée globale. Si la variable nommée n'existe pas au moment
        de son accès, elle sera créée comme un tableau vide. Si la variable
        existe mais n'est pas un tableau, un faux tableau sera créé contenant
        une référence à la variable globale nommée.
       </entry>
       <entry></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->