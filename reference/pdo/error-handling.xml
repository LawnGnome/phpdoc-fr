<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283830 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="pdo.error-handling" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Les erreurs et leur gestion</title>
 <para>
  PDO vous offre 3 façon différentes de gérer les erreurs afin de mieux
  s'adapter à votre application.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_SILENT</constant>
   </para>
   <para>
    C'est le mode par défaut. PDO définit simplement le code erreur à inspecter
    grâce aux méthodes <function>PDO::errorCode</function> et
    <function>PDO::errorInfo</function> sur les objets représentant
    les requêtes, mais aussi ceux représentant les bases de données ; si l'erreur
    résulte d'un appel à l'objet représentant la requête, vous pouvez appeler
    la méthode <function>PDOStatement::errorCode</function> ou la méthode
    <function>PDOStatement::errorInfo</function> sur l'objet.
    Si l'erreur résulte d'un appel sur l'objet représentant une base de données,
    vous pouvez également appeler ces deux mêmes méthodes sur l'objet.
    </para>
  </listitem>
  <listitem>
   <para>
    <constant>PDO::ERRMODE_WARNING</constant>
   </para>
   <para>
    En plus de définir le code erreur, PDO émettra un message E_WARNING
    traditionnel. Cette configuration est utile lors des tests et du déboguage,
    si vous voulez voir le problème sans interrompre l'application.
    </para>
   </listitem>
   <listitem>
    <para>
     <constant>PDO::ERRMODE_EXCEPTION</constant>
    </para>
    <para>
     En plus de définir le code erreur, PDO lancera une exception
     <classname>PDOException</classname> et y définit les propriétés
     afin de représenter le code erreur et les informations complémentaires.
     Cette configuration est également utile lors du déboguage, car elle
     va "contourner" le point critique de votre code, vous montrer
     rapidement le problème rencontré (souvenez-vous : les transactions
     sont automatiquement annulées si l'exception fait que votre script
     se termine).
    </para>
    <para>
     Le mode "exception" est également très utile car ainsi, vous pouvez
     structurer votre gestionnaire d'erreur plus clairement qu'avec
     les alertes traditionnelles PHP et, ce, avec moins de code que
     lorsque vous exécutez votre code en mode silence, et que vous
     vérifiez systématiquement les valeurs retournées après chaque appel
     à la base de données.
    </para>
    <para>
     Voir le chapitre sur les <link linkend='language.exceptions'>exceptions</link>
     pour plus d'informations sur les exceptions en PHP.
    </para>
   </listitem>
 </itemizedlist>
 <para>
  PDO utilise les codes erreurs SQL-92 SQLSTATE ; chaque driver PDO est
  responsable de lier leurs codes natifs aux codes SQLSTATE appropriés.
  La méthode <function>PDO::errorCode</function> retourne un code
  SQLSTATE unique. Si vous avez besoin d'informations spécifiques sur
  l'erreur, PDO vous propose également la méthode <function>PDO::errorInfo</function>
  qui retourne un tableau contenant le code SQLSTATE, le code erreur spécifique
  du driver et la chaîne décrivant l'erreur provenant du driver.
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

