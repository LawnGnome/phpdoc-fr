<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 291314 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="pdo.quote" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::quote</refname>
  <refpurpose>
   Protège une chaîne pour l'utiliser dans une requête SQL PDO
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>PDO::quote</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>parameter_type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
  </methodsynopsis>

  <para>
   <function>PDO::quote</function> place des guillemets simples autour
   d'une chaîne d'entrée, si nécessaire et protège les caractères spéciaux présents dans la
   chaîne d'entrée, en utilisant le style de protection approprié au pilote courant.
  </para>
  <para>
   Si vous utilisez cette fonction pour construire des requêtes SQL, vous êtes
   <emphasis>vivement</emphasis> invités à utiliser
   <function>PDO::prepare</function> pour préparer les requêtes SQL avec
   des paramètres liés au lieu d'utiliser <function>PDO::quote</function> pour
   interpréter les entrées utilisateur dans la requête SQL. Les requêtes préparées
   avec des paramètres liés sont non seulement plus portables, plus souples et
   plus sécuritaires, mais bien plus rapides à exécuter que d'interpréter les
   requêtes, étant donné que les côtés client et serveur peuvent mettre
   en cache une version compilée de la requête.
  </para>
  <para>
   Tous les pilotes PDO n'implémentent pas cette méthode (comme PDO_ODBC). Utilisez
   les requêtes préparées à la place.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
      <listitem>
       <para>
        La chaîne à protéger.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>parameter_type</parameter></term>
      <listitem>
       <para>
        Le type de données pour les drivers qui ont des styles particuliers
        de protection.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne une chaîne protégée, qui est théoriquement sûre à utiliser
   dans une requête SQL. Retourne &false; si le pilote ne supporte pas
   ce type de protections.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Protection d'une chaîne normale</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Chaîne simple */
$string = 'Nice';
print "Chaîne non échappée : $string\n";
print "Chaîne échappée : " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Chaîne non échappée : Nice
Chaîne échappée: 'Nice'
]]>
    </screen>
   </example>
   <example>
    <title>Protection d'une chaîne dangereuse</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Chaîne dangereuse */
$string = 'Chaîne \' particulière';
print "Chaîne non échappée : $string\n";
print "Chaîne échappée :" . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Chaîne non échappée : Chaîne ' particulière
Chaîne échappée : 'Chaîne '' particulière'
]]>
    </screen>
   </example>
   <example>
    <title>Protection d'une chaîne complexe</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Chaîne complexe */
$string = "Co'mpl''exe \"ch'\"aîne";
print "Chaîne non protégée : $string\n";
print "Chaîne protégée : " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Chaîne non échappée: Co'mpl''exe "ch'"aîne
Chaîne échappée: 'Co''mpl''''exe "ch''"aîne'
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
