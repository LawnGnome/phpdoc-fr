<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 315005 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="pdo.prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::prepare</refname>
  <refpurpose>
   Prépare une requête à l'exécution et retourne un objet
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>PDOStatement</type><methodname>PDO::prepare</methodname>
   <methodparam><type>string</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>driver_options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>

  <para>
   Prépare une requête SQL à être exécutée par la méthode 
   <function>PDOStatement::execute</function>. La requête SQL peut contenir
   zéro ou plusieurs noms (<literal>:nom</literal>) ou marqueurs (<literal>?</literal>)
   pour lesquels les valeurs réelles seront substituées lorsque la requête sera exécutée.
   Vous ne pouvez pas utiliser les marqueurs nommés et les marqueurs interrogatifs
   dans une même requête SQL ; choisissez l'un ou l'autre.
   Utilisez ces paramètres pour lier les entrées utilisateurs, ne les incluez pas
   directement dans la requête.
  </para>
  <para>
   Vous devez inclure un marquer avec un nom unique pour chaque valeur que
   vous souhaitez passer dans la requête lorsque vous appelez
   <function>PDOStatement::execute</function>. Vous ne pouvez pas utiliser
   un marqueur avec deux noms pareils dans une requête préparée. Vous ne
   pouvez associer plusieurs valeurs à un seul marqueur de nom entrant, par
   exemple, la clause IN() d'une requête SQL.
  </para>
  <para>
   Appeler <function>PDO::prepare</function> et
   <function>PDOStatement::execute</function> pour les requêtes
   qui doivent être exécutées plusieurs fois avec différentes valeurs de
   paramètres optimisent les performances de votre application en autorisant
   le pilote à négocier coté client et/ou serveur avec le cache des requêtes
   et les metainformations, et aident à prévenir les attaques par injection
   SQL en éliminant le besoin de protéger les paramètres manuellement.
  </para>
  <para>
   PDO émule les requêtes préparées / les paramètres liés pour les pilotes
   qui ne le supportent pas nativement, et peut également réécrire les
   paramètres nommés ou les marqueurs en quelques choses de plus
   approprié, si le pilote supporte un style et pas l'autre.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
      <para>
       Doit être une requête SQL valide pour le serveur de base de données cible.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>driver_options</parameter></term>
     <listitem>
      <para>
       Ce tableau contient une ou plusieurs paires clé=&gt;valeur pour définir
       les valeurs des attributs pour l'objet <classname>PDOStatement</classname>
       que cette méthode retourne. Vous pouvez utiliser ceci pour définir la valeur
       <literal>PDO::ATTR_CURSOR</literal> à
       <literal>PDO::CURSOR_SCROLL</literal> pour demander un curseur scrollable.
       Quelques pilotes ont des options spécifiques qui peuvent être définies
       au moment de la préparation.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Si le serveur de base de données prépare avec succès cette requête,
   <function>PDO::prepare</function> retourne un objet <classname>PDOStatement</classname>.
   Si le serveur de base de données ne réussit pas à préparer la requête,
   <function>PDO::prepare</function> retourne &false; ou émet une exception
   <classname>PDOException</classname> (suivant le <link
   linkend="pdo.error-handling">gestionnaire des erreurs</link>).
  </para>
  <note>
   <para>
    L'émulation de requêtes préparées ne communique pas avec le serveur de base
    de données. Aussi, la fonction <function>PDO::prepare</function> ne vérifie
    pas la requête.
   </para>
  </note>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Prépare une requête SQL avec des paramètres nommés</title>
    <programlisting role='php'>
<![CDATA[
<?php
/* Exécute une requête préparée en passant un tableau de valeurs */
$sql = 'SELECT nom, couleur, calories
    FROM fruit
WHERE calories < :calories AND couleur = :couleur';
$sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
$sth->execute(array(':calories' => 150, ':couleur' => 'red'));
$red = $sth->fetchAll();
$sth->execute(array(':calories' => 175, 'couleur' => 'yellow'));
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Prépare une requête SQL avec des marqueurs</title>
    <programlisting role='php'>
<![CDATA[
<?php
/* Exécute une requête préparée en passant un tableau de valeurs */
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < ? AND couleur = ?');
$sth->execute(array(150, 'rouge'));
$red = $sth->fetchAll();
$sth->execute(array(175, 'jaune'));
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::exec</function></member>
    <member><function>PDO::query</function></member>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
