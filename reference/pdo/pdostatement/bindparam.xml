<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision$ -->
<!-- EN-Revision: 283830 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="pdostatement.bindparam" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement->bindParam</refname>
  <refpurpose>
   Lie un paramètre à un nom de variable spécifique
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>PDOStatement::bindParam</methodname>
   <methodparam><type>mixed</type><parameter>parameter</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">variable</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>data_type</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>driver_options</parameter></methodparam>
  </methodsynopsis>
  <para>
   Lie une variable PHP à un marquer nommé ou interrogatif correspondant dans une
   requête SQL utilisée pour préparer la requête. Contrairement à
   <function>PDOStatement::bindValue</function>, la variable est liée en tant que
   référence et ne sera évaluée qu'au moment de l'appel à la fonction
   <function>PDOStatement::execute</function>.
  </para>
  <para>
   La plupart des paramètres sont des paramètres d'entrées, et sont utilisés
   en lecture seule pour construire la requête. Quelques drivers supportent
   l'invocation de procédures stockées qui retournent des données en tant
   que paramètres de sortie, et quelques autres en tant que paramètres
   entrées / sorties qui sont envoyés ensemble et sont mis à jour pour les
   recevoir.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>parameter</parameter></term>
     <listitem>
      <para>
       Identifiant. Pour une requête préparée utilisant
       des marqueurs nommés, ce sera le nom du paramètre
       sous la forme <varname>:name</varname>. Pour
       une requête préparée utilisant les marqueurs interrogatifs,
       ce sera la position indexé -1 du paramètre.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>variable</parameter></term>
     <listitem>
      <para>
       Nom de la variable PHP à lier au paramètre de la requête SQL.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data_type</parameter></term>
     <listitem>
      <para>
       Type explicite de données pour le paramètre utilisant la constante
       PDO::PARAM_*.
       Par défaut, vaut <constant>PDO::PARAM_STR</constant>.
       Pour retourner un paramètre INOUT depuis une procédure
       stockée, utilisez l'opérateur OR pour définir l'octet PDO::PARAM_INPUT_OUTPUT
       pour le paramètre <parameter>data_type</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Longueur du type de données. Pour indiquer qu'un
       paramètre est un paramètre OUT depuis une procédure stockée,
       vous devez explicitement définir la longueur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>driver_options</parameter></term>
     <listitem>
      <para>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>
     Exécution d'une requête préparée avec des emplacements nommés
   </title>
   <programlisting role='php'>
<![CDATA[
<?php
/* Exécution d'une requête préparée en liant des variables PHP */
$calories = 150;
$couleur = 'rouge';
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < :calories AND couleur = :couleur');
$sth->bindParam(':calories', $calories, PDO::PARAM_INT);
$sth->bindParam(':couleur', $couleur, PDO::PARAM_STR, 12);
$sth->execute();
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>
     Exécution d'une requête préparée avec des marques de
     positionnement
   </title>
   <programlisting role='php'>
<![CDATA[
<?php
/* Exécution d'une requête préparée en liant des variables PHP */
$calories = 150;
$couleur = 'rouge';
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < ? AND couleur = ?');
$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindParam(2, $couleur, PDO::PARAM_STR, 12);
$sth->execute();
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Appel une procédure stockée avec un paramètre INOUT</title>
   <programlisting role='php'>
<![CDATA[
<?php
/* Appel une procédure stockée avec un paramètre INOUT */
$couleur = 'rouge';
$sth = $dbh->prepare('CALL puree_fruit(?)');
$sth->bindParam(1, $couleur, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 12);
$sth->execute();
print("Après avoir pressé le fruit, la couleur est : $couleur");
?>
]]>
   </programlisting>
  </example>

 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
    <member><function>PDOStatement::bindValue</function></member>
   </simplelist>
  </para>

 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->