<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.2 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement->fetchAll</refname>
  <refpurpose>
   Retourne un tableau contenant toutes les lignes du jeu d'enregistrements
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>fetch_style</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>column_index</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>ctor_args</parameter></methodparam>
  </methodsynopsis>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>fetch_style</parameter></term>
     <listitem>
      <para>
       Contrôle le contenu du tableau retourné comme documenté dans la fonction
       <function>PDOStatement::fetch</function>. Vaut par défaut
       <literal>PDO::FETCH_BOTH</literal>.
      </para>
      <para>
       Pour retourner un tableau contenant toutes les valeurs d'une seule colonne
       depuis le jeu de résultats, spécifiez <literal>PDO::FETCH_COLUMN</literal>.
       Vous pouvez spécifier quelle colonne vous voulez avec le paramètre
       <parameter>column-index</parameter>.
      </para>
      <para>
       Pour récupérer uniquement les valeurs uniques d'une seule colonne depuis
       le jeu de résultats, utilisez <literal>PDO::FETCH_COLUMN</literal> avec
       <literal>PDO::FETCH_UNIQUE</literal>.
      </para>
      <para>
       Pour retourner un tableau associatif groupé par les valeurs d'une
       colonne spécifique, utilisez <literal>PDO::FETCH_COLUMN</literal> avec
       <literal>PDO::FETCH_GROUP</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>column_index</parameter></term>
     <listitem>
      <para>
       Retourne la colonne indiquée où la valeur de
       <parameter>fetch_style</parameter> est
       <literal>PDO::FETCH_COLUMN</literal>. Vaut par défaut &zero;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ctor_args</parameter></term>
     <listitem>
      <para>
       Arguments du constructeur personnalisé de la classe.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>PDOStatement::fetchAll</function> retourne un tableau contenant
   toutes les lignes du jeu d'enregistrements. Le tableau représente chaque ligne
   comme soit un tableau de valeurs des colonnes, soit un objet avec des propriétés
   correspondant à chaque nom de colonne.
  </para>
  <para>
   L'utilisation de cette méthode pour récupérer de gros jeux de résultats
   peut augmenter les ressources du systèmes mais également ces ressources.
   Plutôt que de récupérer toutes les données et de les manipuler avec PHP,
   utilisez le serveur de base de données pour manipuler les jeux de résultats.
   Par exemple, utilisez les clauses <literal>WHERE</literal> et 
   <literal>ORDER BY</literal> dans vos requêtes SQL pour restreindre les résultats
   avant de le récupérer et de les traiter avec PHP.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Récupération de toutes les lignes d'un jeu de résultats</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT nom, couleur FROM fruit");
$sth->execute();

/* Récupération de toutes les lignes d'un jeu de résultats */
print("Récupération de toutes les lignes d'un jeu de résultats :\n");
$result = $sth->fetchAll();
print_r($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Récupération de toutes les lignes d'un jeu de résultats :
Array
(
    [0] => Array
        (
            [NOM] => pear
            [0] => pear
            [COULEUR] => green
            [1] => green
        )

    [1] => Array
        (
            [NOM] => watermelon
            [0] => watermelon
            [COULEUR] => pink
            [1] => pink
        )

)
]]>
    </screen>
   </example>
   <example>
    <title>Récupération de toutes les valeurs d'une seule colonne depuis un jeu de résultats</title>
    <para>
     L'exemple suivant montre comment retourner toutes les valeurs
     d'une seule colonne depuis un jeu de résultats, même si la requête SQL
     retourne plusieurs colonnes par lignes.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Récupération de toutes les valeurs de la première colonne */
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example>
    <title>Grouper toutes les valeurs d'une seule colonne</title>
    <para>
     L'exemple suivant montre comment retourner un tableau associatif
     groupé par les valeurs de la colonne spécifiée d'un jeu de résultats.
     Le tableau contient trois clés : les valeurs <literal>apple</literal>
     et <literal>pear</literal> sont retournées sous la forme de tableaux
     qui contiennent deux couleurs différentes, tandis que
     <literal>watermelon</literal> est retourné sous la forme d'un tableau
     qui contient uniquement une seule couleur.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute('apple', 'green');
$insert->execute('pear', 'yellow');

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Grouper les valeurs de la première colonne */
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
    array(2) {
      [0]=>
        string(5) "green"
      [1]=>
        string(3) "red"
    }
  ["pear"]=>
    array(2) {
      [0]=>
        string(5) "green"
      [1]=>
        string(6) "yellow"
    }
  ["watermelon"]=>
    array(1) {
      [0]=>
        string(5) "green"
    }
}

]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::query</function></member>
    <member><function>PDOStatement::fetch</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::setFetchMode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->