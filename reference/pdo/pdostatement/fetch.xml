<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision$ -->
<!-- EN-Revision: 297078 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement->fetch</refname>
  <refpurpose>
   Récupère la ligne suivante d'un jeu de résultat PDO
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>fetch_style</parameter><initializer>PDO::FETCH_BOTH</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursor_orientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursor_offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   Récupère une ligne depuis un jeu de résultats associé à l'objet
   <literal>PDOStatement</literal>. Le paramètre
   <parameter>fetch_style</parameter> détermine la façon dont PDO retourne
   la ligne.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>fetch_style</parameter></term>
     <listitem>
      <para>
       Contrôle comment la prochaine ligne sera retournée à l'appelant. Cette valeur
       doit être une des constantes <literal>PDO::FETCH_*</literal>,
       et par défaut, vaut <literal>PDO::FETCH_BOTH</literal>.
       <itemizedlist>
        <listitem><para>
          <literal>PDO::FETCH_ASSOC</literal>: retourne un tableau indexé par le nom
          de la colonne comme retourné dans le jeu de résultats
         </para></listitem>
        <listitem><para>
          <literal>PDO::FETCH_BOTH</literal> (défaut): retourne un tableau indexé
          par les noms de colonnes et aussi par les numéros de colonnes, 
          commençant à l'index 0, comme retournés dans le jeu de résultats
         </para></listitem>
        <listitem><para>
          <literal>PDO::FETCH_BOUND</literal>: retourne &true; et assigne les valeurs
          des colonnes de votre jeu de résultats dans les variables PHP à laquelle
          elles sont liées avec la méthode
          <function>PDOStatement::bindParam</function>
         </para></listitem>
        <listitem><para>
          <literal>PDO::FETCH_CLASS</literal>: retourne une nouvelle instance
          de la classe demandée, liant les colonnes du jeu de résultats aux noms des
          propriétés de la classe. Si <parameter>fetch_style</parameter>
          inclut PDO::FETCH_CLASS (c'est-à-dire <literal>PDO::FETCH_CLASS |
          PDO::FETCH_CLASSTYPE</literal>), alors le nom de la classe est
          déterminé à partir d'une valeur de la première colonne.
         </para></listitem>
        <listitem><para>
          <literal>PDO::FETCH_INTO</literal>: met à jour une instance existante 
          de la classe demandée, liant les colonnes du jeu de résultats aux noms des propriétés
          de la classe
        </para></listitem>
        <listitem><para>
          <literal>PDO::FETCH_LAZY</literal>: combine
          <literal>PDO::FETCH_BOTH</literal> et <literal>PDO::FETCH_OBJ</literal>,
          créant ainsi les noms des variables de l'objet, comme elles sont accédées
         </para></listitem>
        <listitem><para>
          <literal>PDO::FETCH_NUM</literal>: retourne un tableau indexé par le
          numéro de la colonne comme elle est retourné dans votre jeu de résultat,
          commençant à 0
         </para></listitem>
        <listitem><para>
          <literal>PDO::FETCH_OBJ</literal>: retourne un objet anonyme avec les
          noms de propriétés qui correspondent aux noms des colonnes retournés dans le
          jeu de résultats
         </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursor_orientation</parameter></term>
     <listitem>
      <para>
       Pour un objet PDOStatement représentant un curseur scrollable,
       cette valeur détermine quelle ligne sera retournée à l'appelant.
       Cette valeur doit être une des constantes 
       <literal>PDO::FETCH_ORI_*</literal>, et par défaut, vaut 
       <literal>PDO::FETCH_ORI_NEXT</literal>. Pour demander un curseur
       scrollable pour votre objet PDOStatement, vous devez définir
       l'attribut <literal>PDO::ATTR_CURSOR</literal> à <literal>PDO::CURSOR_SCROLL</literal>
       lorsque vous préparez la requête SQL avec la fonction
       <function>PDO::prepare</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para> 
       Pour un objet PDOStatement représentant un curseur scrollable pour
       lequel le paramètre <literal>cursor_orientation</literal> est défini
       à <literal>PDO::FETCH_ORI_ABS</literal>, cette valeur spécifie
       le numéro absolu de la ligne dans le jeu de résultats qui doit être
       récupérée.
      </para>
      <para>
       Pour un objet PDOStatement représentant un curseur scrollable pour
       lequel le paramètre <literal>cursor_orientation</literal> est défini
       à <literal>PDO::FETCH_ORI_REL</literal>, cette valeur spécifie la ligne
       à récupérer relativement à la position du curseur avant l'appel à la fonction
       <function>PDOStatement::fetch</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La valeur retournée par cette fonction en cas de succès dépend du type récupéré.
   Dans tous les cas, &false; est retourné si une erreur survient.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Récupération de lignes en utilisant différentes méthodes</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT nom, couleur FROM fruit");
$sth->execute();

/* styles PDOStatement::fetch */
print("PDO::FETCH_ASSOC: ");
print("Retourne la ligne suivante en tant qu'un tableau indexé par le nom des colonnes\n");
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print("\n");

print("PDO::FETCH_BOTH: ");
print("Retourne la ligne suivante en tant qu'un tableau indexé par le nom et le numéro de la colonne\n");
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print("\n");

print("PDO::FETCH_LAZY: ");
print("Retourne la ligne suivante en tant qu'objet anonyme ayant les noms de colonnes comme propriétés\n");
$result = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print("\n");

print("PDO::FETCH_OBJ: ");
print("Retourne la ligne suivante en tant qu'objet anonyme ayant les noms de colonnes comme propriétés\n");
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->NAME;
print("\n");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Retourne la ligne suivante en tant qu'un tableau indexé par le nom des colonnes
Array
(
    [NOM] => apple
    [COULEUR] => red
)

PDO::FETCH_BOTH: Retourne la ligne suivante en tant qu'un tableau indexé par le nom et le numéro de la colonne
Array
(
    [NOM] => banana
    [0] => banana
    [COULEUR] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Retourne la ligne suivante en tant qu'objet anonyme ayant les noms de colonnes comme propriétés PDORow Object
(
    [NOM] => orange
    [COULEUR] => orange
)

PDO::FETCH_OBJ: Retourne la ligne suivante en tant qu'objet anonyme ayant les noms de colonnes comme propriétés kiwi
]]>
    </screen>
   </example>
   <example>
    <title>Récupération des lignes avec un curseur scrollable</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
  try {
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR, PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
      $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
      print $data;
    }
    $stmt = null;
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}
function readDataBackwards($dbh) {
  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
  try {
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR, PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
      $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
      print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
    $stmt = null;
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}

print "Lecture en avant :\n";
readDataForwards($conn);

print "Lecture en arrière :\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Lecture en avant :
21    10    5
16    0     5
19    20    10

Lecture en arrière :
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
    <member><function>PDOStatement::fetchAll</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
    <member><function>PDOStatement::fetchObject</function></member>
    <member><function>PDOStatement::setFetchMode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->