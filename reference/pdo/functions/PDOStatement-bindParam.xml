<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.6 Maintainer: yannick Status: ready -->
  <refentry id="function.PDOStatement-bindParam">
   <refnamediv>
    <refname>PDOStatement::bindParam</refname>
    <refpurpose>
     Lie un paramètre à un nom de variable spécifique
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
    <methodsynopsis>
     <type>bool</type><methodname>PDOStatement::bindParam</methodname>
     <methodparam><type>mixed</type><parameter>parameter</parameter></methodparam>
     <methodparam><type>mixed</type><parameter role="reference">variable</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>data_type</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>driver_options</parameter></methodparam>
    </methodsynopsis>
    &warn.experimental.func;
    <para>
     <function>PDOStatement::bindParam</function> lie le paramètre de requête
     SQL <parameter>parameter</parameter> à un nom de variable spécifique. Le
     paramètre de la requête SQL peut être soit un emplacement nommé, soit une
     marque  de positionnement.
    </para>
    <para>
     Les marqueurs seront remplacés par la valeur de la variable &php; 
     correspondante lors de l'exécution de la requête. Cela vous permet, par
     exemple, d'appeler des procédures stockées avec des paramètres d'entrée ou
     de sortie pour les bases de données supportant cette fonctionnalité.
    </para>
    <para>
     Pour les variables d'entrées non-nulles uniquement, vous pouvez passer un tableau de
     valeurs à la fonction <function>PDOStatement::execute</function>.
    </para>

   </refsect1>

   <refsect1 role="parameters">
    &reftitle.parameters;
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>parameter</parameter></term>
       <listitem>
        <para>
         Identifiant. Pour une requête préparée utilisant
         des marqueurs nommés, ce sera le nom du paramètre
         sous la forme <varname>:name</varname>. Pour
         une requête préparée utilisant les marqueurs interrogatifs,
         ce sera la position indexé -1 du paramètre.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>variable</parameter></term>
       <listitem>
        <para>
         Nom de la variable &php; à lier au paramètre de la requête SQL.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>data_type</parameter></term>
       <listitem>
        <para>
         Type explicite de données pour le paramètre utilisant la constante
         PDO_PARAM_*. Pour retourner un paramètre INOUT depuis une procédure
         stockée, utilisez l'opérateur OR pour définir l'octet PDO_PARAM_INPUT_OUTPUT
         pour le paramètre <parameter>data_type</parameter> parameter.
        </para>
        <para>
         Pour passer une valeur nulle en tant que paramètre d'entrée, déclarez 
         la constante PDO_PARAM_NULL.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>length</parameter></term>
       <listitem>
        <para>
         Longueur du type de données. Pour indiquer qu'un
         paramètre est un paramètre OUT depuis une procédure stockée,
         vous devez explicitement définir la longueur.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>driver_options</parameter></term>
       <listitem>
        <para>

        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
   </refsect1>

   <refsect1 role="examples">
    &reftitle.examples;
    <example>
     <title>
       Exécution d'une requête préparée avec des emplacements nommés
     </title>
     <programlisting role='php'>
<![CDATA[
<?php
/* Exécution d'une requête préparée en liant des variables PHP */
$calories = 150;
$couleur = 'rouge';
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < :calories AND couleur = :couleur');
$sth->bindParam(':calories', $calories, PDO_PARAM_INT);
$sth->bindParam(':couleur', $couleur, PDO_PARAM_STR, 12);
$sth->execute();
?>
]]>
     </programlisting>
    </example>

    <example>
     <title>
       Exécution d'une requête préparée avec des marques de
       positionnement
     </title>
     <programlisting role='php'>
<![CDATA[
<?php
/* Exécution d'une requête préparée en liant des variables PHP */
$calories = 150;
$couleur = 'rouge';
$sth = $dbh->prepare('SELECT nom, couleur, calories
    FROM fruit
    WHERE calories < ? AND couleur = ?');
$sth->bindParam(1, $calories, PDO_PARAM_INT);
$sth->bindParam(2, $couleur, PDO_PARAM_STR, 12);
$sth->execute();
?>
]]>
     </programlisting>
    </example>

    <example>
     <title>Passer une valeur NULL dans une requête préparée</title>
     <programlisting role='php'>
<![CDATA[
<?php
/* Exécute une requête préparée en y liant des variables PHP */
$calories = 150;
$couleur = 'rouge';
$sth = $dbh->prepare('SELECT nom, couleur, calories
FROM fruit
WHERE calories < :calories AND couleur = :couleur');
                 $sth->bindParam(':calories', $calories, PDO_PARAM_INT);

 /* Trouver les fruits ayant une valeur NULL dans la colonne couleur */
 $sth->bindParam(':couleur', $couleur, PDO_PARAM_NULL);

 $sth->execute();
 ?>
 ]]>
     </programlisting>
    </example>

    <example><title>Appel une procédure stockée avec un paramètre INOUT</title>
     <programlisting role='php'>
<![CDATA[
<?php
/* Appel une procédure stockée avec un paramètre INOUT */
$couleur = 'rouge';
$sth = $dbh->prepare('CALL puree_fruit(?)');
$sth->bindParam(1, $couleur, PDO_PARAM_STR|PDO_PARAM_INPUT_OUTPUT, 12);
$sth->execute();
print("Après avoir pressé le fruit, la couleur est : $couleur");
?>
]]>
     </programlisting>
    </example>

 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>

 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
