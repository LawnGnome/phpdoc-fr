<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.2 Maintainer: yannick Status: ready -->
<refentry id="function.PDOStatement-closeCursor">
 <refnamediv>
  <refname>PDOStatement::closeCursor</refname>
  <refpurpose>
   Ferme le curseur, permettant à la requête d'être de nouveau exécutée
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>PDOStatement::closeCursor</methodname>
   <void/>
  </methodsynopsis>

  &warn.experimental.func;

  <para>
   <function>PDOStatement::closeCursor</function> libère la connexion
   du serveur, permettant ainsi à d'autres requêtes SQL d'être exécutées, mais
   quitte la requête, permettant ainsi qu'elle soit de nouveau exécutée.
  </para>
  <para>
   Cette méthode est utile pour les drivers de base de données qui ne supportent
   pas l'exécution d'objet PDOStatement lorsqu'un objet PDOStatement exécuté
   précédemment a encore des lignes non récupérées. Si votre driver de base de
   données souffre de cette limitation, le problème se manifestera de lui-même
   dans une erreur en dehors de la séquence.
  </para>
  <para>
   <function>PDOStatement::closeCursor</function> est implémenté soit
   en tant que méthode optionnelle spécifique au driver (autorisant un maximum
   d'efficacité), ou en tant que fallback PDO générique si aucune fonction
   spécifique au driver n'est installée.
   Le fallback générique PDO est sémantiquement la même chose que
   d'écrire le code suivant dans votre script &php; :
   <programlisting role="php">
<![CDATA[
<?php
do {
    while ($stmt->fetch())
        ;
    if (!$stmt->nextRowset())
        break;
} while (true);
]]>
   </programlisting>
  </para>

 </refsect1>

 <!-- Use when EXCEPTIONS exist
 <refsect1 role="exceptions">
  &reftitle.exceptions;
  <para>
   When does this function throw exceptions?
  </para>
 </refsect1>
 -->


 <!-- Use when a CHANGELOG exists
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Enter the PHP version of change here
       <entry>Description of change
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 -->


 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>PDOStatement::closeCursor</function></title>
    <para>
     Dans l'exemple suivant, l'objet PDOStatement <varname>$stmt</varname>
     retourne de multiples lignes mais l'application récupère uniquement
     la première ligne, laissant l'objet PDOStatement dans l'état où il lui reste
     des lignes non récupérées. Pour vous assurez que l'application fonctionnera
     avec tous les drivers de base de données, l'auteur insère un appel à la fonction
     <function>PDOStatement::closeCursor</function> sur
     <varname>$stmt</varname> avant l'exécution d'objet PDOStatement
     <varname>$otherStmt</varname>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Création d'un objet PDOStatement
$stmt = $dbh->prepare('SELECT foo FROM bar');

// Création d'un second objet PDOStatement
$stmt = $dbh->prepare('SELECT foobaz FROM foobar');

// Exécute la première requête
$stmt->execute();

// Récupération de la première ligne uniquement depuis le résultat
$stmt->fetch();

// L'appel suivant à closeCursor() peut être requis par quelques drivers
$stmt->closeCursor();

// Maintenant, nous pouvons exécuter la deuxième requête
$otherStmt->execute();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
