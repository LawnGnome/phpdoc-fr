<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<refentry id="function.sqlite-open">
 <refnamediv>
  <refname>sqlite_open</refname>
  <refpurpose>Ouvre une base SQLite</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_open</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>&amp;errmessage</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_open</function> retourne une ressource de connexion SQLite,
   ou &false; en cas d'erreur.
  </para>
  <para>
   Le param&egrave;tre <parameter>filename</parameter> est le nom de la base. Cela peut
   &ecirc;tre un nom relatif ou absolu, que SQLite va utiliser pour stocker vos
   donn&eacute;es. Si le fichier n'existe pas, SQLite va tenter de le cr&eacute;er. Vous
   <emphasis>DEVEZ</emphasis> avoir les droits d'ecriture si vous voulez
   faire des insertions de donn&eacute;es, ou modifier votre sch&eacute;ma de base.
  </para>
  <para>
   Le param&egrave;tre <parameter>mode</parameter> sp&eacute;cifie le mode d'ouverture du fichier,
   et il permet notamment d'ouvrir la base en mode lecture seule. Actuellement,
   ce param&egrave;tre est ignor&eacute; par la librairie SQLite. La valeur par d&eacute;faut pour
   ce param&egrave;tre est la valeur octale <literal>0666</literal>. C'est la valeur recommand&eacute;e
   si vous avez besoin d'utiliser le param&egrave;tre <parameter>errmessage</parameter>.
  </para>
  <para>
   <parameter>errmessage</parameter> est pass&eacute; par r&eacute;f&eacute;rence, et il contient
   un message d'erreur descriptif, expliquant pourquoi la base n'a pu &ecirc;tre
   ouverte.
  </para>
  <para>
   <example>
    <title>Exemple avec <function>sqlite_open</function></title>
    <programlisting role="php">
<![CDATA[
<?php
if ($db = sqlite_open('mysqlitedb', 0666, $sqliteerror)) { 
  sqlite_query($db,'CREATE TABLE foo (bar varchar(10))');
  sqlite_query($db,"INSERT INTO foo VALUES ('fnord')");
  $result = sqlite_query($db,'select bar from foo');
  var_dump(sqlite_fetch_array($result)); 
} else {
  die ($sqliteerror);
}
?>]]>
    </programlisting>
   </example>
  </para>
  <tip>
   <simpara>
    Sur les plates-formes Unix, SQLite est sensible aux scripts qui utilisent 
    la fonction syst&egrave;me <literal>fork()</literal>. Si vous avez un tel script,
    il est recommand&eacute; que vous refermiez la ressource avant de faire le fork,
    et de l'ouvrir &agrave; nouveau dans le processus fils. Pour plus d'informations sur 
    ce probl&egrave;me, voyez <ulink url="&url.sqlite.interface.c;"><literal>
    The C language interface to the SQLite library</literal></ulink> 
    dans la section intitul&eacute;e 
    <literal>Multi-Threading And SQLite</literal> (en anglais). 
   </simpara>
  </tip>
  <tip>
   <simpara>
    Il n'est pas recommand&eacute; d'utiliser des bases de donn&eacute;es SQLite mont&eacute;es
    sur des partitions NFS. Comme NFS est tr&egrave;s mauvais pour assurer le verrouillage
    des fichiers, vous pourriez ne pas ouvrir les bases, et si vous r&eacute;ussissez,
    le verrouillage de la base sera ind&eacute;fini.
   </simpara>
  </tip>
  <note>
   <simpara>
    Depuis SQLite version 2.8.2, vous pouvez sp&eacute;cifier <literal>:memory:</literal>
    comme valeur de <parameter>filename</parameter> pour cr&eacute;er une base
    qui sera install&eacute;e en m&eacute;moire vive, sur le serveur. C'est tr&egrave;s pratique
    pour des traitements temporaires, car la base en m&eacute;moire sera d&eacute;truire
    d&egrave;s que le script sera termin&eacute;. Cela peut aussi &ecirc;tre utile, lorsqu'utilis&eacute;
    conjointement avec la commande SQL <literal>ATTACH DATABASE</literal>,
    pour charger d'autres bases, et faire des requ&ecirc;tes li&eacute;es.
   </simpara>
  </note>
  <note>
   <simpara>
    SQLite prend en compte le &safemode; et l'option open_basedir.
   </simpara>
  </note>

  <para>
   Voir aussi
   <function>sqlite_popen</function>,
   <function>sqlite_close</function> et
   <function>sqlite_query</function>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
