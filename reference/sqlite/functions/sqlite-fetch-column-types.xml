<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 309468 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.sqlite-fetch-column-types" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sqlite_fetch_column_types</refname>
  <refname>SQLiteDatabase->fetchColumnTypes</refname>
  <refpurpose>
   Retourne un tableau des types de colonnes d'une certaine table
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>sqlite_fetch_column_types</methodname>
   <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
  </methodsynopsis>
  <para>&style.oop;</para>
  <classsynopsis>
   <ooclass><classname>SQLiteDatabase</classname></ooclass>
   <methodsynopsis>
    <type>array</type><methodname>fetchColumnTypes</methodname>
    <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   <function>sqlite_fetch_column_types</function> retourne un tableau de types
   de colonnes depuis la table <parameter>table_name</parameter> spécifiée.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>table_name</parameter></term>
     <listitem>
      <para>
       Le nom de la table à interroger.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dbhandle</parameter></term>
     <listitem>
      <para>
       La ressource de base de données SQLite; retournée par
       <function>sqlite_open</function> lorsqu'utilisée de manière
       procédurale. Ce paramètre n'est pas requis si vous utilisez la méthode
       orientée objet.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>result_type</parameter></term>
     <listitem>
      <para>
       Le paramètre optionnel <parameter>result_type</parameter> accepte une
       constante et détermine comment le tableau retourné doit être indexé.
       L'utilisation de <constant>SQLITE_ASSOC</constant> retournera
       uniquement un tableau associatif (nom des champs) tandis que
       <constant>SQLITE_NUM</constant> retournera un tableau indexé
       numériquement (numéro ordinal des champs).
       <constant>SQLITE_BOTH</constant> retournera des indices numériques et
       associatifs.
       <constant>SQLITE_ASSOC</constant> est la valeur par défaut pour cette
       fonction.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un tableau des types de données des colonnes; &false; en cas
   d'erreur.
  </para>
  &sqlite.case-fold;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>Ajout de <parameter>result_type</parameter></entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>&style.procedural;</title>

    <programlisting role="php">
<![CDATA[
<?php
$db = sqlite_open('mysqlitedb');
sqlite_query($db, 'CREATE TABLE foo (bar varchar(10), arf text)');
$cols = sqlite_fetch_column_types('foo', $db, SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Colonne : $column  Type : $type\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>&style.oop;</title>

    <programlisting role="php">
<![CDATA[
<?php
$db = new SQLiteDatabase('mysqlitedb');
$db->query('CREATE TABLE foo (bar varchar(10), arf text)');
$cols = $db->fetchColumnTypes('foo', SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Colonne : $column  Type : $type\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Colonne : bar  Type : VARCHAR
Colonne : arf  Type : TEXT
]]>
    </screen>
   </example>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
