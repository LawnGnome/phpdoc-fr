<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.6 Maintainer: didou Status: ready -->
  <refentry id="function.sqlite-fetch-column-types">
   <refnamediv>
    <refname>sqlite_fetch_column_types</refname>
    <refname>SQLiteDatabase->fetchColumnTypes</refname>
    <refpurpose>
     Retourne un tableau des types de collones d'une certaine table
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
    <methodsynopsis>
     <type>array</type><methodname>sqlite_fetch_column_types</methodname>
     <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
     <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
    </methodsynopsis>
    &title.oop;
    <classsynopsis>
     <ooclass><classname>SQLiteDatabase</classname></ooclass>
     <methodsynopsis>
      <type>array</type><methodname>fetchColumnTypes</methodname>
      <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
     </methodsynopsis>
    </classsynopsis>
    <para>
     <function>sqlite_fetch_column_types</function> retourne un tableau de types
     de colonnes depuis la table <parameter>table_name</parameter> spécifiée.
    </para>
    <para>
     Le paramètre optionnel <parameter>result_type</parameter> accepte une constante
     et détermine comment le tableau retourné doit être indexé. Utiliser
     <constant>SQLITE_ASSOC</constant> retournera uniquement des indices associatifs
     (nom des champs) tandis que <constant>SQLITE_NUM</constant> retournera
     uniquement des indicdes numériques (numéro ordinal des champs). 
     <constant>SQLITE_BOTH</constant> retournera des indices numériques mais aussi
     des indices associatifs. <constant>SQLITE_ASSOC</constant> est la valeur par 
     défaut pour cette fonction.
    </para>
    &sqlite.case-fold;
    <para>
     <example>
      <title>Exemple avec <function>sqlite_fetch_column_types</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$db = sqlite_open('mysqlitedb');
sqlite_query($db, 'CREATE TABLE foo (bar varchar(10), arf text)');
$cols = sqlite_fetch_column_types('foo', $db, SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Colonne : $column  Type : $type";
}
/*  Affiche :
 * Colonne : bar  Type : VARCHAR
 * Colonne : arf  Type : TEXT
*/

/* Exemple OO */
$db = new SQLiteDatabase('mysqlitedb');
$db->query('CREATE TABLE foo (bar varchar(10), arf text)');
$cols = $db->fetchColumnTypes('foo', SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Colonne : $column  Type : $type";
}
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
