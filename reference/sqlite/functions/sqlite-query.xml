<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.5 Maintainer: yannick Status: ready -->
<refentry id="function.sqlite-query">
 <refnamediv>
  <refname>sqlite_query</refname>
  <refpurpose>Exécute une requête SQLite et lit le résultat</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Description</title>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_query</methodname>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>resource</type><methodname>sqlite_query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_query</function> exécute la requête SQL <parameter>query</parameter>
   dans la base SQLite <parameter>db</parameter>.
  </para>
  <para>
   Pour les requêtes qui retournent des lignes, cette fonction
   va retourner une ressource que vous pourrez utiliser avec des fonctions
   telles que <function>sqlite_fetch_array</function> et
   <function>sqlite_seek</function>.
  </para>
  <para>
   Pour les autres types de requêtes, cette fonction va retourner un 
   booléen, en guise de résultat. &true; pour le succès, et &false; 
   pour l'échec.
  </para>
  <para>
   Indépendamment du type, cette fonction retournera &false; si la
   requête échoue.
  </para>
  <para>
   <function>sqlite_query</function> retourne un résultat bufferisé.
   C'est très pratique pour des résultats de petites tailles, où vous 
   aurez besoin d'accéder aléatoirement aux lignes. Les résultats
   bufferisés allouent la mémoire nécessaire pour stocker tout le
   résultat, et ne se termineront qu'une fois toutes ces données
   lues. Si vous n'avez besoin que d'un accès séquentiel aux
   données, il est recommandé d'utiliser 
   <function>sqlite_unbuffered_query</function>.
  </para>
  <note>
   <simpara>
    Deux syntaxes alternatives sont supportées pour assurer la compatibilité
    avec les autres bases de données (telles que MySQL) : 
    La forme recommandée est la première, où le paramètre 
    <parameter>db</parameter> est le premier dans la fonction.
   </simpara>
  </note>
  <warning>
   <simpara>
    SQLite <emphasis>va</emphasis> exécuter les requêtes multiples, séparées par
    des points-virgules, ce qui vous permet d'exécuter plusieurs requêtes SQL
    en une seule fois.
   </simpara>
   <simpara>
    Lorsque vous exécutez des requêtes multiples, la valeur retournée 
    par cette fonction sera &false; si une erreur s'est produite, mais
    indéfini dans les autres cas (cela peut être &true; en cas de 
    succès, ou bien elle peut retourner un résultat).
   </simpara>
  </warning>
  <para>
   Voir aussi
   <function>sqlite_unbuffered_query</function> et
   <function>sqlite_array_query</function>.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
