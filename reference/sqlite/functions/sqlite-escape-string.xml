<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343792 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.sqlite-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sqlite_escape_string</refname>
  <refpurpose>Protège une chaîne de caractères pour utilisation avec SQLite</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sqlite_escape_string</methodname>
   <methodparam><type>string</type><parameter>item</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_escape_string</function> va ajouter des guillemets dans la
   chaîne <parameter>item</parameter>, pour qu'elle puisse être utilisée
   correctement dans une requête SQL. Cela inclut notamment le doublement
   des guillemets simples (<literal>'</literal>), et la vérification des
   caractères binaires non sécuritaires, de la chaîne de requête.
  </para>
  <para>
   Bien que ce codage sécurise l'insertion des données, il va rendre la recherche
   de texte par simple comparaison, ou en utilisant la clause <literal>LIKE</literal>,
   inutilisable dans vos requêtes pour les colonnes qui contiennent ces données
   binaires. En pratique, cela ne devrait pas être un problème, car votre
   utilisation de la base devrait faire que vous n'utiliserez pas ces
   colonnes (en fait, il est mieux de stocker des données binaires dans d'autres
   systèmes, comme des fichiers).
  </para>
 </refsect1>
<!-- The null character (also null terminator or null byte), abbreviated NUL -->
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>item</parameter></term>
     <listitem>
      <para>
       La &string; à échapper.
      </para>
      <para>
       Si <parameter>item</parameter> contient le caractère <literal>NUL</literal>
       et qu'il commence avec un caractère dont la valeur ordinale est
       <literal>0x01</literal>, PHP va appliquer un schéma de codage,
       pour que vous puissiez stocker puis relire correctement ces données.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne une &string; échappée afin de l'utiliser dans des requêtes
   SQLite SQL.
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    N'utilisez pas cette fonction pour coder les valeurs retournées
    par des fonctions utilisateurs, créées avec les fonctions
    <function>sqlite_create_function</function> ou
    <function>sqlite_create_aggregate</function> : utilisez
    plutôt <function>sqlite_udf_encode_binary</function>.
   </simpara>
  </note>
  <warning>
   <simpara>
    <function>addslashes</function> <emphasis>NE doit PAS</emphasis> être
    utilisée pour protéger vos requêtes dans SQLite. Cela va conduire
    à d'étranges résultats lors de la lecture de vos données.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlite_udf_encode_binary</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
