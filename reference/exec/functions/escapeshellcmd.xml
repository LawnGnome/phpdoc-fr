<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.14 $ -->
<!-- EN-Revision: 1.8 Maintainer: dams Status: ready -->
<!-- Reviewed: no -->
<refentry id="function.escapeshellcmd">
 <refnamediv>
  <refname>escapeshellcmd</refname>
  <refpurpose>Protège les caractères spéciaux du Shell</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>escapeshellcmd</methodname>
   <methodparam><type>string</type><parameter>command</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>escapeshellcmd</function> échappe tous les
   caractères de la chaîne <parameter>command</parameter>
   qui pourraient avoir une signification spéciale dans une
   commande Shell. Cette fonction permet de s'assurer que la commande sera
   correctement passée à l'exécuteur de commande Shell
   <function>exec</function> et <function>system</function>, ou encore
   à <link linkend="language.operators.execution">guillemets obliques</link>.
  </para>
  <para>
   Les caractères suivants seront échappés :
   <literal>#&amp;;`|*?~&lt;&gt;^()[]{}$\</literal>, <literal>\x0A</literal>
   et <literal>\xFF</literal>. <literal>'</literal> et <literal>"</literal>
   sont échappés que s'ils ne sont pas par paire. Sous Windows, tous ces caractères
   ainsi que <literal>%</literal> sont remplacés par un espace.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>command</parameter></term>
     <listitem>
      <para>
       La commande à échapper.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La chaîne échappée.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>escapeshellcmd</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$e = escapeshellcmd($userinput);

// Ici, peut importe si $e contient des espaces
system("echo $e");
$f = escapeshellcmd($filename);

// et ici, on s'en préoccupe, nous utilisons donc des guillements
system("touch \"/tmp/$f\"; ls -l \"/tmp/$f\"");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>escapeshellarg</function></member>
    <member><function>exec</function></member>
    <member><function>popen</function></member>
    <member><function>system</function></member>
    <member><link linkend="language.operators.execution">les guillemets obliques</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
