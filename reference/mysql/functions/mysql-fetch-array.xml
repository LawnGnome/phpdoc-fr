<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/mysql.xml, last change in rev 1.19 -->
<!-- last change to 'mysql-fetch-array' in en/ tree in rev 1.27 -->
  <refentry id="function.mysql-fetch-array">
   <refnamediv>
    <refname>mysql_fetch_array</refname>
    <refpurpose>
     Retourne une ligne de r&eacute;sultat sous la forme d'un tableau
     associatif
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>array</type><methodname>mysql_fetch_array</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>mysql_fetch_array</function> retourne un tableau qui
     contient la ligne demand&eacute;e, ou &false;
     si il ne reste plus de ligne.
    </para>
    <para>
     <function>mysql_fetch_array</function> est une version &eacute;tendue de
     <function>mysql_fetch_row</function>. En plus d'enregistrer les
     donn&eacute;es
     sous forme d'un tableau &agrave; indice num&eacute;rique, elle peut aussi
     les enregistrer dans un tableau associatif, en utilisant les noms des
     champs comme indices.
    </para>
    <para>
     Si plusieurs colonnes portent le m&ecirc;me nom, la derni&egrave;re colonne
     aura la priorit&eacute;. Pour acc&eacute;der aux autres colonnes du
     m&ecirc;me nom, vous devez utiliser l'index num&eacute;rique, ou
     faire un alias pour chaque colonne.
     <example>
      <title>Requ&ecirc;te avec duplication de nom de colonnes</title>
      <programlisting role="sql">
<![CDATA[
  select table1.field as foo table2.field as bar from table1, table2
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Il est important de souligner que <function>mysql_fetch_array</function> N'est PAS
     plus lente que <function>mysql_fetch_row</function>, tandis qu'elle ajoute un
     confort d'utilisation notable.
    </para>
    <para>
     L'option <parameter>result_type</parameter> de
     <function>mysql_fetch_array</function> est une constante qui peut prendre les
     valeurs suivantes  : <constant>MYSQL_ASSOC</constant>, 
     <constant>MYSQL_NUM</constant> et <constant>MYSQL_BOTH</constant>.Cette
     fonctionnalit&eacute; a &eacute;t&eacute; ajout&eacute;e en &php; 3.0.7. <constant>MYSQL_BOTH</constant>
     est la valeur par d&eacute;faut de cet argument.
    </para>
    <para>
     En utilisant <constant>MYSQL_BOTH</constant>, vos obtiendrez un tableau
     qui sera &agrave; la fois associatif et index&eacute; num&eacute;riquement. En utilisant
     <constant>MYSQL_ASSOC</constant>, vous obtiendrez un tableau
     associatif (tout comme le fait <function>mysql_fetch_assoc</function>),
     et en utilisant <constant>MYSQL_NUM</constant>, vous obtiendrez un tableau
     index&eacute; nu&eacute;riquement (comme le fait <function>mysql_fetch_row</function>).
    </para>
    <example>
     <title>Exemple de <function>mysql_fetch_array</function> avec <constant>MYSQL_NUM</constant></title>
     <programlisting role="php">
<![CDATA[
<?php
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Impossible de se connecter :  " . mysql_error());
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_NUM)) {
        printf ("ID: %s  Name: %s", $row[0], $row[1]);  
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>Exemple de <function>mysql_fetch_array</function> avec <constant>MYSQL_ASSOC</constant></title>
     <programlisting role="php">
<![CDATA[
<?php
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Impossible de se connecter :  " . mysql_error());
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
        printf ("ID: %s  Name: %s", $row["id"], $row["name"]);
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <example>
     <title>Exemple de <function>mysql_fetch_array</function> avec <constant>MYSQL_BOTH</constant></title>
     <programlisting role="php">
<![CDATA[
<?php
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Impossible de se connecter :  " . mysql_error());
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {
        printf ("ID: %s  Name: %s", $row[0], $row["name"]);
    }

    mysql_free_result($result);
?>
]]>
     </programlisting>
    </example>
    <para>
     Voir aussi
     <function>mysql_fetch_row</function> et
     <function>mysql_fetch_assoc</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
