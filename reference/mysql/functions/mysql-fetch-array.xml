<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.23 $ -->
<!-- EN-Revision: 1.25 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.mysql-fetch-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_fetch_array</refname>
  <refpurpose>
   Retourne une ligne de résultat MySQL sous la forme d'un tableau
   associatif, d'un tableau indexé, ou les deux
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>mysql_fetch_array</methodname>
   <methodparam><type>resource</type><parameter>result</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>result_type</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>mysql_fetch_array</function> retourne un tableau qui
   contient la ligne demandée dans le résultat <parameter>result</parameter>
   et déplace le pointeur de données interne d'un cran.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &mysql.result.description;
    <varlistentry>
     <term><parameter>result_type</parameter></term>
     <listitem>
      <para>
       Le type de tableau à récupérer. C'est une constante qui peut prendre
       les valeurs suivantes : <constant>MYSQL_ASSOC</constant>, 
       <constant>MYSQL_NUM</constant>, et la valeur par défaut est
       <constant>MYSQL_BOTH</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un tableau de chaînes qui correspond à la ligne récupérée ou &false;
   s'il n'y a plus de lignes. Le type de tableau retourné depend de la
   définition du paramètre <parameter>result_type</parameter>.
   En utilisant <constant>MYSQL_BOTH</constant> (défaut), vous
   récupèrerez un tableau contenant des indices associatifs et numériques.
   En utilisant <constant>MYSQL_ASSOC</constant>, vous ne récupèrerez que
   les indices associatifs (comme le fonctionnement de la fonction 
   <function>mysql_fetch_assoc</function>), en utilisant <constant>MYSQL_NUM</constant>,
   vous ne récupèrerez que les indices numériques (comme le fonctionnement
   de la fonction<function>mysql_fetch_row</function>).
  </para>
  <para>
   Si plusieurs colonnes portent le même nom, la dernière colonne
   aura la priorité. Pour accéder aux autres colonnes du
   même nom, vous devez utiliser l'index numérique, ou
   faire un alias pour chaque colonne. Pour les alias de colonnes,
   vous ne pourrez pas accéder aux contenus avec les noms originaux
   des colonnes.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Requête avec duplication de nom de colonnes</title>
    <programlisting role="sql">
<![CDATA[
SELECT table1.field AS foo, table2.field AS bar FROM table1, table2
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>mysql_fetch_array</function> avec <constant>MYSQL_NUM</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
mysql_connect("localhost", "mysql_user", "mysql_password") or
die("Impossible de se connecter : " . mysql_error());
mysql_select_db("mydb");

$result = mysql_query("SELECT id, name FROM mytable");

while ($row = mysql_fetch_array($result, MYSQL_NUM)) {
   printf("ID : %s  Nom : %s", $row[0], $row[1]);
}

mysql_free_result($result);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>mysql_fetch_array</function> avec <constant>MYSQL_ASSOC</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
mysql_connect("localhost", "mysql_user", "mysql_password") or
die("Impossible de se connecter : " . mysql_error());
mysql_select_db("mydb");

$result = mysql_query("SELECT id, name FROM mytable");

while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
   printf("ID : %s  Nom : %s", $row["id"], $row["name"]);
}

mysql_free_result($result);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>mysql_fetch_array</function> avec <constant>MYSQL_BOTH</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
mysql_connect("localhost", "mysql_user", "mysql_password") or
die("Impossible de se connecter : " . mysql_error());
mysql_select_db("mydb");

$result = mysql_query("SELECT id, name FROM mytable");

while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {
   printf ("ID : %s  Nom : %s", $row[0], $row["name"]);
}

mysql_free_result($result);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>Performance</title>
   <para>
    Une chose importante à noter est que l'utilisation de
    <function>mysql_fetch_array</function> n'est <emphasis>pas
    significativement</emphasis> plus lent que l'utilisation de
    <function>mysql_fetch_row</function>, alors qu'il fournit
    des valeurs significatives ajoutées.
   </para>
  </note>
  &database.field-case;
  &database.fetch-null;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_fetch_row</function></member>
    <member><function>mysql_fetch_assoc</function></member>
    <member><function>mysql_data_seek</function></member>
    <member><function>mysql_query</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->