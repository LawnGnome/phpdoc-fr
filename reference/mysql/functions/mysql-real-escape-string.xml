<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.20 $ -->
<!-- EN-Revision: 1.24 Maintainer: dams Status: ready -->
<!-- Reviewed: no -->
<refentry id="function.mysql-real-escape-string">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Protège les caractères spéciaux d'une commande SQL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>unescaped_string</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>mysql_real_escape_string</function> protège les caractères spéciaux
   de la chaîne <parameter>unescaped_string</parameter>, en prenant en compte
   le jeu de caractères courant de la connexion <parameter>link_identifier</parameter>.
   Le résultat peut être utilisé sans problème avec la fonction <function>mysql_query</function>.
   Si des données binaires doivent être insérées, cette fonction doit être utilisée.
  </para>
  <para>
   <function>mysql_real_escape_string</function> appelle la fonction 
   <function>mysql_escape_string</function>
   de la bibliothèque MySQL qui ajoute un slashe aux caractères suivants :
   <literal>NULL</literal>, <literal>\x00</literal>, <literal>\n</literal>,
   <literal>\r</literal>, <literal>\</literal>, <literal>'</literal>,
   <literal>"</literal> et <literal>\x1a</literal>.
  </para>
  <para>
   Cette fonction doit toujours (avec quelques exceptions) être utilisée
   pour protéger vos données avant d'envoyer la requête à MySQL.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>unescaped_string</parameter></term>
     <listitem>
      <para>
       La chaîne à échapper.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la chaîne échappée, ou &false; si une erreur survient.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple simple avec <function>mysql_real_escape_string</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Connexion
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
OR die(mysql_error());

// Requête
$query = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'",
mysql_real_escape_string($user),
mysql_real_escape_string($password));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Un exemple d'attaque par injection SQL</title>
    <programlisting role="php">
<![CDATA[
<?php
// Demande à la base de vérifier si un utilisateur correspond
$query = "SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($query);

// Nous ne vérifions pas $_POST['password'], il peut contenir ce que l'utilisateur veut ! Par exemple :
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// Cela signifie que la requête envoyée à MySQL sera :
echo $query;
?>
]]>
    </programlisting>
    <para>
     La requête envoyée à MySQL :
    </para>
    <screen>
<![CDATA[
SELECT * FROM users WHERE name='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
     Cela permet à n'importe qui de s'identifier sans mot de passe valide.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>Meilleure pratique</title>
    <para>
     L'utilisation de la fonction <function>mysql_real_escape_string</function> 
     sur chaque variable évite les injections SQL. Cet exemple démontre 
     la méthode la plus propre pour envoyer une requête à la base, indépendamment 
     de votre configuration des
     <link linkend="security.magicquotes">guillemets magiques</link>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Protège la variable
function quote_smart($value)
{
   // Stripslashes
   if (get_magic_quotes_gpc()) {
      $value = stripslashes($value);
   }
   // Protection si ce n'est pas un entier
   if (!is_numeric($value)) {
      $value = "'" . mysql_real_escape_string($value) . "'";
   }
   return $value;
}

// Connexion
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
OR die(mysql_error());

// Fabrication d'une requête sécurisée
$query = sprintf("SELECT * FROM users WHERE user=%s AND password=%s",
quote_smart($_POST['username']),
quote_smart($_POST['password']));

mysql_query($query);
?>
]]>
    </programlisting>
    <para>
     La requête s'exécute maintenant correctement et les attaques par injection SQL ne fonctionnent plus.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Une connexion MySQL est nécessaire avant d'utiliser la fonction
    <function>mysql_real_escape_string</function>, sinon, une erreur
    de niveau <literal>E_WARNING</literal> sera générée, et &false; sera 
    retourné. Si <parameter>link_identifier</parameter> n'est pas défini, 
    la dernière connexion MySQL est utilisée.
   </para>
  </note>
  <note>
   <para>
    Si <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> est activée,
    appliquez d'abord la fonction <function>stripslashes</function> à vos données. 
    Utiliser cette fonction sur des données qui ont déjà été protégées, 
    les protègera une deuxième fois.
   </para>
  </note>
  <note>
   <para>
    Si cette fonction n'est pas utilisée pour protéger vos données, la requête
    sera vulnérable aux <link linkend="security.database.sql-injection">attaques 
    par injection SQL</link>.
   </para>
  </note>
  <note>
   <simpara>
    <function>mysql_real_escape_string</function> n'échappe ni 
    <literal>%</literal>, ni <literal>_</literal>. Ce sont des jokers en MySQL si 
    combinés avec <literal>LIKE</literal>, <literal>GRANT</literal>,
    ou <literal>REVOKE</literal>.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_client_encoding</function></member>
    <member><function>addslashes</function></member>
    <member><function>stripslashes</function></member>
    <member>The <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> directive</member>
    <member>The <link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link> directive</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->