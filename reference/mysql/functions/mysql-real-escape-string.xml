<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.12 Maintainer: dams Status: ready -->
  <refentry id="function.mysql-real-escape-string">
   <refnamediv>
    <refname>mysql_real_escape_string</refname>
    <refpurpose>
     Protège les caractères spéciaux d'une commande SQL pour MySQL
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <methodsynopsis>
     <type>string</type><methodname>mysql_real_escape_string</methodname>
     <methodparam><type>string</type><parameter>unescaped_string</parameter></methodparam>
     <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter></methodparam>
    </methodsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>unescaped_string</parameter></term>
       <listitem><simpara>La chaîne à échapper</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>link_identifier</parameter> (optional)</term>
       <listitem><simpara>La ressource de connexion MySQL</simpara></listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <function>mysql_real_escape_string</function> protège les caractères spéciaux
     de la chaîne <parameter>unescaped_string</parameter>, en prenant en compte
     le jeu de caractères courant de la connexion <parameter>link_identifier</parameter>. 
     Le résultat peut être utilisé sans problème 
     avec la fonction <function>mysql_query</function>. If you wish to insert binary data
     you must use this function.
    </para>
    <para>
     <function>mysql_real_escape_string</function> appelle une fonction de la bibliothèque MySQL
     du même nom, qui ajoute un slashe aux caractères suivants :
     <literal>NULL</literal>, <literal>\x00</literal>, <literal>\n</literal>,
     <literal>\r</literal>, <literal>\</literal>, <literal>'</literal>,
     <literal>"</literal> et <literal>\x1a</literal>.
    </para>
    <para>
     Vous devez toujours (avec quelques rares exceptions) utiliser cette fonction
     pour protéger vos données avant de les insérer dans la base. Si vous avez 
     <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> d'activé,
     vous devez d'abord utiliser la fonction <function>stripslashes</function> 
     sur vos données. Si vous n'utilisez pas celà, vous devez vous protégrer vous-même
     des attaques par injection SQL. Voici un exemple :
    </para>
    <para>
     <example>
      <title>Un exemple d'attaque par injection SQL</title>
      <programlisting role="php">
<![CDATA[
<?php
// Demande à la base de vérifier si un utilisateur correspond
$query = "SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($query);

// Nous ne vérifions pas $_POST['password'], il peut contenir ce quel'utilisateur veut ! Par exemple :
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR 1=1";

// Celà signifie que la requête envoyée à MySQL sera :
echo $query;
?>
]]>
      </programlisting>
       <para>
        La requête envoyée à MySQL :
       </para>
      <screen>
<![CDATA[
SELECT * FROM users WHERE name='fred' AND password='' OR 1=1
]]>
      </screen>
      <para>
       Celà permet à n'importe qui de s'identifier sans mot de passe valide !
       L'utilisation de la fonction <function>mysql_real_escape_string</function> 
       sur chaque variable prévient celà.
      </para>
      <programlisting role="php">
<![CDATA[
<?php
/**
 * Applique la fonction stripslashes recursivement
 */
function stripslashes_deep($value)
{
    $value = is_array($value) ?
                array_map('stripslashes_deep', $value) :
                stripslashes($value);

    return $value;
}

/**
 * Protège la variable avant l'insertion
 */
function quote_smart($value)
{
    // Stripslashes si nécessaire
    if (get_magic_quotes_gpc()) {
        $value = stripslashes_deep($value);
    }

    // Protection si ce n'est pas un entier
    if (!is_int($value)) {
        $value = "'" . mysql_real_escape_string($value) . "'";
    }

    return $value;
}

// Connexion
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password')
    OR die('Could not connect: ' . mysql_error());

// Fabrication d'une requête sécurisée
$query = sprintf("SELECT * FROM users WHERE user=%s AND password=%s",
            quote_smart($_POST['username']),
            quote_smart($_POST['password']));

mysql_query($query);
?>
]]>
      </programlisting>
      <para>
       Votre requête est maintenant sécurisé quelques que soient les données entrées par l'utilisateur !
      </para>
     </example>
    </para>
    <note>
     <simpara>
      <function>mysql_real_escape_string</function> n'échappe ni 
      <literal>%</literal>, ni <literal>_</literal>. Ce sont des jokers en MySQL si non liés par
      des guillemets.
     </simpara>
    </note>
    <para>
     Voir aussi
     <function>mysql_client_encoding</function>,
     <function>addslashes</function>, ainsi que la directive 
     <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
