<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.unpack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unpack</refname>
  <refpurpose>Déconditionne des données depuis une chaîne binaire</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>unpack</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
  </methodsynopsis>
  <para>
   Déconditionne les données <parameter>data</parameter>
   depuis une chaîne binaire avec le format <parameter>format</parameter>.
  </para>
  <para>
   <function>unpack</function> se comporte légèrement
   différemment de la version Perl car les données
   déconditionnées sont stockées dans un
   tableau. Pour cela, il faut donner un nom à chaque
   format utilisé et les séparer par des slash (/).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       Voir la fonction <function>pack</function> pour une explication des codes de format.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Les données conditionnées.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un tableau associatif contenant les éléments déconditionnés
   d'une chaîne binaire.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>unpack</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$array = unpack("c2chars/nint", $binarydata);
?>
]]>
    </programlisting>
    <para>
     Le tableau résultant contiendra les entrées suivantes :
     <literal>"chars1"</literal>, <literal>"chars2"</literal> 
     et <literal>"int"</literal>.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Il faut noter que PHP gère les valeurs en interne
    sous forme signée. Si vous déconditionnez
    une valeur qui est aussi grande que la taille utilisée
    en interne par PHP, le résultat se trouvera être
    un nombre négatif, même s'il a été
    déconditionné avec l'option <literal>" non signé "</literal>.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pack</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->