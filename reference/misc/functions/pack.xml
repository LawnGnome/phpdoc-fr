<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/misc.xml, last change in rev 1.3 -->
<!-- last change to 'pack' in en/ tree in rev 1.4 -->
  <refentry id="function.pack">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>Compacte des donn&eacute;es dans une cha&icirc;ne binaire.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
     <type>string</type><methodname>pack</methodname>
     <methodparam><type>string</type><parameter>format</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>pack</function> compacte les arguments dans une cha&icirc;ne binaire,
     suivant le format <parameter>format</parameter>. <function>pack</function>
     retourne la cha&icirc;ne binaire.
    </para>
    <para>
     L'id&eacute;e vient du Perl et tout le formatage fonctionne de
     la m&ecirc;me fa&ccedil;on qu'en Perl, mais quelques formats manquent
     encore (comme, "u" ). La cha&icirc;ne de format est compos&eacute;e
     d'une s&eacute;rie de codes de formats, suivis par un quantificateur
     optionnel. Le quantificateur peut &ecirc;tre un entier, ou *
     pour la r&eacute;p&eacute;tition ind&eacute;finie. Pour les formats a,
     A, h et H, le quantificateur sp&eacute;cifie combien de
     caract&egrave;res d'un argument sont pris; pour &#64;, c'est
     la position absolue o&ugrave; placer les donn&eacute;es,
     et pour le reste, c'est le nombre de r&eacute;p&eacute;titions.
     Actuellement, les formats suivants sont impl&eacute;ment&eacute;s :
     <itemizedlist>
      <listitem>
       <simpara>
		Une cha&icirc;ne compl&eacute;t&eacute;e avec &null;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		Une cha&icirc;ne compl&eacute;t&eacute;e avec espace (SPACE)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		Cha&icirc;ne hexad&eacute;cimale h, bit de poids faible en premier.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		Cha&icirc;ne hexad&eacute;cimale H, bit de poids fort en premier.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		c caract&egrave;re sign&eacute;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		C caract&egrave;re non sign&eacute;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		s entier court sign&eacute; (toujours sur 16 bits, ordre des bits d&eacute;pendant de la machine).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		S entier court non sign&eacute; (toujours 16 bits, ordre des bits d&eacute;pendant de la machine).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		n entier court sign&eacute; (toujours 16 bits, ordre des bits big endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		v entier cours non sign&eacute; (toujours 16 bits, ordre des bits little endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		i entier sign&eacute; (taille et ordre des bits d&eacute;pendants de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		I entier non sign&eacute; (taille et ordre des bits d&eacute;pendants de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		l entier long sign&eacute; (toujours 32 bits, ordre des bits d&eacute;pendant de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		L entier long non sign&eacute; (toujours 32 bits, ordre des bits d&eacute;pendant de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		N entier long non sign&eacute; (toujours 16 bits, ordre des bits big endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		V entier long non sign&eacute; (toujours 16 bits, ordre des bits little endian)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		f nombre &agrave; virgule flottante (taille et repr&eacute;sentation d&eacute;pendantes de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		d nombre &agrave; virgule flottante double (taille et repr&eacute;sentation d&eacute;pendantes de la machine)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
		x bit &null;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        X recule d'un octet
       </simpara>
      </listitem>
      <listitem>
       <simpara>
         &#64; rempli avec &null;, jusqu'&agrave; une position absolue
       </simpara>
      </listitem>
     </itemizedlist>
     <example>
      <title>Compactage d'une cha&icirc;ne</title>
      <programlisting role="php">
&lt;?php
  $binarydata = pack ("nvc*", 0x1234, 0x5678, 65, 66);
?&gt;
      </programlisting>
      <para>
       La cha&icirc;ne binaire r&eacute;sultante aura 6 octets de long,
       et contiendra la s&eacute;quence 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
      </para>
     </example>
    </para>
    <para>
     Notez que la distinction entre sign&eacute; et non sign&eacute;
     n'affecte que la fonction <function>unpack</function>, tandis que
     la fonction <function>pack</function> fournira le m&ecirc;me
     r&eacute;sultat pour les deux formats.
    </para>
    <para>
     De plus, notez que PHP enregistre de mani&egrave;re interne et
     int&eacute;grale les valeurs : cette repr&eacute;sentation
     d&eacute;pend de la machine.  Si vous essayez d'enregistrer une
     valeur trop grande, elle risque d'&ecirc;tre convertie et de
     donner lieu &agrave; des effets de bords vicieux.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
