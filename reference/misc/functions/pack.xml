<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.17 $ -->
<!-- EN-Revision: 1.9 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry id="function.pack">
 <refnamediv>
  <refname>pack</refname>
  <refpurpose>Compacte des données dans une chaîne binaire</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>pack</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Compacte les arguments <parameter>args</parameter>
   dans une chaîne binaire, suivant le format <parameter>format</parameter>.
  </para>
  <para>
   L'idée vient du Perl et tout le formatage fonctionne de
   la même façon qu'en Perl, mais quelques formats manquent
   encore (comme "u")..
  </para>
  <para>
   Notez que la distinction entre signé et non signé
   n'affecte que la fonction <function>unpack</function>, tandis que
   la fonction <function>pack</function> fournira le même
   résultat pour les deux formats.
  </para>
  <para>
   De plus, notez que &php; enregistre de manière interne et
   intégrale les valeurs : cette représentation dépend de la machine.
   Si vous essayez d'enregistrer une valeur trop grande, elle risque
   d'être convertie en <type>float</type> et de donner lieu à des
   effets de bords vicieux.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       La &string; <parameter>format</parameter> consiste en des codes
       de format suivis par un argument répéteur optionnel. Le répéteur
       peut être soit une valeur entière, soit <literal>*</literal> pour
       une répétition jusqu'à la fin des données d'entrées. Pour a, A, h, H,
       le répéteur spécifie combien de caractères d'une donnée est pris, pour
       @, c'est la position absolue où l'on insère les prochaines données, pour
       tout le reste, le répéteur spécifie combien d'arguments de données sont
       consommés et compactés dans la chaîne binaire résultante.
      </para>
      <para>
       Les formats actuellement implémentés sont :
       <table>
        <title>Caractères de formatage pour <function>pack</function></title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Code</entry>
           <entry>Description</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>a</entry>
           <entry>NUL - Une chaîne complétée avec &null;</entry>
          </row>
          <row>
           <entry>A</entry>
           <entry>SPACE - Une chaîne complétée avec un espace</entry></row>
          <row>
           <entry>h</entry>
           <entry>Chaîne hexadécimale h, bit de poids faible en premier</entry></row>
          <row>
           <entry>H</entry>
           <entry>Chaîne hexadécimale H, bit de poids fort en premier</entry></row>
          <row>
           <entry>c</entry>
           <entry>Caractère signé</entry></row>
          <row>
           <entry>C</entry>
           <entry>Caractère non signé</entry></row>
          <row>
           <entry>s</entry>
           <entry>entier court signé (toujours sur 16 bits, ordre des bits dépendant de la machine)</entry>
          </row>
          <row>
           <entry>S</entry>
           <entry>entier court non signé (toujours 16 bits, ordre des bits dépendant de la machine)</entry>
          </row>
          <row>
           <entry>n</entry>
           <entry>entier cours non signé (toujours 16 bits, ordre des bits big endian)</entry>
          </row>
          <row>
           <entry>v</entry>
           <entry>entier cours non signé (toujours 16 bits, ordre des bits little endian)</entry>
          </row>
          <row>
           <entry>i</entry>
           <entry>entier signé (taille et ordre des bits dépendants de la machine)</entry>
          </row>
          <row>
           <entry>I</entry>
           <entry>entier non signé (taille et ordre des bits dépendants de la machine)</entry>
          </row>
          <row>
           <entry>l</entry>
           <entry>entier long signé (toujours 32 bits, ordre des bits dépendant de la machine)</entry>
          </row>
          <row>
           <entry>L</entry>
           <entry>entier long non signé (toujours 32 bits, ordre des bits dépendant de la machine)</entry>
          </row>
          <row>
           <entry>N</entry>
           <entry>entier long non signé (toujours 32 bits, ordre des bits big endian)</entry>
          </row>
          <row>
           <entry>V</entry>
           <entry>entier long non signé (toujours 32 bits, ordre des bits little endian)</entry>
          </row>
          <row>
           <entry>f</entry>
           <entry>nombre à virgule flottante (taille et représentation dépendantes de la machine)</entry>
          </row>
          <row>
           <entry>d</entry>
           <entry>nombre à virgule flottante double (taille et représentation dépendantes de la machine)</entry>
          </row>
          <row>
           <entry>x</entry>
           <entry>caractère NUL</entry>
          </row>
          <row>
           <entry>X</entry>
           <entry>Recule d'un caractère</entry>
          </row>
          <row>
           <entry>@</entry>
           <entry>Remplit avec des NUL jusqu'à la position absolue</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne une &string; binaire contenant les données.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>pack</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>
]]>
    </programlisting>
    <para>
     La chaîne binaire résultante aura 6 octets de long,
     et contiendra la séquence 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unpack</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->