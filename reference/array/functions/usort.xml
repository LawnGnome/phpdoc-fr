<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/array.xml, last change in rev 1.30 -->
<!-- last change to 'usort' in en/ tree in rev 1.2 -->
 <refentry id="function.usort">
  <refnamediv>
   <refname>usort</refname>
   <refpurpose>
    Trie un tableau en utilisant une fonction de comparaison personnalisée
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
     <methodsynopsis>
      <type>bool</type><methodname>usort</methodname>
      <methodparam><type>array</type><parameter>array</parameter></methodparam>
      <methodparam><type>callback</type><parameter>cmp_function</parameter></methodparam>
     </methodsynopsis>
   <para>
    <function>usort</function> va trier le tableau <parameter>array</parameter>
    avec ses valeurs, en utilisant une fonction
    définie par l'utilisateur. Si un tableau doit être trié
    avec un critère complexe, il est préférable d'utiliser
    cette méthode.
   </para>
   <para>
    La fonction de comparaison <parameter>cmp_function</parameter> doit retourner un entier,
    qui sera inférieur, égal ou supérieur à zéro
    suivant que le premier argument est considéré comme plus petit,
    égal ou plus grand que le second argument. Si les deux arguments sont
    égaux, leur ordre est indéfini.
    <note>
     <para>
      Si deux éléments sont égaux, au sens de la fonction <parameter>cmp_function</parameter>, 
      leur ordre sera indéfini. Jusqu'en &php; 4.0.6, la fonction de tri
      leur conserverait leur ordre original, mais le nouvel algorithme introduit
      en &php; 4.1.0 fait que ce n'est plus le cas, car cela serait trop
      coûteux.
     </para>
    </note>
    </para>
    <para>
     &return.success;
    </para>
    <para>
    <example>
     <title>Exemple avec <function>usort</function></title>
     <programlisting role="php">
<![CDATA[
<?php
function compare($a, $b) 
{
    if ($a == $b) {
      return 0;
    }
    return ($a > $b) ? -1 : 1;
}

$a = array (3, 2, 5, 6, 1);

usort ($a, "compare");

while (list ($key, $value) = each ($a)) {
    echo "$key: $value\n";
}
?>
]]>
     </programlisting>
     <para>
      Cet exemple va afficher :
     </para>
     <screen>
<![CDATA[
0: 6
1: 5
2: 3
3: 2
4: 1
]]>
     </screen>
    </example>
    <note>
     <para>
      Evidemment dans ce cas trivial, <function>rsort</function> serait plus
      approprié.
     </para>
    </note>
   </para>
   <para>
    <example>
     <title>
      Tri avec <function>usort</function> sur un tableau multi-dimensionnel
     </title>
     <programlisting role="php">
<![CDATA[
<?php
function compare($a, $b) 
{
    return strcmp($a["fruit"], $b["fruit"]);
}

$fruits[0]["fruit"] = "citron";
$fruits[1]["fruit"] = "pommes";
$fruits[2]["fruit"] = "raisins";

usort($fruits, "compare");

while (list ($key, $value) = each ($fruits)) {
    echo "\$fruits[$key]: " . $value["fruit"] . "\n";
}
?>
]]>
     </programlisting>
     <para>
      Lors du tri de tableau multi-dimensionnel, <varname>$a</varname> et
      <varname>$b</varname> contiennent des références sur le premier
      élément du tableau.
      Cet exemple va afficher :
     </para>
     <screen>
<![CDATA[
$fruits[0]: raisins
$fruits[1]: pommes
$fruits[2]: citron
]]>
     </screen>
    </example>
   </para>
   <para>
    <example>
     <title>
      Tri avec <function>usort</function> sur un objet
     </title>
     <programlisting role="php">
<![CDATA[
<?php
class TestObj {
    var $name;

    function TestObj($name) 
    {
        $this->name = $name;
    }

    /* Ceci est une fonction de comparaison statique */
    function cmp_obj($a, $b) 
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) {
          return 0;
        }
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

uasort($a, array ("TestObj", "cmp_obj"));

foreach ($a as $item) {
    echo $item->name."\n";
}
?>
]]>
     </programlisting>
     <para>
      Cet exemple va afficher :
     </para>
     <screen>
<![CDATA[
b
c
d
]]>
     </screen>
    </example>
   </para>
   <para>
    Voir aussi
    <function>uasort</function>,
    <function>uksort</function>,
    <function>sort</function>,
    <function>asort</function>,
    <function>arsort</function>,
    <function>ksort</function>,
    <function>natsort</function> et 
    <function>rsort</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
