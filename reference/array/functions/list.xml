<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.11 Maintainer: nobody Status: partial -->
 <refentry id="function.list">
  <refnamediv>
   <refname>list</refname>
   <refpurpose>
    Transforme une liste de variables en tableau
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
     <methodsynopsis>
      <type>void</type><methodname>list</methodname>
      <methodparam><type>mixed</type><parameter>varname</parameter></methodparam>
      <methodparam rep="repeat"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
   <para>
    Tout comme <function>array</function>, <function>list</function> n'est pas une
    véritable fonction, mais un élément de langage, 
    qui permet de rassembler les variables <parameter>varname</parameter>,
    <parameter>...</parameter> sous forme de tableuau, pour les assigner
    en une seule ligne.
   </para>
   <note>
    <para>
     <function>list</function> fonctionne uniquement avec des tableaux
     à indexation numérique, et suppose que l'indexation commence à 0.
    </para>
   </note>
   <para>
    <example>
     <title>Exemple avec <function>list</function></title>
     <programlisting role="php">
<![CDATA[
<?php

$info = array('café', 'noir', 'cafeine');

// Liste de toutes les variables
list($drink, $color, $power) = $info;
echo "$drink est $color et la $power le rend particulier.\n";

// Liste de certaines variables
list($drink, , $power) = $info;
echo "$drink contient de la $power.\n";

// Ou bien, n'utilisons que le troisième
list( , , $power) = $info;
echo "J'ai besoin de $power!\n";

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Exemple avec <function>list</function> et MySQL</title>     
     <programlisting role="php">
<![CDATA[
<table>
 <tr>
  <th>Nom de l'employé</th>
  <th>Salaire</th>
 </tr>

<?php

$resultat = mysql_query ("SELECT id, nom, salaire FROM employes",$conn);
while (list ($id, $nom, $salaire) = mysql_fetch_row ($resultat)) {
    echo " <tr>\n".
           "  <td><a href=\"info.php?id=$id\">$nom</a></td>\n".
           "  <td>$salaire</td>\n".
           " </tr>\n";
}

?>
</table>
]]>
     </programlisting>
    </example>
   </para>
   <warning>
    <para>
     <function>list</function> assigne les valeurs en commençant par la valeur
     la plus à droite. Si vous utiliser ces variables, ce ne sera pas un problème.
     Mais si vous utilisez des tableaux, vous serez surpris de voir que
     <function>list</function> les affecte de droite à gauche.
    </para>
   </warning>
   <para>
    <example>
     <title>Exemple avec <function>list</function> en tenant compte de l'ordre</title>
     <programlisting role="php">
<![CDATA[
<?php

$info = array('café', 'noir', 'cafeine');

list($a[0], $a[1], $a[2]) = $info;

var_dump($a);

?>
]]>
     </programlisting>
     <para>
      Cet exemple donne le résultat suivant (notez l'ordre d'affichage des
      éléments, en comparaison avec l'ordre dans lequel ils ont été écrits dans
      la syntaxe de <function>list</function>) :
     </para>
     <screen>
<![CDATA[
array(3) {
  [2]=>
  string(8) "cafeine"
  [1]=>
  string(5) "noir"
  [0]=>
  string(6) "café"
}
]]>
     </screen>
    </example>
   </para>
   <para>
    Voir aussi
    <function>each</function>,
    <function>array</function> et 
    <function>extract</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
