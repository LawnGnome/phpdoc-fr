<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/array.xml, last change in rev 1.30 -->
<!-- last change to 'array-unique' in en/ tree in rev 1.2 -->
 <refentry id="function.array-unique">
  <refnamediv>
   <refname>array_unique</refname>
   <refpurpose>D&eacute;doublonne un tableau</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>array</type><methodname>array_unique</methodname>
     <methodparam><type>array</type><parameter>array</parameter></methodparam>
    </methodsynopsis>
   <para>
    <function>array_unique</function> prend le tableau
    <parameter>array</parameter> et retourne un nouveau tableau,
    compl&egrave;tement d&eacute;doublonn&eacute;.
   </para>
    <note>
     <simpara>
      Deux &eacute;l&eacute;ments sont consid&eacute;r&eacute;s comme &eacute;gaux si et seulement si 
      <literal>(string) $elem1 === (string) $elem2</literal>. En clair :
      lorsque la repr&eacute;sentation en cha&icirc;ne de caract&egrave;res est identique.
      <!-- TODO: example of it... -->
     </simpara>
    </note>
    <warning>
     <simpara>
      Cette fonction &eacute;tait inutilisable en PHP 4.0.4!
      <!-- TODO: when exactly was this broken?... -->
     </simpara>
    </warning>
   <para>
    Notez que les cl&eacute;s sont pr&eacute;serv&eacute;es.
    <function>array_unique</function> conserve la cl&eacute; de la
    premi&egrave;re valeur rencontr&eacute;e, et ignore toutes les suivantes.
   </para>
   <para>
     <example>
      <title>Exemple avec <function>array_unique</function></title>
      <programlisting role="php">
&lt;?php
  $input = array ("a" =&gt; "vert", "rouge", "b" =&gt; "vert", "bleu", "rouge");
  $result = array_unique ($input);
  print_r($result);
// Cela va afficher :
//Array
//(
//    [a] => vert
//    [0] => rouge
//    [1] => bleu
//)
?&gt;
      </programlisting>
     </example>
    </para>
<!--
    <para>
     Notez aussi que <function>array_unique</function> tient compte du
     type de la valeur. Cela ne porte g&eacute;n&eacute;ralement pas &agrave;
     cons&eacute;quence, sauf si votre tableau contient des nombres, qui
     peuvent &ecirc;tre de diff&eacute;rents types. Cela conduit &agrave; des
     r&eacute;sultats d&eacute;routants.
    </para>
-->
    <para>
     <example>
      <title><function>array_unique</function> et les types de valeurs</title>
      <programlisting role="php">
&lt;?php
  $input = array(4,"3",3,"4",4,4);
  $result = array_unique($input);
  print_r($result);
// Cela va afficher :
//Array
//(
//  [0] => 3
//  [1] => 3
//  [2] => 4
//  [3] => 4
//)
?&gt;
      </programlisting>
     </example>
    </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
