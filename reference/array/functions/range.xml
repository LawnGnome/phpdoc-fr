<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.14 $ -->
<!-- EN-Revision: 1.14 Maintainer: dams Status: ready -->
 <refentry id="function.range">
  <refnamediv>
   <refname>range</refname>
   <refpurpose>
    Crée un tableau contenant un intervalle d'éléments
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>array</type><methodname>range</methodname>
     <methodparam><type>int</type><parameter>low</parameter></methodparam>
     <methodparam><type>int</type><parameter>high</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>step</parameter></methodparam>
    </methodsynopsis>
   <para>
    <function>range</function> retourne un tableau contenant tous les entiers
    depuis <parameter>low</parameter> jusqu'à <parameter>high</parameter>,
    inclus. Si <parameter>low</parameter> est supérieur à 
    <parameter>high</parameter>, la séquence sera en ordre décroissant.
   </para>
   <note>
    <title>Nouveau paramètre</title>
    <simpara>
     Le paramètre optionnel <parameter>step</parameter> a été 
     ajouté en &php; 5.0.
    </simpara>
   </note>
   <para>
    Si une valeur est donnée au paramètre <parameter>step</parameter>, il sera utilisé
    comme valeur incrémentale entre les éléments de la séquence.
    <parameter>step</parameter> doit être exprimé comme un nombre entier positif.
    S'il n'est pas spécifié, <parameter>step</parameter> vaut par défaut 1.
   </para>
   <para>
    <example>
     <title>Exemple avec <function>range</function></title>
     <programlisting role="php">
<![CDATA[
<?php
// array(0,1,2,3,4,5,6,7,8,9)
foreach(range(0, 9) as $number) {
    echo $number;
}

// La paramètre de pas (step) a été introduit en version 4.4.0
// array(0,10,20,30,40,50,60,70,80,90,100)
foreach(range(0, 100, 10) as $number) {
    echo $number;
}

// L'utilisation des caractères a été introduit en version 4.1.0
// array('a','b','c','d','e','f','g','h','i');
foreach(range('a', 'i') as $letter) {
    echo $letter;
}
// array('c','b','a');
foreach(range('c', 'a') as $letter) {
    echo $letter;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Avant la version &php; 4.1.0, la fonction <function>range</function>
     ne générait que des séquences d'entiers. Le support des
     séquences de caractères a été ajouté en &php; 4.1.0.
    </para>
   </note>
   <caution>
    <para>
     Dans les versions de &php; de 4.1.0 à 4.3.2, <function>range</function> 
     voyait les chaînes numériques comme des chaînes et non comme des entiers.
     Au lieu de cela, ils étaient utilisés comme séquence de caractères.
     Par exemple, <literal>"4242"</literal> était traité comme <literal>"4"</literal>.
    </para>
   </caution>
   <para>
    Voir aussi
    <function>shuffle</function>, 
    <function>array_fill</function> et
    <link linkend="control-structures.foreach">foreach</link>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
