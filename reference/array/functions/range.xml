<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/array.xml, last change in rev 1.30 -->
<!-- last change to 'range' in en/ tree in rev 1.2 -->
 <refentry id="function.range">
  <refnamediv>
   <refname>range</refname>
   <refpurpose>
    Cr&eacute;e un tableau contenant un intervalle d'&eacute;l&eacute;ments
   </refpurpose>
  </refnamediv>
  <refsect1>
    <title>Description</title>
    <methodsynopsis>
     <type>array</type><methodname>range</methodname>
     <methodparam><type>int</type><parameter>low</parameter></methodparam>
     <methodparam><type>int</type><parameter>high</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>step</parameter></methodparam>
    </methodsynopsis>
   <para>
    <function>range</function> retourne un tableau contenant tous les entiers
    depuis <parameter>low</parameter> jusqu'&agrave; <parameter>high</parameter>,
    inclus. Si <parameter>low</parameter> est sup&eacute;rieur &agrave; 
    <parameter>high</parameter>, la s&eacute;quence sera en ordre d&eacute;croissant.
   </para>
    <note>
     <title>Nouveau param&egrave;tre</title>
     <simpara>
      Le param&egrave;tre optionnel <parameter>step</parameter> a &eacute;t&eacute; 
      ajout&eacute; en &php; 5.0.
     </simpara>
    </note>
    <para>
     Si une valeur est donn&eacute;e au pram&egrave;tre <parameter>step</parameter>, il sera utilis&eacute;
     comme valeur incr&eacute;mentale entre les &eacute;l&eacute;ments de la s&eacute;quence.
     <parameter>step</parameter> doit &ecirc;tre exprim&eacute; comme un nombre entier positif.
     Si il n'est pas sp&eacute;cifi&eacute;, <parameter>step</parameter> vaut par d&eacute;faut 1.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>range</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// array(0,1,2,3,4,5,6,7,8,9)
foreach(range(0, 9) as $number) {
    echo $number;
}

// La param&egrave;tre de pas (step) a &eacute;t&eacute; introduit en version 4.4.0
// array(0,10,20,30,40,50,60,70,80,90,100)
foreach(range(0, 100, 10) as $number) {
    echo $number;
}

// L'utilisation des caract&egrave;res a &eacute;t&eacute; introduit en version 4.1.0
// array('a','b','c','d','e','f','g','h','i');
foreach(range('a', 'i') as $letter) {
    echo $letter;
}
// array('c','b','a');
foreach(range('c', 'a') as $letter) {
    echo $letter;
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Avant la version &php; 4.1.0, la fonction <function>range</function>
      ne g&eacute;n&eacute;rait que des s&eacute;quences d'entiers. Le support des
      s&eacute;quences de caract&egrave;res a &eacute;t&eacute; ajout&eacute; en &php; 4.1.0.
     </para>
    </note>
    <para>
      Voir aussi <function>shuffle</function> et
     <link linkend="control-structures.foreach">foreach</link>.
    </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
