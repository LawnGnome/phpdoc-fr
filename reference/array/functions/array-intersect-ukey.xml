<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.7 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.array-intersect-ukey" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_intersect_ukey</refname>
  <refpurpose>Calcule l'intersection de deux tableaux en utilisant une fonction de callback sur les clés pour comparaison</refpurpose>
 </refnamediv>
 <refsect1>
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_intersect_ukey</methodname>
   <methodparam><type>array</type><parameter>array1</parameter></methodparam>
   <methodparam><type>array</type><parameter>array2</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
   <methodparam><type>callback</type><parameter>key_compare_func</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_intersect_ukey</function> retourne un tableau contenant
   toutes les valeurs du tableau <parameter>array1</parameter>
   qui contiennent des clés présentes dans tous les arguments
   <parameter>array2</parameter>, <parameter>...</parameter>.
  </para>
  <para>
   Cette comparaison est effectuée en utilisant une fonction de callback
   fournie par l'utilisateur. La fonction de callback doit retourner un entier
   plus petit que, égal à ou plus grand que &zero; si la première clé est
   considérée, respectivement, comme plus petite que, égale à ou plus grande
   que la seconde.
  </para>
  <para>
   <example>
    <title>Exemple avec <function>array_intersect_ukey</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function key_compare_func($key1, $key2)
{
    if ($key1 == $key2)
        return 0;
    else if ($key1 > $key2)
        return 1;
    else
        return -1;
}

$array1 = array('bleu'  => 1, 'rouge'  => 2, 'vert'  => 3, 'violet' => 4);
$array2 = array('vert' => 5, 'bleu' => 6, 'jaune' => 7, 'cyan'   => 8);

var_dump(array_intersect_ukey($array1, $array2, 'key_compare_func'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["bleu"]=>
  int(1)
  ["vert"]=>
  int(3)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   Dans cet exemple, vous pouvez voir que seules les clés
   <literal>'bleu'</literal> et <literal>'vert'</literal> sont présentes dans
   les deux tableaux et, donc, elles
   sont retournées. Notez également que les valeurs pour les clés
   <literal>'bleu'</literal> et <literal>'vert'</literal> diffèrent
   entre les deux tableaux. Néanmoins, elles correspondent toujours car
   uniquement les clés sont vérifiées. Les valeurs retournées sont celles du
   tableau <parameter>array1</parameter>.
  </para>
  <para>
   Voir aussi 
   <function>array_diff</function>,
   <function>array_udiff</function>
   <function>array_diff_assoc</function>,
   <function>array_diff_uassoc</function>,
   <function>array_udiff_assoc</function>,
   <function>array_udiff_uassoc</function>,
   <function>array_diff_key</function>,
   <function>array_diff_ukey</function>,
   <function>array_intersect</function>,
   <function>array_intersect_assoc</function>,
   <function>array_intersect_uassoc</function> et
   <function>array_intersect_key</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
