<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.30 $ -->
<!-- EN-Revision: 1.22 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.each" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>each</refname>
  <refpurpose>Retourne chaque paire clé/valeur d'un tableau</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>each</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
  </methodsynopsis>
  <para>
   Retourne la paire clé/valeur courante du tableau
   <parameter>array</parameter> et avance le pointeur de tableau.
  </para>
  <para>
   Après chaque appel à <function>each</function>, le pointeur de tableau est
   déplacé au prochain élément, ou sur le dernier élément, lorsqu'on arrive à
   la fin. Vous devez utiliser <function>reset</function> si vous voulez traverser
   le tableau à nouveau avec <function>each</function>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Le tableau d'entrée.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la paire clé/valeur courante du tableau
   <parameter>array</parameter> et avance le pointeur
   de tableau. Cette paire est retournée dans un tableau
   de 4 éléments, avec les clés &zero;, &one;,
   <literal>key</literal>, et <literal>value</literal>. Les
   éléments &zero; et <literal>key</literal>
   contiennent le nom de la clé et &one; et
   <literal>value</literal> contiennent la valeur.
  </para>
  <para>
   Si le pointeur interne de tableau est au-delà de la fin du tableau,
   <function>each</function> retourne &false;.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>each</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$foo = array("bob", "fred", "jussi", "jouni", "egon", "marliese");
$bar = each($foo);
print_r($bar);
?>
]]>
    </programlisting>
    <para>
     <varname>$bar</varname> contient maintenant les clés/valeurs suivantes :
    </para>
    <screen>
<![CDATA[
Array
(
    [1] => bob
    [value] => bob
    [0] => 0
    [key] => 0
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = array("Robert" => "Bob", "Seppo" => "Sepi");
$bar = each($foo);
print_r($bar);
?>
]]>
    </programlisting>
    <para>
     <varname>$bar</varname> contient maintenant les clés/valeurs suivantes :
    </para>
    <screen>
<![CDATA[
Array
(
    [1] => Bob
    [value] => Bob
    [0] => Robert
    [key] => Robert
)
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   <function>each</function> est typiquement utilisée en conjonction
   avec <function>list</function> pour passer en revue un tableau.
   Par exemple :
   <example>
    <title>Passer en revue un tableau avec <function>each</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$fruit = array('a' => 'apple', 'b' => 'banana', 'c' => 'cranberry');

reset($fruit);
while (list($key, $val) = each($fruit)) {
    echo "$key => $val\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
a => apple
b => banana
c => cranberry
]]>
    </screen>
   </example>
  </para>
  <caution>
   <para>
    Assigner un tableau à une autre variable remet le pointeur du tableau original
    à zéro. À cause de ce comportement, nous aurions pu provoquer une boucle infinie
    dans notre exemple si nous avions assigné <varname>$fruit</varname> à une autre
    variable dans notre boucle.
   </para>
  </caution>
  <warning>
   <para>
    <function>each</function> accepte également des objets mais peut retourner
    un résultat non-attendu. Aussi, il n'est pas recommandé d'utiliser cette
    fonction sur des objets.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>key</function></member>
    <member><function>list</function></member>
    <member><function>current</function></member>
    <member><function>reset</function></member>
    <member><function>next</function></member>
    <member><function>prev</function></member>
    <member><link linkend="control-structures.foreach">foreach</link></member>
    <member><link linkend="language.oop5.iterations">Itération d'objet</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->