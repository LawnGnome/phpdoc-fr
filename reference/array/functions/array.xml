<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.27 $ -->
<!-- EN-Revision: 1.18 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array</refname>
  <refpurpose>Crée un tableau</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array</methodname>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Crée un tableau. Lisez la section sur les
   <link linkend="language.types.array">types-tableaux</link> pour plus d'informations
   sur ce qu'est un tableau.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       La syntaxe "index =&gt; valeur", séparée par des virgules,
       définit les index et leur valeur. Un index peut être une
       chaîne ou un nombre. Si l'index est omis, un index numérique
       sera automatiquement généré (commençant à
       0). Si l'index est un entier, le prochain index généré
       prendra la valeur d'index la plus grande + 1. Notez que si deux index
       identiques sont définis, le dernier remplacera le premier.
      </para>
      <para>
       Avoir une virgule après avoir défini la dernière entrée, bien qu'inutile,
       est une syntaxe valide.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un tableau des paramètres. Les paramètres peuvent fournir
   un index en utilisant l'opérateur <literal>=&gt;</literal>.
   Lisez la section sur les <link linkend="language.types.array">types-tableaux</link>
   pour plus d'informations sur ce qu'est un tableau.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   L'exemple suivant montre comment créer un tableau à deux dimensions,
   comment spécifier les index d'un tableau associatif, et comment
   générer automatiquement des index numériques.
   <example>
    <title>Exemple avec <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$fruits = array (
    "fruits"  => array("a" => "orange", "b" => "banana", "c" => "apple"),
    "numbers" => array(1, 2, 3, 4, 5, 6),
    "holes"   => array("first", 5 => "second", "third")
);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Index automatique avec <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);
print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
]]>
    </screen>
   </example>
  </para>
  <para>
   Notez bien que l'index '3' est défini deux fois, et conserve finalement
   sa dernière valeur de 13. L'index '4' est défini après
   l'index '8', et l'index généré suivant (valeur 19) est
   9, puisque le plus grand index est alors 8.
  </para>
  <para>
   Cet exemple crée un tableau dont les index commencent à 1.
   <example>
    <title>Index commençant à 1 avec <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$firstquarter = array(1 => 'January', 'February', 'March');
print_r($firstquarter);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [1] => January
    [2] => February
    [3] => March
)
]]>
    </screen>
   </example>
  </para>
  <para>
   Tout comme en Perl, vous pouvez accéder à une valeur d'un tableau
   dans des doubles guillemets. Cependant, avec PHP, vous devez
   entourer votre tableau avec des parenthèses.
   <example>
    <title>Accéder à un tableau dans des doubles guillemets</title>
    <programlisting role="php">
<![CDATA[
<?php

$foo = array('bar' => 'baz');
echo "Hello {$foo['bar']}!"; // Hello baz!

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   <note>
    <para>
     <function>array</function> est un constructeur de langage utilisé
     pour représenter littéralement les tableaux, mais ce n'est en
     aucun cas une fonction régulière.
    </para>
   </note>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_pad</function></member>
    <member><function>list</function></member>
    <member><function>count</function></member>
    <member><function>range</function></member>
    <member>&foreach;</member>
    <member>Le type <link linkend="language.types.array">array</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->