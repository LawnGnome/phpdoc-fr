<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.16 $ -->
<!-- EN-Revision: 1.12 Maintainer: dams Status: ready -->
 <refentry id="function.array">
  <refnamediv>
   <refname>array</refname>
   <refpurpose>Crée un tableau</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
      <type>array</type><methodname>array</methodname>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
   <para>
    <function>array</function> retourne un tableau créé avec les
    paramètres passés <parameter>...</parameter>. On peut attribuer 
    un index particulier à une valeur avec l'opérateur 
    <literal>=?&gt;</literal>.
   </para>
   <para>
    <note>
     <para>
      <function>array</function> est un élément de langage
      utilisé pour représenter des tableaux littéraux,
      et non pas une fonction au sens strict du terme.
     </para>
    </note>
   </para>
   <para>
    La syntaxe "index =&gt; valeur", séparée par des virgules,
    définit les index et leur valeur. Un index peut être une
    chaîne ou un nombre. Si l'index est omis, un index numérique
    sera automatiquement généré (commençant à
    0). Si l'index est un entier, le prochain index généré
    prendra la valeur d'index la plus grande + 1. Notez que si deux index
    identiques sont définis, le dernier remplacera le premier.
   </para>
   <para>
    Avoir une virgule après avoir défini la dernière entrée, bien qu'inutile,
    est une syntaxe valide.
   </para>
   <para>
    L'exemple suivant montre comment créer un tableau à deux dimensions,
    comment spécifier les index d'un tableau associatif, et comment
    générer automatiquement des index numériques.
    <example>
     <title>Exemple avec <function>array</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$fruits = array (
    "fruits"  => array ("a"=>"orange", "b"=>"banane", "c"=>"pomme"),
    "nombres" => array (1, 2, 3, 4, 5, 6),
    "trous"   => array ("premier", 5 => "second", "troisième")
);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Index automatique d'un tableau avec <function>array</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$array = array( 1, 1, 1, 1,  1, 8=>1,  4=>1, 19, 3=>13);
print_r($array);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
]]>
     </screen>
    </example>
   </para>
   <para>
    Notez bien que l'index '3' est défini deux fois, et conserve finalement
    sa dernière valeur de 13. L'index '4' est défini après
    l'index '8', et l'index généré suivant (valeur 19) est
    9, puisque le plus grand index est alors 8.
   </para>
   <para>
    Cet exemple crée un tableau dont les index commencent à 1.
    <example>
     <title>Tableau d'index commençant à 1</title>
     <programlisting role="php">
<![CDATA[
<?php
$firstquarter  = array(1 => 'Janvier', 'Février', 'Mars');
print_r($firstquarter);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Array
(
    [1] => Janvier
    [2] => Février
    [3] => Mars
)
]]>
     </screen>
    </example>
   </para>
   <para>
    Tout comme en Perl, vous pouvez accéder à une valeur d'un tableau dans des doubles 
    guillemets.
    Cependant, avec &php;, vous devez entourer votre tableau avec des parenthèses.
    <example>
     <title>Accéder à un tableau dans des doubles guillemets</title>
     <programlisting role="php">
<![CDATA[
<?php

$foo = array('bar' => 'baz');
echo "Hello {$foo['bar']}!"; // Hello baz!

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Voir aussi
    <function>array_pad</function>,
    <function>list</function>,
    <function>count</function>,
    <link linkend="control-structures.foreach">foreach</link> et 
    <function>range</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
