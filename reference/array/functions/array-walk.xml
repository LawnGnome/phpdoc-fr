<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.24 $ -->
<!-- EN-Revision: 1.25 Maintainer: dams Status: ready -->
 <refentry id="function.array-walk">
  <refnamediv>
   <refname>array_walk</refname>
   <refpurpose>
    Exécute une fonction sur chacun des éléments d'un tableau
   </refpurpose>
  </refnamediv>
  <refsect1>
   &reftitle.description;
     <methodsynopsis>
      <type>bool</type><methodname>array_walk</methodname>
      <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
      <methodparam><type>callback</type><parameter>funcname</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>userdata</parameter></methodparam>
     </methodsynopsis>
   <simpara>
    &return.success;
   </simpara>
   <simpara>
    Exécute la fonction <parameter>funcname</parameter> définie par l'utilisateur
    sur chaque élément du tableau <parameter>array</parameter>.
    Typiquement, <parameter>funcname</parameter> prend deux paramètres.
    La valeur du paramètre <parameter>input</parameter>
    étant le premier et la clé/index, le second. Si le paramètre optionnel 
    <parameter>userdata</parameter> est fourni, il sera passé comme troisième
    paramètre à la fonction définie par l'utilisateur 
    <parameter>funcname</parameter>.
   </simpara>
   <simpara>
    Si <parameter>function</parameter> requiert plus de paramètres que ceux 
    donnés, une alerte <link linkend="errorfunc.constants">E_WARNING</link> 
    sera générée à chaque fois que la fonction <function>array_walk</function>
    appellera <parameter>funcname</parameter>. Ces alertes peuvent ne pas
    être affichées en utilisant l'opérateur d'erreur &php; 
    <link linkend="language.operators.errorcontrol">@</link> lors de l'appel
    de la fonction <function>array_walk</function> ou en utilisant 
    <function>error_reporting</function>.
   </simpara>
   <note>
    <para>
     Si <parameter>funcname</parameter> doit travailler avec les véritables
     valeurs du tableau, spécifiez que le premier paramètre de
     <parameter>funcname</parameter> doit être passé par
     référence. Alors, les éléments seront directement
     modifiés dans le tableau.
    </para>
   </note>
   <note>
    <para>
     Passer les clés et <parameter>userdata</parameter> à
     <parameter>funcname</parameter> a été ajouté en &php; 4.0.0
    </para>
   </note>
    <para>
     <function>array_walk</function> n'est pas affecté par le pointeur interne 
     du tableau <parameter>array</parameter>.
     <function>array_walk</function> traversera le tableau en totalité
     sans se soucier de la position du pointeur. 
    </para>
    <para>
     Les utilisateurs ne peuvent pas modifier le tableau lui-même depuis
     la fonction de callback. Par exemple, Ajout/Effacement d'éléments, 
     réinitialisation d'éléments, etc. Si le tableau sur lequel 
     <function>array_walk</function> est appliqué est changé, 
     le comportement de la fonction est indéfini et non prévisible.
    </para>
   <para>
    <example>
     <title>Exemple avec <function>array_walk</function></title>
     <programlisting role="php">
<![CDATA[
<?php;
$fruits = array ("d"=>"citron", "a"=>"orange", "b"=>"banane", "c"=>"pomme");

function test_alter(&$item1, $key, $prefix) {
    $item1 = "$prefix: $item1";
}

function test_print ($item2, $key) {
    echo "$key. $item2<br />\n";
}

echo 'Avant... '."\n";
array_walk ($fruits, 'test_print');

array_walk ($fruits, 'test_alter', 'fruit');
echo '...et après :'."\n";

array_walk ($fruits, 'test_print');
?>
]]>
     </programlisting>
     &example.outputs;
     <screen role="php">
<![CDATA[
Avant...
d. citron
a. orange
b. banane
c. pomme
...et après :
d. fruit: citron
a. fruit: orange
b. fruit: banane
c. fruit: pomme
]]>
     </screen>
    </example>
   </para>
    <simpara>
     Voir aussi
     <function>array_walk_recursive</function>,
     <function>create_function</function>,
     <function>list</function>,
     <link linkend="control-structures.foreach">foreach</link>, 
     <function>each</function>,
     <function>call_user_func_array</function>,
     <function>array_map</function> et
     &seealso.callback;.
    </simpara>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
