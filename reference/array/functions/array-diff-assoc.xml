<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.14 -->
  <refentry id="function.array-diff-assoc">
   <refnamediv>
    <refname>array_diff_assoc</refname>
    <refpurpose>Calcule la différence de deux tableaux, en prenant en compte les clés</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>array</type><methodname>array_diff_assoc</methodname>
      <methodparam><type>array</type><parameter>array1</parameter></methodparam>
      <methodparam><type>array</type><parameter>array2</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_diff_assoc</function> retourne un tableau contenant
     les valeurs du tableau <parameter>array1</parameter>
     qui ne sont présentes dans aucun autre argument. Notez que les
     clés sont utilisées durant la comparaison, contrairement
     à <function>array_diff</function>.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>array_diff_assoc</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$array1 = array("a" => "vert", "rouge", "bleu", "rouge");
$array2 = array("b" => "vert", "jaune", "rouge");
$result = array_diff($array1, $array2);

print_r($result);
?>
]]>
      </programlisting>
      <para>
       Les occurrences multiples du tableau <varname>$array1</varname> 
       ne sont pas traités de la même façon. Le résultat est :
      </para>
      <screen>
<![CDATA[
Array
(
    [1] => bleu
)
]]>
      </screen>
     </example>
    </para>
    <simpara>
     Dans notre exemple ci-dessus, vous pouvez voir que la paire <literal>"a" =&gt; "vert"</literal>
     est présente dans les deux tableaux, et donc, n'est pas présente dans le
     résultat de la fonction. Au contraire, la paire <literal>0 =&gt; "rouge"</literal> 
     est présente dans le résultat, car le second argument <literal>"rouge"</literal>
     possède une clé qui est <literal>1</literal>. 
    </simpara>
    <simpara>
     Les deux valeurs de la paire <literal>clé =&gt; valeur</literal> sont
     considérées égales uniquement si <literal>(string) $elem1 === (string) $elem2</literal>. 
     En d'autre termes, une comparaison stricte est faite sur les représentation
     des index, avec le type chaîne.
     <!-- TODO: example of it... -->
    </simpara>
    <note>
     <simpara>
      Notez bien que cette fonction ne travaille que sur une dimension
      de tableau. Bien sur, vous pouvez utiliser des sous dimensions de tableau
      comme ceci : <literal>array_diff_assoc($array1[0], $array2[0]);</literal>.
     </simpara>
    </note>
    <para>
		   Voir aussi
		   <function>array_diff</function>,
		   <function>array_intersect</function> et 
		   <function>array_intersect_assoc</function>.
		  </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
