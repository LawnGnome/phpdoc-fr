<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.15 $ -->
<!-- EN-Revision: 1.13 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
  <refentry id="function.ip2long">
   <refnamediv>
    <refname>ip2long</refname>
    <refpurpose>
      Convertit une chaîne contenant une adresse (IPv4)
      IP numérique en adresse littérale
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>int</type><methodname>ip2long</methodname>
      <methodparam><type>string</type><parameter>ip_address</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ip2long</function> génère une adresse
     IPv4 à partir de son équivalent numérique. Si 
     <parameter>ip_address</parameter> est invalide, la fonction retournera 
     <literal>-1</literal>. Notez que <literal>-1</literal> n'est pas évalué
     à &false; en &php;.
    </para>
    <note>
     <para>
      Depuis &php; 5.0.0, <function>ip2long</function> retourne &false; si
      le paramètre <parameter>ip_address</parameter> n'est pas valide.
     </para>
    </note>
    <example>
     <title>Exemple avec <function>ip2long</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$ip = gethostbyname('www.example.com');
$out = "Les URLS suivantes sont équivalentes :<br />\n";
$out .= 'http://www.example.com/, http://' . $ip . '/, et http://' . ip2long($ip) . "/<br />\n";
echo $out;
?>
]]>
      </programlisting>
     </example>
     <note>
      <para>
       Comme les entiers &php; sont signés et que beaucoup d'adresses IP
       peuvent être des entiers négatifs, vous devez utiliser
       le formateur "%u" de la fonction 
       <function>sprintf</function> ou <function>printf</function>
       pour récupérer une représentation sous la forme d'une chaîne de caractères
       pour les adresses IP non signées.
      </para>
     </note>
     <para>
      Ce second exemple montre comment afficher une adresse convertie
      à l'aide de la fonction <function>printf</function> en &php; 4 et en &php; 5 :
     </para>
     <example>
      <title>Affichage d'adresse IP</title>
      <programlisting role="php">
<![CDATA[
<?php
$ip   = gethostbyname('www.example.com');
$long = ip2long($ip);

if ($long == -1 || $long === FALSE) {
    echo 'IP invalide, merci d\'essayer encore';
} else {
    echo $ip   . "\n";           // 192.0.34.166
    echo $long . "\n";           // -1073732954
    printf("%u\n", ip2long($ip)); // 3221234342
}
?>
]]>
      </programlisting>
     </example>
    <para>
     <function>ip2long</function> ne devrait pas être utilisée comme seule
     méthode pour valider une adresse IP. Combinez-la avec <function>long2ip</function> :
    </para>
    <example>
     <title>Validation d'adresse IP</title>
     <programlisting role="php">
<![CDATA[
<?php
// s'assure que les IPs sont valides. Convertie également une IP incomplète 
// en un format valide comme expliqué plus haut.
$ip = long2ip(ip2long("127.0.0.1")); // "127.0.0.1"
$ip = long2ip(ip2long("10.0.0")); // "10.0.0.0"
$ip = long2ip(ip2long("10.0.256")); // "10.0.1.0"
?>
]]>
     </programlisting>
    </example>
    <para>
     <function>ip2long</function> fonctionne également avec des adresses IP
     incomplètes. Lisez <ulink url="&url.ip2long.tech;">&url.ip2long.tech;</ulink>
     pour plus d'informations.
    </para>
    <note>
     <para>
      <function>ip2long</function> devrait retourner <literal>-1</literal> (&php; 4)
      ou &false; (&php; 5) pour l'adresse IP <literal>255.255.255.255</literal>.
     </para>
    </note>
    <para>
     Voir aussi
     <function>long2ip</function> et 
     <function>sprintf</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
