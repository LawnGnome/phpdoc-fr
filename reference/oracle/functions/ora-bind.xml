<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/oracle.xml, last change in rev 1.2 -->
<!-- last change to 'ora-bind' in en/ tree in rev 1.2 -->
  <refentry id="function.ora-bind">
   <refnamediv>
    <refname>Ora_Bind</refname>
    <refpurpose>
     Lie une variable PHP &agrave; un param&egrave;tre Oracle.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>ora_bind</methodname>
      <methodparam><type>resource</type><parameter>cursor</parameter></methodparam>
      <methodparam><type>string</type><parameter>PHP variable name</parameter></methodparam>
      <methodparam><type>string</type><parameter>SQL parameter name</parameter></methodparam>
      <methodparam><type>int</type><parameter>length</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>ora_bind</function> retourne &true;
     si la liaison a pu se faire, et sinon &false;.
     Les erreurs sont accessibles avec les fonctions    
     <function>ora_error</function> et <function>ora_errorcode</function>.
    </para>
    <para>
     Cette fonction lie une variable PHP avec un param&egrave;tre SQL. Le
     param&egrave;tre SQL doit &ecirc;tre de la forme ":name". Avec l'option,
     vous pouvez choisir si le param&egrave;tre SQL est de type 
     entr&eacute;e/sortie (0, valeur par d&eacute;faut), entr&eacute;e seulement
     (1) ou sortie seulement (2). Comme dans PHP 3.0.1, vous pouvez
     respectivement utiliser les constantes ORA_BIND_INOUT, ORA_BIND_IN et
     ORA_BIND_OUT plut&ocirc;t que des nombres.
    </para>
    <para>
     <function>ora_bind</function> doit &ecirc;tre appel&eacute;e apr&egrave;s
     la fonction <function>ora_parse</function> et avant
     <function>ora_exec</function>. Les valeurs d'entr&eacute;es peuvent alors
     &ecirc;tre fournies par assignation des variables PHP. Apr&egrave;s la
     fonction <function>ora_exec</function> les variables li&eacute;es
     contiennent les valeurs de sortie, si elles sont disponibles. Par exemple :
     <informalexample>
      <programlisting role="php">
&lt;?php
ora_parse($curs, "declare tmp INTEGER; begin tmp := :in; :out := tmp; :x := 7.77; end;");
ora_bind($curs, "result", ":x", $len, 2);
ora_bind($curs, "input", ":in", 5, 1);
ora_bind($curs, "output", ":out", 5, 2);
$input = 765;
ora_exec($curs);
echo "R&eacute;sultat: $result&lt;br&gt;Sortie: $output&lt;br&gt;Entr&eacute;e: $input";
?&gt;
      </programlisting>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
