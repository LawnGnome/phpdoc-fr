<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/classobj.xml, last change in rev 1.13 -->
<!-- last change to 'call-user-method' in en/ tree in rev 1.4 -->
 <refentry id="function.call-user-method">
  <refnamediv>
   <refname>call_user_method</refname>
   <refpurpose>
    Appelle une m&eacute;thode utilisateur d'un objet
   </refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>mixed</type><methodname>call_user_method</methodname>
     <methodparam><type>string</type><parameter>method_name</parameter></methodparam>
     <methodparam><type>object</type><parameter>obj</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>parameter</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
    </methodsynopsis>
   <para>
    Appelle la m&eacute;thode <parameter>method_name</parameter> depuis l'objet
    <parameter>obj</parameter>. Un exemple d'utilisation de cet objet
    est pr&eacute;sent&eacute; ci-dessous, o&ugrave; une classe est d&eacute;finie, puis instanti&eacute;e.
    On utilise alors <function>call_user_method</function> pour appeler
    indirectement les m&eacute;thodes <varname>print_info</varname>.
    <informalexample>
     <programlisting role="php">
&lt;?php
class Pays {
    var $NOM;
    var $TLD;
    function Pays($nom, $tld) {
        $this-&gt;NOM = $nom;
        $this-&gt;TLD = $tld;
    }
    function print_info($prestr=&quot;&quot;) {
        echo $prestr.&quot;Pays: &quot;.$this-&gt;NOM.&quot;\n&quot;;
        echo $prestr.&quot;Nom de domaine: &quot;.$this-&gt;TLD.&quot;\n&quot;;
    }
}
$unPays = new Pays(&quot;P&eacute;rou&quot;,&quot;pe&quot;);
echo &quot;* Appel de la m&eacute;thode directement\n&quot;;
$unPays-&gt;print_info();
echo &quot;\n* Appel de la m&eacute;thode indirectement\n&quot;;
call_user_method (&quot;print_info&quot;, $unPays, &quot;\t&quot;);
?&gt;
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Voir aussi
    <function>call_user_func_array</function>.
    <function>call_user_func</function> et
    <function>call_user_method_array</function>.
   </simpara>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
