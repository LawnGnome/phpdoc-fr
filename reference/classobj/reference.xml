<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<reference id="ref.classobj">
 <title>Classes et Objets</title>
 <titleabbrev>Classes et Objets</titleabbrev>
<<<<<<< reference.xml

  <partintro>
    <section id="classobj.intro">
     &reftitle.intro;
     <para>
      Ces fonctions vous donnent des informations sur les objets
      et les classes. Vous pouvez lire le nom de la classe qui
      est instanci&eacute;e par un objet, ainsi que la liste des membres
      et des m&eacute;thodes. En utilisant ces fonctions, vous pouvez
      non seulement connaitre la classe d'un objet, mais aussi 
      tous ses ascendants (i.e. la classe qui est &eacute;tendue par une
      autre classe).
     </para>
    </section>

   <section id="classobj.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   <section id="classobj.installation">
    &reftitle.install;
    &no.install;
   </section>

   <section id="classobj.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="classobj.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section id="classobj.constants">
    &reftitle.constants;
    &no.constants;
   </section>
  <section id="classobj.examples">
     &reftitle.examples;
     <para>
   Dans cet exemple, on d&eacute;finit une classe de base, et une
   extension. La classe de base d&eacute;finit un l&eacute;gume, s'il est
   mangeable ou pas et sa couleur. La sous-classe
   <varname>epinard</varname> ajoute une m&eacute;thode pour le cuisiner,
   et une autre pour savoir s'il est cuisin&eacute;.
     </para>
     <para>
      <example>
       <title>Fonctions d'objets : classes.inc</title>
       <programlisting role="php">
<![CDATA[
<?php

// classe de base, avec ses membres et ses m&eacute;thodes
class Legume {

    var $edible;
    var $color;

    function Legume( $edible, $color="green" ) {
        $this->edible = $edible;
        $this->color = $color;
    }

    function is_edible() {
        return $this->edible;
    }

    function what_color() {
        return $this->color;
    }
    
} // fin de la classe Legume

// Extension la classe de base
class Epinard extends Legume {
    var $cuit = FALSE;
    function Epinard() {
        $this-&gt;Legume( TRUE, &quot;green&quot; );
    }
    function cuisine() {
        $this-&gt;cuit = TRUE;
    }

    function is_cooked() {
        return $this->cooked;
    }
    
} // fin de la classe Epinard

?>
]]>
       </programlisting>
      </example>
     </para>

  <para>
   Lorsqu'on instantie deux objets de ces classes et que l'on affiche
   leurs informations, on affiche aussi leur h&eacute;ritage. On d&eacute;finit ici
   des utilitaires qui servent essentiellement &agrave; afficher ces
   informations proprement.
  </para>
    <para>
      <example>
       <title>Fonctions d'objets : test_script.php</title>
       <programlisting role="php">
<![CDATA[
<pre>
<?php

include "classes.inc";

// Fonctions utilitaires
function print_vars($obj) {
    $arr = get_object_vars($obj);
    while (list($prop, $val) = each($arr))
        echo "\t$prop = $val\n";
}

function print_methods($obj) {
    $arr = get_class_methods(get_class($obj));
    foreach ($arr as $method)
        echo "\tfonction $method()\n";
}

function class_parentage($obj, $class) {
    global $$obj;
    if (is_subclass_of($$obj, $class)) {
        echo "L'objet $obj appartient &agrave; la classe ".get_class($$obj);
        echo " est une sous-classe de $class\n";
    } else {
        echo "L'objet $obj n'est pas une sous-classe de $class\n";
    }
}

// instantie 2 objets

$veggie = new Legume(true,"blue");
$leafy = new Epinard();

// affiche les informations sur ces objets
echo "l&eacute;gume : CLASS ".get_class($veggie)."\n";
echo "feuillues : CLASS ".get_class($leafy);
echo ", PARENT ".get_parent_class($leafy)."\n";

// affiche les propri&eacute;t&eacute;s du l&eacute;gume
echo "\nl&eacute;gumes : Propri&eacute;t&eacute;s\n";
print_vars($veggie);

// et les m&eacute;thodes des feuillus
echo "\nfeuillus : M&eacute;thodes\n";
print_methods($leafy);

  echo "\nParent&eacute;e:\n";
class_parentage("leafy", "Epinard");
class_parentage("leafy", "Legume");
?>
</pre>
]]>
       </programlisting>
      </example>
     </para>
  <para>
   Il est important de noter que dans les exemples ci-dessus, les objets
   <varname>$feuilles</varname> sont une instance de
   <classname>Epinard</classname> qui est une sous-classe de
   <classname>Legume</classname>, donc la derni&egrave;re partie du script
   va afficher :
  </para>
  <para>
   <informalexample>
    <screen>
<![CDATA[
[...]
    Parent&eacute;e:
    L'objet feuilles n'est pas une sous classe epinard
    L'objet feuilles est une sous-classe de Legume
]]>
    </screen>
   </informalexample>
  </para>
  </section>
 </partintro>
  
&reference.classobj.functions;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

