<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 283976 $ -->
<!-- EN-Revision: 290998 Maintainer: gui Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="mysqlnd.stats" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Statistiques</title>
 <para>
  <emphasis role="bold">Utilisation des donnés statistiques</emphasis>
 </para>
 <para>
  Le pilote natif MySQL peut collecter des statistiques sur la communication entre
  le client et le serveur. Ces statistiques sont de trois sortes :
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Les statistiques client
   </para>
  </listitem>
  <listitem>
   <para>
    Les statistiques de connexion
   </para>
  </listitem>
  <listitem>
   <para>
    Les statistiques de cache Zval
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Si vous utilisez l'extension <literal>mysqli</literal>, ces statistiques sont disponibles
  via trois appels d'API :
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <function>mysqli_get_client_stats</function>
   </para>
  </listitem>
  <listitem>
   <para>
    <function>mysqli_get_connection_stats</function>
   </para>
  </listitem>
  <listitem>
   <para>
    <function>mysqli_get_cache_stats</function>
   </para>
  </listitem>
 </itemizedlist>
 <note>
  <para>
   Les statistiques sont agrégées entre toutes les extensions qui utilisent
   le pilote natif MySQL. Par exemple, quand les extensions
   <literal>ext/mysql</literal> et <literal>ext/mysqli</literal>
   sont toutes deux compilées par rapport au pilote natif MySQL, les appels de 
   fonctions de <literal>ext/mysql</literal> et <literal>ext/mysqli</literal> 
   changeront tous les deux les statistiques. Il n'y a aucun moyen de savoir
   comment des appels à une certaine API compilée par rapport au pilote natif MySQL
   ont modifié une statistique donnée. Vous pouvez configurer le pilote PDO MySQL,
   <literal>ext/mysql</literal> et <literal>ext/mysqli</literal> pour éventuellement
   utiliser le pilote natif MySQL. Dans ce cas, les trois extensions modifieront les
   statistiques.
  </para>
 </note>
 <para>
  <emphasis role="bold">Accéder aux statistiques client</emphasis>
 </para>
 <para>
  Pour accéder aux statistiques client, vous devez appeler
  <function>mysqli_get_client_stats</function>. L'appel à la fonction ne requiert
  aucun paramètre.
 </para>
 <para>
  Cette fonction retourne un tableau associatif contenant le nom
  de la statistique comme clé et la donnée statistiques comme valeur.
 </para>
 <para>
  Les statistiques client peuvent aussi être accédées via la fonction
  <function>phpinfo</function>.
 </para>
 <para>
  <emphasis role="bold">Accéder aux statistiques de connexion</emphasis>
 </para>
 <para>
  Pour accéder aux statistiques client, vous devez appeler
  <function>mysqli_get_connection_stats</function>. Cette fonction prend en paramètre
  la ressource de connexion à la base de données.
 </para>
 <para>
  Cette fonction retourne un tableau associatif contenant le nom de la statistique comme clé
  et la donnée statistique comme valeur.
 </para>
 <para>
  <emphasis role="bold">Accéder aux statistiques de cache Zval</emphasis>
 </para>
 <para>
  Le pilote natif MySQL collecte aussi des statistiques sur son cache interne de Zval.
  Ces statistiques peuvent être accédées en utilisant
  <function>mysqli_get_cache_stats</function>.
 </para>
 <para>
  Les statistiques de cache Zval obtenues peuvent permettre de régler avec précision un
  paramètre du <filename>php.ini</filename> relatif au cache Zval, aboutissant à de meilleures
  performances.
 </para>
 <para>
  <emphasis role="bold">Buffered and Unbuffered Result Sets</emphasis>
 </para>
 <para>
  Les jeux de résultats peuvent être mis ou non en tampon. Le paramétrage par défaut
  fait fonctionner <literal>ext/mysql</literal> and <literal>ext/mysqli</literal> avec
  des jeux de résultats en tampon pour des requêtes normales (non préparées).
  Les jeux de résultats sont stockés côté client. Après l'exécution de la requête, tous les 
  résultats sont récupérés du serveur MySQL et mis en cache côté client.
  Le grand avantage de jeux de résultat mis en tampon est qu'ils autorisent le serveur à 
  libérer les ressources allouées à un jeu de résultat, dès que ceux-ci ont été récupérés par
  le client.
 </para>
 <para>
  D'autre part, des jeux de résultats non mis en tampon sont gardés plus longtemps sur le serveur.
  Si vous voulez réduire la consommation de mémoire côté client, mais en contre-partie augmenter
  la charge sur le serveur, ne mettez pas les résultats en tampon. Si vous avez par contre une
  charge serveur importante et que vos soupçons se portent sur les résultats non mis en tampon, vous
  devriez considérer de déplacer la charge côté client. Les clients s'adaptent généralement plus 
  facilement que les serveurs. La charge (<quote>Load</quote>) ne concerne pas seulement les tampons
  mémoire. En effet, le serveur a aussi besoin de garder d'autres ressources ouvertes, par exemple 
  des threads ou des descripteurs de fichier, avant qu'un jeu de résultat ne soit libéré.
 </para>
 <para>
  Les requêtes préparées ne mettent pas par défaut les résultats en tampona. Vous pouvez 
  toujours utiliser <function>mysqli_stmt_store_result</function> pour activer la mise
  en tampon des résultats.
 </para>
 <para>
  <emphasis role="bold">Statistiques retournées par le pilote natif MySQL</emphasis>
 </para>
 <para>
  Le tableau suivant présente une liste des statistiques retournées par les fonctions
  <function>mysqli_get_client_stats</function>,
  <function>mysqli_get_connection_stats</function> et
  <function>mysqli_get_cache_stats</function>.
 </para>
 <para>
  <emphasis role="bold">Réseau</emphasis>
 </para>
 <informaltable>
  <tgroup cols="4">
   <colspec colwidth="30*"/>
   <tbody>
    <row>
     <entry><emphasis role="bold">Statistique</emphasis></entry>
    </row>
    <row>
     <entry>bytes_sent</entry>
    </row>
    <row>
     <entry>bytes_received</entry>
    </row>
    <row>
     <entry>packets_sent</entry>
    </row>
    <row>
     <entry>packets_received</entry>
    </row>
    <row>
     <entry>protocol_overhead_in</entry>
    </row>
    <row>
     <entry>protocol_overhead_out</entry>
    </row>
    <row>
     <entry>bytes_received_ok_packet</entry>
    </row>
    <row>
     <entry>bytes_received_eof_packet</entry>
    </row>
    <row>
     <entry>bytes_received_rset_header_packet</entry>
    </row>
    <row>
     <entry>bytes_received_rset_field_meta_packet</entry>
    </row>
    <row>
     <entry>bytes_received_rset_row_packet</entry>
    </row>
    <row>
     <entry>bytes_received_prepare_response_packet</entry>
    </row>
    <row>
     <entry>bytes_received_change_user_packet</entry>
    </row>
    <row>
     <entry>packets_sent_command</entry>
    </row>
    <row>
     <entry>packets_received_ok</entry>
    </row>
    <row>
     <entry>packets_received_eof</entry>
    </row>
    <row>
     <entry>packets_received_rset_header</entry>
    </row>
    <row>
     <entry>packets_received_rset_field_meta</entry>
    </row>
    <row>
     <entry>packets_received_rset_row</entry>
    </row>
    <row>
     <entry>packets_received_prepare_response</entry>
    </row>
    <row>
     <entry>packets_received_change_user</entry>
    </row>
    <row>
     <entry>result_set_queries</entry>
    </row>
    <row>
     <entry>non_result_set_queries</entry>
    </row>
    <row>
     <entry>no_index_used</entry>
    </row>
    <row>
     <entry>bad_index_used</entry>
    </row>
    <row>
     <entry>slow_queries</entry>
    </row>
    <row>
     <entry>buffered_sets</entry>
    </row>
    <row>
     <entry>unbuffered_sets</entry>
    </row>
    <row>
     <entry>ps_buffered_sets</entry>
    </row>
    <row>
     <entry>ps_unbuffered_sets</entry>
    </row>
    <row>
     <entry>flushed_normal_sets</entry>
    </row>
    <row>
     <entry>flushed_ps_sets</entry>
    </row>
    <row>
     <entry>ps_prepared_never_executed</entry>
    </row>
    <row>
     <entry>ps_prepared_once_executed</entry>
    </row>
    <row>
     <entry>rows_fetched_from_server_normal</entry>
    </row>
    <row>
     <entry>rows_fetched_from_server_ps</entry>
    </row>
    <row>
     <entry>rows_buffered_from_client_normal</entry>
    </row>
    <row>
     <entry>rows_buffered_from_client_ps</entry>
    </row>
    <row>
     <entry>rows_fetched_from_client_normal_buffered</entry>
    </row>
    <row>
     <entry>rows_fetched_from_client_normal_unbuffered</entry>
    </row>
    <row>
     <entry>rows_fetched_from_client_ps_buffered</entry>
    </row>
    <row>
     <entry>rows_fetched_from_client_ps_unbuffered</entry>
    </row>
    <row>
     <entry>rows_fetched_from_client_ps_cursor</entry>
    </row>
    <row>
     <entry>rows_skipped_normal</entry>
    </row>
    <row>
     <entry>rows_skipped_ps</entry>
    </row>
    <row>
     <entry>copy_on_write_saved</entry>
    </row>
    <row>
     <entry>copy_on_write_performed</entry>
    </row>
    <row>
     <entry>command_buffer_too_small</entry>
    </row>
    <row>
     <entry>connect_success</entry>
    </row>
    <row>
     <entry>connect_failure</entry>
    </row>
    <row>
     <entry>connection_reused</entry>
    </row>
    <row>
     <entry>reconnect</entry>
    </row>
    <row>
     <entry>pconnect_success</entry>
    </row>
    <row>
     <entry>active_connections</entry>
    </row>
    <row>
     <entry>active_persistent_connections</entry>
    </row>
    <row>
     <entry>explicit_close</entry>
    </row>
    <row>
     <entry>implicit_close</entry>
    </row>
    <row>
     <entry>disconnect_close</entry>
    </row>
    <row>
     <entry>in_middle_of_command_close</entry>
    </row>
    <row>
     <entry>explicit_free_result</entry>
    </row>
    <row>
     <entry>implicit_free_result</entry>
    </row>
    <row>
     <entry>explicit_stmt_close</entry>
    </row>
    <row>
     <entry>implicit_stmt_close</entry>
    </row>
    <row>
     <entry>mem_emalloc_count</entry>
    </row>
    <row>
     <entry>mem_emalloc_ammount</entry>
    </row>
    <row>
     <entry>mem_ecalloc_count</entry>
    </row>
    <row>
     <entry>mem_ecalloc_ammount</entry>
    </row>
    <row>
     <entry>mem_erealloc_count</entry>
    </row>
    <row>
     <entry>mem_erealloc_ammount</entry>
    </row>
    <row>
     <entry>mem_efree_count</entry>
    </row>
    <row>
     <entry>mem_malloc_count</entry>
    </row>
    <row>
     <entry>mem_malloc_ammount</entry>
    </row>
    <row>
     <entry>mem_calloc_count</entry>
    </row>
    <row>
     <entry>mem_calloc_ammount</entry>
    </row>
    <row>
     <entry>mem_realloc_count</entry>
    </row>
    <row>
     <entry>mem_realloc_ammount</entry>
    </row>
    <row>
     <entry>mem_free_count</entry>
    </row>
    <row>
     <entry>proto_text_fetched_null</entry>
    </row>
    <row>
     <entry>proto_text_fetched_bit</entry>
    </row>
    <row>
     <entry>proto_text_fetched_tinyint</entry>
    </row>
    <row>
     <entry>proto_text_fetched_short</entry>
    </row>
    <row>
     <entry>proto_text_fetched_int24</entry>
    </row>
    <row>
     <entry>proto_text_fetched_int</entry>
    </row>
    <row>
     <entry>proto_text_fetched_bigint</entry>
    </row>
    <row>
     <entry>proto_text_fetched_decimal</entry>
    </row>
    <row>
     <entry>proto_text_fetched_float</entry>
    </row>
    <row>
     <entry>proto_text_fetched_double</entry>
    </row>
    <row>
     <entry>proto_text_fetched_date</entry>
    </row>
    <row>
     <entry>proto_text_fetched_year</entry>
    </row>
    <row>
     <entry>proto_text_fetched_time</entry>
    </row>
    <row>
     <entry>proto_text_fetched_datetime</entry>
    </row>
    <row>
     <entry>proto_text_fetched_timestamp</entry>
    </row>
    <row>
     <entry>proto_text_fetched_string</entry>
    </row>
    <row>
     <entry>proto_text_fetched_blob</entry>
    </row>
    <row>
     <entry>proto_text_fetched_enum</entry>
    </row>
    <row>
     <entry>proto_text_fetched_set</entry>
    </row>
    <row>
     <entry>proto_text_fetched_geometry</entry>
    </row>
    <row>
     <entry>proto_text_fetched_other</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_null</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_bit</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_tinyint</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_short</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_int24</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_int</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_bigint</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_decimal</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_float</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_double</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_date</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_year</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_time</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_datetime</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_timestamp</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_string</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_blob</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_enum</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_set</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_geometry</entry>
    </row>
    <row>
     <entry>proto_binary_fetched_other</entry>
    </row>
   </tbody>
  </tgroup>
 </informaltable>
 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
