<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.2 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="ming.swfaction" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SWFAction</refname>
  <refpurpose>Classe SWFAction</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <para>
   La synthaxe de script est basée sur le langage C mais avec beaucoup
   de différences - le bytcode SWF est simplifié pour ne faire que ce dont
   on a besoin. Actuellement, nous ne pouvons pas implémenter des appels
   à des fonctions sans d'affreux hacks car le bytecode a des valeurs de
   position codées en interne.
  </para>
  <para>
   Que reste-t-il donc ? le compilateur reconnait les instances suivantes :
   <itemizedlist>
    <listitem>
     <simpara>
      break
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      for
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      continue
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      if
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      else
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      do
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      while
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Il n'y a pas de données typées ; toutes les valeurs d'une action SWF sont
   stockées sous la forme de chaînes de caractères. Les fonctions suivantes
   peuvent être utilisées dans les expressions :
   <variablelist>
    <varlistentry>
     <term>time()</term>
     <listitem>
      <simpara>
       Retourne le nombre de millisecondes effectuées depuis le début d'une vidéo.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>random(seed)</term>
     <listitem>
      <simpara>
       Retourne le nombre pseudo-aléatoire dans la rangée 0-seed.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>length(expr)</term>
     <listitem>
      <simpara>
       Retourne la longueur de l'expression donnée.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>int(number)</term>
     <listitem>
      <simpara>
       Retourne le nombre donné arrondi au nombre inférieur.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>concat(expr, expr)</term>
     <listitem>
      <simpara>
       Retourne la concaténation des expressions données.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ord(expr)</term>
     <listitem>
      <simpara>
       Retourne le code ASCII pour le caractère donné.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>chr(num)</term>
     <listitem>
      <simpara>
       Retourne le caractère pour le code ASCII donné.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>substr(string, location, length)</term>
     <listitem>
      <simpara>
       Retourne la sous chaîne de la longueur <parameter>length</parameter>
       à la position <parameter>location</parameter> de la chaîne
       <parameter>string</parameter> donnée.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   De plus, les commandes suivantes peuvent être utilisées :
   <variablelist>
    <varlistentry>
     <term>duplicateClip(clip, name, depth)</term>
     <listitem>
      <simpara>
       Duplique la vidéo nommée <parameter>clip</parameter> (aka sprite).
       La nouvelle vidéo a le nom <parameter>name</parameter> et est à la
       profondeur <parameter>depth</parameter>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>removeClip(expr)</term>
     <listitem>
      <simpara>
       Efface la vidéo fournie.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>trace(expr)</term>
     <listitem>
      <simpara>
       Écrit l'expression donnée dans l'historique des traces.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>startDrag(target, lock, [left, top, right, bottom])</term>
     <listitem>
      <simpara>
       Démarre le déplacement de la vidéo <parameter>target</parameter>.
       L'argument <parameter>lock</parameter> indique si l'on verrouille
       la sourie - utilisez 0 (&false;) ou 1 (&true;).
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>stopDrag()</term>
     <listitem>
      <simpara>
       Commence le déplacement.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>callFrame(expr)</term>
     <listitem>
      <simpara>
       Appel la frame nommée, comme une fonction.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>getURL(url, target, [method])</term>
     <listitem>
      <simpara>
       Charge l'URL donnée, dans la cible nommée. L'argument
       <parameter>target</parameter> correspond à la cible du document HTML
       (comme "_top" ou "_blank"). L'argument optionnel <parameter>method</parameter>
       peut être POST ou GET si vous voulez soumettre les variables au serveur.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>loadMovie(url, target)</term>
     <listitem>
      <simpara>
       Charge l'URL donnée dans la cible nommée. L'argument
       <parameter>target</parameter> peut être le nom d'une frame, ou
       une des valeurs magiques : "_level0" (remplace la vidéo courante)
       ou "_level1" (charge la nouvelle vidéo au dessus de la vidéo courante).
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>nextFrame()</term>
     <listitem>
      <simpara>
       Se place sur la prochaine frame.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>prevFrame()</term>
     <listitem>
      <simpara>
       Se place sur la dernière (ou, plutôt, précédente) frame.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>play()</term>
     <listitem>
      <simpara>
       Commence à jouer la vidéo.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>stop()</term>
     <listitem>
      <simpara>
       Arrête de jouer la vidéo.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>toggleQuality()</term>
     <listitem>
      <simpara>
       Passe d'une qualité haute à basse, et inversement.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>stopSounds()</term>
     <listitem>
      <simpara>
       Arrête de jouer tous les sons.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>gotoFrame(num)</term>
     <listitem>
      <simpara>
       Se place sur la frame numéro <parameter>num</parameter>.
       Les numéros de frame commencent à 0.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>gotoFrame(name)</term>
     <listitem>
      <simpara>
       Se place sur la frame nommée <parameter>name</parameter>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>setTarget(expr)</term>
     <listitem>
      <simpara>
       Définit le contexte de l'action.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
   L'expression frameLoaded(num) peut être utilisée dans les instructions if
   et les boucles while pour vérifier si le numéro de frame donné a déjà été chargé.
  </para>
  <para>
   Les vidéos ( aka sprites) ont des propriétés. Vous pouvez les lire, en
   définir quelques unes. Voici la liste :
    <itemizedlist>
     <listitem>
      <simpara>
       x
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       y
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       xScale
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       yScale
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       currentFrame - (lecuture seule) 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       totalFrames - (lecuture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       alpha - degré de transparence
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       visible - 1=on, 0=off
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       width - (lecuture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       height - (lecuture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       rotation 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       target - (lecuture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       framesLoaded - (lecuture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       name 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       dropTarget - (lecuture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       url - (lecuture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       highQuality - 1=high, 0=low
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       focusRect
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       soundBufTime
      </simpara>
     </listitem>
    </itemizedlist>
    Donc, définir la position d'un sprite est aussi simple que
    So, setting a sprite's x position is as simple as 
    <literal>/box.x = 100;</literal>. Pourquoi le slash au début ?
    C'est la façon dont Flash garde une trace des sprites dans une vidéo,
    tout comme le système de fichiers Unix - ici, la boite est au premier
    niveau. Si le sprite nommée "box" a un autre sprite nommé "biff" au dessous,
    vous pouvez définir sa position comme ceci :
    <literal>/box/biff.x = 100;</literal>
  </para>
 </refsect1>

 <refsect1 role="members" xml:id="ming.swfaction.members">
  <title>Class Members</title>
  <refsect2 xml:id="ming.swfaction.methods">
   &reftitle.methods;
   <simplelist>
    <member><xref linkend="function.swfaction.construct" /></member>
   </simplelist>
  </refsect2>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Cet exemple simple déplace un carré rouge dans la fenêtre.
   <example>
    <title>Exemple avec <function>swfaction</function></title>
    <programlisting role="php">
<![CDATA[
<?php
  $s = new SWFShape();
  $f = $s->addFill(0xff, 0, 0);
  $s->setRightFill($f);

  $s->movePenTo(-500, -500);
  $s->drawLineTo(500, -500);
  $s->drawLineTo(500, 500);
  $s->drawLineTo(-500, 500);
  $s->drawLineTo(-500, -500);

  $p = new SWFSprite();
  $i = $p->add($s);
  $i->setDepth(1);
  $p->nextFrame();

  for ($n=0; $n<5; ++$n) {
    $i->rotate(-15);
    $p->nextFrame();
  }

  $m = new SWFMovie();
  $m->setBackground(0xff, 0xff, 0xff);
  $m->setDimension(6000, 4000);

  $i = $m->add($p);
  $i->setDepth(1);
  $i->moveTo(-500,2000);
  $i->setName("box");

  $m->add(new SWFAction("/box.x += 3;"));
  $m->nextFrame();
  $m->add(new SWFAction("gotoFrame(0); play();"));
  $m->nextFrame();

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Cet exemple déplace la souris vers le bas à l'écran.
   <example>
    <title>Exemple avec <function>swfaction</function></title>
    <programlisting role="php">
<![CDATA[
<?php

  $m = new SWFMovie();
  $m->setRate(36.0);
  $m->setDimension(1200, 800);
  $m->setBackground(0, 0, 0);

  $i = $m->add(new SWFSprite());
  $i->setName('mouse');

  $m->add(new SWFAction("
    startDrag('/mouse', 1); /* '1' signifie le verrou du sprite à la souris */
  "));

  /* might as well turn off antialiasing, since these are just squares. */

  $m->add(new SWFAction("
    this.quality = 0;
  "));

  /* morphing box */
  $r = new SWFMorph();
  $s = $r->getShape1();

  /* Note this is backwards from normal shapes.  No idea why. */
  $s->setLeftFill($s->addFill(0xff, 0xff, 0xff));
  $s->movePenTo(-40, -40);
  $s->drawLine(80, 0);
  $s->drawLine(0, 80);
  $s->drawLine(-80, 0);
  $s->drawLine(0, -80);

  $s = $r->getShape2();

  $s->setLeftFill($s->addFill(0x00, 0x00, 0x00));
  $s->movePenTo(-1, -1);
  $s->drawLine(2, 0);
  $s->drawLine(0, 2);
  $s->drawLine(-2, 0);
  $s->drawLine(0, -2);

  /* sprite container for morphing box -
     this is just a timeline w/ the box morphing */

  $box = new SWFSprite();
  $box->add(new SWFAction("
    stop();
  "));
  $i = $box->add($r);

  for ($n=0; $n<=20; ++$n) {
    $i->setRatio($n/20);
    $box->nextFrame();
  }

  /* this container sprite allows us to use the same action code many times */

  $cell = new SWFSprite();
  $i = $cell->add($box);
  $i->setName('box');

  $cell->add(new SWFAction("

    setTarget('box');

    /* ...x means the x coordinate of the parent, i.e. (..).x */
    dx = (/mouse.x + random(6)-3 - ...x)/5;
    dy = (/mouse.y + random(6)-3 - ...y)/5;
    gotoFrame(int(dx*dx + dy*dy));

  "));

  $cell->nextFrame();
  $cell->add(new SWFAction("

    gotoFrame(0);
    play();

  "));

  $cell->nextFrame();

  /* finally, add a bunch of the cells to the movie */

  for ($x=0; $x<12; ++$x) {
    for ($y=0; $y<8; ++$y) {
      $i = $m->add($cell);
      $i->moveTo(100*$x+50, 100*$y+50);
    }
  }

  $m->nextFrame();

  $m->add(new SWFAction("

    gotoFrame(1);
    play();

  "));

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Identique à ce qui précède, mais avec des balles colorées.
   <example>
    <title>Exemple avec <function>swfaction</function></title>
    <programlisting role="php">
<![CDATA[
<?php

  $m = new SWFMovie();
  $m->setDimension(11000, 8000);
  $m->setBackground(0x00, 0x00, 0x00);

  $m->add(new SWFAction("

this.quality = 0;
/frames.visible = 0;
startDrag('/mouse', 1);

  "));

  // mouse tracking sprite
  $t = new SWFSprite();
  $i = $m->add($t);
  $i->setName('mouse');

  $g = new SWFGradient();
  $g->addEntry(0, 0xff, 0xff, 0xff, 0xff);
  $g->addEntry(0.1, 0xff, 0xff, 0xff, 0xff);
  $g->addEntry(0.5, 0xff, 0xff, 0xff, 0x5f);
  $g->addEntry(1.0, 0xff, 0xff, 0xff, 0);

  // gradient shape thing
  $s = new SWFShape();
  $f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT);
  $f->scaleTo(0.03);
  $s->setRightFill($f);
  $s->movePenTo(-600, -600);
  $s->drawLine(1200, 0);
  $s->drawLine(0, 1200);
  $s->drawLine(-1200, 0);
  $s->drawLine(0, -1200);

  // need to make this a sprite so we can multColor it
  $p = new SWFSprite();
  $p->add($s);
  $p->nextFrame();

  // put the shape in here, each frame a different color
  $q = new SWFSprite();
  $q->add(new SWFAction("gotoFrame(random(7)+1); stop();"));
  $i = $q->add($p);

  $i->multColor(1.0, 1.0, 1.0);
  $q->nextFrame();
  $i->multColor(1.0, 0.5, 0.5);
  $q->nextFrame();
  $i->multColor(1.0, 0.75, 0.5);
  $q->nextFrame();
  $i->multColor(1.0, 1.0, 0.5);
  $q->nextFrame();
  $i->multColor(0.5, 1.0, 0.5);
  $q->nextFrame();
  $i->multColor(0.5, 0.5, 1.0);
  $q->nextFrame();
  $i->multColor(1.0, 0.5, 1.0);
  $q->nextFrame();

  // finally, this one contains the action code
  $p = new SWFSprite();
  $i = $p->add($q);
  $i->setName('frames');
  $p->add(new SWFAction("

dx = (/:mousex-/:lastx)/3 + random(10)-5;
dy = (/:mousey-/:lasty)/3;
x = /:mousex;
y = /:mousey;
alpha = 100;

  "));
  $p->nextFrame();

  $p->add(new SWFAction("

this.x = x;
this.y = y;
this.alpha = alpha;
x += dx;
y += dy;
dy += 3;
alpha -= 8;

  "));
  $p->nextFrame();

  $p->add(new SWFAction("prevFrame(); play();"));
  $p->nextFrame();

  $i = $m->add($p);
  $i->setName('frames');
  $m->nextFrame();

  $m->add(new SWFAction("

lastx = mousex;
lasty = mousey;
mousex = /mouse.x;
mousey = /mouse.y;

++num;

if (num == 11)
  num = 1;

removeClip('char' & num);
duplicateClip(/frames, 'char' & num, num);

  "));

  $m->nextFrame();
  $m->add(new SWFAction("prevFrame(); play();"));

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>
]]>
    </programlisting>
   </example>
  </para>

 </refsect1>

</refentry>

&reference.ming.swfaction.construct;

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->