<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xmlns:phpdoc="http://php.net/ns/phpdoc" xml:id="class.swfaction" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La classe SWFAction</title>
 <titleabbrev>SWFAction</titleabbrev>

 <partintro>

<!-- {{{ SWFAction intro -->
  <section xml:id="swfaction.intro">
   &reftitle.intro;
   <para>
    SWFAction.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="swfaction.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>SWFAction</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>SWFAction</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">Méthodes</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.swfaction')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />

   </classsynopsis>
<!-- }}} -->

  </section>

 <section>
  &reftitle.description;
  <para>
   La syntaxe de script est basée sur le langage C, mais avec beaucoup
   de différences : le bytcode SWF est simplifié pour ne faire que ce dont
   on a besoin. Actuellement, nous ne pouvons pas implémenter des appels
   à des fonctions sans d'affreux hacks, car le bytecode a des valeurs de
   position codées en interne.
  </para>
  <para>
   Que reste-t-il donc ? le compilateur reconnaît les instances suivantes :
   <itemizedlist>
    <listitem>
     <simpara>
      break
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      for
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      continue
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      if
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      else
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      do
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      while
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Il n'y a pas de données typées ; toutes les valeurs d'une action SWF sont
   stockées sous la forme de chaînes de caractères. Les fonctions suivantes
   peuvent être utilisées dans les expressions :
   <variablelist>
    <varlistentry>
     <term>time()</term>
     <listitem>
      <simpara>
       Retourne le nombre de millisecondes effectuées depuis le début d'une vidéo.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>random(seed)</term>
     <listitem>
      <simpara>
       Retourne le nombre pseudo-aléatoire dans la rangée 0-seed.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>length(expr)</term>
     <listitem>
      <simpara>
       Retourne la longueur de l'expression donnée.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>int(number)</term>
     <listitem>
      <simpara>
       Retourne le nombre donné arrondi au nombre inférieur.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>concat(expr, expr)</term>
     <listitem>
      <simpara>
       Retourne la concaténation des expressions données.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ord(expr)</term>
     <listitem>
      <simpara>
       Retourne le code ASCII pour le caractère donné.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>chr(num)</term>
     <listitem>
      <simpara>
       Retourne le caractère pour le code ASCII donné.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>substr(string, location, length)</term>
     <listitem>
      <simpara>
       Retourne la sous chaîne de la longueur <parameter>length</parameter>
       à la position <parameter>location</parameter> de la chaîne
       <parameter>string</parameter> donnée.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   De plus, les commandes suivantes peuvent être utilisées :
   <variablelist>
    <varlistentry>
     <term>duplicateClip(clip, name, depth)</term>
     <listitem>
      <simpara>
       Duplique la vidéo nommée <parameter>clip</parameter> (c'est-à-dire sprite).
       La nouvelle vidéo a le nom <parameter>name</parameter> et est à la
       profondeur <parameter>depth</parameter>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>removeClip(expr)</term>
     <listitem>
      <simpara>
       Efface la vidéo fournie.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>trace(expr)</term>
     <listitem>
      <simpara>
       Écrit l'expression donnée dans l'historique des traces.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>startDrag(target, lock, [left, top, right, bottom])</term>
     <listitem>
      <simpara>
       Démarre le déplacement de la vidéo <parameter>target</parameter>.
       L'argument <parameter>lock</parameter> indique si l'on verrouille
       la souris : utilisez 0 (&false;) ou 1 (&true;).
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>stopDrag()</term>
     <listitem>
      <simpara>
       Commence le déplacement.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>callFrame(expr)</term>
     <listitem>
      <simpara>
       Appel la frame nommée, comme une fonction.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>getURL(url, target, [method])</term>
     <listitem>
      <simpara>
       Charge l'URL donnée, dans la cible nommée. L'argument
       <parameter>target</parameter> correspond à la cible du document HTML
       (comme <literal>"_top"</literal> ou <literal>"_blank"</literal>). 
       L'argument optionnel <parameter>method</parameter>
       peut être POST ou GET si vous voulez soumettre les variables au serveur.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>loadMovie(url, target)</term>
     <listitem>
      <simpara>
       Charge l'URL donnée dans la cible nommée. L'argument
       <parameter>target</parameter> peut être le nom d'une frame, ou
       une des valeurs magiques : <literal>"_level0"</literal> (remplace la vidéo courante)
       ou <literal>"_level1"</literal> (charge la nouvelle vidéo au dessus de la vidéo courante).
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>nextFrame()</term>
     <listitem>
      <simpara>
       Se place sur la prochaine frame.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>prevFrame()</term>
     <listitem>
      <simpara>
       Se place sur la dernière (ou, plutôt, précédente) frame.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>play()</term>
     <listitem>
      <simpara>
       Commence à jouer la vidéo.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>stop()</term>
     <listitem>
      <simpara>
       Arrête de jouer la vidéo.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>toggleQuality()</term>
     <listitem>
      <simpara>
       Passe d'une qualité haute à basse, et inversement.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>stopSounds()</term>
     <listitem>
      <simpara>
       Arrête de jouer tous les sons.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>gotoFrame(num)</term>
     <listitem>
      <simpara>
       Se place sur la frame numéro <parameter>num</parameter>.
       Les numéros de frame commencent à 0.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>gotoFrame(name)</term>
     <listitem>
      <simpara>
       Se place sur la frame nommée <parameter>name</parameter>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>setTarget(expr)</term>
     <listitem>
      <simpara>
       Définit le contexte de l'action.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
   L'expression frameLoaded(num) peut être utilisée dans les instructions if
   et les boucles while pour vérifier si le numéro de frame donné a déjà été chargé.
  </para>
  <para>
   Les vidéos, c'est à dire des sprites, ont des propriétés. Vous pouvez les lire, en
   définir quelques unes. Voici la liste :
    <itemizedlist>
     <listitem>
      <simpara>
       x
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       y
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       xScale
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       yScale
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       currentFrame : (lecture seule) 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       totalFrames : (lecture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       alpha : degré de transparence
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       visible : 1=on, 0=off
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       width : (lecture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       height : (lecture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       rotation 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       target : (lecture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       framesLoaded : (lecture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       name 
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       dropTarget : (lecture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       url : (lecture seule)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       highQuality : 1=high, 0=low
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       focusRect
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       soundBufTime
      </simpara>
     </listitem>
    </itemizedlist>
    Donc, définir la position d'un sprite est aussi simple que
    <literal>/box.x = 100;</literal>. Pourquoi le slash au début ?
    C'est la façon dont Flash garde une trace des sprites dans une vidéo,
    tout comme le système de fichiers Unix : ici, la boite est au premier
    niveau. Si le sprite nommée <literal>"box"</literal> a un autre sprite nommé 
    <literal>"biff"</literal> au dessous,
    vous pouvez définir sa position comme ceci :
    <literal>/box/biff.x = 100;</literal>
  </para>
 </section>

 </partintro>

 &reference.ming.entities.swfaction;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->