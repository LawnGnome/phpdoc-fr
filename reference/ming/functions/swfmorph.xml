<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.5 Maintainer: yannick Status: ready -->
  <refentry id="function.swfmorph">
   <refnamediv>
    <refname>swfmorph</refname>
    <refpurpose>Crée un morphing</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>new</type><methodname>swfmorph</methodname>
      <void/>
     </methodsynopsis>
     &warn.experimental.func;
    <para>
     <function>swfmorph</function> crée un morphing.
    </para>
    <para>
     <function>swfmorph</function> s'appelle aussi "shape tween".
     C'est cet objet qui permet toutes ces superbes animations
     qui mettent à genou votre ordinateur. Joie!
    </para>
    <para>
     Les méthodes ici sont plutôt bizarres. Il serait tellement plus
     logique d'avoir seulement <literal>new SWFMorph(shape1, shape2);</literal>,
     mais, telles que sont les choses aujourd'hui, la deuxième forme
     a besoin de savoir qu'elle est l'aboutissement d'un morphing.
     (Tout cela, parceque Flash commence à dessiner aussitôt qu'il a les
     commandes de dessins. S'il conservait les descriptions de ses propres
     formes, et attendait leur totalité avant d'écrire, ceci et bien d'autres
     choses serait tellement plus simple).
    </para>
    <simpara>
     SWFMorph a les méthodes suivantes :
     <function>swfmorph->getshape1</function> et <function>swfmorph->getshape2</function>.
    </simpara>
    <para>
     Cet exemple simple effectue le morphing d'une gros carré rouge en un
     carré plus petit, bleu et bordé de noir.
     <example>
      <title>Exemple avec <function>swfmorph</function></title>
      <programlisting role="php">
<![CDATA[
<?php
  $p = new SWFMorph();
  $s = $p->getShape1();
  $s->setLine(0,0,0,0);
  /* Notez que cela se fait dans l'ordre inverse de l'ordre habituel
     (gauche au lieu de droite), mais je n'ai aucune idée de pourquoi... */
  $s->setLeftFill($s->addFill(0xff, 0, 0));
  $s->movePenTo(-1000,-1000);
  $s->drawLine(2000,0);
  $s->drawLine(0,2000);
  $s->drawLine(-2000,0);
  $s->drawLine(0,-2000);
  $s = $p->getShape2();
  $s->setLine(60,0,0,0);
  $s->setLeftFill($s->addFill(0, 0, 0xff));
  $s->movePenTo(0,-1000);
  $s->drawLine(1000,1000);
  $s->drawLine(-1000,1000);
  $s->drawLine(-1000,-1000);
  $s->drawLine(1000,-1000);
  $m = new SWFMovie();
  $m->setDimension(3000,2000);
  $m->setBackground(0xff, 0xff, 0xff);
  $i = $m->add($p);
  $i->moveTo(1500,1000);
  for($r=0.0; $r<=1.0; $r+=0.1)
  {
    $i->setRatio($r);
    $m->nextFrame();
  }
  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
