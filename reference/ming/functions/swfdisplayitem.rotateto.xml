<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/ming.xml, last change in rev 1.7 -->
<!-- last change to 'swfdisplayitem.rotateto' in en/ tree in rev 1.24 -->
  <refentry id="function.swfdisplayitem.rotateto">
   <refnamediv>
    <refname>swfdisplayitem->rotateto</refname>
    <refpurpose>Tourne un objet en angle absolu</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>void</type><methodname>swfdisplayitem->rotateto</methodname>
      <methodparam><type>float</type><parameter>degrees</parameter></methodparam>
     </methodsynopsis>
    &warn.experimental.func;
    <para>
     <function>swfdisplayitem->rotateto</function> tourne l'objet jusqu'à
     l'angle absolu<parameter>degrees</parameter>, en degrés.
    </para>
    <simpara>
     L'objet peut être <function>swfshape</function>,
     <function>swfbutton</function>, <function>swftext</function> ou
     <function>swfsprite</function>. Il doit avoir été ajouté à une animation
     avec la fonction <function>swfmovie->add</function>.
    </simpara>
    <para>
     Cet exemple amène trois chaînes tournoyantes depuis le fond de
     l'écran. Plutôt sympa.
     <example>
      <title>Exemple avec <function>swfdisplayitem->rotateto</function></title>
      <programlisting role="php">
<![CDATA[
<?php
  $thetext =  "ming!";
  $f = new SWFFont("Bauhaus 93.fdb");
  $m = new SWFMovie();
  $m->setRate(24.0);
  $m->setDimension(2400, 1600);
  $m->setBackground(0xff, 0xff, 0xff);
  // Les fonctions avec un nombre d'arguments sont vraiment une bonne idées.
  // Sincèrement!
  function text($r, $g, $b, $a, $rot, $x, $y, $scale, $string)
  {
    global $f, $m;
    $t = new SWFText();
    $t->setFont($f);
    $t->setColor($r, $g, $b, $a);
    $t->setHeight(960);
    $t->moveTo(-($f->getWidth($string))/2, $f->getAscent()/2);
    $t->addString($string);
    // On peut ajouter des propriétés comme pour une variable PHP standard
    // tant que les noms ne sont pas déjà pris.
    // e.g., vous ne pouvez pas utilisez $i->scale, car c'est une fonction.
    $i = $m->add($t);
    $i->x = $x;
    $i->y = $y;
    $i->rot = $rot;
    $i->s = $scale;
    $i->rotateTo($rot);
    $i->scale($scale, $scale);
    // mais les modification sont locales à une fonction, donc il faut
    // retourner l'objet modifié. Pas pratique...
    return $i;
 }
  function step($i)
  {
    $oldrot = $i->rot;
    $i->rot = 19*$i->rot/20;
    $i->x = (19*$i->x + 1200)/20;
    $i->y = (19*$i->y + 800)/20;
    $i->s = (19*$i->s + 1.0)/20;
    $i->rotateTo($i->rot);
    $i->scaleTo($i->s, $i->s);
    $i->moveTo($i->x, $i->y);
    return $i;
  }
  // Alors? &Ccedil;a valait la peine, non?
  $i1 = text(0xff, 0x33, 0x33, 0xff, 900, 1200, 800, 0.03, $thetext);
  $i2 = text(0x00, 0x33, 0xff, 0x7f, -560, 1200, 800, 0.04, $thetext);
  $i3 = text(0xff, 0xff, 0xff, 0x9f, 180, 1200, 800, 0.001, $thetext);
  for($i=1; $i<=100; ++$i)
  {
    $i1 = step($i1);
    $i2 = step($i2);
    $i3 = step($i3);
    $m->nextFrame();
  }
  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Voir aussi
     <function>swfdisplayitem->rotate</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
