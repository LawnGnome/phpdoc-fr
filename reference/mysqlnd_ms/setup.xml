<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ --> 
<!-- EN-Revision: 311948 Maintainer: jpauli Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mysqlnd-ms.setup" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.setup;

 <section xml:id="mysqlnd-ms.requirements">
  &reftitle.required;
  <para>
    <literal>PHP 5.3.6</literal> ou plus récent.
  </para>
  <para>
   Le plugin de balance de charge et réplication <literal>mysqlnd_ms</literal>
   est compatible avec toutes les applications PHP et toutes les extensions PHP pour MySQL
   (<link linkend="ref.mysqli">mysqli</link>,
   <link linkend="ref.mysql">mysql</link>, <link linkend="ref.pdo-mysql">PDO_MYSQL</link>).
   L'extension PHP pour MySQL doit être configurée pour utiliser la couche
   <link linkend="book.mysqlnd">mysqlnd</link>  afin de pouvoir utiliser le plugin
   <literal>mysqlnd_ms</literal> de <link linkend="book.mysqlnd">mysqlnd</link>.
  </para>
 </section>

 &reference.mysqlnd-ms.configure;
 &reference.mysqlnd-ms.ini;

 <section xml:id="mysqlnd-ms.plugin-ini">
  <title xmlns="http://docbook.org/ns/docbook">Fichier de configuration du Plugin</title>
  <para>
   Le plugin utilise un fichier de configuration propre, qui contient les informations
   sur le maitre de réplication MySQL, les escalves, la politique de bascule et la stratégie
   de failover et l'utilisation de connections paresseuses (lazy).
  </para>
  <para>
   La directive de configuration PHP
   <link linkend="ini.mysqlnd-ms.ini-file"><literal>mysqlnd_ms.ini_file</literal></link> 
   est utilisée pour indiquer le fichier de configuration des plugins.
  </para>
  <para>
   Le fichier de configuration reprend le format de <literal>php.ini</literal>.
   Une ou plusieurs sections, chacune définissant ses propres paramètres. Il n'y a pas
   de section globale.
  </para>
  <para>
   Le nom des sections est utilisé dans les applications comme noms de serveurs
   pour <link linkend="ref.mysqli">mysqli</link>, <link linkend="ref.mysql">mysql</link> et
   <link linkend="ref.pdo-mysql">PDO_MYSQL</link>. A la connection, le plugin
   <link linkend="book.mysqlnd">mysqlnd</link> compare les noms d'hôtes aux noms de sections
   depuis le fichier de configuration des plugins. Si un hôte correspond, sa configuration
   sera chargée.
  </para>
  <para>
   <example>
    <title>Exemple avec les sections</title>
    <programlisting role="ini">
<![CDATA[
[myapp]
master[] = localhost
slave[] = 192.168.2.27
slave[] = 192.168.2.28:3306
[localhost]
master[] = localhost:/tmp/mysql/mysql.sock
slave[] = 192.168.3.24:3305
slave[] = 192.168.3.65:3309
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php
/* Toutes les connections qui suivent seront réparties */
$mysqli = new mysqli("myapp", "username", "password", "database");
$pdo = new PDO('mysql:host=myapp;dbname=database', 'username', 'password');
$mysql = mysql_connect("myapp", "username", "password");

$mysqli = new mysqli("localhost", "username", "password", "database");
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Les noms de sections sont des chaines. Utiliser des noms comme
   <literal>192.168.2.1</literal>, <literal>127.0.0.1</literal> ou
   <literal>localhost</literal> est valide. SI, par exemple, une application
   se connecte à <literal>localhost</literal> et qu'une section de configuration
   de plugin <literal>[localhost]</literal> existe, la sémantique de la connection
   est modifiée. L'application ne se connectera plus au serveur MySQL tournant sur
   <literal>localhost</literal>, car le plugin commencera l'équilibrage de charge des
   requêtes MySQL en fonction des règles décrites dans la section <literal>[localhost]</literal>
   de la configuration. De cette manière, vous pouvez équilibrer des requêtes d'applications
   sans en changer leur code source.
  </para>
  <para>
   Les directives <literal>master[]</literal>, <literal>slave[]</literal>
   et <literal>pick[]</literal> utilisent une syntaxe à crochets (listes). Elles peuvent apparaitre
   plusieurs fois dans la configuration, le plugin maintient l'ordre dans lequel
   elles apparaissent. Par exemple, l'exemple ci-dessous montre deux configurations
   <literal>slave[]</literal> dans <literal>[myapp]</literal>.
   En balance de charge à tourniquet pour des requêtes en lecture, le plugin dirigera
   la première requête en lecture vers le serveur <literal>mysql_slave_1</literal>
   car il apparait en premier dans la liste. La seconde requête en lecture sera dirigée
   sur <literal>mysql_slave_2</literal> qui apparait en deuxième dans la liste.
   Les directives qui supportent une syntaxe à crochets sont lues de haut en bas dans leurs
   sections respectives.
  </para>
  <para>
   <example>
    <title>Syntaxe à liste</title>
    <programlisting role="ini">
<![CDATA[
[myapp]
master[] = mysql_master_server
slave[] = mysql_slave_1
slave[] = mysql_slave_2
]]>
    </programlisting>
    </example>
  </para>
  <para>
   Voici une explication des directives de configuration qui peuvent être utilisées.
  </para>
  <para>
  <variablelist>
   <varlistentry xml:id="ini.mysqlnd-ms-plugin-config.master">
     <term>
      <parameter>master[]</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       URI d'un serveur de réplication MySQL maitres. L'URI est de la forme
       <literal>hostname[:port|unix_domain_socket]</literal>.
      </para>
      <para>
       Le plugin ne supporte que l'utilisation d'un seul maitre à la fois.
      </para>
      <para>
       Déclarer un maitre est obligatoire. Le plugin renverra un warning à la connection
       si il ne trouve pas de maitre dans la configuration.
       Ce message warning peut ressembler à
       <literal>(mysqlnd_ms) Cannot find master section in config</literal>.
       Aussi, le plugin renseignera sur un code d'erreur pour la connection
       <literal>HY000/2000 (CR_UNKNOWN_ERROR)</literal>. Le message dépend de la langue
       considérée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.mysqlnd-ms-plugin-config.slave">
    <term>
      <parameter>slave[]</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       URI d'un ou plusieurs serveurs de réplication MySQL esclaves. L'URI est de la forme
       <literal>hostname[:port|unix_domain_socket]</literal>.
      </para>
      <para>
       Le plugin supporte l'utilisation d'un ou plusieurs esclaves.
      </para>
      <para>
       Déclarer au moins un esclave est obligatoire. Le plugin renverra un warning à la connection
       s'il ne trouve pas au moins un esclave dans la configuration.
       Ce message warning peut ressembler à
       <literal>(mysqlnd_ms) Cannot find slaves section in config</literal>.
       Aussi, le plugin renseignera sur un code d'erreur pour la connection
       <literal>HY000/2000 (CR_UNKNOWN_ERROR)</literal>.Le message dépend de la langue
       considérée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.mysqlnd-ms-plugin-config.pick">
     <term>
      <parameter>pick[]</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       Politique de balance de charge (choix du serveur). Sont supportées :
       <literal>random</literal>, <literal>random_once</literal> (defaut),
       <literal>roundrobin</literal>, <literal>user</literal>.
      </para>
      <para>
       Si aucune politique n'est précisée, <literal>random_once</literal> sera utilisée.
       La politique <literal>random_once</literal> choisit un serveur esclave au hasard
       lors de la première requête en lecture. Le serveur esclave sera alors utilisé pour toutes
       les requêtes en lecture jusqu'à l'extinction de PHP.
      </para>
     <para>
       La politique <literal>random</literal> choisira un serveur esclave au hasard pour chaque
       requête de lecture.
     </para>
     <para>
       Avec <literal>roundrobin</literal> le plugin parcourt la liste des esclaves déclarés
       et les choisit un-à-un pour chaque requête. Si le plugin atteint la fin de la liste,
       il recommence.
      </para>
      <para>
       Utiliser plus d'une politique d'équilibrage par section de configuration n'est effectif
       qu'avec la politique <literal>user</literal>
       et avec <function>mysqlnd_ms_set_user_pick_server</function>. Si la fonction utilisateur
       échoue à la selection d'un serveur, le plugin se rabat sur le second choix de politique
       d'équilibrage.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.mysqlnd-ms-plugin-config.failover">
     <term>
      <parameter>failover</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       Politique de gestion des incidents (failover). Sont supportées:
       <literal>disabled</literal> (defaut), <literal>master</literal>.
      </para>
      <para>
       Si aucune politique de gestion d'incident (failover) n'est utilisée, le plugin n'effectuera
       aucun failover automatique (<literal>failover=disabled</literal>). Dès lors que le plugin échoue
       à la connection sur un serveur, il émet un warning et change le code d'erreur et le message
       d'erreur de la connection. Après, c'est à l'application de gérer l'erreur et d'éventuellement
       relancer la requête pour déclencher la selection d'un autre serveur.
      </para>
      <para>
       Si vous utilisez <literal>failover=master</literal>, le plugin changera vers un
       esclave automatiquement en failover, si possible. Veuillez lire la documentation dans le cas
       de l'utilisation de <literal>failover=master</literal>, cela comporte des risques à connaitre.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.mysqlnd-ms-plugin-config.lazy_connections">
     <term>
      <parameter>lazy_connections</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Utilise ou non des connections paresseuses. Ce sont des connections qui ne
       sont pas établies tant que le client n'envoie pas d'informations vers celle-ci. 
      </para>
      <para>
       Il est fortement recommandé d'utiliser les connections paresseuses, car elles
       aident à réduire le nombre de connections simultanées ouvertes. Si vous les
       désactivez, et que par exemple, vous configurez un maitre de réplication et
       deux esclaves, le plugin ouvrira alors 3 connections dès le premier appel
       alors que l'application pourrait ne vouloir utiliser que le maitre. 
      </para>
      <para>
       Les connections parresseuses représentent par contre un problème si vous changez
       souvent le statut de vos connections. En effet, le plugin ne fait suivre les ordres
       de changement de statut qu'aux connections effectivement déja ouvertes, et non à
       celles qui sont configurées, mais pas encore ouvertes.
       Par exemple, si le jeu de caractères devait être changé en utilisant un appel PHP
       vers l'API MySQL, le plugin ne changera que pour les connections ouvertes. Il ne se
       souviendra pas du jeu de caractères à appliquer aux futures connections à établir,
       elles supporteront alors un autre jeu de caractères, ce qui n'est pas très intelligent,
       étant donné que les jeux de caractères sont utilisés dans l'échappement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.mysqlnd-ms-plugin-config.master_on_write">
     <term>
      <parameter>master_on_write</parameter>
      <type>bool</type>
     </term>
     <listitem>
      <para>
       Si utilisé, le plugin utilisera le maitre immédiatement après le premier
       appel à celui-ci. Les applications pourront toujours utiliser les astuces
       SQL pour discuter avec les esclaves.
      </para>
      <para>
       Ce paramètre peut aider à réduire la latence de la réplication. Si une application
       lance un <literal>INSERT</literal> le plugin selectionnera par défaut le maitre pour toutes
       les requêtes futures, y compris les <literal>SELECT</literal>. Ceci aide à éviter les
       problèmes de lectures sur des esclaves qui n'ont pas encore répliqué le
       <literal>INSERT</literal> précédent.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="ini.mysqlnd-ms-plugin-config.trx_stickiness">
     <term>
      <parameter>trx_stickiness</parameter>
      <type>string</type>
     </term>
     <listitem>
      <para>
       Politique d'accrochage des transactions. Sont supportées:
       <literal>disabled</literal> (default), <literal>master</literal>.
      </para>
      <para>
       Fonctionnalité expérimentale.
      </para>
      <para>
       Cette fonctionnalité requiert 5.3.99 ou plus récent. Si vous utilisez PHP avant 5.3.99,
       le plugin va emettre un warning comme
       <literal>(mysqlnd_ms) trx_stickiness strategy is not supported before PHP 5.3.99</literal>.
      </para>
      <para>
       Si aucune politique d'accrochage des transactions n'est utilisée ou si 
       <literal>trx_stickiness=disabled</literal>, le plugin n'est pas relatif aux transactions.
       Ainsi, le plugin pourrait équilibrer les connections et basculer d'une à l'autre
       en plein milieu d'une transaction. Le plugin n'est pas sûr pour les transactions.
       Des astuces SQL devraient être utilisées pour éviter de tels cas.
      </para>
      <para>
       Depuis PHP 5.3.99, la bibliothèque mysqlnd permet au plugin de surveiller le mode
       <literal>autocommit</literal> en appelant la fonction
       <literal>trx_autocommit()</literal>. Si <literal>trx_stickiness=master</literal> et
       <literal>autocommit</literal> que les transactions sont désactivées suite à un appel
       de <literal>mysqlnd</literal> à <literal>trx_autocommit()</literal>, le plugin devient
       sensible au début de la transaction. Il arrête alors l'équilibrage de charge automatique
       et dirige les requêtes vers le maitre jusqu'à ce que <literal>autocommit</literal>
       soit activé. Ainsi, aucune astuce SQL n'est requise.
      </para>
      <para>
       Un exemple d'une fonction PHP déclenchant un appel de <literal>mysqlnd</literal> 
       à <literal>trx_autocommit()</literal> est
       <function>mysqli_autocommit</function>.
      </para>
      <para>
       Même si <literal>trx_stickiness=master</literal>, le plugin
       ne peut être mis au courant des changements du mode <literal>autocommit</literal> causés par
       des requêtes SQL comme <literal>SET AUTOCOMMIT=0</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
