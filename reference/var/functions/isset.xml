<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283841 Maintainer: dams Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.isset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>isset</refname>
  <refpurpose>Détermine si une variable est définie et est différente de &null;</refpurpose>
 </refnamediv>

 <refsect1 role="description">
 &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>isset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Détermine si une variable est définie et est différente de &null;.
  </para>
  <para>
   Si une variable a été détruite avec la fonction
   <function>unset</function>, la fonction <function>isset</function> renverra
   &false;. <function>isset</function> renvera &false; lors du test d'une
   variable de valeur &null;. Notez aussi que le caractère nul
   (<literal>"\0"</literal>) n'est pas équivalent à la constante PHP
  </para>
  <para>
   Si plusieurs paramètres sont fournis, alors la fonction
   <function>isset</function> retournera &true; seulement si tous les paramètres
   sont définis. L'évaluation s'effectue de gauche vers la droite et s'arrête
   dès qu'une variable non-définie est rencontrée.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable à analyser.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       D'autres variables...
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne &true; si <parameter>var</parameter> existe ; &false; sinon.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>isset</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$var = '';

// Ceci est vrai, alors le texte est affiché
if (isset($var)) {
    echo 'Cette variable existe, donc je peux l\'afficher.';
}

// Dans les exemples suivants, nous utilisons var_dump() pour afficher 
// le retour de la fonction isset().

$a = 'test';
$b = 'anothertest';

var_dump(isset($a));      // TRUE
var_dump(isset($a, $b)); // TRUE

unset ($a);

var_dump(isset($a));     // FALSE
var_dump(isset($a, $b)); // FALSE

$foo = NULL;
var_dump(isset($foo));   // FALSE

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
     Fonctionne aussi avec les tableaux :
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$a = array ('test' => 1, 'bonjour' => NULL);

var_dump(isset($a['test']));            // TRUE
var_dump(isset($a['foo']));             // FALSE
var_dump(isset($a['bonjour']));           // FALSE

// La clé 'bonjour' vaut NULL et est considérée comme non existante
// Si vous voulez vérifier l'existence de cette clé, utilisez cette fonction
var_dump(array_key_exists('bonjour', $a) ); // TRUE

?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    <function>isset</function> fonctionne uniquement avec des variables car l'utilisation
    de toute autre chose aura comme conséquence une erreur d'analyse.
    Pour vérifier si une <link linkend="language.constants">constants</link> est définie,
    utilisez la fonction <function>defined</function>.
   </para>
  </warning>
  &note.language-construct;
  <note>
   <para>
    Lors de l'utilisation de cette fonction sur des propriétés d'objet
    inaccessibles, la méthode magique 
    <link linkend="language.oop5.overloading.members">__isset</link>
    sera appelée, si elle existe.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>empty</function></member>
    <member><link linkend="language.oop5.overloading.members">__isset</link></member>
    <member><function>unset</function></member>
    <member><function>defined</function></member>
    <member><link linkend="types.comparisons">le tableau de comparaison de types</link></member>
    <member><function>array_key_exists</function></member>
    <member><function>is_null</function></member>
    <member>l'opérateur de contrôle de rapport d'erreurs <link linkend="language.operators.errorcontrol">@</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->