<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.8 Maintainer: yannick Status: ready -->
    <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>
     Linéarise une variable
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>string</type><methodname>serialize</methodname>
      <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>serialize</function> retourne une chaîne contenant une
     représentation linéaire de <parameter>value</parameter>, pour
     stockage.
    </simpara>
    <simpara>
     C'est une technique pratique pour stocker ou passer des valeurs de &php;
     entre scripts, sans perdre ni leur structure, ni leur type.
    </simpara>
    <simpara>
     Pour récupérer une variable linéarisée, et retrouver une
     variable, utilisez <function>unserialize</function>.
     <function>serialize</function> acceptent tous les types sauf les ressources.
     Vous pouvez linéariser un tableau qui contient une référence sur lui-même.
     Les références dans ce tableau/objet seront également stockées.     
    </simpara>
    <simpara>
     Lors de la linéarisation d'un objet, &php; tentera d'appeler la fonction membre
     <function>__sleep</function> avant de linéariser. Celà permet à l'objet
     de faire un dernier nettoyage, etc. avant d'être linéarisé.
     De même, lorsque l'objet est restoré en utilisant <function>unserialize</function>,
     la fonction membre <function>__wakeup</function> est appelée.
   </simpara>
   <note>
    <para>
     En &php; 3, les propriétés de l'objet seront linéarisées, mais les méthodes seront perdues.
     &php; 4 enlève cette limitation et restore les propriétés et les méthodes.
     Merci de voir la section sur la <link
     linkend="language.oop.serialization">linéarisations d'objets</link> des 
     <link linkend="language.oop">classes et objets</link> pour plus d'informations.
    </para>
   </note>
    <para>
     <example>
      <title>Exemple avec <function>serialize</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// $session_data contient un tableau multi-dimensionnel , avec les
// informations de session de l'utilisateur courant. On utilise serialize()
// pour les stocker dans une base de données

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array(serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &$sqldata)) {
        /* Un problème est survenu ! */
    }
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
    Voir aussi 
    <function>unserialize</function>.
   </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
