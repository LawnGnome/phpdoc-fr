<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.22 $ -->
<!-- EN-Revision: 1.22 Maintainer: dams Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose>Détruit une variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> détruit la ou les variables dont 
   le nom a été passé en argument <parameter>var</parameter>.
  </para>
  <para>
   Le comportement de <function>unset</function> à l'intérieur d'une
   fonction peut varier suivant le type de variable que vous voulez
   détruire.
  </para>
  <para>
   Si une variable globale est détruite avec <function>unset</function>
   depuis une fonction, seule la variable locale sera détruite. Le
   variable globale gardera la valeur acquise avant l'appel à
   <function>unset</function>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function destroy_foo() 
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
bar
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Si vous désirez détruire une variable globale à l'intérieur d'une
   fonction, vous pouvez utiliser le tableau
   <varname>$GLOBALS</varname> pour le faire :
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "truc";
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   Si une variable qui est passée par référence est détruite à
   l'intérieur d'une fonction, seule la variable locale sera
   détruite. La variable globale conservera la même valeur
   qu'elle avait avant l'appel de <function>unset</function>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar) 
{
    unset($bar);
    $bar = "blah";
}

$bar = 'truc';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
truc
truc
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Si une variable statique est détruite à l'intérieur d'une fonction
   <function>unset</function> détruira la variable seulement dans le
   contexte du reste de la fonction. Les appels suivants restaureront la
   valeur précédente de la variable.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Avant unset : $bar, ";
    unset($bar);
    $bar = 23;
    echo "après unset : $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
Avant unset : 1, après unset: 23
Avant unset : 2, après unset: 23
Avant unset : 3, après unset: 23
]]>
    </screen>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable à détruire.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Autres variables...
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.1</entry>
       <entry>
        Ajout du support des arguments multiples.
       </entry>
      </row>
      <row>
       <entry>4.0.0</entry>
       <entry>
        <function>unset</function> devient une expression. 
        (En PHP 3, <function>unset</function> retourne toujours 1).
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>unset</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Destruction d'une seule variable
unset($foo);

// Destruction d'un élément de tableau
unset($bar['quux']);

// Destruction de plusieurs variables
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Exemple avec un transtypage (unset)</title>
    <programlisting role="php">
<![CDATA[
<?php
$name = 'Felipe';

var_dump((unset) $name);
?>
 ]]>
     </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    Il est possible de détruire n'importe quelle propriété 
    visible dans le contexte courant.
   </para>
  </note>
  <note>
   <para>
    Il n'est pas possible de détruire la variable spéciale
    <literal>$this</literal> à l'intérieur d'une méthode d'un
    objet, depuis PHP 5.
   </para>
  </note>
  <note>
   <para>
    Lors de l'utilisation de cette fonction sur des propriétés d'objet
    inaccessibles, la méthode magique 
    <link linkend="language.oop5.overloading.members">__isset</link>
    sera appelée, si elle existe.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><link linkend="language.oop5.overloading.members">__unset</link></member>
    <member><function>empty</function></member>
    <member><function>array_splice</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->