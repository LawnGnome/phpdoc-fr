<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/var.xml, last change in rev 1.2 -->
<!-- last change to 'unset' in en/ tree in rev 1.2 -->
  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>D&eacute;truit une variable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>unset</function> d&eacute;truit les variables <parameter>var</parameter>.
     Notez qu'en PHP 3, <function>unset</function> retournait toujours
     &true; (en fait, la valeur enti&egrave;re 1).
     <function>unset</function> n'est plus une v&eacute;ritable fonction :
     c'est une structure du langage, ce qui fait qu'elle ne retourne
     pas de valeur. Lire la valeur retourn&eacute;e par <function>unset</function>
     (dans une variable, par exemple), retourne une erreur d'analyse.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>unset</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// Destruction d'une seule variable
unset ($foo);
// Destruction d'un &eacute;l&eacute;ment de tableau
unset ($bar['quux']);
// Destruction de plusieurs variables
unset ($foo1, $foo2, $foo3);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Le comportement de <function>unset</function> &agrave; l'int&eacute;rieur d'une
     fonction peut varier suivant le type de variable que vous voulez
     d&eacute;truire.
    </para>
    <para>
     Si une variable globale est d&eacute;truite avec <function>unset</function>
     depuis une fonction, seule la variable locale sera d&eacute;truite. Le
     variable globale gardera la valeur acquise avant l'appel &agrave;
     <function>unset</function>.
     <example>
      <title>Exemple avec <function>unset</function> dans un contexte de fonction</title>
      <programlisting role="php">
<![CDATA[
<?php
function destroy_foo() {
    global $foo;
    unset($foo);
}
$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
       </programlisting>
      <para>      
     L'exemple ci dessus affichera :
      </para>
      <literallayout>
<![CDATA[
bar
]]>
      </literallayout>
     </example>
    </para>
    <para>
     Si une variable qui est pass&eacute;e par r&eacute;f&eacute;rence 
     est d&eacute;truite &agrave;
     l'int&eacute;rieur d'une fonction, seule la variable locale sera
     d&eacute;truite. La variable globale conservera la derni&egrave;re valeur
     qu'elle avait avant l'appel de <function>unset</function>.
     <example>
      <title>Exemple avec <function>unset</function> sur une r&eacute;f&eacute;rence</title>
      <programlisting role="php">
<![CDATA[
<?php
  function foo(&$bar) {
    unset($bar);
    $bar = "bla";
  }
  $bar = 'truc';
  echo "$bar\n";
  foo($bar);
  echo "$bar\n";
?>
]]>
     </programlisting>
     <para>
      L'exemple ci dessus va afficher :
      </para>
      <screen>
<![CDATA[
truc
truc
]]>
      </screen>
     </example>
    </para>
    <para>
     Si une variable statique est d&eacute;truite &agrave; l'int&eacute;rieure d'une fonction
     <function>unset</function> d&eacute;truira la r&eacute;f&eacute;rence &agrave; la variable
     statique, plut&ocirc;t que la variable statique elle m&ecirc;me.
     <example>
      <title>Exemple avec <function>unset</function> avec une variable statique</title>
      <programlisting role="php">
<![CDATA[
<?php
  function foo() {
    static $a;
    $a++;
       echo "$a\n";
    unset($a);
  }
  foo();
  foo();
  foo();
?>
]]>
      </programlisting>
    <para>
     L'affichage du script ci-dessus donnera :
    </para>
       <screen>
<![CDATA[
1
2
3
]]>
      </screen>
     </example>
    </para>
    <para>
     Si vous voulez d&eacute;truire une variable globale, depuis une
     fonction, vous pouvez utiliser le tableau
     <parameter>$globals</parameter> :
     <example>
      <title>Exemple avec <function>unset</function> avec une variable globale</title>
      <programlisting role="php">
<![CDATA[
<?php

function foo() {
    unset($GLOBALS['bar']);
}
$bar = "truc";
foo();
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      <function>unset</function> est une structure du langage et non pas une
      fonction.
     </para>
    </note>
	&note.language-construct;
    <para>
     Voir aussi
     <function>array_splice</function>,
     <function>isset</function> et
     <function>empty</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
