<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.10 Maintainer: didou Status: ready -->
  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>Détruit une variable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>unset</function> détruit les variables <parameter>var</parameter>.
     Notez qu'en &php; 3, <function>unset</function> retournait toujours
     &true; (en fait, la valeur entière 1). En &php; 4 toutefois,
     <function>unset</function> n'est plus une véritable fonction :
     c'est une structure du langage, ce qui fait qu'elle ne retourne
     pas de valeur. Lire la valeur retournée par <function>unset</function>
     (dans une variable, par exemple), retourne une erreur d'analyse.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>unset</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// Destruction d'une seule variable
unset($foo);
// Destruction d'un élément de tableau
unset($bar['quux']);
// Destruction de plusieurs variables
unset($foo1, $foo2, $foo3);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Le comportement de <function>unset</function> à l'intérieur d'une
     fonction peut varier suivant le type de variable que vous voulez
     détruire.
    </para>
    <para>
     Si une variable globale est détruite avec <function>unset</function>
     depuis une fonction, seule la variable locale sera détruite. Le
     variable globale gardera la valeur acquise avant l'appel à
     <function>unset</function>.
     <example>
      <title>Exemple avec <function>unset</function> dans un contexte de fonction</title>
      <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}
$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
       </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </example>
    </para>
    <para>
     Si une variable qui est passée par référence 
     est détruite à
     l'intérieur d'une fonction, seule la variable locale sera
     détruite. La variable globale conservera la même valeur
     qu'elle avait avant l'appel de <function>unset</function>.
     <example>
      <title>Exemple avec <function>unset</function> sur une référence</title>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "bla";
}
$bar = 'truc';
echo "$bar\n";
foo($bar);
echo "$bar\n";
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
truc
truc
]]>
      </screen>
     </example>
    </para>
    <para>
     Si une variable statique est détruite à l'intérieure d'une fonction
     <function>unset</function> détruira la variable et toutes ses
     références.
     <example>
      <title>Exemple avec <function>unset</function> et une variable statique</title>
      <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $a;
    $a++;
    echo "$a\n";
    unset($a);
}
foo();
foo();
foo();
?>
]]>
      </programlisting>
      &example.outputs;
       <screen>
<![CDATA[
1
2
3
]]>
      </screen>
     </example>
    </para>
    <para>
     Si vous voulez détruire une variable globale, depuis une
     fonction, vous pouvez utiliser le tableau
     <parameter>$globals</parameter> :
     <example>
      <title>Exemple avec <function>unset</function> avec une variable globale</title>
      <programlisting role="php">
<![CDATA[
<?php
function foo() {
    unset($GLOBALS['bar']);
}
$bar = "truc";
foo();
?>
]]>
      </programlisting>
     </example>
    </para>
    &note.language-construct;
    <para>
     Voir aussi
     <function>array_splice</function>,
     <function>isset</function> et
     <function>empty</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
