<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.20 $ -->
<!-- EN-Revision: 1.22 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>Crée une variable PHP à partir d'une valeur linéarisée</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   <function>unserialize</function> prend une variable linéarisée
   (voir <function>serialize</function>) et la convertit en variable PHP.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       La chaîne linéarisée.
      </para>
      <para>
       Si la variable délinéarisée est un objet, après avoir réussi à le
       reconstruire, PHP appellera automatiquement la méthode
       <function>__wakeup</function> si elle existe.
      </para>
      <para>
       <note>
        <title>unserialize_callback_func directive</title>
        <para>
         Il est possible de définir une fonction de rappel qui sera appelée si
         une classe indéfinie est utilisée lors de la délinéarisation (ce qui
         évitera de voir l'objet recevoir le type d'objet incomplet
         <type>object</type> "<literal>__PHP_Incomplete_Class</literal>").
         Utilisez dans votre fichier &php.ini; ou le fichier &htaccess;,
         ou encore avec la fonction <function>ini_set</function>, pour définir
         une fonction <literal>unserialize_callback_func()</literal>. Chaque
         fois qu'une classe non-définie sera instanciée, cette fonction sera
         appelée. Pour désactiver cette fonctionnalité, laissez la simplement
         vide.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La valeur convertie est retournée par la fonction, et peut être de
   type &boolean;, &integer;, &float;, &string;, &array; ou &object;.
  </para>
  <para>
   Si la chaîne passée ne peut être délinéarisée, cette fonction retourne
   &false; et une erreur <literal>E_NOTICE</literal> est émise.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.2.0</entry>
       <entry>
        La directive unserialize_callback_func devient disponible.
       </entry>
      </row>
      <row>
       <entry>4.0.0</entry>
       <entry>
        Lors de la linéarisation d'un objet, les méthodes ne sont plus
        perdues. Voir la section sur la
        <link linkend="language.oop.serialization">linéarisation d'objets</link>
        pour plus d'informations.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>unserialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Ici, on utilise <function>unserialize</function> pour charger les données de sessions
// depuis la base de données, dans $session_data. Cet exemple complète
// celui fourni avec <function>serialize</function>.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, &$sqldata) || !odbc_fetch_into($stmt, &$tmp)) {
    // si la préparation ou la lecture échouent, on crée un tableau vide
    $session_data = array();
} else {
    // les données sauvées sont dans $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // Erreur... initialisation d'un tableau vide
        $session_data = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec la directive <option>unserialize_callback_func</option></title>
    <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

// directive unserialize_callback_func disponible depuis PHP 4.2.0
ini_set('unserialize_callback_func', 'mycallback');

function mycallback($classname) 
{
    // Incluez simplement un fichier contenant votre définition de classe
    // vous saurez quelle classe grâce à $classname
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
      &false; est retourné dans les cas où une erreur survient et si vous
      tentez de délinéariser une valeur linéarisé égale à &false;. Il est
      possible d'intercepter ce cas spécial en comparant
      <parameter>str</parameter> avec <literal>serialize(false)</literal>
      ou en attrapant l'erreur <literal>E_NOTICE</literal> émise.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>serialize</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
