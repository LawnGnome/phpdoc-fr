<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.87 -->
  <refentry id="function.is-callable">
   <refnamediv>
    <refname>is_callable</refname>
    <refpurpose>
     D&eacute;termine si l'argument peut &ecirc;tre appel&eacute; comme fonction
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_callable</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>callable_name</parameter></methodparam>
     </methodsynopsis>
    <para>
     <methodname>is_callable</methodname> v&eacute;rifie qu'une variable
     peut &ecirc;tre appel&eacute;e comme fonction. Cette fonction peut v&eacute;rifier qu'une
     variable contient un nom de fonction valide, ou bien qu'elle contient
     un tableau, avec un objet et un nom de m&eacute;thode.
    </para>
    <para>
     Le param&egrave;tre <parameter>var</parameter> peut &ecirc;tre le nom d'une fonction
     stock&eacute; dans une variable de cha&icirc;en, ou un objet, et un nom de m&eacute;thode
     pour cet objet, sous la forme : 
     <screen>array( $unObjet, 'NomDeMethode' )</screen>
    </para>
    <para>
     Si l'argument <parameter>syntax_only</parameter> vaut &true;, la
     fonction ne va v&eacute;rifier que si <parameter>var</parameter> peut &ecirc;tre
     une fonction ou une m&eacute;thode. Il va simplement rejeter les variables
     qui ne sont pas des cha&icirc;nes, ou des tableaux qui n'ont pas la bonne
     structure pour &ecirc;tre utilis&eacute; comme fonction de call back. Les tableaux
     valides sont suppos&eacute;s n'avoir que deux entr&eacute;es, le premier &eacute;tant un
     objet ou une cha&icirc;ne, et de second une cha&icirc;ne.
    </para>
    <para>
     L'argument <parameter>callable_name</parameter> recoit le nom
     &agrave; utiliser ("callable name"). Dans l'exemple ci-dessous, il vaut
     <literal>"uneClasse:uneMethode"</literal>.  Notez que, bien que
     <literal>uneClasse:uneMethode()</literal> puisse &ecirc;tre appel&eacute; sous forme
     static, ce n'est pas le cas.
    </para>
    <example>
     <title>Exemple avec <function>is_callable</function></title>
     <programlisting>
<![CDATA[
<? php
//  Comment v&eacute;rifier qu'une variable peut &ecirc;tre appel&eacute;e 
//  comme fonction?

//
//  Variable simple contenant une fonction
//

function uneFonction() {
}

$fonctionVariable = 'uneFonction';

var_dump( is_callable( $fonctionVariable, false, $callable_name ));  // bool(true)

echo $callable_name, "\n";  // uneFonction

//
//  Tableu contenant une m&eacute;thode
//

class uneClasse {

  function uneMethode() {
  }

}

$unObjet = new uneClasse();

$methodeVariable = array( $unObjet, 'uneMethode' );

var_dump( is_callable( $methodeVariable, true, $callable_name ));  //  bool(true)

echo $callable_name, "\n";  //  uneClasse:uneMethode

?>
]]>
     </programlisting>
    </example>   
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
