<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.1 Maintainer: nobody Status: partial -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.34 -->
  <refentry id="function.import-request-variables">
   <refnamediv>
    <refname>import_request_variables</refname>
    <refpurpose>Importe les variables de GET/POST/Cookie dans l'environnement global</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>bool</type><methodname>import_request_variables</methodname>
      <methodparam><type>string</type><parameter>types</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>prefix</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>import_request_variables</function> importe les variables
     GET/POST/Cookie dans l'environnement global. C'est pratique si vous
     avez désactivé <link linkend="ini.register-globals">register_globals</link>,
     mais que vous voulez enregistrer des variables dans l'environnement
     global.
    </simpara>
    <simpara>
     En utilisant le paramètre <parameter>types</parameter>, vous pouvez
     spécifier les variables que vous voulez importer. Vous pouvez utiliser
     'G', 'P' et 'C' pour désigner respectivement GET, POST et
     Cookie. Ces caractères ne sont pas sensible  la casse, et vous pouvez
     les combiner entre eux. POST inclus les fichiers uploadés. Notez
     que l'ordre des lettres est important. En utilisant par exemple
     "gp", les variables de POST écraseront par les variables de
     GET, ayant le même nom. Toute autre lettre, autre que GPC est ignorée.
    </simpara>
    <simpara>
     Le paramètre <parameter>prefix</parameter> est utilisé comme un préfixe
     de nom de variable, qui sera ajoutée au début de tous les noms
     de variables importées. Si vous avez par exemple une variable GET du nom
     de "<literal>userid</literal>", et utilisez le préfixe "<literal>pref_</literal>", la variable ainsi 
     générée s'appellera <literal>$pref_userid</literal>.
    </simpara>
    <simpara>
     Si vous souhaitez importer d'autres variables dans l'environnement
     global, comme par exemple <varname>$_SERVER</varname>, considérez
     l'utilisation de la fonction <function>extract</function>.
    </simpara>
    <note>
     <para>
      Bien que le paramètre <parameter>prefix</parameter> soit optionnel,
      il sera généré une alerte <link linkend="internal.e-notice">E_NOTICE</link>
      si vous ne spécifiez pas de préfixe, ou si vous utilisez une chaîne
      vide comme préfixe. C'est potentiellement un trou de sécurité. Les alertes
      de ce niveau ne sont pas affichées par défaut.
     </para>
    </note>
    <example>
     <title>Exemple avec <function>import_request_variables</function></title>
     <programlisting role="php">
<![CDATA[
<?php
// Ce code va importer les variables GET et POST
// avec un préfixe "rvar_"
import_request_variables("gP", "rvar_");

print $rvar_foo;
?>
]]>
     </programlisting>
    </example>
    <simpara>
     Voir aussi
     <link linkend="reserved.variables.request"><varname>$_REQUEST</varname></link>, 
     <link linkend="ini.register-globals">register_globals</link>,
     <link linkend="language.variables.predefined">variables prédéfinies</link> et 
     <function>extract</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
