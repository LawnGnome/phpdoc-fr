<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.34 -->
  <refentry id="function.import-request-variables">
   <refnamediv>
    <refname>import_request_variables</refname>
    <refpurpose>Importe les variables de GET/POST/Cookie dans l'environnement global</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>bool</type><methodname>import_request_variables</methodname>
      <methodparam><type>string</type><parameter>types</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>prefix</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>import_request_variables</function> importe les variables
     GET/POST/Cookie dans l'environnement global. C'est pratique si vous
     avez d&eacute;sactiv&eacute; <link linkend="ini.register-globals">register_globals</link>,
     mais que vous voulez enregistrer des variables dans l'environnement
     global.
    </simpara>
    <simpara>
     En utilisant le param&egrave;tre <parameter>types</parameter>, vous pouvez
     sp&eacute;cifier les variables que vous voulez importer. Vous pouvez utiliser
     'G', 'P' et 'C' pour d&eacute;signer respectivement GET, POST et
     Cookie. Ces caract&egrave;res ne sont pas sensible  la casse, et vous pouvez
     les combiner entre eux. POST inclus les fichiers upload&eacute;s. Notez
     que l'ordre des lettres est important. En utilisant par exemple
     "gp", les variables de POST &eacute;craseront par les variables de
     GET, ayant le m&ecirc;me nom. Toute autre lettre, autre que GPC est ignor&eacute;e.
    </simpara>
    <simpara>
     Le param&egrave;tre <parameter>prefix</parameter> est utilis&eacute; comme un pr&eacute;fixe
     de nom de variable, qui sera ajout&eacute;e au d&eacute;but de tous les noms
     de variables import&eacute;es. Si vous avez par exemple une variable GET du nom
     de "<literal>userid</literal>", et utilisez le pr&eacute;fixe "<literal>pref_</literal>", la variable ainsi 
     g&eacute;n&eacute;r&eacute;e s'appellera <literal>$pref_userid</literal>.
    </simpara>
    <simpara>
     Si vous souhaitez importer d'autres variables dans l'environnement
     global, comme par exemple <varname>$_SERVER</varname>, consid&eacute;rez
     l'utilisation de la fonction <function>extract</function>.
    </simpara>
    <note>
     <para>
      Bien que le param&egrave;tre <parameter>prefix</parameter> soit optionnel,
      il sera g&eacute;n&eacute;r&eacute; une alerte <link linkend="internal.e-notice">E_NOTICE</link>
      si vous ne sp&eacute;cifiez pas de pr&eacute;fixe, ou si vous utilisez une cha&icirc;ne
      vide comme pr&eacute;fixe. C'est potentiellement un trou de s&eacute;curit&eacute;. Les alertes
      de ce niveau ne sont pas affich&eacute;es par d&eacute;faut.
     </para>
    </note>
    <example>
     <title>Exemple avec <function>import_request_variables</function></title>
     <programlisting role="php">
<![CDATA[
<?php
// Ce code va importer les variables GET et POST
// avec un pr&eacute;fixe "rvar_"
import_request_variables("gP", "rvar_");

print $rvar_foo;
?>
]]>
     </programlisting>
    </example>
    <simpara>
     Voir aussi
     <link linkend="reserved.variables.request"><varname>$_REQUEST</varname></link>, 
     <link linkend="ini.register-globals">register_globals</link>,
     <link linkend="language.variables.predefined">variables pr&eacute;d&eacute;finies</link> et 
     <function>extract</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
