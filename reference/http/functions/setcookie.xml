<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/http.xml, last change in rev 1.7 -->
<!-- last change to 'setcookie' in en/ tree in rev 1.2 -->
  <refentry id="function.setcookie">
   <refnamediv>
    <refname>setcookie</refname>
    <refpurpose>Envoie un cookie</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>bool</type><methodname>setcookie</methodname>
      <methodparam><type>string</type><parameter>name</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>value</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>path</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>domain</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>secure</parameter></methodparam>
     </methodsynopsis>
   <para>
    <function>setcookie</function> d&eacute;finit un cookie qui sera envoy&eacute;
    avec le reste des en-t&ecirc;tes. Les cookies doivent passer avant toute autre
    en-t&ecirc;te (c'est une restriction des cookies, pas de PHP). Cela vous impose
    d'appeler cette fonction avant toute balise <literal>&lt;HTML></literal>
    ou <literal>&lt;HEAD></literal>.
   </para>
    <note>
     <para>
      En PHP 4, vous pouvez utiliser la bufferisation de sortie pour pouvoir
      envoyer du contenu avant d'appeler cette fonction, avec la contrepartie
      que toute votre page sera envoy&eacute; en une fois. Vous pouvez faire cela
      en appelant <function>ob_start</function> et <function>ob_end_flush</function>
      dans votre script, ou en activant la directive <literal>output_buffering</literal>
      dans votre fichier de configuration &php.ini;.
     </para>
    </note>    
   <para>
    Tous les arguments sauf <parameter>name</parameter> (nom) sont optionnels.
    Si seul le nom est pr&eacute;sent, le cookie portant ce nom sera
    supprim&eacute; du navigateur de l'internaute. Vous pouvez aussi utiliser une
    cha&icirc;ne vide comme valeur, pour ignorer un argument.
    Le param&egrave;tre <parameter>expire</parameter> est un
    timestamp UNIX, du m&ecirc;me genre que celui retourn&eacute; par
    <function>time</function> ou <function>mktime</function>.
    Le param&egrave;tre <parameter>secure</parameter> indique
    que le cookie doit &ecirc;tre uniquement transmis &agrave; travers
    une connexion HTTPS s&eacute;curis&eacute;e.
   </para>
    <para>
     Une fois que le cookie a &eacute;t&eacute; plac&eacute;, il est accessible dans les variables globales
     <link linkend="reserved.variables.cookies">$_COOKIE</link> ou bien
     <varname>$HTTP_COOKIE_VARS</varname> arrays.  Notez que les 
     <link linkend="language.variables.superglobals">autoglobales</link> 
     telles que <varname>$_COOKIE</varname> sont disponibles en &php; depuis
     la version <ulink url="&url.php.release4.1.0;">4.1.0</ulink>.
     <varname>$HTTP_COOKIE_VARS</varname> existe depuis PHP 3.
     Les valeurs de cookies existent aussi dans la variable
     <link linkend="reserved.variables.request">$_REQUEST</link>.
    </para>
    <para>
    Erreurs communes :
    <itemizedlist>
     <listitem>
       <simpara>
        Les cookies ne seront accessibles qu'au chargement de la prochaine page,
        ou au rechargement de la page courante.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Les cookies doivent &ecirc;tre effac&eacute;s avec les m&ecirc;mes param&egrave;tres
        que ceux utilis&eacute;s lors de leur cr&eacute;ation.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <simpara>
     En PHP 3, les appels multiples &agrave; <function>setcookie</function> dans le
     m&ecirc;me script seront effectu&eacute;s dans l'ordre inverse. Si vous essayez d'effacer
     un cookie avant d'ins&eacute;rer une nouvelle valeur, vous devez placer l'insertion
     avant l'effacement. En PHP 4, les appels multiples &agrave;
     <function>setcookie</function> sont effectu&eacute;s dan un ordre naturel.
    </simpara>
   <simpara>
    Les appels multiples &agrave; <function>setcookie</function> dans la m&ecirc;me
    page seront r&eacute;alis&eacute;s dans l'ordre inverse. Si vous essayez
    d'effacer un cookie avant d'ins&eacute;rer une autre valeur, il faut
    placer l'insertion avant l'effacement.
   </simpara>
   <para>
    Quelques exemples :
    <example>
     <title>Exemples avec <function>setcookie</function></title>
     <programlisting role="php">
<![CDATA[
<?php
  setcookie("TestCookie","Valeur de test");
  setcookie("TestCookie",$value,time()+3600);  /* expire dans une heure */
  setcookie("TestCookie",$value,time()+3600,"/~rasmus/",".utoronto.ca",1);
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Notez que la partie "valeur" du cookie sera automatiquement
    encod&eacute;e URL lorsque vous envoyez le cookie, et lorsque
    vous le recevez, il sera automatiquement d&eacute;cod&eacute;,
    et affect&eacute; &agrave; la variable du m&ecirc;me nom que
    le cookie. Pour voir le r&eacute;sultat, essayez les scripts suivants :
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Afficher un cookie 
echo $_COOKIE["TestCookie"];
echo $HTTP_COOKIE_VARS["TestCookie"];

// Une autre m&eacute;thode pour afficher tous les cookies
print_r($_COOKIE);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
    <para>
     Lorsque vous effacez un cookie, vous devriez toujours vous assurer
     que la date d'expiration du cookie est d&eacute;j&agrave; pass&eacute;e, pour d&eacute;clencher
     le m&eacute;canisme de votre navigateur. Voici comment proc&eacute;der : 
     <example>
      <title>Exemple d'effacement de cookies avec <function>setcookie</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// utilisation de la date moins une heure
setcookie ("TestCookie", "", time() - 3600);
setcookie ("TestCookie", "", time() - 3600, "/~rasmus/", ".exemple.com", 1);
?>
]]>
      </programlisting>
     </example>
    </para>
   <para>
    Vous pouvez aussi utiliser les cookies avec des tableaux, en utilisant la
    notation des tableaux. Cela a pour effet de cr&eacute;er autant de
    cookies que votre tableau a d'&eacute;l&eacute;ments, mais lorsque
    les cookies seront re&ccedil;us par PHP, les valeurs seront
    plac&eacute;es dans un tableau :
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
  setcookie( "cookie[three]", "cookiethree" );
  setcookie( "cookie[two]", "cookietwo" );
  setcookie( "cookie[one]", "cookieone" );
  if ( isset( $cookie ) ) {
    while( list( $name, $value ) = each( $cookie ) ) {
      echo "$name == $value<br>\n";
    }
  }
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Pour d'autres informations sur les cookies, jetez un oeil sur
    <ulink url="&spec.cookies;">&spec.cookies;</ulink>.
   </para>
   <simpara>
    Microsoft Internet Explorer 4 utilis&eacute; avec le Service Pack 1
    ne g&egrave;re pas bien les cookies qui poss&egrave;dent un
    param&egrave;tre <parameter>path</parameter>.
   </simpara>
   <simpara>
    Netscape Communicator 4.05 et Microsoft Internet Explorer 3.x
    semblent ne pas g&eacute;rer correctement les cookies lorsque
    <parameter>path</parameter> et <parameter>time></parameter> ne
    sont pas fournis.
   </simpara>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
