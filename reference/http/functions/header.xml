<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/http.xml, last change in rev 1.2 -->
<!-- last change to 'header' in en/ tree in rev 1.2 -->
 <refentry id="function.header">
  <refnamediv>
   <refname>header</refname>
   <refpurpose>Envoie un en-t&ecirc;te HTTP</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>header</methodname>
      <methodparam><type>string</type><parameter>string</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>replace</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>http_response_code</parameter></methodparam>
     </methodsynopsis>
   <para>
    <function>header</function> permet de sp&eacute;cifier un
    en-t&ecirc;te HTTP lors de l'envoi des fichiers HTML. Reportez-vous
    &agrave; <ulink url="&spec.http1.1;">HTTP 1.1 Specification</ulink>
    pour plus d'informations sur les en-t&ecirc;tes HTTP.
   </para>
    <para>
     Le param&egrave;tre optionnel <parameter>replace</parameter> indique
     si la fonction <function>header</function> doit remplacer
     un en-t&ecirc;te pr&eacute;c&eacute;demment &eacute;mis, ou bien ajouter un autre en-t&ecirc;te
     du m&ecirc;me type. Par d&eacute;faut, un nouvel en-t&ecirc;te va &eacute;craser le
     pr&eacute;c&eacute;dent, mais si vous passez &false; dans cet argument, vous pouvez
     forcer les en-t&ecirc;tes multiples pour un m&ecirc;me type d'en-t&ecirc;te.
     Par exemple :
     <example>
      <title>Identification HTTP avec <function>header</function></title>
      <programlisting role="php">
<![CDATA[
<?php
  header('WWW-Authenticate: Negotiate');
  header('WWW-Authenticate: NTLM', FALSE);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Le second param&egrave;tre optionnel force 
     le code de r&eacute;ponse HTTP &agrave; la valeur de the <parameter>http_response_code</parameter>.
     Ce param&egrave;tre est disponible en &php; 4.3.0 et plus r&eacute;cent.
    </para>
   <para>
    Il y a cependant deux en-t&ecirc;tes sp&eacute;ciaux. Le premier est
    &quot;Location&quot;. Non seulement il renvoie un en-t&ecirc;te au
    client, mais, en plus, il envoie un statut de redirection &agrave;
    Apache. Du point de vue de l'auteur de script, cela importe peu,
    mais pour ceux qui connaissent les rouages internes d'Apache, c'est
    primordial.
    <example>
     <title>Redirection HTTP avec <function>header</function></title>
     <programlisting role="php">
<![CDATA[
<?php
  header("Location: http://www.php.net/");
/* Redirige le client vers le site PHP */
  exit();
/* Garantie que le code ci-dessous n'est jamais ex&eacute;cut&eacute;. */
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     HTTP/1.1 demande une <acronym>URI</acronym> absolue comme argument
     de <ulink url="&spec.http1.1;-sec14.html#sec14.30">Location:</ulink>,
     y compris le protocole, h&ocirc;te et chemin absolu. Mais certains
     navigateurs acceptent les URI relatives. Vous pouvez g&eacute;n&eacute;ralement
     utiliser les variables globales <varname>$_SERVER['HTTP_HOST']</varname>, 
     <varname>$_SERVER['PHP_SELF']</varname> et <function>dirname</function> pour
     construire vous-m&ecirc;me une URI absolue : 
     <example>
      <title>Redirection &agrave; l'aide de <function>header</function></title>
      <programlisting>
<![CDATA[
<?php
  header("Location: http://".$_SERVER['HTTP_HOST']
                     ."/".dirname($_SERVER['PHP_SELF'])
                     ."/".$relative_url);
?>
]]>
      </programlisting>
     </example>
    </para>
   </note>
   <para>
    Le deuxi&egrave;me type d'appel sp&eacute;cial regroupe tous les
    en-t&ecirc;tes qui commencent par "HTTP/" (la casse n'est
    pas importante). Par exemple, si vous avez votre page d'erreur 404
    Apache qui pointe sur un script PHP, c'est une bonne id&eacute;e
    que de vous assurer que le script PHP g&eacute;n&egrave;re une erreur
    404. La premi&egrave;re chose &agrave; faire dans votre script est  :
    <example>
     <title>Limitation d'acc&egrave;s &agrave; l'aide de <function>header</function></title>
     <programlisting role="php">
<![CDATA[
<?php
  header("HTTP/1.0 404 Not Found");
?>
]]>
     </programlisting>
    </example>
   </para>
    <note>
     <para>
      En PHP 3, cela ne fonctionne que si PHP est compil&eacute; comme
      module Apache. Vous pouvez arriver au m&ecirc;me r&eacute;sultat
      en utilisant l'en-t&ecirc;te <literal>Status</literal>.
      <example>
       <title>Limitation d'acc&egrave;s &agrave; l'aide de <function>header</function>, en PHP 3</title>
       <programlisting role="php">
<![CDATA[
<?php
  header("Status: 404 Not Found");
?>
]]>
       </programlisting>
      </example>
     </para>
    </note>
   <para>
    Les scripts PHP g&eacute;n&egrave;rent souvent du HTML dynamiquement,
    qui ne doit pas &ecirc;tre mis en cache, ni par le client, ni par les
    proxy interm&eacute;diaires. On peut forcer la d&eacute;sactivation du
    cache de nombreux clients et proxy avec
    <example>
     <title>Interdire la mise en cache avec <function>header</function></title>
     <programlisting role="php">
<![CDATA[
<?php
  header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");             // Date du pass&eacute;
  header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT"); // toujours modifi&eacute;
  header("Cache-Control: no-cache, must-revalidate");           // HTTP/1.1
  header("Pragma: no-cache");                                   // HTTP/1.0
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Vous pouvez vous rendre compte que vos pages ne sont jamais mises
     en cache m&ecirc;me si vous utilisez tous les en-t&ecirc;tes ci-dessus.
     Il existe toute une collection de param&egrave;tres que les utilisateurs
     peuvent modifier sur leur navigateur pour modifier le 
     comportement par d&eacute;faut du cache. En envoyant les en-t&ecirc;tes
     ci-dessus, vous pouvez imposer vos propres valeurs.
    </para>
    <para>
     De plus, les param&egrave;tres <function>session_cache_limiter</function> et
     <literal>session.cache_limiter</literal> peuvent &ecirc;tre utilis&eacute;s pour
     g&eacute;n&eacute;rer les en-t&ecirc;tes de caches corrects, lorsque les sessions sont
     utilis&eacute;es.
    </para>
   </note>
   <para>
    N'oubliez jamais que <function>header</function> doit &ecirc;tre appel&eacute;e
    avant que le moindre contenu ne soit envoy&eacute;, soit par des
    lignes HTML habituelles dans le fichier, soit par des affichges
    PHP. Une erreur tr&egrave;s classique est de lire un fichier avec
    <function>include</function> ou <function>require</function>,
    et de laisser des espaces ou des lignes vides, qui g&eacute;n&egrave;reront
    un affichage avant que la fonction <function>header</function>
    ne soit appel&eacute;e. Le m&ecirc;me probl&egrave;me existe avec les fichiers
    PHP/HTML standards.
    <example>
     <title><function>header</function> doit toujours &ecirc;tre appel&eacute; en premier</title>
     <programlisting role="php">
<![CDATA[
<?php

  require("user_logging.inc")
?>
<?php
  header("Content-Type: audio/x-pn-realaudio");
?>
&nbsp;
// Erreur :  Notez la ligne blanche ci-dessus
?>
]]>
      </programlisting>
     </example>
    </para>
   <note>
    <para>
     En PHP 4, vous pouvez utiliser le syst&egrave;me de cache (output buffering)
     pour contourner ce probl&egrave;me. Tous vos textes g&eacute;n&eacute;r&eacute;s seront
     mis en buffer sur le serveur jusqu'&agrave; ce que vous les envoyiez. Vous pouvez
     utiliser les fonctions <function>ob_start</function> et 
     <function>ob_end_flush</function> dans vos scripts, ou en
     modifiant la directive de configuration <literal>output_buffering</literal>
     dans votre fichier &php.ini; ou vos fichiers
     de configuration du serveur.
    </para>
   </note>
   <para>
    Si vous voulez que vos utilisateur recoivent une alerte pour sauver
    les fichiers g&eacute;n&eacute;r&eacute;s, comme par exemple si vous g&eacute;n&eacute;rez un
    fichier PDF, vous pouvez utiliser l'en-t&ecirc;te <ulink
    url="&url.rfc2183;">Content-Disposition</ulink> pour 
    fournir un nom de fichier par d&eacute;faut, &agrave; afficher dans le
    dialogue de sauvegarde.
    <example>
     <title>Utilisation de <function>header</function> pour g&eacute;n&eacute;rer un PDF ou autre type</title>
     <programlisting role="php">
<![CDATA[
<?php
header("Content-type: application/pdf");
header("Content-Disposition: attachment; filename=downloaded.pdf");

/* ... output pdf file ... */
?>
]]>
     </programlisting>
    </example>
    <note>
     <para>
      Il y a un bug sous Microsoft Internet Explorer 4.01 qui emp&ecirc;che
      cet en-t&ecirc;te de fonctionner. Il n'y a pas d'autre solution.
      Il y a aussi un bug dans Microsoft Internet Explorer 5.5 qui
      interf&egrave;re avec ceci, mais qui peut &ecirc;tre r&eacute;solu en utilisant
      le Service Pack 2 ou plus r&eacute;cent.
     </para>
    </note>
   </para>
    <note>
     <simpara>
      Si &safemode; est activ&eacute;, l'UID du script est ajout&eacute;
      &agrave; la partie <literal>realm</literal> des en-t&ecirc;tes 
      <literal>WWW-Authenticate</literal> que vous envoyez avec
      cet en-t&ecirc;te.
     </simpara>
    </note>
   <para>
    Voir aussi
    <function>headers_sent</function>,
    <function>setcookie</function>, et la section sur 
    <link linkend="features.http-auth">l'authentification HTTP </link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
