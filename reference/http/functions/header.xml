<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/http.xml, last change in rev 1.2 -->
<!-- last change to 'header' in en/ tree in rev 1.2 -->
 <refentry id="function.header">
  <refnamediv>
   <refname>header</refname>
   <refpurpose>Envoie une en-t&ecirc;te HTTP.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>int</type><methodname>header</methodname>
     <methodparam><type>string</type><parameter>string</parameter></methodparam>
    </methodsynopsis>
   <para>
    <function>header</function> permet de sp&eacute;cifier une
    en-t&ecirc;te HTTP lors de l'envoi des fichiers HTML. Reportez-vous
    &agrave; <ulink url="&spec.http1.1;">HTTP 1.1 Specification</ulink>
    pour plus d'informations sur les en-t&ecirc;tes HTTP.
   </para>
   <note>
    <para>
     La fonction <function>header</function> doit &ecirc;tre appel&eacute;e avant la
     premi&egrave;re balise HTML, et avant n'importe quel envoi de commande
     PHP. C'est une erreur tr&egrave;s courante que de lire du code avec la
     fonction <function>include</function> ou avec auto_prepend et d'avoir
     des espaces ou des lignes vides dans ce code qui produisent un
     d&eacute;but de sortie avant que <function>header</function>
     n'ait &eacute;t&eacute; appel&eacute;.
    </para>
   </note>
   <para>
    Il y a cependant deux en-t&ecirc;tes sp&eacute;ciales. Le premier est
    &quot;Location&quot;. Non seulement il renvoie une en-t&ecirc;te au
    client, mais en plus, il envoie un statut de redirection &agrave;
    Apache. Du point de vue de l'auteur de script, cela importe peu,
    mais pour ceux qui connaissent les rouages internes d'Apache, c'est
    primordial.
    <informalexample>
     <programlisting role="php">
&lt;?php
  header("Location: http://www.php.net/");
/* Redirige le client vers le site PHP */
  exit();
/* Garantit que le code ci-dessous n'est jamais ex&eacute;cut&eacute;. */
?&gt;
     </programlisting>
    </informalexample>
   </para>
   <note>
    <para>
     HTTP/1.1 demande une <acronym>URI</acronym> absolue comme argument
     de <ulink url="&spec.http1.1;-sec14.html#sec14.30">Location:</ulink>,
     y compris le protocole, h&ocirc;te et chemin absolu. Mais certains
     navigateurs acceptent les URI relatives. Vous pouvez g&eacute;n&eacute;ralement
     utiliser les variables globales $HTTP_SERVER_VARS['HTTP_HOST'], 
     $HTTP_SERVER_VARS['PHP_SELF'] et <function>dirname</function> pour
     construire vous-m&ecirc;me une URI absolue : 
     <informalexample>
      <programlisting>
header("Location: http://".$HTTP_SERVER_VARS['HTTP_HOST']
                     ."/".dirname($HTTP_SERVER_VARS['PHP_SELF'])
                     ."/".$relative_url);
      </programlisting>
     </informalexample>
    </para>
   </note>
   <para>
    Le deuxi&egrave;me type d'appel sp&eacute;cial regroupe toutes les
    en-t&ecirc;tes qui commencent par &quot;HTTP/&quot; (la casse n'est
    pas importante). Par exemple, si vous avez votre page d'erreur 404
    Apache qui pointe sur un script PHP, c'est une bonne id&eacute;e
    que de vous assurer que le script PHP g&eacute;n&egrave;re une erreur
    404. La premi&egrave;re chose &agrave; faire dans votre script est  :
    <informalexample>
     <programlisting role="php">
&lt;?php
  header("Location: HTTP/1.0 404");
?&gt;
     </programlisting>
    </informalexample>
   </para>
    <note>
     <para>
      En PHP 3, cela ne fonctionne que si PHP est compil&eacute; comme
      module Apache. Vous pouvez arriver au m&ecirc;me au r&eacute;sultat
      en utilisant l'ent&ecirc;te <literal>Status</literal>.
      <informalexample>
       <programlisting role="php">
header("Status: 404 Not Found");
       </programlisting>
      </informalexample>
     </para>
    </note>
   <para>
    Les scripts PHP g&eacute;n&egrave;rent souvent du HTML dynamiquement,
    qui ne doit pas &ecirc;tre mis en cache, ni par le client, ni par les
    proxy interm&eacute;diaires. On peut forcer la d&eacute;sactivation du
    cache de nombreux clients et proxy avec
    <informalexample>
     <programlisting role="php">
&lt;?php
  header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");             // Date du pass&eacute;
  header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT"); // toujours modifi&eacute;
  header("Cache-Control: no-cache, must-revalidate");           // HTTP/1.1
  header("Pragma: no-cache");                                   // HTTP/1.0
?&gt;
     </programlisting>
    </informalexample>
   </para>
   <note>
    <para>
     Vous pouvez vous rendre compte que vos pages ne sont jamais mises
     en cache m&ecirc;me si vous utilisez toutes les ent&ecirc;tes ci-dessus.
     Il existe toute une collection de param&egrave;tres que les utilisateurs
     peuvent modifier sur leur navigateur pour modifier le 
     comportement par d&eacute;faut du cache. En envoyant les ent&ecirc;tes
     ci-dessus, vous pouvez imposer vos propres valeurs.
    </para>
    <para>
     De plus, les param&egrave;tres <function>session_cache_limiter</function> et
     <literal>session.cache_limiter</literal> peuvent &ecirc;tre utilis&eacute; pour
     g&eacute;n&eacute;rer les ent&ecirc;tes de caches corrects, lorsque les sessions sont
     utilis&eacute;es.
    </para>
   </note>
   <para>
    N'oubliez jamais que <function>header</function> doit &ecirc;tre appel&eacute;e
    avant que le moindre contenu ne soit envoy&eacute;, soit par des
    lignes HTML habituelles dans le fichier, soit par des affichges
    PHP. Une erreur tr&egrave;s classique est de lire un fichier avec
    <function>include</function> ou <function>require</function>,
    et de laisser des espaces ou des lignes vides, qui g&eacute;n&egrave;reront
    un affichage avant que la fonction <function>header</function>
    ne soit appel&eacute;e. Le m&ecirc;me probl&egrave;me existe avec les fichiers
    PHP/HTML standards.
    <informalexample>
     <programlisting role="php">
&lt;?php
  require("user_logging.inc")
?&gt;
&lt;?php
  header("Content-Type: audio/x-pn-realaudio");
?&gt;
&nbsp;
// Erreur :  Notez la ligne blanche ci-dessus
      </programlisting>
     </informalexample>
    </para>
   <note>
    <para>
     En PHP 4, vous pouvez utiliser le syst&egrave;me de cache (output buffering)
     pour contourner ce probl&egrave;me. Tous vos textes g&eacute;n&eacute;r&eacute;s seront
     mis en buffer sur le serveur jusqu'&agrave; ce que vous les envoyiez. Vous pouvez
     utiliser les fonctions <function>ob_start</function> et 
     <function>ob_end_flush</function> dans vos scripts, ou en
     modifiant la directive de configuration <literal>output_buffering</literal>
     dans votre fichier <filename>php.ini</filename> ou vos fichiers
     de configuration du serveur.
    </para>
   </note>
   <para>
    Si vous voulez que vos utilisateur recoivent une alerte pour sauver
    les fichiers g&eacute;n&eacute;r&eacute;s, comme par exemple si vous g&eacute;n&eacute;rez un
    fichier PDF, vous pouvez utiliser l'ent&ecirc;te <ulink
    url="&url.rfc2183;">Content-Disposition</ulink> pour 
    fournir un nom de fichier par d&eacute;faut, &agrave; afficher dans le
    dialogue de sauvegarde.
    <informalexample>
     <programlisting role="php">
&lt;?php
header("Content-type: application/pdf");
header("Content-Disposition: attachment; filename=downloaded.pdf");

/* ... output pdf file ... */
     </programlisting>
    </informalexample>
    <note>
     <para>
      Il y a un bug sous Microsoft Internet Explorer 4.01 qui emp&ecirc;che
      cet ent&ecirc;te de fonctionner. Il n'y a pas d'autre solution.
      Il y a aussi un bug dans Microsoft Internet Explorer 5.5 qui
      interf&egrave;re avec ceci, mais qui peut &ecirc;tre r&eacute;solu en utilisant
      le Service Pack 2 ou plus r&eacute;cent.
     </para>
    </note>
   </para>
   <para>
    Voir aussi
    <function>headers_sent</function>,
    <function>setcookie</function>, et la section sur 
    <link linkend="features.http-auth">l'authentification HTTP </link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
