<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 323624 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<appendix xml:id="http.constants" xmlns="http://docbook.org/ns/docbook">
  &reftitle.constants;
  &extension.constants;
  <variablelist xml:id="http.constants.support">
   <title>Constantes utilisables avec la fonction <function>http_support</function></title>
   <varlistentry xml:id="constant.http-support">
    <term>
     <constant>HTTP_SUPPORT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      requête vers cette constante retournera toujours &true;
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-support-requests">
    <term>
     <constant>HTTP_SUPPORT_REQUESTS</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      si le support des requêtes HTTP est fourni, i.e. le support libcurl est compilé
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-support-magicmime">
    <term>
     <constant>HTTP_SUPPORT_MAGICMIME</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      si le support de l'interrogation du type de contenu des messages HTTP est fourni,
      i.e. le support libmagic est compilé
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-support-encodings">
    <term>
     <constant>HTTP_SUPPORT_ENCODINGS</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      si le support de l'encodage zlib est fourni, i.e. le support libz est compilé
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-support-sslrequests">
    <term>
     <constant>HTTP_SUPPORT_SSLREQUESTS</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      si l'on peut envoyer des demandes HTTP via SSL, i.e. libcurl est compilé avec le support SSL
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.params">
   <title>Constantes utilisables avec la fonction <function>http_parse_params</function></title>
   <varlistentry xml:id="constant.http-params-allow-comma">
    <term>
     <constant>HTTP_PARAMS_ALLOW_COMMA</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      autorise les virgules, en plus des points-virgules, en tant que séparateur
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-params-allow-failure">
    <term>
     <constant>HTTP_PARAMS_ALLOW_FAILURE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      continue l'analyse après qu'une erreur ne soit survenue
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-params-raise-error">
    <term>
     <constant>HTTP_PARAMS_RAISE_ERROR</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      lance une alerte PHP lors d'erreurs d'analyse
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-params-default">
    <term>
     <constant>HTTP_PARAMS_DEFAULT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      l'ensemble des trois valeurs ci-dessus
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.cookie">
   <title>Constantes utilisables avec la fonction <function>http_parse_cookie</function> et la valeur retournée</title>
   <varlistentry xml:id="constant.http-cookie-parse-raw">
    <term>
     <constant>HTTP_COOKIE_PARSE_RAW</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      ne pas url-encoder les valeurs
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-cookie-secure">
    <term>
     <constant>HTTP_COOKIE_SECURE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      si "secure" a été trouvé dans la liste des paramètres du cookie
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-cookie-httponly">
    <term>
     <constant>HTTP_COOKIE_HTTPONLY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      si "httpOnly" a été trouvé dans la liste des paramètres du cookie
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.deflate">
   <title>Constantes utilisables avec la fonction <function>http_deflate</function> 
   et la classe <classname>HttpDeflateStream</classname></title>
   <varlistentry xml:id="constant.http-deflate-level-def">
    <term>
     <constant>HTTP_DEFLATE_LEVEL_DEF</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-level-min">
    <term>
     <constant>HTTP_DEFLATE_LEVEL_MIN</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-level-max">
    <term>
     <constant>HTTP_DEFLATE_LEVEL_MAX</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-type-zlib">
    <term>
     <constant>HTTP_DEFLATE_TYPE_ZLIB</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-type-gzip">
    <term>
     <constant>HTTP_DEFLATE_TYPE_GZIP</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-type-raw">
    <term>
     <constant>HTTP_DEFLATE_TYPE_RAW</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-strategy-def">
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_DEF</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-strategy-filt">
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_FILT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-strategy-huff">
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_HUFF</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-strategy-rle">
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_RLE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-deflate-strategy-fixed">
    <term>
     <constant>HTTP_DEFLATE_STRATEGY_FIXED</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.encodingstream">
   <title>Constantes utilisables avec les classes <classname>HttpDeflateStream</classname> et <classname>HttpInflateStream</classname></title>
   <varlistentry xml:id="constant.http-encoding-stream-flush-none">
    <term>
     <constant>HTTP_ENCODING_STREAM_FLUSH_NONE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      ne pas envoyer
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-encoding-stream-flush-sync">
    <term>
     <constant>HTTP_ENCODING_STREAM_FLUSH_SYNC</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      flush synchronisé uniquement
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-encoding-stream-flush-full">
    <term>
     <constant>HTTP_ENCODING_STREAM_FLUSH_FULL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      toutes les données sont envoyées
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.error">
   <title>Constantes utilisées pour le rapport d'erreurs et d'exceptions</title>
   <varlistentry xml:id="constant.http-e-runtime">
    <term>
     <constant>HTTP_E_RUNTIME</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      erreur d'exécution
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-invalid-param">
    <term>
     <constant>HTTP_E_INVALID_PARAM</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      un paramètre invalide a été passé
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-header">
    <term>
     <constant>HTTP_E_HEADER</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      header() ou opération similaire a échoué
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-malformed-headers">
    <term>
     <constant>HTTP_E_MALFORMED_HEADERS</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      erreur d'analyse d'un en-tête HTTP
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-request-method">
    <term>
     <constant>HTTP_E_REQUEST_METHOD</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      méthode de demande inconnue/invalide
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-message-type">
    <term>
     <constant>HTTP_E_MESSAGE_TYPE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      avec un type de message d'une opération incompatible
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-encoding">
    <term>
     <constant>HTTP_E_ENCODING</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      erreur d'encodage/décodage
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-request">
    <term>
     <constant>HTTP_E_REQUEST</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      échec de la demande
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-request-pool">
    <term>
     <constant>HTTP_E_REQUEST_POOL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      échec dans la file de demande
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-socket">
    <term>
     <constant>HTTP_E_SOCKET</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      exception d'un socket
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-response">
    <term>
     <constant>HTTP_E_RESPONSE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      échec d'une réponse
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-url">
    <term>
     <constant>HTTP_E_URL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      URL invalide
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-e-querystring">
    <term>
     <constant>HTTP_E_QUERYSTRING</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      échec dans l'opération de requête
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.message">
   <title>Constantes utilisables avec la classe <classname>HttpMessage</classname></title>
   <varlistentry xml:id="constant.http-msg-none">
    <term>
     <constant>HTTP_MSG_NONE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      le message n'est pas d'un type spécifique
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-msg-request">
    <term>
     <constant>HTTP_MSG_REQUEST</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      style du message de la demande
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-msg-response">
    <term>
     <constant>HTTP_MSG_RESPONSE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      style du message de la réponse
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.querystring">
   <title>Constantes utilisables avec la classe <classname>HttpQueryString</classname></title>
   <varlistentry xml:id="constant.http-querystring-type-bool">
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_BOOL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-querystring-type-int">
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_INT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-querystring-type-float">
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_FLOAT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-querystring-type-string">
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_STRING</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-querystring-type-array">
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_ARRAY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-querystring-type-object">
    <term>
     <constant>HTTP_QUERYSTRING_TYPE_OBJECT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.httpauth">
   <title>Constantes utilisables pour <literal>httpauthtype</literal> &link.http.request.option;</title>
   <varlistentry xml:id="constant.http-auth-basic">
    <term>
     <constant>HTTP_AUTH_BASIC</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise l'identification "basic"
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-auth-digest">
    <term>
     <constant>HTTP_AUTH_DIGEST</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise l'identification "digest"
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-auth-ntlm">
    <term>
     <constant>HTTP_AUTH_NTLM</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise l'identification "NTLM"
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-auth-gssneg">
    <term>
     <constant>HTTP_AUTH_GSSNEG</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise l'identification "GSS-NEGOTIATE"
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-auth-any">
    <term>
     <constant>HTTP_AUTH_ANY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      tente n'importe quel schéma d'identification
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.protocol">
   <title>Constantes utilisables pour la version du protocole HTTP &link.http.request.option;</title>
   <varlistentry xml:id="constant.http-version-any">
    <term>
     <constant>HTTP_VERSION_ANY</constant> <!-- HTTP_VERSION_NONE is deprecated -->
      (&integer;)
    </term>
    <listitem>
     <simpara>
      aucune version de protocole HTTP spécifique
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-version-1-0">
    <term>
     <constant>HTTP_VERSION_1_0</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      HTTP version 1.0
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-version-1-1">
    <term>
     <constant>HTTP_VERSION_1_1</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      HTTP version 1.1
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.ssl">
   <title>Constantes utilisables pour le type du protocole SSL et la version &link.http.request.option;</title>
   <varlistentry xml:id="constant.http-ssl-version-any">
    <term>
     <constant>HTTP_SSL_VERSION_ANY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      aucune version du protocole SSL spécifique
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-ssl-version-tlsv1">
    <term>
     <constant>HTTP_SSL_VERSION_TLSv1</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise TLSv1 uniquement
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-ssl-version-sslv3">
    <term>
     <constant>HTTP_SSL_VERSION_SSLv3</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise SSLv3 uniquement
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-ssl-version-sslv2">
    <term>
     <constant>HTTP_SSL_VERSION_SSLv2</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise SSLv2 uniquement
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.proxy">
   <title>Constantes utilisées par le <literal>proxytype</literal> &link.http.request.option;</title>
   <varlistentry xml:id="constant.http-proxy-socks4">
    <term>
     <constant>HTTP_PROXY_SOCKS4</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      le proxy est un proxy de type SOCKS4
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-proxy-socks5">
    <term>
     <constant>HTTP_PROXY_SOCKS5</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      le proxy est un proxy de type SOCKS5
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-proxy-http">
    <term>
     <constant>HTTP_PROXY_HTTP</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      proxy HTTP standard
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.dns">
   <title>Constantes utilisées pour le <literal>ipresolve</literal> &link.http.request.option;</title>
   <varlistentry xml:id="constant.http-ipresolve-v4">
    <term>
     <constant>HTTP_IPRESOLVE_V4</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise IPv4 uniquement pour la recherche de noms
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-ipresolve-v6">
    <term>
     <constant>HTTP_IPRESOLVE_V6</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise IPv6 uniquement pour la recherche de noms
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-ipresolve-any">
    <term>
     <constant>HTTP_IPRESOLVE_ANY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      utilise n'importe quel mécanisme uniquement pour la recherche de noms
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.request.methods">
   <title>Constantes prédéfinies pour la méthode de demande HTTP</title>
   <varlistentry xml:id="constant.http-meth-get">
    <term>
     <constant>HTTP_METH_GET</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-head">
    <term>
     <constant>HTTP_METH_HEAD</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-post">
    <term>
     <constant>HTTP_METH_POST</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-put">
    <term>
     <constant>HTTP_METH_PUT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-delete">
    <term>
     <constant>HTTP_METH_DELETE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-options">
    <term>
     <constant>HTTP_METH_OPTIONS</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-trace">
    <term>
     <constant>HTTP_METH_TRACE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-connect">
    <term>
     <constant>HTTP_METH_CONNECT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-propfind">
    <term>
     <constant>HTTP_METH_PROPFIND</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-proppatch">
    <term>
     <constant>HTTP_METH_PROPPATCH</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-mkcol">
    <term>
     <constant>HTTP_METH_MKCOL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-copy">
    <term>
     <constant>HTTP_METH_COPY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-move">
    <term>
     <constant>HTTP_METH_MOVE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-lock">
    <term>
     <constant>HTTP_METH_LOCK</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-unlock">
    <term>
     <constant>HTTP_METH_UNLOCK</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-version-control">
    <term>
     <constant>HTTP_METH_VERSION_CONTROL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-report">
    <term>
     <constant>HTTP_METH_REPORT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-checkout">
    <term>
     <constant>HTTP_METH_CHECKOUT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-checkin">
    <term>
     <constant>HTTP_METH_CHECKIN</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-uncheckout">
    <term>
     <constant>HTTP_METH_UNCHECKOUT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-mkworkspace">
    <term>
     <constant>HTTP_METH_MKWORKSPACE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-update">
    <term>
     <constant>HTTP_METH_UPDATE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-label">
    <term>
     <constant>HTTP_METH_LABEL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-merge">
    <term>
     <constant>HTTP_METH_MERGE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-baseline-control">
    <term>
     <constant>HTTP_METH_BASELINE_CONTROL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-mkactivity">
    <term>
     <constant>HTTP_METH_MKACTIVITY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-meth-acl">
    <term>
     <constant>HTTP_METH_ACL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      <!-- TODO description -->
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.redirect">
   <title>Constantes utilisables avec la fonction <function>http_redirect</function></title>
   <varlistentry xml:id="constant.http-redirect">
    <term>
     <constant>HTTP_REDIRECT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      demande la méthode de redirection applicable
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-redirect-perm">
    <term>
     <constant>HTTP_REDIRECT_PERM</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      redirection permanente (<literal>301 Moved permanently</literal>)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-redirect-found">
    <term>
     <constant>HTTP_REDIRECT_FOUND</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      redirection standard (<literal>302 Found</literal>)
     </simpara>
     <note>
      <simpara>
       Les RFC 1945 et RFC 2068 spécifies que le client n'est pas autorisé
       à changer la méthode de la demande de redirection. Cependant, la plupart
       des implémentations des agents utilisateurs existants gèrent une réponse 302
       comme s'il s'agissait d'une réponse 303, effectuant un GET sur la valeur du champ
       au regard de la méthode de la demande originale. Les codes statut 303 et 307
       ont été ajoutés pour les serveurs qui veulent, sans ambiguïté, effectuer un effacement,
       ce qui est attendu par le client.
      </simpara>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-redirect-post">
    <term>
     <constant>HTTP_REDIRECT_POST</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      redirection applicable aux demandes POST (<literal>303 See other</literal>)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-redirect-proxy">
    <term>
     <constant>HTTP_REDIRECT_PROXY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      redirection de proxy (<literal>305 Use proxy</literal>)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-redirect-temp">
    <term>
     <constant>HTTP_REDIRECT_TEMP</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      redirection temporaire (<literal>307 Temporary Redirect</literal>)
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
  <variablelist xml:id="http.constants.url">
   <title>Constantes utilisables avec la fonction <function>http_build_url</function></title>
   <varlistentry xml:id="constant.http-url-replace">
    <term>
     <constant>HTTP_URL_REPLACE</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      remplace chaque partie de la première URL lorsqu'elles font parties de la seconde
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-join-path">
    <term>
     <constant>HTTP_URL_JOIN_PATH</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      joins les chemins relatifs
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-join-query">
    <term>
     <constant>HTTP_URL_JOIN_QUERY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      joins les chaînes de requête
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-strip-user">
    <term>
     <constant>HTTP_URL_STRIP_USER</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      enlève toutes les informations d'identification utilisateur
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-strip-pass">
    <term>
     <constant>HTTP_URL_STRIP_PASS</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      enlève toutes les informations d'identification concernant le mot de passe
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-strip-auth">
    <term>
     <constant>HTTP_URL_STRIP_AUTH</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      enlève toutes les informations d'identification
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-strip-port">
    <term>
     <constant>HTTP_URL_STRIP_PORT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      enlève les numéros de port explicites
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-strip-path">
    <term>
     <constant>HTTP_URL_STRIP_PATH</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      enlève le chemin complet
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-strip-query">
    <term>
     <constant>HTTP_URL_STRIP_QUERY</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      enlève la chaîne de requête
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-strip-fragment">
    <term>
     <constant>HTTP_URL_STRIP_FRAGMENT</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      enlève n'importe quel fragment (#identifier)
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.http-url-strip-all">
    <term>
     <constant>HTTP_URL_STRIP_ALL</constant>
      (&integer;)
    </term>
    <listitem>
     <simpara>
      enlève tout
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->