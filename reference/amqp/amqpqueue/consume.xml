<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 323238 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="amqpqueue.consume" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>AMQPQueue::consume</refname>
  <refpurpose>Consomme les messages depuis la file d'attente</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>AMQPQueue::consume</methodname>
   <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>AMQP_NOPARAM</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Fonction bloquante qui récupère le prochain message depuis
   la file d'attente, le rendant ainsi disponible et le passe
   à la fonction de rappel.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Une fonction de rappel qui recevra le message récupéré.
       La fonction doit accepter au minimum un paramètre, un
       objet <classname>AMQPEnvelope</classname>, et un
       second paramètre optionnel <classname>AMQPQueue</classname>
       représentant la file d'attente depuis laquelle le message
       est récupéré.
      </para>
      <para>
       La méthode <methodname>AMQPQueue::consume</methodname>
       ne retournera pas le thread exécutant la demande au script PHP
       tant que la fonction de rappel ne retournera pas &false;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Un masque contenant n'importe quel drapeau
       <constant>AMQP_NOACK</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Emets une exception <classname>AMQPChannelException</classname>
   si le canal n'est pas ouvert.
  </para>
  <para>
   Emets une exception <classname>AMQPConnectionException</classname>
   si la connexion au broker a été perdue.
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <methodname>AMQPQueue::consume</methodname></title>
    <programlisting role="php">
<![CDATA[
<?php

     /* Création d'une connexion utilisant toutes les informations d'authentification par défaut : */
     $connection = new AMQPConnection();
     $connection->connect();

     $channel = new AMQPChannel($connection);

     /* création d'un objet de file d'attente */
     $queue = new AMQPQueue($channel);

     // Déclaration de la file d'attente
     $queue->declare('myqueue');

     $i = 0;
     function processMessage($envelope, $queue) {
        global $i;
        echo "Message $i: " . $envelope->getBody() . "\n";
        $i++;
        if ($i > 10) {
            // Bail after 10 messages
            return false;
        }
     }

     // Récupère les messages
     $queue->consume("processMessage");

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
