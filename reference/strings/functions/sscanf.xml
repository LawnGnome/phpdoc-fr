<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.17 $ -->
<!-- EN-Revision: 1.14 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

  <refentry id="function.sscanf">
   <refnamediv>
    <refname>sscanf</refname>
    <refpurpose>
     Analyse une chaîne à l'aide d'un format
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>mixed</type><methodname>sscanf</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam><type>string</type><parameter>format</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter role="reference">...</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>sscanf</function> est l'inverse de la fonction
     <function>printf</function>. <function>sscanf</function> lit
     des données dans la chaîne <parameter>str</parameter>, et
     l'interprète en fonction du format <parameter>format</parameter>,
     qui est décrit dans la documentation de la fonction <function>sprintf</function>.
     Si seuls deux paramètres sont fournis, les valeurs trouvées
     seront retournées sous forme de tableau. Sinon, les valeurs seront
     placées dans un tableau. Si l'argument optionnel est passé, 
     la fonction retournera le nombre de valeurs assignées. Le paramètre optionnel
     doit être passé par référence.
    </para>
    <para>
     Tous les caractères blancs dans la chaîne <parameter>format</parameter> correspondent
     à un caractère blanc dans la chaîne <parameter>str</parameter>. Cela signifie que
     même une tabulation \t dans la chaîne de format peut correspondre à
     un simple espace dans la chaîne <parameter>str</parameter>.
    </para>
    <para>
     <example>
      <title>Exemple avec <function>sscanf</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// Lecture d'un numéro de série
list($serial) = sscanf("SN/2350001", "SN/%d");
// et la date de fabrication
$mandate = "January 01 2000";
list($month, $day, $year) = sscanf($mandate, "%s %d %d");
echo "Le produit $serial a été fabriqué le : $year-" . substr($month, 0, 3) . "-$day\n";
?>
]]>
      </programlisting>
     </example>
     Si des paramètres optionnels sont passés, <function>sscanf</function> retournera
     le nombre de valeurs assignées.
     <example>
      <title>Exemple avec <function>sscanf</function> : utilisation des paramètres optionnels</title>
      <programlisting role="php">
<![CDATA[
<?php
// lit les informations d'auteur, et génère une entrée DocBook
$auth = "24    Lewis Carroll";
$n = sscanf($auth, "%d\t%s %s", $id, $first, $last);
echo "<author id=\"$id\">
    <firstname>$first</firstname>
    <surname>$last</surname>
</author>\n";
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi
     <function>fscanf</function>,
     <function>printf</function> et 
     <function>sprintf</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
