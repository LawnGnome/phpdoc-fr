<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/strings.xml, last change in rev 1.42 -->
<!-- last change to 'sprintf' in en/ tree in rev 1.2 -->
 <refentry id="function.sprintf">
  <refnamediv>
   <refname>sprintf</refname>
   <refpurpose>Retourne une cha&icirc;ne format&eacute;e.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
    <methodsynopsis>
     <type>string</type><methodname>sprintf</methodname>
     <methodparam><type>string</type><parameter>format</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
    </methodsynopsis>
   <simpara>
    <function>sprintf</function> retourne une cha&icirc;ne
    format&eacute;e avec le format <parameter>format</parameter>.
   </simpara>
   <simpara>
    La cha&icirc;ne de format est compos&eacute;e de 0 ou plus directives :
    g&eacute;n&eacute;ralement des caract&egrave;res qui sont recopi&eacute;s
    tels quels (hormis <literal>%</literal>), et des sp&eacute;cifications,
    chacune d'elle disposant de son propre param&egrave;tre. Cela s'applique
    &agrave; <function>sprintf</function> et <function>printf</function>.
   </simpara>
   <para>
    Chaque conversion consiste en un signe pourcentage (<literal>%</literal>),
    suivi d'un ou plusieurs &eacute;l&eacute;ments parmi ceux-ci :
    <orderedlist>
     <listitem>
      <simpara>
       Une option de remplissage, qui indique quel caract&egrave;re sera
       utilis&eacute; pour le remplissage, et la taille finale de la
       cha&icirc;ne. Le caract&egrave;re de remplissage peut &ecirc;tre
       un espace ou le caract&egrave;re z&eacute;ro (<literal>0</literal>).).
       La valeur par d&eacute;faut est l'espace. Une autre valeur peut
       &ecirc;tre sp&eacute;cifi&eacute;e en la pr&eacute;fixant par un
       guillemet simple (<literal>'</literal>). Voir les exemples plus loin.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Un argument optionnel <emphasis>alignment sp&eacute;cifier</emphasis> qui indique
       que le r&eacute;sultat doit &ecirc;tre justifi&eacute; &agrave; droite ou
       &agrave; gauche. Par d&eacute;faut, il est justifi&eacute; &agrave; gauche.
       Le caract&egrave;re <literal>-</literal> signifie : justification &agrave;
       droite.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Argument optionnel, <emphasis>width sp&eacute;cifier</emphasis> indique le nombre
       minimum de caract&egrave;res que la conversion devrait retourner.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Argument optionnel, <emphasis>precision sp&eacute;cifier</emphasis> indique le nombre
       de chiffres utilis&eacute; pour afficher un nombre &agrave; virgule flottante.
       Cette option n'a d'effet que sur les nombres &agrave; virgule de type double
       (Une autre fonction pratique pour formater les nombres est :
       <function>number_format</function>).
      </simpara>
     </listitem>
     <listitem>
      <para>
       <emphasis>type specifier</emphasis> indique le type de donn&eacute;es
       pass&eacute;es en argument. Les types possibles sont :
       <simplelist>
       <member>
       <literal>%</literal> - un signe pourcentage : aucun argument n&eacute;cessaire.
       </member>
       <member>
       <literal>b</literal> - l'argument est trait&eacute; comme un entier, et
       repr&eacute;sent&eacute; comme un nombre binaire.
       </member>
       <member>
       <literal>c</literal> - l'argument est trait&eacute; comme un entier, et
       repr&eacute;sent&eacute; comme un nombre ascii.
       </member>
       <member>
       <literal>d</literal> - l'argument est trait&eacute; comme un entier,
       et repr&eacute;sent&eacute; comme un nombre d&eacute;cimal.
       </member>
       <member>
        <literal>u</literal> - l'argument est trait&eacute; comme un entier,
        et repr&eacute;sent&eacute; comme un nombre d&eacute;cimal non sign&eacute;.
       </member>
       <member>
       <literal>f</literal> - l'argument est trait&eacute; comme un double,
       et repr&eacute;sent&eacute; comme un nombre &agrave; virgule flottante.
       </member>
       <member>
       <literal>o</literal> - l'argument est trait&eacute; comme un entier,
       et repr&eacute;sent&eacute; comme un nombre octal.
       </member>
       <member>
       <literal>s</literal> - l'argument est trait&eacute; tel quel, et
       repr&eacute;sent&eacute; comme une cha&icirc;ne.
       </member>
       <member>
       <literal>x</literal> - l'argument est trait&eacute; comme un entier,
       et repr&eacute;sent&eacute; comme un nombre hexad&eacute;cimal (en minuscules).
       </member>
       <member>
       <literal>X</literal> - l'argument est trait&eacute; comme un entier,
       et repr&eacute;sent&eacute; comme un nombre hexad&eacute;cimal (en majuscules).
       </member>
       </simplelist>
      </para>
     </listitem>
    </orderedlist>
   </para>
   <para>
    A partir de PHP 4.0.6, le param&egrave;tre <parameter>format</parameter>
    supportera aussi la num&eacute;rotation des arguments, et leur &eacute;change.
    Par exemple :
    <example>
     <title>Echange d'arguments : cas habituel</title>
     <programlisting role="php">
&lt;?php
$format = "Il y a %d singes dans le %s";
printf($format,$num,$location);
?&gt;
     </programlisting>
    </example>
    Cela pourra afficher "Il y a 5 singes dans le baobab". Mais imaginons
    un instant que nous cr&eacute;ons cette cha&icirc;ne &agrave; partir
    d'un fichier s&eacute;par&eacute;, car nous voulons internationaliser
    le message. On voudra notamment &eacute;crire librement :
    <example>
     <title>Echange d'arguments : cas probl&eacute;matique</title>
     <programlisting role="php">
&lt;?php
$format = "Le %s contient %d singes";
printf($format,$num,$location);
?&gt;
     </programlisting>
    </example>
    Maintenant, on a un probl&egrave;me. L'ordre d'utilisation des variables
    dans la cha&icirc;ne de formatage n'est pas celui d'appel de la
    fonction <function>sprintf</function>. L'id&eacute;al serait de pouvoir
    garder l'ordre des arguments, quel que soit l'ordre des variables
    fournies. Il faudrait donc indiquer dans la cha&icirc;ne de formatage
    dans quel ordre utiliser les valeurs. On pourrait &eacute;crire ceci
    &agrave; la place:
    <example>
     <title>Echange d'arguments : solution</title>
     <programlisting role="php">
&lt;?php
$format = "Le %2&#92;$s contient %1&#92;$d singes";
printf($format,$num,$location);
?&gt;
     </programlisting>
    </example>
    Et vous pouvez d&eacute;sormais r&eacute;p&eacute;ter les variables sans ajouter
    de nouvel argument. Par exemple :
    <example>
     <title>Echange d'arguments : r&eacute;p&eacute;tition</title>
     <programlisting role="php">
&lt;?php
$format = "Le %2&#92;$s contient %1&#92;$d singes.  C'est un beau %2&#92;$s, avec %1&#92;$d signes dessus.";
printf($format,$num,$location);
?&gt;
     </programlisting>
    </example>
   </para>
   <simpara>
    Voir aussi
    <function>printf</function>,
    <function>sscanf</function>,
    <function>fscanf</function> et
    <function>number_format</function>.
   </simpara>
   <para>
    <example>
     <title>
      Exemple avec <function>sprintf</function>: compl&eacute;t&eacute;
      avec des z&eacute;ros
     </title>
     <programlisting role="php">
&lt;?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?&gt;
     </programlisting>
    </example>
    <example>
     <title>Exemple avec <function>sprintf</function>: format mon&eacute;taire</title>
     <programlisting role="php">
&lt;?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money affichera "123.1";
$formatted = sprintf("%01.2f", $money);
// echo $formatted affichera "123.10"
?&gt;
     </programlisting>
    </example>
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
