<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.17 $ -->
<!-- EN-Revision: 1.7 Maintainer: didou Status: ready -->
  <refentry id="function.addcslashes">
   <refnamediv>
    <refname>addcslashes</refname>
    <refpurpose>Ajoute des slash dans une chaîne, à la mode du langage C</refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>string</type><methodname>addcslashes</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam><type>string</type><parameter>charlist</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>addcslashes</function> retourne la chaîne
     <parameter>str</parameter>, après avoir ajouté des 
     anti-slash devant tous les caractères qui sont présents
     dans la liste <parameter>charlist</parameter>. Cette
     fonction échappe aussi les caractères 
     <literal>\n</literal>, <literal>\r</literal> etc. à la
     mode du langage C. Tous les caractères ayant
     un code ASCII inférieur à 26, et supérieur à 126 sont
     remplacés par leur représentation octale.
    </para>
    <para>
     Attention à l'utilisation des caractères tels que 0, a, b, f, n, r, 
     t et v. Ils seront convertis en \0, \a, \b, \f, \n, \r, \t
     et \v. En &php;, \0 (NULL), \r (retour chariot), \n (nouvelle ligne) et
     \t (tabulation horizontale) sont prédéfinis comme séquences
     d'échappement, tandis qu'en C, ce sont toutes les séquences cités
     ci-dessus qui sont des séquences d'échappement.
    </para>
    <para>
     <parameter>charlist</parameter> peut s'écrire "\0..\37", ce qui
     identifie tous les caractères ASCII dont le code est entre
     0 et 37.
     <example>
      <title>Exemple avec <function>addcslashes</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$escaped = addcslashes($not_escaped, "\0..\37!@\177..\377");
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Lorsque vous définissez une séquence de caractères
     dans le paramètre <parameter>charlist</parameter>, assurez-vous
     que vous connaissez bien tous les caractères qui viennent entre
     vos limites d'intervalles.
     <example>
      <title>Exemple avec <function>addcslashes</function> et <parameter>charlist</parameter></title>
      <programlisting role="php">
<![CDATA[
<?php
  echo addcslashes('foo[ ]', 'A..z');
// affiche :  \f\o\o\[ \]
// Toutes les majuscules et minuscules seront échappées
// ... mais aussi les caractères [\]^_` et les tabulations
// retours chariots, nouvelles lignes....
?>
]]>
      </programlisting>
     </example>
     De plus, si le premier caractère d'un intervalle a un code ASCII
     plus grand que le second, l'intervalle ne sera pas créé.
     Seules les bornes de l'intervalle et le caractère point (.) seront
     échappées. Utilisez la fonction <function>ord</function> pour
     trouver la valeur ASCII d'un caractère.
     <example>
      <title>
       Exemple avec <function>addcslashes</function> et <parameter>charlist</parameter> (2)
      </title>
      <programlisting role="php">
<![CDATA[
<?php
echo addcslashes("zoo['.']", 'z..A'); // \zoo['\.']
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi
     <function>stripcslashes</function>,
     <function>stripslashes</function>,
     <function>htmlspecialchars</function> et
     <function>quotemeta</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
