<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.echo">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>Affiche une cha&icirc;ne de caract&egrave;res</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <methodname>echo</methodname>
      <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>argn...</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Outputs all parameters.
    </simpara>
    <para>
     <function><function>echo</function><\/function> n'est pas vraiment une fonction (c'est
     techniquement une structure du langage). Cela fait que vous n'&ecirc;tes
     pas oblig&eacute;s d'utiliser des parenth&egrave;ses. En fait, si vous voulez
     passer plusieurs param&egrave;tres &agrave; afficher, vous ne devez pas utiliser
     de parenth&egrave;ses. Il n'est pas possible d'utiliser <function><function>echo</function><\/function>
     dans un contexte de <link linkend="functions.variable-functions">fonction variable</link>.
     Dans ce cas, il faut utiliser <function><function>print</function><\/function> &agrave; la place.
     <example>
      <title>Exemples <function><function>echo</function><\/function></title>
      <programlisting role="php">
<![CDATA[
<?php
  echo "Bonjour le monde";

echo "Cet echo() se
r&eacute;partit sur plusieurs lignes. Les nouvelles lignes
seront aussi affich&eacute;es";

echo "Cet echo() se\nr&eacute;partit sur plusieurs lignes. Les nouvelles lignes\nseront aussi affich&eacute;es.";

echo "L'&eacute;chappement de caract&egrave;res se fait : \"comme ceci\".";

//Vous pouvez utiliser des variables avec echo
$foo = "foobar";
$bar = "barbaz";
echo "foo vaut &quot;$foo&quot;";
// foo vaut "foobar"

// Les guillemets simples &eacute;vitent le remplacement des variables
echo 'foo is $foo'; // foo vaut "$foo"

// Si vous n'utilisez pas d'autres caract&egrave;res, 
// vous pouvez afficher plusieurs variables
// en les s&eacute;parant par des virgules
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

echo <<<END
Cette syntaxe s'intitule le "here document" et 
permet d'afficher plusieurs lignes avec de 
l'interpolation de variables. Notez que la fin de
la syntaxe doit appara&icirc;tre sur une nouvelle ligne,
avec uniquement un point-virgule, et pas d'espace
suppl&eacute;mentaire!
END;

// comme echo() n'est pas une fonction, le code suivant est invalide
($some_var) ? echo('Oui'): echo('Non');

// Cependant, les lignes suivantes sont valides :
($some_var) ? print('Oui'): print('Non'); // print est une fonction
echo$some_var ? 'Oui': 'Non';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function><function>echo</function><\/function> dispose aussi d'une version courte,
     où vous pouvez faire suivre la balise PHP ouvrante d'un
     signe &eacute;gal (<literal>=</literal>).
     <informalexample>
      <programlisting role="php">
<![CDATA[
I have <?=$foo?> foo.
]]>
      </programlisting>
     </informalexample>
    </para>
    <note>
     <para>
      Cette syntaxe courte n'est possible que si la configuration
      de <link linkend="ini.short-open-tag">short_open_tag</link> a
      &eacute;t&eacute; activ&eacute;e.
     </para>
    </note>
    <simpara>
     Voir aussi
     <function><function>print</function><\/function>,
     <function><function>printf</function><\/function> and
     <function><function>flush</function><\/function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
