<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.13 $ -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.echo">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>Affiche une chaîne de caractères</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>void</type><methodname>echo</methodname>
      <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>argn...</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Affiche tous les paramètres.
    </simpara>
    <para>
     <function>echo</function> n'est pas vraiment une fonction (c'est
     techniquement une structure du langage). Cela fait que vous n'êtes
     pas obligés d'utiliser des parenthèses. En fait, si vous voulez
     passer plusieurs paramètres à afficher, vous ne devez pas utiliser
     de parenthèses. Il n'est pas possible d'utiliser <function>echo</function>
     dans un contexte de <link linkend="functions.variable-functions">fonction variable</link>.
     Dans ce cas, il faut utiliser <function>print</function> à la place.
     <example>
      <title>Exemples avec <function>echo</function></title>
      <programlisting role="php">
<![CDATA[
<?php
  echo "Bonjour le monde";

echo "Cet echo() se
répartit sur plusieurs lignes. Il affiche aussi les
nouvelles lignes";

echo "Cet echo() se\nrépartit sur plusieurs lignes. Il affiche aussi les\nnouvelles lignes";

echo "L'échappement de caractères se fait : \"comme ceci\".";

// Vous pouvez utiliser des variables avec echo()
$foo = "foobar";
$bar = "barbaz";

echo "foo vaut \"$foo\""; // foo vaut "foobar"

// Vous pouvez aussi utiliser des tableaux
$bar = array("clef" => "foo");

echo "c'est {$bar['clef']} !"; // c'est foo ! 

// Les guillemets simples annulent le remplacement des variables
echo 'foo vaut $foo'; // foo vaut $foo

// Si vous n'utilisez pas d'autres caractères, 
// vous pouvez afficher plusieurs variables
// en les séparant par des virgules
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

echo <<<END
Cette syntaxe s'intitule le "here document" et 
permet d'afficher plusieurs lignes avec de 
l'interpolation de variables. Notez que la fin de
la syntaxe doit apparaître sur une nouvelle ligne,
avec uniquement un point-virgule, et pas d'espace
de plus !
END;

// comme echo() n'est pas une fonction, le code suivant n'est pas valide
($some_var) ? echo('Oui'): echo('Non');

// Cependant, les lignes suivantes sont valides :
($some_var) ? print('Oui'): print('Non'); // print est une fonction
echo $some_var ? 'Oui': 'Non';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>echo</function> dispose aussi d'une version courte,
     où vous pouvez faire suivre la balise &php; ouvrante d'un
     signe égal (<literal>=</literal>).
     <example>
      <title>Afficher sans l'aide de <function>echo</function></title>
      <programlisting role="php">
<![CDATA[
J'ai <?=$foo?> fous.
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Cette syntaxe courte n'est possible que si la configuration
      de <link linkend="ini.short-open-tag">short_open_tag</link> a
      été activée.
     </para>
    </note>
    <simpara>
      Pour une brève discussion à propos des différences
      entre <function>print</function> et <function>echo</function>,
      consultez cet article des FAQTs Knowledge Base : <ulink
      url="&url.echo-print;">&url.echo-print;</ulink>
    </simpara>
    &note.language-construct;
    <simpara>
     Voir aussi
     <function>print</function>,
     <function>printf</function> et
     <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
