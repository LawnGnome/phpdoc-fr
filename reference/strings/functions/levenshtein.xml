<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283839 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.levenshtein" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>levenshtein</refname>
  <refpurpose>Calcule la distance Levenshtein entre deux chaînes</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>str1</parameter></methodparam>
   <methodparam><type>string</type><parameter>str2</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>str1</parameter></methodparam>
   <methodparam><type>string</type><parameter>str2</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_ins</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_rep</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_del</parameter></methodparam>
  </methodsynopsis>
  <para>
   La distance Levenshtein est définie comme le nombre
   minimal de caractères qu'il faut remplacer, insérer ou modifier
   pour transformer la chaîne <parameter>str1</parameter> en
   <parameter>str2</parameter>. La complexité de l'algorithme
   est en <literal>O(m*n)</literal>,
   où <literal>n</literal> et <literal>m</literal> sont les tailles
   respectives de <parameter>str1</parameter> et
   <parameter>str2</parameter> : c'est plutôt bien, en comparaison
   de <function>similar_text</function>, qui est en
   <literal>O(max(n,m)**3)</literal>, mais cela reste très coûteux.
  </para>
  <para>
   Dans sa forme la plus simple, <function>levenshtein</function>
   va prendre uniquement deux chaînes de caractères
   comme paramètres, et calculer simplement le nombre d'insertions,
   de remplacements et d'effacements nécessaires pour transformer
   <parameter>str1</parameter> en <parameter>str2</parameter>.
  </para>
  <para>
   La deuxième variante de la fonction prend trois paramètres
   supplémentaires qui représentent les coûts d'insertions,
   de remplacements et d'effacements. C'est une version plus
   générale de la première fonction, mais qui est un peu moins
   efficace.
  </para>
 </refsect1>

<refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str1</parameter></term>
     <listitem>
      <para>
       Une des chaînes à évaluer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>str2</parameter></term>
     <listitem>
      <para>
       Une des chaînes à évaluer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_ins</parameter></term>
     <listitem>
      <para>
       Définit le coût de l'insertion.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_rep</parameter></term>
     <listitem>
      <para>
       Définit le coût du remplacement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_del</parameter></term>
     <listitem>
      <para>
       Définit le coût de l'effacement.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la distance Levenshtein entre deux chaînes de caractères.
   Elle retournera -1 si l'un des deux arguments contient plus de
   255 caractères.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>levenshtein</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// mot mal orthographié
$input = 'carrrot';

// tableau de mots à vérifier
$words  = array('apple','pineapple','banana','orange',
                'radish','carrot','pea','bean','potato');

// aucune distance de trouvée pour le moment
$shortest = -1;

// boucle sur les des mots pour trouver le plus près
foreach ($words as $word) {

    // calcule la distance avec le mot mis en entrée,
    // et le mot courant
    $lev = levenshtein($input, $word);

    // cherche une correspondance exacte
    if ($lev == 0) {

        // le mot le plus près est celui-ci (correspondance exacte)
        $closest = $word;
        $shortest = 0;

        // on sort de la boucle ; nous avons trouvé une correspondance exacte
        break;
    }

    // Si la distance est plus petite que la prochaine distance trouvée
    // OU, si le prochain mot le plus près n'a pas encore été trouvé
    if ($lev <= $shortest || $shortest < 0) {
        // définition du mot le plus près ainsi que la distance
        $closest  = $word;
        $shortest = $lev;
    }
}

echo "Mot entré : $input\n";
if ($shortest == 0) {
    echo "Correspondance exacte trouvée : $closest\n";
} else {
    echo "Vous voulez dire : $closest ?\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Mot entré : carrrot
Vous voulez dire : carrot ?
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>soundex</function></member>
    <member><function>similar_text</function></member>
    <member><function>metaphone</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
