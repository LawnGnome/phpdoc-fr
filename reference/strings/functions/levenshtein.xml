<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.2 Maintainer: yannick Status: ready -->
  <refentry id="function.levenshtein">
   <refnamediv>
    <refname>levenshtein</refname> 
    <refpurpose>
     Calcule la distance Levenshtein entre deux chaînes
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>levenshtein</methodname>
      <methodparam><type>string</type><parameter>str1</parameter></methodparam>
      <methodparam><type>string</type><parameter>str2</parameter></methodparam>
     </methodsynopsis>
     <methodsynopsis>
      <type>int</type><methodname>levenshtein</methodname>
      <methodparam><type>string</type><parameter>str1</parameter></methodparam>
      <methodparam><type>string</type><parameter>str2</parameter></methodparam>
      <methodparam><type>int</type><parameter>cost_ins</parameter></methodparam>
      <methodparam><type>int</type><parameter>cost_rep</parameter></methodparam>
      <methodparam><type>int</type><parameter>cost_del</parameter></methodparam>
     </methodsynopsis>
     <methodsynopsis>
      <type>int</type><methodname>levenshtein</methodname>
      <methodparam><type>string</type><parameter>str1</parameter></methodparam>
      <methodparam><type>string</type><parameter>str2</parameter></methodparam>
      <methodparam><type>function</type><parameter>cost</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>levenshtein</function> calcule la distance Levenshtein
     entre deux chaînes de caractères. Elle retournera -1 si l'un
     des deux arguments contient plus de 255 caractères 
     (cela devrait être plus que suffisant pour faire des comparaisons
     dans un dictionnaire ou annuaire, et personne de sérieux ne fera
     de comparaison génétique en &php;).
    </para>
    <para>
     La distance Levenshtein est définie comme le nombre
     minimal de caractères qu'il faut remplacer, insérer ou modifier
     pour transformer la chaîne <parameter>str1</parameter> en
     <parameter>str2</parameter>. La complexité de l'algorithme
     est en <literal>O(m*n)</literal>,
     où <literal>n</literal> et <literal>m</literal> sont les tailles
     respectives de <parameter>str1</parameter> et
     <parameter>str2</parameter> : c'est plutôt bien, en comparaison
     de <function>similar_text</function>, qui est en
     <literal>O(max(n,m)**3)</literal>, mais cela reste très coûteux.
    </para>
    <para>
     Dans sa forme la plus simple, <function>levenshtein</function>
     va prendre uniquement deux chaînes de caractères
     comme paramètres, et calculer simplement le nombre d'insertions,
     de remplacements et d'effacements nécessaires pour tranformer
     <parameter>str1</parameter> en <parameter>str2</parameter>.
    </para>
    <para> 
     La deuxième variante de la fonction prend trois paramètres 
     supplémentaires qui représentent les coûts d'insertions,
     de remplacements et d'effacements. C'est une version plus
     générale de la première fonction, mais qui est un peu moins
     efficace.
    </para>
    <para> 
     La troisième variante (qui n'est pas implémentée actuellement),
     est la version la plus générale, mais la plus lente. Elle appelera
     une fonction utilisateur qui déterminera le coût de chaque opération.
    </para>
    <para>
     La fonction utilisateur qui sera appelée reçoit les arguments suivants :
     <itemizedlist>
      <listitem>
       <simpara>
        Opération à réaliser : 'I', 'R' ou 'D'
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Caractère dans <parameter>str1</parameter>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Caractère dans <parameter>str2</parameter>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Position dans <parameter>str1</parameter>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Position dans <parameter>str2</parameter>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Caractères restants dans <parameter>str1</parameter>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Caractères restants dans <parameter>str2</parameter>
       </simpara>
      </listitem>
     </itemizedlist>
     Cette fonction doit retourner un entier positif, qui représente
     le coût de cette opération particulière. Il peut ne prendre en
     compte que certains des paramètres fournis.
    </para>
    <para> 
     Grâce à cette fonction utilisateur, il est possible de
     prendre en compte la pertinence ou la valeur des caractères 
     eux-mêmes, ou encore le contexte, pour définir le coûts
     d'une insertion, d'un effacement ou d'un remplacement. Cela se fait en perdant
     toutes les optimisations faîtes en terme d'exploitation du CPU
     et des buffers.
    </para>
    <para>
     Voir aussi
     <function>soundex</function>,
     <function>similar_text</function> et 
     <function>metaphone</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
