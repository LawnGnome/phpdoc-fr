<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.2 Maintainer: yannick Status: ready -->
  <refentry id="function.fprintf">
   <refnamediv>
    <refname>fprintf</refname>
    <refpurpose>Ecrit une chaîne formatée dans un flux</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>fprintf</methodname>
      <methodparam><type>resource</type><parameter>handle</parameter></methodparam>
      <methodparam><type>string</type><parameter>format</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>fprintf</function> écrit la chaîne produite avec
     le format <parameter>format</parameter> dans le flux représenté
     par <parameter>handle</parameter>.
    </simpara>
    <simpara>
     Le paramètre <parameter>format</parameter> est composé de
     zéro, une ou plusieurs directives : des caractères ordinaires
     (excluant <literal>%</literal>) qui sont copiés directement
     dans le résultat sans modification, et des 
     <emphasis>spécifications de conversion</emphasis>, qui sont exploitées
     avec un des paramètres suivants. Cette technique s'applique
     à <function>fprintf</function>, <function>sprintf</function>
     et <function>printf</function>.
    </simpara>
    <para>
     Chaque spécification de conversion est constituée d'un signe pourcentage,
     (<literal>%</literal>), suivi par un ou plusieurs éléments, dans cet
     ordre : 
     <orderedlist>
      <listitem>
       <simpara>
        Un <emphasis>remplisseur</emphasis> optionnel qui indique
        quel caractère sera utilisé pour compléter le résultat
        jusqu'à la longueur requise. Ce peut être le caractère d'espace,
        ou le caractère &zero;. Par défaut, le remplissage
        se fait avec des espaces. Un autre caractère de remplissage peut
        être spécifié en le préfixant avec un guillemet simple 
        (<literal>'</literal>) : voir les exemples ci-dessous.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Un <emphasis>spécificateur d'alignement</emphasis> qui indique
        si le résultat doit être aligné à gauche ou à droite. Par
        défaut, le résultat est aligné à gauche. Le caractère
        <literal>-</literal> fera que le résultat est aligné à droite.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Un nombre optionnel, <emphasis>spécificateur de taille</emphasis>
        indique le nombre minimum de caractères que cette conversion doit
        fournir en résultat.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Un <emphasis>spécificateur de précision</emphasis> qui indique
        le nombre de décimales qui doivent être affichées pour les nombres
        à virgule flottante. Cette option n'a pas d'effet pour les autres
        types que <type>float</type>. Une autre fonction pratique pour
        formatter les nombres à virgule flottante est <function>number_format</function>.
       </simpara>
      </listitem>
      <listitem>
       <para>
        Un <emphasis>spécificateur de type</emphasis> qui indique le type
        avec lequel l'argument sera traité. Plusieurs types possibles :
        <simplelist>
         <member>
          <literal>%</literal> - un caractère de pourcentage litéral.
          Aucun argument n'est nécessaire.
         </member>
         <member>
          <literal>b</literal> - l'argument est traité comme un entier,
          et présenté comme un nombre binaire.
         </member>
         <member>
          <literal>c</literal> - l'argument est traité comme un entier,
          et présenté comme le caractère de code ASCII correspondant.
         </member>
         <member>
          <literal>d</literal> - l'argument est traité comme un entier,
          et présenté comme un nombre décimal signé.
         </member>
         <member>
          <literal>u</literal> - l'argument est traité comme un entier,
          et présenté comme un nombre décimal non signé.
         </member>
         <member>
          <literal>f</literal> - l'argument est traité comme un nombre à 
          virgule flottante (type &float;), et présenté comme un nombre à 
          virgule flottante.
         </member>
         <member>
          <literal>o</literal> - l'argument est traité comme un entier,
          et présenté comme un nombre octal.
         </member>
         <member>
          <literal>s</literal> - l'argument est traité et 
          présenté comme une chaîne de caractères.
         </member>
         <member>
          <literal>x</literal> - l'argument est traité comme un entier,
          et présenté comme un nombre hexadécimal (les lettres en minuscules).
         </member>
         <member>
          <literal>X</literal> - l'argument est traité comme un entier,
          et présenté comme un nombre hexadécimal (les lettres en majuscules).
         </member>
        </simplelist>
       </para>
      </listitem>
     </orderedlist>
    </para>
    <simpara>
     Voir aussi 
     <function>printf</function>,
     <function>sprintf</function>,
     <function>sscanf</function>, 
     <function>fscanf</function>, 
     <function>vsprintf</function> et
     <function>number_format</function>.
    </simpara>
   </refsect1>
   <refsect1>
    <title>Exemples</title>
    <para>
     <example>
      <title>Entiers avec zéros initiaux <function>sprintf</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Format monétaire avec <function>sprintf</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2; // $money contient "123.1";
$formatted = sprintf("%01.2f", $money); // $formatted contient "123.10"
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
