<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 333677 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.json-decode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_decode</refname>
  <refpurpose>Décode une chaîne JSON</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>json_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>assoc</parameter><initializer>false</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Récupère une chaîne encodée JSON et la convertit en une variable PHP.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>json</parameter></term>
     <listitem>
      <para>
       La chaîne <parameter>json</parameter> à décoder.
      </para>
      <para>
       Cette fonction ne traite qu'avec des chaînes encodées avec UTF-8.
      </para>
      &json.implementation.superset;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>assoc</parameter></term>
     <listitem>
      <para>
       Lorsque ce paramètre vaut &true;, l'objet retourné sera converti en un
       tableau associatif.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>depth</parameter></term>
     <listitem>
      <para>
       Définit la profondeur de récursion.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Un masque d'options JSON decode. Actuellement,
       seul <constant>JSON_BIGINT_AS_STRING</constant>
       est supporté (par défaut, les gros entiers sont convertis
       en nombres à virgule flottante)
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la valeur encodée dans le paramètre <parameter>json</parameter>
   dans le type PHP approprié. Les valeurs <literal>true</literal>,
   <literal>false</literal> et <literal>null</literal>
   sont retournées respectivement comme &true;, &false; et &null;.
   &null; est retourné si le paramètre <parameter>json</parameter> n'a pu
   être décodé ou si les données encodées sont plus profondes que la limite
   de récursion fournie.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';

var_dump(json_decode($json));
var_dump(json_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

array(5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}
]]>
    </screen>
   </example>
   <example>
    <title>Accès à des propriétés d'objet invalides</title>
    <simpara>
     Accéder à des éléments d'un objet qui contiennent des caractères
     non permis par la convention de nommage de PHP (i.e. le trait d'union)
     peut être effectué en encapsulant le nom de l'élément avec
     des crochets et des apostrophes.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

$json = '{"foo-bar": 12345}';

$obj = json_decode($json);
print $obj->{'foo-bar'}; // 12345

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Erreurs habituelles lors de l'utilisation de la fonction <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// Les chaînes suivantes sont valides en JavaScript mais pas en JSON

// Le nom et la valeur doivent être entourés de guillemets doubles.
// Les guillemets simples ne sont pas valides.
$bad_json = "{ 'bar': 'baz' }";
json_decode($bad_json); // null

// Le nom doit être entouré de guillemets doubles.
$bad_json = '{ bar: "baz" }';
json_decode($bad_json); // null

// La virgule de fin n'est pas autorisée.
$bad_json = '{ bar: "baz", }';
json_decode($bad_json); // null

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Erreurs avec le paramètre <parameter>depth</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Encodage dles données.
$json = json_encode(
    array(
        1 => array(
            'English' => array(
                'One',
                'January'
            ),
            'French' => array(
                'Une',
                'Janvier'
            )
        )
    )
);

// Définition des erreurs
$constants = get_defined_constants(true);
$json_errors = array();
foreach ($constants["json"] as $name => $value) {
 if (!strncmp($name, "JSON_ERROR_", 11)) {
  $json_errors[$value] = $name;
 }
}

// Affichage des erreurs pour les différentes profondeurs.
foreach (range(4, 3, -1) as $depth) {
    var_dump(json_decode($json, true, $depth));
    echo 'Dernière erreur : ', $json_errors[json_last_error()], PHP_EOL, PHP_EOL;
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Dernière erreur : JSON_ERROR_NONE

NULL
Dernière erreur : JSON_ERROR_DEPTH
]]>
    </screen>
   </example>
   <example>
    <title>Exemple avec <function>json_decode</function> et de gros entiers</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"number": 12345678901234567890}';

var_dump(json_decode($json));
var_dump(json_decode($json, false, 512, JSON_BIGINT_AS_STRING));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["number"]=>
  float(1.2345678901235E+19)
}
object(stdClass)#1 (1) {
  ["number"]=>
  string(20) "12345678901234567890"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La spécification JSON ne fait pas partie de Javascript
    mais d'un sous-projet de Javascript.
   </para>
  </note>
  <note>
   <para>
    Si une erreur survient lors du décodage, la fonction
    <function>json_last_error</function>
    (ou <function>json_last_error_msg</function> avec PHP5.5+)
    pourra être utilisée pour
    déterminer la nature exacte de l'erreur.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.6.0</entry>
       <entry>
        Les variantes invalides qui ne sont pas en minuscule de
        <literal>true</literal>, <literal>false</literal> et
        <literal>null</literal> ne sont plus acceptées comme entrées
        valides, et vont générer des alertes.
       </entry>
      </row>
      <row>
       <entry>5.4.0</entry>
       <entry>
        Le paramètre <parameter>options</parameter> a été ajouté.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>Ajout du paramètre optionnel <parameter>depth</parameter>.
        La profondeur de récursion par défaut a augmenté de 128 à 512</entry>
      </row>
      <row>
       <entry>5.2.3</entry>
       <entry>La limite a été élevée de 20 à 128</entry>
      </row>
      <row>
       <entry>5.2.1</entry>
       <entry>
        Ajout du support du décodage JSON des types basiques.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_last_error</function></member>
    <member><function>json_last_error_msg</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->