<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331633 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<appendix xml:id="json.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  Les constantes suivantes indiquent le type d'erreur retournée par
  la fonction <function>json_last_error</function>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-error-none">
   <term>
    <constant>JSON_ERROR_NONE</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Aucune erreur n'est survenue.
     Disponible depuis PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-depth">
   <term>
    <constant>JSON_ERROR_DEPTH</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     La profondeur maximale de la pile a été atteinte.
     Disponible depuis PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-state-mismatch">
   <term>
    <constant>JSON_ERROR_STATE_MISMATCH</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Survient avec un underflow ou avec une inadéquation des modes.
     Disponible depuis PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-ctrl-char">
   <term>
    <constant>JSON_ERROR_CTRL_CHAR</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Erreur lors du contrôle des caractères ; probablement un encodage incorrect.
     Disponible depuis PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-syntax">
   <term>
    <constant>JSON_ERROR_SYNTAX</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Erreur de syntaxe.
     Disponible depuis PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf8">
   <term>
    <constant>JSON_ERROR_UTF8</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Caractères UTF-8 mal formés, probablement mal encodés. Cette constante
     est disponible depuis PHP 5.3.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-recursion">
   <term>
    <constant>JSON_ERROR_RECURSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <para>
     L'objet ou le tableau passé à la fonction <function>json_encode</function>
     inclut les références récursives et ne peuvent être encodées.
     Si l'option <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> a été fournie,
     &null; sera encodé à la place de la référence récursive.
    </para>
    <para>
     Cette constante est disponible depuis PHP 5.5.0.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-inf-or-nan">
   <term>
    <constant>JSON_ERROR_INF_OR_NAN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <para>
     La valeur passée à la fonction <function>json_encode</function>
     inclut soit <link linkend="language.types.float.nan"><constant>NAN</constant></link>,
     soit <link linkend="function.is-infinite"><constant>INF</constant></link>.
     Si l'option <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> a été fournie,
     <literal>0</literal> sera encodé à la place de la référence récursive.
    </para>
    <para>
     Cette constante est disponible depuis PHP 5.5.0.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-unsupported-type">
   <term>
    <constant>JSON_ERROR_UNSUPPORTED_TYPE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <para>
     Une valeur d'un type non supporté a été fournie à la fonction
     <function>json_encode</function>, comme par exemple une <type>resource</type>.
     Si l'option <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> a été fournie,
     &null; sera encodé à la place de la valeur non supportée.
    </para>
    <para>
     Cette constante est disponible depuis PHP 5.5.0.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  Les constantes suivantes peuvent être combinées pour former
  des options de <function>json_encode</function>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-hex-tag">
   <term>
    <constant>JSON_HEX_TAG</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Tous les caractères &lt; et &gt; sont convertis en séquences
     \u003C et \u003E.
     Disponible depuis PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-amp">
   <term>
    <constant>JSON_HEX_AMP</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Tous les caractères &amp; sont convertis en \u0026.
     Disponible depuis PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-apos">
   <term>
    <constant>JSON_HEX_APOS</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Tous les guillemets ' sont convertis en \u0027.
     Disponible depuis PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-quot">
   <term>
    <constant>JSON_HEX_QUOT</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Tous les guillemets doubles " sont convertis en \u0022.
     Disponible depuis PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-force-object">
   <term>
    <constant>JSON_FORCE_OBJECT</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Produit un objet plutôt qu'un tableau, lorsqu'un tableau
     non-associatif est utilisé. C'est particulièrement utile lorsque
     le destinataire du résultat attend un objet, et que le tableau
     est vide.
     Disponible depuis PHP 5.3.0.
   </simpara>
  </listitem>
 </varlistentry>
  <varlistentry xml:id="constant.json-numeric-check">
   <term>
    <constant>JSON_NUMERIC_CHECK</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Encode les chaînes numériques en tant que nombres.
     Disponible depuis PHP 5.3.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-bigint-as-string">
   <term>
    <constant>JSON_BIGINT_AS_STRING</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Encode les gros entiers sous forme d'une chaîne de caractères.
     Disponible depuis PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-pretty-print">
   <term>
    <constant>JSON_PRETTY_PRINT</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Utilise des espaces dans les données retournées pour
     les formater. Disponible depuis PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-slashes">
   <term>
    <constant>JSON_UNESCAPED_SLASHES</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Ne pas échapper les caractères <literal>/</literal>.
     Disponible depuis PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-unicode">
   <term>
    <constant>JSON_UNESCAPED_UNICODE</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Encode les caractères multi-octets Unicode littéralement (le comportement
     par défaut est de les échapper, i.e. \uXXXX).
     Disponible depuis PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

