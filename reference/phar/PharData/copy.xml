<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.1 Maintainer: gui Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phardata.copy" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>PharData::copy</refname>
  <refpurpose>Copie un fichier un fichier interne à l'archive phar vers un autre fichier au sein de la même archive</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>PharData::copy</methodname>
   <methodparam><type>string</type><parameter>oldfile</parameter></methodparam>
   <methodparam><type>string</type><parameter>newfile</parameter></methodparam>
  </methodsynopsis>

  <para>
   Copie un fichier interne à l'archive tar/zip vers un autre fichier au sein de la même archive.
   C'est une alternative orientée objet à l'utilisation de <function>copy</function> avec
   le gestionnaire de flux phar.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>oldfile</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>newfile</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   retourne &true; en cas de succès, mais il est plus sûr d'encadrer l'appel à la méthode dans un bloc
   try/catch est de considérer son succès si aucune exception n'est levée.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   lève une exception <classname>UnexpectedValueException</classname> si le fichier source n'existe
   pas, si le fichier de destination existe déjà, si le support en écriture est désactivé, si l'ouverture
   d'un des deux fichiers échoue ou si la lecture du fichier source échoue; ou lève une exception
   <classname>PharException</classname> si l'écriture des changements de l'archive phar échoue.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un exemple avec <function>PharData::copy</function></title>
    <para>
	 Cet exemple montre l'utilisation de <function>PharData::copy</function> et de son équivalent
	 en terme de gestionnaire de flux. La différence principale entre les deux façons de faire
	 concerne la gestion des erreurs. Toutes les méthodes PharData soulèvent des exceptions, alors
	 que le gestionnaire de flux utilise <function>trigger_error</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $phar = new PharData('monphar.tar');
    $phar['a'] = 'salut';
    $phar->copy('a', 'b');
    echo $phar['b']; // affiche "salut"
} catch (Exception $e) {
    // on traite les erreurs
}

// l'équivalent en terme de flux de l'exemple ci-dessus.
// des E_WARNINGS sont lancés en cas d'erreur à la place d'exceptions.
copy('phar://monphar.tar/a', 'phar//monphar.tar/c');
echo file_get_contents('phar://monphar.tar/c'); // affiche "salut"
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
