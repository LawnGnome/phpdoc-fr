<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.1 Maintainer: gui Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="phardata.buildfromdirectory" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>PharData::buildFromDirectory</refname>
  <refpurpose>Construit une archive tar/zip à partir des fichiers d'un répertoire</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>Phar::buildFromDirectory</methodname>
   <methodparam><type>string</type><parameter>base_dir</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>regex</parameter></methodparam>
  </methodsynopsis>

  <para>
   Remplit une archive tar/zip à partir du contenu d'un répertoire. Le second paramètre optionnel
   est une expression rationnelle (pcre) utilisée pour exclure des fichiers.
   N'importe quel fichier dont le nom satisfait sera inclus, tous les autres seront exclus. Pour un
   contrôle plus fin, utilisez <function>PharData::buildFromIterator</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>base_dir</parameter></term>
     <listitem>
      <para>
       Le chemin relatif ou absolu vers le répertoire contenant tous les fichiers à ajouter
       à l'archive.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>regex</parameter></term>
     <listitem>
      <para>
       Une expression rationnelle optionnelle qui est utilisée pour filtrer la liste des
       fichiers. Seuls les fichiers dont le nom satisfont l'expression seront inclus
       dans l'archive.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>Phar::buildFromDirectory</function> retourne un tableau associatif faisant correspondre
   un chemin de fichier interne vers un chemin complet sur le système de fichiers.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Cette méthode soulève une exception <classname>BadMethodCallException</classname> quand elle est incapable
   d'instantier les itérateurs interne de répertoire, ou une exception <classname>PharException</classname> 
   si des erreurs ont été rencontrée lors de l'enregistrement de l'archive phar.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Un exemple avec <function>PharData::buildFromDirectory</function></title>
   <para>

   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$phar = new PharData('projet.tar');
// ajoute tous les fichiers au projet
$phar->buildFromDirectory(dirname(__FILE__) . '/projet');

$phar2 = new PharData('projet2.zip');
// ajoute tous les fichiers au projet en n'incluant que les fichiers php
$phar->buildFromDirectory(dirname(__FILE__) . '/projet', '/\.php$/');
?>
]]>
    </programlisting>
   </para>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::buildFromDirectory</function></member>
    <member><function>PharData::buildFromIterator</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
