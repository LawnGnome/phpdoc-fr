<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.4 Maintainer: gui Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phar.buildfromiterator" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::buildFromIterator</refname>
  <refpurpose>Construit une archive phar à partir d'un itérateur</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>Phar::buildFromIterator</methodname>
   <methodparam><type>Iterator</type><parameter>iter</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>base_directory</parameter></methodparam>
  </methodsynopsis>
  &phar.write;
  <para>
   Remplit uen archive phar à partir d'un itérateur. Deux styles d'itérateur sont supportés,
   les itérateurs qui font correspondre le nom de fichier au sein du phar avec le nom d'un fichier sur le disque,
   et les itérateurs comme DirectoryIterator qui retournent des objets SplFileInfo. Pour
   les itérateurs qui retournent des objets SplFileInfo, le second paramètre est requis.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
   <example>
    <title>Un exemple avec <function>Phar::buildFromIterator</function> et SplFileInfo</title>
  <para>
   Pour la plupart des archives phar, l'archive reflétera l'arborescence d'un répertoire, et
   le second style est le plus utile. Par exemple, pour créer une archive phar contenant
   les fichiers de l'arborescence du répertoire  :
  </para>
  <para>
   <screen>
<![CDATA[
/chemin/vers/projet/
                 config/
                        dist.xml
                        debug.xml
                 lib/
                     file1.php
                     file2.php
                 src/
                     processthing.php
                 www/
                     index.php
                 cli/
                     index.php
]]>
   </screen>
  </para>
  <para>
   ce code peut être utilisé pour ajouter à l'archive &quot;projet.phar&quot; :
  </para>
  <para>
   <programlisting role="php">
<![CDATA[
<?php
// crée avec l'alias "projet.phar"
$phar = new Phar('projet.phar', 0, 'projet.phar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new RecursiveDirectoryIterator('/chemin/vers/projet')),
    '/chemin/vers/projet');
$phar->setStub($phar->createDefaultWebStub('cli/index.php', 'www/index.php'));
?>
]]>
   </programlisting>
  </para>
  <para>
   Le fichier projet.phar peut alors être utilisé immédiatement. <function>Phar::buildFromIterator</function> ne
   régle pas les paramètres tels que la compression ou les méta-données; ceci peut cependant être fait après 
   avoir créé l'archive phar.
  </para>
  <para>
   Il est intéressant de noter que <function>Phar::buildFromIterator</function> peut aussi être utilisé
   pour copier les éléments d'une archive phar existante, car l'objet Phar descend 
   de <classname>DirectoryIterator</classname> :
  </para>
  <para>
   <programlisting role="php">
<![CDATA[
<?php
// crée avec l'alias "projet.phar"
$phar = new Phar('projet.phar', 0, 'projet.phar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new Phar('/chemin/vers/unautrephar.phar')),
    'phar:///chemin/vers/unautrephar.phar/chemin/vers/projet');
$phar->setStub($phar->createDefaultWebStub('cli/index.php', 'www/index.php'));
?>
]]>
   </programlisting>
  </para>
  </example>
  <example>
   <title>Un exemple avec <function>Phar::buildFromIterator</function> et d'autres itérateurs</title>
  <para>
   La seconde forme d'itérateur peut être utilisée avec n'importe quel itérateur qui retourne
   une correspondance clé => valeur, tels que <classname>ArrayIterator</classname> :
  </para>
  <para>
   <programlisting role="php">
<![CDATA[
<?php
// crée avec l'alias "projet.phar"
$phar = new Phar('projet.phar', 0, 'projet.phar');
$phar->buildFromIterator(
    new ArrayIterator(
     array(
        'interne/fichier.php' => dirname(__FILE__) . '/unfichier.php',
        'unautre/fichier.jpg' => fopen('/chemin/vers/grosfichier.jpg', 'rb'),
     )));
$phar->setStub($phar->createDefaultWebStub('cli/index.php', 'www/index.php'));
?>
]]>
   </programlisting>
  </para>
  </example>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>iter</parameter></term>
     <listitem>
      <para>
       N'importe quel itérateur qui fait correspondre de façon associative un fichier phar à un emplacement
       ou qui retourne des objets SplFileInfo
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>base_directory</parameter></term>
     <listitem>
      <para>
       Pour les itérateurs qui retournent des objets SplFileInfo, la portion du nom de chaque fichier
       à enlever lors de l'ajout à l'archive
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>Phar::buildFromIterator</function> retourne un tableau associatif faisant
   correspondre le chemin interne du fichier à son chemin complet sur le système de
   fichiers.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Cette méthode lève une exception <classname>UnexpectedValueException</classname> quand
   l'itérateur retourne des valeurs fausses, telles qu'une clé entière à la place d'une,
   chaîne, une exception <classname>BadMethodCallException</classname> quand un itérateur
   basé sur SplFileInfo est passé sans paramètre <parameter>base_directory</parameter>,
   ou une exception <classname>PharException</classname> s'il y a eu des erreurs lors de la
   sauvegarde de l'archive phar.
  </para>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::buildFromDirectory</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
