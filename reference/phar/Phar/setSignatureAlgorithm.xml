<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.4 Maintainer: gui Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phar.setsignaturealgorithm" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::setSignatureAlgorithm</refname>
  <refpurpose>Fixe et applique l'algorithme de signature d'un phar.</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>Phar::setSignatureAlgorithm</methodname>
   <methodparam><type>int</type><parameter>sigtype</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>privatekey</parameter></methodparam>
  </methodsynopsis>
  &phar.write;

  <para>
   fixe et applique l'algorithme de signature d'un phar. L'algorithme de signature doit être
   <literal>Phar::MD5</literal>, <literal>Phar::SHA1</literal>, <literal>Phar::SHA256</literal>,
   <literal>Phar::SHA512</literal>, ou <literal>Phar::OPENSSL</literal>.
  </para>
  <para>
   Notez que toutes les archives phar basées sur phar et sur tar ont une signature créée
   automatiquement, <literal>SHA1</literal> par défaut. Les archives de données basées sur tar
   (créées avec la classe <classname>PharData</classname>) doivent avoir leur signature créée et fixée 
   explicitement via <function>Phar::setSignatureAlgorithm</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>sigtype</parameter></term>
     <listitem>
      <para>
       Un des algorithmes <literal>Phar::MD5</literal>,
   <literal>Phar::SHA1</literal>, <literal>Phar::SHA256</literal>,
   <literal>Phar::SHA512</literal>, ou <literal>Phar::OPENSSL</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>privatekey</parameter></term>
     <listitem>
      <para>
       Le contenu d'une clé privée OpenSSL, telle qu'extraite d'un certificat ou d'un fichier 
       de clé OpenSSL :
       <programlisting role="php">
        <![CDATA[
$private = openssl_get_privatekey(file_get_contents('private.pem'));
$pkey = '';
openssl_pkey_export($private, $pkey);
$p->setSignatureAlgorithm(Phar::OPENSSL, $pkey);
        ]]>
       </programlisting>
       Jetez un oeil à <link linkend="phar.using">l'intriduction de phar</link> pour les instructions de
       nommage et de placement du fichier de clé publique.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lève une exception <classname>UnexpectedValueException</classname> pour de nombreuses erreurs,
   une exception <classname>BadMethodCallException</classname> si appelée pour une archive phar basée sur zip,
   et une exception <classname>PharException</classname> si des problèmes sont rencontrés durant l'écriture des
   changements sur le disque.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::getSupportedSignatures</function></member>
    <member><function>Phar::getSignature</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
