<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.4 Maintainer: gui Status: ready -->
<!-- Reviewed: no -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="phar.createdefaultstub">
 <refnamediv>
  <refname>Phar::createDefaultStub</refname>
  <refpurpose>Crée un conteneur de chargement d'une archive Phar</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>Phar::createDefaultStub</methodname>
   <methodparam choice="opt"><type>string</type><parameter>indexfile</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>webindexfile</parameter></methodparam>
  </methodsynopsis>

  <para>
   Cette méthode est destinée à la création de conteneurs spécifique au format de fichier phar et n'est 
   pas conçue pour être utilisée avec des archives phar basées sur tar ou sur zip.
  </para>
  <para>
   Les archives Phar contiennent un chargeur ou un conteneur écrit en PHP qui est
   exécuté quand l'archive est exécutée soit par une inclusion
   <programlisting role="php">
    <![CDATA[
<?php
include 'monphar.phar';
?>
    ]]>
   </programlisting>
   ou par une simple exécution :
   <screen>
    <![CDATA[
php monphar.phar
    ]]>
   </screen>
  </para>
  <para>
   Cette méthode fournit un moyen simple et facile de créer un conteneur qui lancera
   un fichier de démarrage à partir de l'archive phar. En plus, des fichiers différents
   peuvent être spécifiés pour exécuter l'archive à partir de la ligne de commande ou d'un
   serveur web. Le conteneur de chargement appelle alors <function>Phar::interceptFileFuncs</function>
   pour permettre l'empaquetage facile d'applications PHP accédant au système de fichiers.
   Si l'extension phar n'est pas présente, le conteneur de chargement extraiera l'archive phar
   vers un répertoire temporaire et traitera les fichier. Une fonction d'extinction effacera les
   fichier temporaires à la fin.
  </para>

 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne une chaîne de caractères contenant un conteneur de chargement personnalisé
   qui permet à l'archive Phar créée de fonctionner avec ou sans l'extension Phar
   d'activée.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lève une exception <classname>UnexpectedValueException</classname> si un des paramètres est plus long
   que 400 octets.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un exemple avec <function>Phar::createDefaultStub</function></title>
    <programlisting role="php">
<![CDATA[
try {
    $phar = new Phar('monphar.phar');
    $phar->setStub($phar->createDefaultStub('cli.php', 'web/index.php'));
} catch (Exception $e) {
    // traite les erreurs
}
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::setStub</function></member>
    <member><function>Phar::getStub</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
