<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
 <reference id="ref.overload">
  <title>Overload</title>
  <titleabbrev>Surcharge d'objets</titleabbrev>

  <partintro id="overload.partintro">
   &warn.experimental;
   <para>
    Le but de cette extension est de permettre de ma&icirc;triser les appels 
    aux m&eacute;thodes et aux membres d'un objet. Seule une fonction est d&eacute;finie
    dans cette extension, <function>overload</function> qui demande le 
    nom de la classe qui supporte cet fonctionnalit&eacute;. Cette classe doit
    &ecirc;tre pourvue des m&eacute;thodes n&eacute;cessaire au bon fonctionnement de l'extension,
    c'est &agrave; dire : <literal>__get()</literal>, <literal>__set()</literal> et
    <literal>__call()</literal>, qui servent respectivement &agrave; lire et modifier
    un membre, et appeler une m&eacute;thode. De cette mani&egrave;re, l'overloading 
    assure un contr&ocirc;le sur les fonctions appel&eacute;es. A l'int&eacute;rieur de ces
    m&eacute;thodes, l'overloading est d&eacute;sactiv&eacute;, pour que vous puissiez acc&eacute;der
    &agrave; l'objet. 
   </para>
   <para>
    Voici un exemple simple de fonctions utilisant <function>overload</function> :
    <example>
     <title>Overload avec une classe PHP</title>
     <programlisting role="php">
<![CDATA[
<?php

class OO
{
    var $a = 111;
    var $elem = array('b' => 9, 'c' => 42);

    // Fonction de callback pour la lecture de membre
    function __get($prop_name, &$prop_value)
    {
        if (isset($this->elem[$prop_name])) {
            $prop_value = $this->elem[$prop_name];
            return true;
        } else {
            return false;
        }
    }

    // Fonction de callback pour l'&eacute;criture de membre
    function __set($prop_name, $prop_value)
    {
        $this->elem[$prop_name] = $prop_value;
        return true;
    }
}

// Ici, l'initiation de l'overload
overload('OO');

$o = new OO;
print "\$o->a: $o->a\n"; // print: $o->a:
print "\$o->b: $o->b\n"; // print: $o->b: 9
print "\$o->c: $o->c\n"; // print: $o->c: 42
print "\$o->d: $o->d\n"; // print: $o->d:

// ajouter une nouvelle valeur au membre $elem, en programmation OOP
$o->x = 56; 

// instantiation de la classe stdclass (elle existe par d&eacute;faut en PHP 4)
// $val n'est pas overload&eacute;e!
$val = new stdclass;
$val->prop = 555;

// Forcez "a" &agrave; &ecirc;tre un tableau avec l'&eacute;l&eacute;ment $val
// Mais _set() forcera cet &eacute;l&eacute;ment dans le tableau $elem
$o->a = array($val);
var_dump($o->a[0]->prop);

?>
]]>
     </programlisting>
    </example>
   </para>
   <warning>
    <para>
     Comme c'est une extension exp&eacute;rimentale, tout ne fonctionne pas encore.
     Il n'y a pas de support pour <literal>__call()</literal> actuellement,
     et nouvs ne pouvez overloader que des accesseurs. Vous ne pouvez
     pas appeler les fonctions d'overload de la classe, et 
     <literal>__set()</literal> ne fonctionne que pour un
     seul niveau d'accesseur.
    </para>
   </warning>
  </partintro>

&reference.overload.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

