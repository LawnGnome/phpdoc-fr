<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.18 $ -->
<!-- EN-Revision: 1.13 Maintainer: didou Status: ready -->
<!-- State: deprecated -->
<!-- Reviewed: yes -->

 <reference xml:id="ref.overload" xmlns="http://docbook.org/ns/docbook">
  <title>Overload</title>
  <titleabbrev>Surcharge d'objets</titleabbrev>

  <partintro>
  
   <section xml:id="overload.intro">
    &reftitle.intro;
    <para>
     Le but de cette extension est de permettre de maîtriser les appels 
     aux méthodes et aux membres d'un objet. Seule une fonction est définie
     dans cette extension, <function>overload</function> qui demande le
     nom de la classe qui doit supporter cette fonctionnalité. Cette classe doit
     être pourvue des méthodes nécessaires au bon fonctionnement de l'extension,
     c'est-à-dire : <literal>__get()</literal>, <literal>__set()</literal> et
     <literal>__call()</literal>, qui servent respectivement à lire, à modifier
     un membre et à appeler une méthode. De cette manière, l'overloading
     assure un contrôle sur les fonctions appelées. À l'intérieur de ces
     méthodes, l'overloading est désactivé, pour que vous puissiez accéder
     à l'objet. 
    </para>
    &warn.experimental;
    <warning>
     <para>
      Cette extension ne fait pas partie de &php; 5. &php; 5 supporte 
      <literal>__get()</literal>, <literal>__set()</literal> et <literal>__call()</literal>
      nativement.
      Voir la page traitant de la <link linkend="language.oop5.overloading">surcharge en &php; 5</link>
      pour plus d'informations.
     </para>
    </warning>
   </section>

   <section xml:id="overload.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.overload.configure;

   <section xml:id="overload.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section xml:id="overload.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section xml:id="overload.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section xml:id="overload.examples">
    &reftitle.examples;
    <para>
     Voici un exemple simple de fonctions utilisant <function>overload</function> :
     <example>
      <title>Overload avec une classe &php;</title>
      <programlisting role="php">
<![CDATA[
<?php

class OO {
    var $a = 111;
    var $elem = array('b' => 9, 'c' => 42);

    // Fonction de callback pour la lecture de membre
    function __get($prop_name, &$prop_value)
    {
        if (isset($this->elem[$prop_name])) {
            $prop_value = $this->elem[$prop_name];
            return true;
        } else {
            return false;
        }
    }

    // Fonction de callback pour l'écriture de membre
    function __set($prop_name, $prop_value)
    {
        $this->elem[$prop_name] = $prop_value;
        return true;
    }
}

// Ici, l'initiation de l'overload
overload('OO');

$o = new OO;
echo "\$o->a: $o->a\n"; // $o->a: 111
echo "\$o->b: $o->b\n"; // $o->b: 9
echo "\$o->c: $o->c\n"; // $o->c: 42
echo "\$o->d: $o->d\n"; // $o->d:

// ajouter une nouvelle valeur au membre $elem, en programmation OOP
$o->x = 56;

// instantiation de la classe stdclass (elle existe par défaut en PHP 4)
// $val n'est pas overloadée!
$val = new stdclass;
$val->prop = 555;

// Forcez "a" à être un tableau avec l'élément $val
// Mais _set() forcera cet élément dans le tableau $elem
$o->a = array($val);
var_dump($o->a[0]->prop);

?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.overload.functions;

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

