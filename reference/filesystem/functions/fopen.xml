<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.24 Maintainer: dams Status: ready -->
 <refentry id="function.fopen">
  <refnamediv>
   <refname>fopen</refname>
   <refpurpose>Ouverture d'un fichier ou d'une URL</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Description</title>
     <methodsynopsis>
      <type>resource</type><methodname>fopen</methodname>
      <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      <methodparam><type>string</type><parameter>mode</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>use_include_path</parameter></methodparam>
      <methodparam choice="opt"><type>resource</type><parameter>zcontext</parameter></methodparam>
     </methodsynopsis>
   <simpara>
    <function>fopen</function> crée une ressource nommée, spécifiée par le
    paramètre <parameter>filename</parameter>, sous la forme d'un flux.
    Si <parameter>filename</parameter> est de la forme "protocole://",
    <parameter>filename</parameter> est supposé être une URL, et &php; va
    rechercher un gestionnaire de protocole adapté pour lire ce fichier.
    Si aucun gestionnaire pour ce protocole n'est disponible, &php; va émettre
    une alerte qui vous permettra de savoir que vous avez des problèmes dans
    votre script, et il tentera d'exploiter <parameter>filename</parameter>
    comme un fichier classique.
    </simpara>
    <simpara>
     Si &php; décide que le fichier <parameter>filename</parameter> est un fichier
     local, il va essayer d'ouvrir un flux avec ce fichier. Le fichier doit être
     accessible à &php;. Il vous faut donc vous assurer que vous avez les
     droits d'accès à ce fichier. Si vous activez le &safemode;,
     ou la directive <link linkend="ini.open-basedir">open_basedir</link>, d'autres
     conditions peuvent aussi s'appliquer.
    </simpara>
    <simpara>
     Si &php; a décidé que <parameter>filename</parameter> spécifie
     un protocole enregistré, et que ce protocole est enregistré comme
     un protocole réseau, &php; s'assurera que la directive
     <link linkend="ini.allow-url-fopen">allow_url_fopen</link> est activée.
     Si elle est inactive, &php; va émettre une alerte et l'ouverture
     va échouer.
    </simpara>
    <note>
     <simpara>
      La liste des protocoles supportés est disponible <xref linkend="wrappers"/>.
      Certains protocoles (appelés aussi <literal>wrappers</literal> ou gestionnaires) 
      supportent des <literal>contexts</literal> et/ou des options dans le fichier
      &php.ini;. Référez vous aux pages du manuel traitant le protocole, pour connaître
      la liste des options qui sont disponibles. ( i.e. l'option de &php.ini;
      <literal>user_agent</literal> est utilisée par le gestionnaire <literal>http</literal>)
      Pour une description des <literal>contexts</literal> et du paramètre 
      <parameter>zcontext</parameter>, voyez <xref linkend="ref.stream"/>.
     </simpara>
    </note>
    &note.context-support;
    <para>
    <parameter>mode</parameter> peut prendre les valeurs suivantes :
     <table>
      <title>
       Liste des valeurs possibles de modes pour <function>fopen</function>
      </title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry><parameter>mode</parameter></entry>
         <entry>Description</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>'r'</literal></entry>
         <entry>
          Ouvre en lecture seule, et place le pointeur de fichier au
          début du fichier.
         </entry>
        </row>
        <row>
         <entry><literal>'r+'</literal></entry>
         <entry>
          Ouvre en lecture et écriture, et place le pointeur de
          fichier au début du fichier.
       </entry>
        </row>
        <row>
         <entry><literal>'w'</literal></entry>
         <entry>
          Ouvre en écriture seule; place le pointeur de fichier au
          début du fichier et réduit la taille du fichier à 0.
          Si le fichier n'existe pas, on tente de le créer.
         </entry>
        </row>
        <row>
         <entry><literal>'w+'</literal></entry>
         <entry>
          Ouvre en lecture et écriture; place le pointeur de fichier
          au début du fichier et réduit la taille du fichier à
          0. Si le fichier n'existe pas, on tente de le créer.
         </entry>
        </row>
        <row>
         <entry><literal>'a'</literal></entry>
         <entry>
          Ouvre en écriture seule; place le pointeur de fichier à
          la fin du fichier file. Si le fichier n'existe pas, on tente 
          de le créer.
         </entry>
        </row>
        <row>
         <entry><literal>'a+'</literal></entry>
         <entry>
          Ouvre en lecture et écriture; place le pointeur de fichier
          à la fin du fichier. Si le fichier n'existe pas, on tente 
          de le créer.
         </entry>
        </row>
        <row>
         <entry><literal>'x'</literal></entry>
         <entry>
          Crée et ouvre le fichier en lecture seule; place le pointeur de
          fichier au début du fichier. Si le fichier existe déjà,
          <function>fopen</function> va échouer, en retournant &false; et
          en générant une erreur de niveau <constant>E_WARNING</constant>.  
          Si le fichier n'existe pas, <function>fopen</function> tente de le
          créer. Ce mode est l'équivalent des options <literal>O_EXCL|O_CREAT</literal>
          pour l'appel système <literal>open(2)</literal> sous-jacent. Cette 
          option est supportée à partir de &php; 4.3.2, et fonctionne uniquement
          avec des fichiers locaux.
         </entry>
        </row>
        <row>
         <entry><literal>'x+'</literal></entry>
         <entry>
          Crée et ouvre le fichier en lecture et écriture; place le pointeur de
          fichier au début du fichier. Si le fichier existe déjà,
          <function>fopen</function> va échouer, en retournant &false; et
          en générant une erreur de niveau <constant>E_WARNING</constant>.  
          Si le fichier n'existe pas, <function>fopen</function> tente de le
          créer. Ce mode est l'équivalent des options <literal>O_EXCL|O_CREAT</literal>
          pour l'appel système <literal>open(2)</literal> sous-jacent. Cette 
          option est supportée à partir de &php; 4.3.2, et fonctionne uniquement
          avec des fichiers locaux.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <note>
     <para>
      Les systèmes d'exploitation utilisent différents caractères
      pour les nouvelles lignes. Lorsque vous écrivez un fichier
      texte, et insérez une nouvelle ligne, vous devez utiliser le bon 
      caractère pour votre système d'exploitaiton. Les systèmes Unix 
      utilisent <literal>\n</literal> comme nouvelle ligne, les systèmes
      Windows utilisent <literal>\r\n</literal>, et les systèmes
      MacIntosh utilisent <literal>\r</literal>.
     </para>
     <para>
      Si vous n'utilisez pas le bon caractère de nouvelle ligne lors de
      l'écriture de vos fichiers, vous risquez d'ouvrir vos fichiers avec
      des applications qui donneront un aspect 'bizarre' au texte.
     </para>
     <para>
      Windows propose un mode de traduction (<literal>'t'</literal>),
      qui va traduire automatiquement les caractères <literal>\n</literal> en
      <literal>\r\n</literal> lorsque vous travaillez sur le fichier. 
      A l'inverse, vous pouvez utiliser l'option <literal>'b'</literal> pour forcer
      le fichier a être écrit en mode binaire, sans traduction des données.
      Pour utiliser ces options, ajoutez <literal>'b'</literal> ou <literal>'t'</literal> 
      comme dernier caractère du paramètre <parameter>mode</parameter>.
     </para>
     <para>
      Le mode de traduction par défaut dépend de l'interface SAPI et de la 
      version de &php; que vous utilisez. Nous vous recommandons de toujours
      spécifier les options de traductions pour des raisons de portabilité. 
      Vous devriez utiliser <literal>'t'</literal> lorsque vous écrivez des
      fichiers de texte, et le caractère <literal>\n</literal> pour définir
      vos fin de ligne, dans les scripts, mais que vous vous attendez à ce
      que le fichier soit relu par une application comme Notepad.  Vous devriez
      toujours utiliser l'option <literal>'b'</literal> dans les autres cas.
     </para>
     <para>
      Si vous ne précisez pas <literal>'b'</literal> lorsque vous travaillez
      avec des fichiers binaires, vous pourriez rencontrer des problèmes
      avec vos données, comme des images corrompues ou des caractères 
      <literal>\r\n</literal> inopinés.
     </para>
     <para>
      <emphasis>Pour des raisons de portabilité, il est recommandé de toujours
      utiliser l'option <literal>'b'</literal> lorsque vous ouvrez des
      fichiers avec <function>fopen</function>.
      </emphasis>
     </para>
     <para>
      <emphasis>A nouveau, pour des raisons de portabilité, il est fortement 
      recommandé de réécrire les scripts qui utilisent l'option
      <literal>'t'</literal>, pour qu'ils utilisent le bon caractère 
      de nouvelle ligne, et le mode <literal>'b'</literal>.
      </emphasis>
     </para>
     <para>
      <emphasis>
       Deupis &php; 4.3.2, le mode par défaut est binaire pour toutes les plates-formes
       qui font la différence entre le mode texte et le mode binaire. Si vous
       avez des problèms après avoir mis à jour &php;, essayez d'utiliser l'option
       <literal>'t'</literal>, jusqu'à ce que vous ayez mis à jour vos scripts.
      </emphasis>
     </para>
    </note>
   <para>
    Vous pouvez utiliser le troisième paramètre optionnel
    <parameter>use_include_path</parameter> pour explorer 
    le dossier <link linkend="ini.include-path">include_path</link>,
    en lui donnant la valeur de 1.
   </para>
   <para>
    Le paramètre optionnel <parameter>zcontext</parameter> est utilisé pour
    spécifier des paramètres d'optimisation et de callback.
    </para>
    <simpara>
     Si l'ouverture échoue, <function>fopen</function> retournera &false;.
    </simpara>
   <para>
    <example>
     <title>Exemple avec <function>fopen</function></title>
     <programlisting role="php">
<![CDATA[
<?php
$handle = fopen ("/home/rasmus/file.txt", "r");
$handle = fopen ("/home/rasmus/file.gif", "wb");
$handle = fopen ("http://www.example.com/", "r");
$handle = fopen ("ftp://user:password@example.com/somefile.txt", "w");
?>
]]>
     </programlisting>
    </example>
   </para>
   <simpara>
    Si vous rencontrez des problèmes en lecture ou écriture
    de fichier et que vous utilisez &php; en version module de serveur,
    n'oubliez pas que les fichiers auxquels vous accédez ne sont
    pas nécessairement accessibles au processus serveur.
   </simpara>
   <para>
    Sous Windows, assurez-vous de bien protéger les anti-slash
    utilisés dans le chemin du fichier, ou bien utilisez des slash.
    <example>
     <title>Exemple avec <function>fopen</function> sous Windows</title>
     <programlisting role="php">
<![CDATA[
<?php
  $handle = fopen ("c:\\data\\info.txt", "r");
?>
]]>
     </programlisting>
    </example>
   </para>
    &warn.ssl-non-standard;
    &note.sm.uidcheck.dir;
   <simpara>
    Voir aussi
    <xref linkend="wrappers"/>,
     <function>fclose</function>,
     <function>fgets</function>, 
     <function>fsockopen</function>,
     <function>file</function>,
     <function>file_exists</function>,
     <function>is_readable</function>,
     <function>socket_set_timeout</function> et
     <function>popen</function>.
   </simpara>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
