<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336561 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.parse-ini-file">
 <refnamediv>
  <refname>parse_ini_file</refname>
  <refpurpose>Analyse un fichier de configuration</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>parse_ini_file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>process_sections</parameter><initializer>false</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>scanner_mode</parameter><initializer>INI_SCANNER_NORMAL</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>parse_ini_file</function> charge le fichier
   <parameter>filename</parameter> et retourne les
   configurations qui s'y trouvent sous forme d'un tableau
   associatif.
  </para>
  <para>
   La structure des fichiers de configuration lus est similaire
   à celle de &php.ini;.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Le nom du fichier de configuration à analyser.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>process_sections</parameter></term>
     <listitem>
      <para>
       En passant le deuxième paramètre optionnel
       à <parameter>process_sections</parameter>, vous obtiendrez
       un tableau multidimensionnel avec les noms des sections.
       La valeur par défaut de ce paramètre est &false;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>scanner_mode</parameter></term>
     <listitem>
      <para>
       Peut être <constant>INI_SCANNER_NORMAL</constant> (défaut) ou
       <constant>INI_SCANNER_RAW</constant>. Si <constant>INI_SCANNER_RAW</constant>
       est fourni, alors les valeurs en option ne seront pas analysées.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La configuration est retournée sous la forme d'un tableau associatif
   en cas de succès, et &false; si une erreur survient.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Ajout du paramètre optionnel <parameter>scanner_mode</parameter>.
        Les guillemets simples doivent maintenant être utilisés
        autour des assignements de variables. Le caractère dièse
        (<literal>#</literal>) ne peut plus être utilisé comme
        commentaire, et émettra une alerte si vous l'utilisez.
       </entry>
      </row>
      <row>
       <entry>5.2.7</entry>
       <entry>
        En cas d'erreur de syntaxe, la fonction retourne maintenant &false;
        au lieu d'un tableau vide.
       </entry>
      </row>
      <row>
       <entry>5.2.4</entry>
       <entry>
        Les noms de section et les clés, composés de numéros, sont
        maintenant évalués comme des <link linkend="language.types.integer">entiers</link>,
        ceux commençant par un 0 seront évalués comme des octales, et ceux commençant
        par 0x, comme des hexadécimaux.
       </entry>
      </row>
      <row>
       <entry>5.0.0</entry>
       <entry>
        Les valeurs entourées par des guillemets, peuvent contenir des
        nouvelles lignes.
       </entry>
      </row>
      <row>
       <entry>4.2.1</entry>
       <entry>
        Cette fonction est maintenant affectée par le &safemode;
        et l'<link linkend="ini.open-basedir">open_basedir</link>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Contenu du fichier <filename>sample.ini</filename></title>
    <programlisting>
<![CDATA[
; Ceci est un fichier de configuration
; Les commentaires commencent par ';', comme dans php.ini

[first_section]
one = 1
five = 5
animal = BIRD

[second_section]
path = "/usr/local/bin"
URL = "http://www.example.com/~username"

[third_section]
phpversion[] = "5.0"
phpversion[] = "5.1"
phpversion[] = "5.2"
phpversion[] = "5.3"

urls[svn] = "http://svn.php.net"
urls[git] = "http://git.php.net"
]]>
    </programlisting>
   </example>
   <example>
    <title>Exemple avec <function>parse_ini_file</function></title>
    <para>
     Les <link linkend="language.constants">constantes</link> peuvent aussi
     être utilisées dans le fichier .ini, ce qui fait que si vous définissez
     une constante avant d'exécuter <function>parse_ini_file</function>, elle
     sera intégrée dans les résultats. Seules les valeurs de configuration
     sont remplacées par leur équivalent en constantes. Par exemple :
    </para>
    <programlisting role="php">
<![CDATA[
<?php

define('BIRD', 'Dodo bird');

// Analyse sans sections
$ini_array = parse_ini_file("sample.ini");
print_r($ini_array);

// Analyse avec sections
$ini_array = parse_ini_file("sample.ini", true);
print_r($ini_array);

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array
(
    [one] => 1
    [five] => 5
    [animal] => Dodo bird
    [path] => /usr/local/bin
    [URL] => http://www.example.com/~username
    [phpversion] => Array
        (
            [0] => 5.0
            [1] => 5.1
            [2] => 5.2
            [3] => 5.3
        )

    [urls] => Array
        (
            [svn] => http://svn.php.net
            [git] => http://git.php.net
        )

)
Array
(
    [first_section] => Array
        (
            [one] => 1
            [five] => 5
            [animal] => Dodo bird
        )

    [second_section] => Array
        (
            [path] => /usr/local/bin
            [URL] => http://www.example.com/~username
        )

    [third_section] => Array
        (
            [phpversion] => Array
                (
                    [0] => 5.0
                    [1] => 5.1
                    [2] => 5.2
                    [3] => 5.3
                )
            [urls] => Array
                (
                    [svn] => http://svn.php.net
                    [git] => http://git.php.net
                )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>parse_ini_file</function> pour analyser un fichier php.ini</title>
    <programlisting role="php">
<![CDATA[
<?php
// Une fonction simple pour comparer les résultats ci-dessous
function yesno($expression)
{
    return($expression ? 'Yes' : 'No');
}

// Lit le chemin du php.ini en utilisant php_ini_loaded_file() 
// cette fonction est disponible depuis PHP 5.2.4
$ini_path = php_ini_loaded_file();

// Analyse de php.ini
$ini = parse_ini_file($ini_path);

// Affichage et comparatif des valeurs. Notez que get_cfg_var()
// va donner les mêmes résultats entre les résultats analysés et chargés
echo '(analysé) magic_quotes_gpc = ' . yesno($ini['magic_quotes_gpc']) . PHP_EOL;
echo '(chargé ) magic_quotes_gpc = ' . yesno(get_cfg_var('magic_quotes_gpc')) . PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
(analysé) magic_quotes_gpc = Yes
(chargé ) magic_quotes_gpc = Yes
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Cette fonction n'a rien a voir avec le fichier
    &php.ini;. Ce dernier a déjà été traité lorsque
    vous commencez à exécuter votre script. Cette fonction
    peut vous permettre de lire vos propres fichiers de
    configuration.
   </para>
  </note>
  <note>
   <para>
    Si une valeur du fichier ini contient des
    données non-alphanumériques, il faut la protéger en la plaçant 
    entre guillemets doubles (").
   </para>
  </note>
  <note>
   <simpara>
    Il existe des mots réservés qui ne doivent pas être utilisés en tant que clés
    dans les fichiers ini. Cela inclut : <literal>null</literal>,
    <literal>yes</literal>, <literal>no</literal>, <literal>true</literal>,
    <literal>false</literal>, <literal>on</literal> et <literal>off</literal>.
    Les valeurs <literal>null</literal>, <literal>off</literal>, <literal>no</literal>
    et <literal>false</literal> donnent "" (chaîne vide). Les valeurs
    <literal>on</literal>, <literal>yes</literal> et
    <literal>true</literal> donnent "1". Les caractères
    <literal>?{}|&amp;~!()^"</literal> ne doivent pas être utilisés n'importe
    où dans la clé et ont une signification spéciale dans la valeur.
   </simpara>
  </note>
  <note>
   <para>
    Les entrées sans un signal égal seront ignorées. Par exemple, "foo"
    sera ignoré alors que "bar =" sera analysé et ajouté avec une valeur vide.
    Par exemple, MySQL a une option de configuration "no-auto-rehash" dans
    le fichier <filename>my.cnf</filename> qui ne prend pas de valeur, aussi,
    elle sera ignorée.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>parse_ini_string</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->