<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.13 $ -->
<!-- EN-Revision: 1.13 Maintainer: dams Status: ready -->
<!-- Reviewed: no -->
 <refentry id="function.popen">
  <refnamediv>
   <refname>popen</refname>
   <refpurpose>Crée un processus de pointeur de fichier</refpurpose>
  </refnamediv>
  <refsect1>
   &reftitle.description;
     <methodsynopsis>
      <type>resource</type><methodname>popen</methodname>
      <methodparam><type>string</type><parameter>command</parameter></methodparam>
      <methodparam><type>string</type><parameter>mode</parameter></methodparam>
     </methodsynopsis>
   <para>
    <function>popen</function> ouvre un processus fils 
    en faisant un fork de la commande <parameter>command</parameter>.
   </para>
   <para>
    <function>popen</function> retourne un pointeur de fichier
    identique à celui retourné par <function>fopen</function>,
    hormis le fait qu'il sera unidirectionnel (lecture seule, ou
    écriture seule), et doit être terminé par
    <function>pclose</function>. Ce pointeur peut être utilisé
    avec <function>fgets</function>, <function>fgetss</function> et
    <function>fputs</function>.
   </para>
   <para>
    Si une erreur survient, retourne &false;.
   </para>
   <para>
    <example>
    <title>Exemple avec <function>popen</function></title>
     <programlisting role="php">
<![CDATA[
<?php
  $handle = popen ("/bin/ls", "r");
?>
]]>
     </programlisting>
    </example>
   </para>
    <note>
     <para>
      Si la commande à exécuter n'a pu être trouvée, une ressource
      valide sera retournée. Cela semble étrange, mais c'est pratique. 
      cela vous permet d'accéder aux messages d'erreur qui ont été
      retournés par le Shell : 
      <example>
       <title>Lire des messages d'erreurs avec <function>popen</function></title>
       <programlisting role="php">
<![CDATA[
<?php
  error_reporting(E_ALL);

/* Ajoute une redirection pour que vous puissiez lire stderr */
  $handle = popen('/chemin/vers/spooge 2>&1', 'r');
  echo "'$handle'; " . gettype($handle) . "\n";
  $read = fread($handle, 2096);
  echo $read;
  pclose($handle);
?>
]]>
       </programlisting>
      </example>
     </para>
    </note>
    &note.exec-path;
    &warn.sm.exec;
    <para>
     Voir aussi
     <function>pclose</function>,
     <function>fopen</function> et 
     <function>proc_open</function>.
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
