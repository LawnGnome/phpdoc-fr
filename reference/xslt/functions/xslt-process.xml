<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/xslt.xml, last change in rev 1.1 -->
<!-- last change to 'xslt-process' in en/ tree in rev 1.3 -->
  <refentry id="function.xslt-process">
   <refnamediv>
    <refname>xslt_process</refname>
    <refpurpose>
     Transforme des donn&eacute;es <acronym>XML</acronym> avec <acronym>XSLT</acronym>
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>mixed</type><methodname>xslt_process</methodname>
       <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
       <methodparam><type>string</type><parameter>xmlcontainer</parameter></methodparam>
       <methodparam><type>string</type><parameter>xslcontainer</parameter></methodparam>
       <methodparam choice="opt"><type>string</type><parameter>resultcontainer</parameter></methodparam>
       <methodparam choice="opt"><type>array</type><parameter>arguments</parameter></methodparam>
       <methodparam choice="opt"><type>array</type><parameter>parameters</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>xslt_process</function> fait partie de la nouvelle
     vague de fonctions <acronym>XSLT</acronym>. Elle vous permet de 
     r&eacute;aliser des transformations <acronym>XSLT</acronym> en 
     utilisant n'importe quelle type de source : des conteneurs.
     Cela se fait gr&acirc;ce &agrave; l'utilisation de buffers 
     d'arguments : un concept issu de Sablotron (actuellement, 
     c'est le seul processeur <acronym>XSLT</acronym> qui le
     supporte). Les conteneurs sont par d&eacute;faut des fichiers 
     qui contiennent le document &agrave; traiter. Le conteneur 
     de r&eacute;sultat est par d&eacute;faut un fichier qui recevra 
     le document trait&eacute;. Si le conteneur de r&eacute;sultat 
     n'est pas fourni (l'argument vaut alors &null;), le r&eacute;sultat 
     sera retourn&eacute; par la fonction.
    </para>
    <para>
     <warning>
      <simpara>
       Cette fonction a vu ses arguments &ecirc;tre modifi&eacute; depuis la 
       version &php; 4.0.6. Ne placez pas le code <acronym>XML</acronym> ou XSL dans les 
       deuxi&egrave;me et troisi&egrave;me arguments, car cela engendrera
       une erreur de segmentation (<literal>segmentation fault</literal>), 
       dans les versions de <productname>Sablotron</productname> 0.95 et plus r&eacute;centes.
      </simpara>
     </warning>
    </para>
    <para>
     Les conteneurs peuvent aussi &ecirc;tre modifi&eacute;s via 
     le tableau <parameter>$arguments</parameter>.
    </para>
    <para>
     Le type le plus simple de transformation r&eacute;alisable avec 
     <function>xslt_process</function> est la transformation d'un fichier
     <acronym>XML</acronym> avec un fichier <acronym>XSLT</acronym>, 
     en pla&ccedil;ant le r&eacute;sultat dans un troisi&egrave;me fichier.
     Faire cela avec Sablotron est tr&egrave;s facile...
    </para>
    <example>
     <title>Utilisation de <function>xslt_process</function> pour transformer un fichier
     <acronym>XML</acronym> avec un fichier XSL en un autre fichier <acronym>XML</acronym></title>
     <programlisting role="php">
<![CDATA[
<?php

// Allocation du processuer XSLT
$xh = xslt_create();

// Traitement du document
if (xslt_process($xh, 'sample.xml', 'sample.xsl', 'result.xml')) {
    print "R&eacute;ussi. sample.xml a &eacute;t&eacute; transform&eacute; par sample.xsl en result.xml";
    print ", result.xml contient ceci : \n<br>\n";
    print "<pre>\n";
    readfile('result.xml');
    print "</pre>\n";
}
else {
    print "D&eacute;sol&eacute;, sample.xml n'a pu &ecirc;tre transform&eacute; par sample.xsl en ";
    print " result.xml. La raison est " . xslt_error($xh) . " et ";
    print " le code d'erreur est " . xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
     </programlisting>
    </example>
    <para>
     M&ecirc;me si cette fonctionnalit&eacute; est tr&egrave;s pratique, il arrive souvent qu'en environnement
     web, vous vouliez &ecirc;tre capable d'afficher directement votre r&eacute;sultat. Par cons&eacute;quent,
     si vous omettez le troisi&egrave;me argument de <function>xslt_process</function>, ou que
     vous fournissez la valeur &null; &agrave; la place, la fonction va automatiquement
     retourner le r&eacute;sultat de la transformation <acronym>XSLT</acronym>, au lieu de l'&eacute;crire dans un
     fichier.
    </para>
    <para>
     <example>
     <title>Utilisation de <function>xslt_process</function> pour transformer un fichier
     <acronym>XML</acronym> avec un fichier XSL et le placer dans une variable</title>
     <programlisting role="php">
<![CDATA[
<?php

// Allocation d'un analyseur XSLT
$xh = xslt_create();

// Traitement du document
$result = xslt_process($xh, 'sample.xml', 'sample.xsl');
if ($result) {
    print "R&eacute;ussi. sample.xml a &eacute;t&eacute; transform&eacute; par sample.xsl en result.xml";
    print ", result.xml contient ceci : \n<br>\n";
    print "<pre>\n";
    print $result;
    print "</pre>\n";
}
else {
    print "D&eacute;sol&eacute;, sample.xml n'a pu &ecirc;tre transform&eacute; par sample.xsl en ";
    print " result.xml. La raison est " . xslt_error($xh) . " et ";
    print " le code d'erreur est " . xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Les deux cas de transformations <acronym>XSLT</acronym> ci-dessus sont les cas les plus simples, 
     quand on parle de transformation <acronym>XSLT</acronym>, et ce sont les cas les plus courants, mais
     il existe des situations o&ugrave; vous obtenez vos donn&eacute;es <acronym>XML</acronym> et <acronym>XSLT</acronym> de sources externes
     comme des sockets ou des bases de donn&eacute;es. Dans ces cas, vous avez d&eacute;j&agrave; les donn&eacute;es
     dans une variable, et en mode de production, &eacute;crire ces donn&eacute;es dans des fichiers
     serait trop inefficace. C'est l&agrave; ou la syntaxe de buffers d'arguments de <acronym>XSLT</acronym>
     prend la rel&egrave;ve. Au lieu de fichier en terme d'arguments <acronym>XML</acronym> et <acronym>XSLT</acronym>, vous pouvez
     passer des buffers d'arguments, qui sont alors substitu&eacute;s en valeur au
     cinqui&egrave;me argument de la fonction <function>xslt_process</function>. 
     L'exemple suivant vous montre comment traiter du <acronym>XML</acronym> et du <acronym>XSLT</acronym> issus de variable,
     et de retrouver le r&eacute;sultat dans une troisi&egrave;me variable.
    </para>
    <para>
     <example>
     <title>Utilisation de <function>xslt_process</function> pour transformer une variable
     <acronym>XML</acronym> avec une autre variable XSL et placer le r&eacute;sultat dans une variable</title>
     <programlisting role="php">
<![CDATA[
<?php
// $xml et $xsl contiennent des donn&eacute;es XML et XSL

$arguments = array(
     '/_xml' => $xml,
     '/_xsl' => $xsl
);

// Allocation d'un analyseur XSLT
$xh = xslt_create();

// Traitement du document
$result = xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments); 
if ($result) {
    print "R&eacute;ussi. sample.xml a &eacute;t&eacute; transform&eacute; par sample.xsl en result.xml";
    print ", result.xml contient ceci : \n<br>\n";
    print "<pre>\n";
    print $result;
    print "</pre>\n";
}
else {
    print "D&eacute;sol&eacute;, sample.xml n'a pu &ecirc;tre transform&eacute; par sample.xsl en ";
    print " result.xml. La raison est " . xslt_error($xh) . " et ";
    print " le code d'erreur est " . xslt_errno($xh);
}
xslt_free($xh);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Finalement, le dernier argument de <function>xslt_process</function>
     repr&eacute;sente un tableau de tous les param&egrave;tres que vous souhaitez passer
     au document <acronym>XSLT</acronym>. Ces param&egrave;tres sont accessibles depuis le fichier
     XSL en utilisant l'instruction 
     <literal>&lt;xsl:param name=&quot;parameter_name&quot;&gt;</literal>.
     Les param&egrave;tres doivent &ecirc;tre encod&eacute;s au format UTF-8 
     et leur valeur sera interpr&eacute;t&eacute;e comme une cha&icirc;ne de 
     caract&egrave;res par l'analyseur <productname>Sablotron</productname>. 
     En d'autres termes, vous ne pouvez pas passer des groupes de noeuds 
     (<literal>node-sets</literal>) comme param&egrave;tre au document <acronym>XSLT</acronym>.
    </para>
    <note>
     <simpara>
      Notez que <emphasis>file://</emphasis> est n&eacute;cessaire au d&eacute;but des 
      chemin si vous utilisez Windows.
     </simpara>
    </note>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
