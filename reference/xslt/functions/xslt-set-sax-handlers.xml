<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.7 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
  <refentry id="function.xslt-set-sax-handlers">
   <refnamediv>
    <refname>xslt_set_sax_handlers</refname>
    <refpurpose>
     Configure les gestionnaires SAX qui seront appelés pour gérer les documents XML
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>void</type><methodname>xslt_set_sax_handlers</methodname>
      <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
      <methodparam><type>array</type><parameter>handlers</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>xslt_set_sax_handlers</function> enregistre le gestionnaire SAX
     <parameter>handlers</parameter> pour le document, en lui donnant
     une ressource XSLT <parameter>processor</parameter>.
    </para>
    <para>
     Le paramètre <parameter>handlers</parameter> doit être un tableau qui
     suit ce format :
      <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

$handlers = array(

  "document" => array(
    "start_doc",
    "end_doc"),

  "element"  => array(
    "start_element",
    "end_element"),

  "namespace" => array(
    "start_namespace",
    "end_namespace"),

  "comment"   => "comment",

  "pi"        => "pi",

  "character" => "characters"

);
?>
]]>
      </programlisting>
     </informalexample>
     0ù les fonctions suivent la syntaxe décrite dans le schéma du gestionnaire de fonctions.
    </para>
    <note>
     <para>
      Le tableau fourni n'a pas besoin de contenir tous les éléments différents du gestionnaire SAX
      (bien qu'il le peut), mais il doit uniquement être conforme
      au format "gestionnaire" => "fonction" décrit ci-dessus.
     </para>
    </note>
    <para>
     Chacune des fonctions du gestionnaire SAX correspond au format suivant :
     <itemizedlist>
      <listitem>
       <simpara>
        <methodsynopsis>
         <methodname><replaceable>start_doc</replaceable></methodname>
         <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
        </methodsynopsis>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <methodsynopsis>
         <methodname><replaceable>end_doc</replaceable></methodname>
         <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
        </methodsynopsis>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <methodsynopsis>
         <methodname><replaceable>start_element</replaceable></methodname>
         <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
         <methodparam><type>string</type><parameter>name</parameter></methodparam>
         <methodparam><type>array</type><parameter>attributes</parameter></methodparam>
        </methodsynopsis>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <methodsynopsis>
         <methodname><replaceable>end_element</replaceable></methodname>
         <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
         <methodparam><type>string</type><parameter>name</parameter></methodparam>
        </methodsynopsis>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <methodsynopsis>
         <methodname><replaceable>start_namespace</replaceable></methodname>
         <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
         <methodparam><type>string</type><parameter>prefix</parameter></methodparam>
         <methodparam><type>string</type><parameter>uri</parameter></methodparam>
        </methodsynopsis>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <methodsynopsis>
         <methodname><replaceable>end_namespace</replaceable></methodname>
         <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
         <methodparam><type>string</type><parameter>prefix</parameter></methodparam>
        </methodsynopsis>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <methodsynopsis>
         <methodname><replaceable>comment</replaceable></methodname>
         <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
         <methodparam><type>string</type><parameter>contents</parameter></methodparam>
        </methodsynopsis>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <methodsynopsis>
         <methodname><replaceable>pi</replaceable></methodname>
         <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
         <methodparam><type>string</type><parameter>target</parameter></methodparam>
         <methodparam><type>string</type><parameter>contents</parameter></methodparam>
        </methodsynopsis>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <methodsynopsis>
         <methodname><replaceable>characters</replaceable></methodname>
         <methodparam><type>resource</type><parameter>processor</parameter></methodparam>
         <methodparam><type>string</type><parameter>contents</parameter></methodparam>
        </methodsynopsis>
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Utiliser la fonction <function>xslt_set_sax_handlers</function> n'est pas vraiment
     différent qu'exécuter un analyseur SAX comme <function>xml_parse</function>
     sur un résultat de la transformation <function>xslt_process</function>.
    </para>
   </refsect1>
   <refsect1>
    &reftitle.examples;
    <example>
     <title>Exemple avec <function>xslt_set_sax_handlers</function></title>
     <programlisting role="php">
<![CDATA[
<?php
// Fournit par ohlesbeauxjours at yahoo dot fr
// Voici un exemple simple qui applique la fonction strtoupper()
// sur le contenu de chaque balise <auteur> et affiche
// le résultat sous forme d'arbre XML :

$xml='<?xml version="1.0"?>
<books>
 <book>
  <title>Mme Bovary</title>
  <author>Gustave Flaubert</author>
 </book>
 <book>
  <title>Mrs Dalloway</title>
  <author>Virginia Woolf</author>
 </book>
</books>';

$xsl='<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" encoding="ISO-8859-1" indent="no" omit-xml-declaration="yes"/>
<xsl:template match="/">
 <xsl:for-each select="books/book">
  <livre>
   <auteur><xsl:value-of select="author/text()"/></auteur>
  </livre>
 </xsl:for-each>
</xsl:template>
</xsl:stylesheet>';

// Gestionnaire :
function start_document() 
{
  // début de la lecture du document
}

function end_document() 
{
  // fin de la lecture du document
}

function start_element($parser, $name, $attributes) 
{
  global $result,$tag;
  $result .= "<". $name . ">";
  $tag = $name;
}

function end_element($parser, $name) 
{
  global $result;
  $result .= "</" . $name . ">";
}

function characters($parser, $data) 
{
  global $result,$tag;
  if ($tag == "auteur" ) {
    $data = strtoupper($data);
  }
  $result .= $data;
}

// Transformation :
$xh = xslt_create();
$handlers = array("document" => array("start_document","end_document"),
   "element" => array("start_element","end_element"),
   "character" => "characters");

xslt_set_sax_handlers($xh, $handlers);
xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, array("/_xml"=>$xml, "/_xsl"=>$xsl));
xslt_free($xh);
?>
]]>
     </programlisting>
    </example>
   <para>
    Vous pouvez également utiliser la fonction <function>xslt_set_object</function> 
    si vous voulez implémenter votre gestionnaire dans un objet.
   </para>
    <example>
     <title>Gestionnaire orienté objet</title>
     <programlisting role="php">
<![CDATA[
<?php
// Voici la version orientée objet de l'exemple ci-dessus
class data_sax_handler {

  var $buffer, $tag, $attrs;

  var $_xh;

  function data_sax_handler($xml, $xsl)
  {
      // notre ressource xslt
      $this->_xh = xslt_create();

      xslt_set_object($this->_xs, $this);

      // configuration du gestionnaire sax
      $handlers = array(
        "document" => array('start_document', 'end_document'),
        "element" => array('start_element', 'end_element'),
        "character" => 'characters'
      );

      xslt_set_sax_handlers($this->_xh, $handlers);
    
      xslt_process($this->_xh, 'arg:/_xml', 'arg:/_xsl', NULL, array("/_xml"=>$xml, "/_xsl"=>$xsl));
      xslt_free($this->_xh);


  }  
  
  function start_document() 
  {
        // début de la lecture du document
  }

  function end_document() {
        // fin de la lecture du document
  }

  function start_element($parser, $name, $attributes) {
        $this->tag = $name;
        $this->buffer .= "<" . $name . ">";
        $this->attrs = $attributes;
  }

  function end_element($parser, $name)
  {
        $this->tag = '';
        $this->buffer .= "</" . $name . ">";
  }

  function characters($parser, $data)
  {
    if ($this->tag == 'auteur') {
          $data = strtoupper($data);
    }
    $this->buffer .= $data;
  }
  
  function get_buffer() {
    return $this->buffer;
  }

}

$exec = new data_sax_handler($xml, $xsl);

?>
]]>
     </programlisting>
     <para>
      Les deux exemples ci-dessus afficheront :
     </para>
     <screen role="xml">
<![CDATA[
<livre>
   <auteur>GUSTAVE FLAUBERT</auteur>
</livre>
<livre>
   <auteur>VIRGINIA WOOLF</auteur>
</livre>
]]>
     </screen>
    </example> 
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
