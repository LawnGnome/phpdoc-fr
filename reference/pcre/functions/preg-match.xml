<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/pcre.xml, last change in rev 1.3 -->
<!-- last change to 'preg-match' in en/ tree in rev 1.2 -->
  <refentry id="function.preg-match">
   <refnamediv>
    <refname>preg_match</refname>
    <refpurpose>Expression r&eacute;guli&egrave;re standard</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>int</type><methodname>preg_match</methodname>
      <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
      <methodparam><type>string</type><parameter>subject</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>matches</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>preg_match</function> analyse <parameter>subject</parameter>
     pour trouver l'expression <parameter>pattern</parameter>.
    </para>
    <para>
     Si <parameter>matches</parameter> est fourni, il sera rempli par
     les r&eacute;sultats de la recherche. $matches[0] contiendra le
     texte qui satisfait le masque complet, $matches[1] contiendra
     le texte qui satisfait la premi&egrave;re parenth&egrave;se capturante,
     etc..
    </para>
    <para>
     Le param&egrave;tre <parameter>flags</parameter> peut prendre l'une des valeurs
     suivantes : 
     <variablelist>
      <varlistentry>
       <term><constant>PREG_OFFSET_CAPTURE</constant></term>
       <listitem>
        <simpara>
         Si cette option est activ&eacute;e, toutes les sous cha&icirc;nes qui satisfont
         le masque seront aussi identifi&eacute;es par leur offset. Notez que cela
         modifie le format de la valeur retourn&eacute;e , puisque chaque &eacute;l&eacute;ment
         de r&eacute;ponse devient un tableau contenant la sous-cha&icirc;ne r&eacute;sultat,
         &agrave; l'index <literal>0</literal> dans la cha&icirc;ne <parameter>subject</parameter> 
         constant <literal>1</literal>. Cette option a &eacute;t&eacute; ajout&eacute;e en &php; 4.3.0 .
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
     Le param&egrave;tre <parameter>flags</parameter> a &eacute;t&eacute; ajout&eacute; en 
     &php; 4.3.0 .
    </para>
    <para>
     <function>preg_match</function> retourne le nombre de fois o&ugrave; le
     masque <parameter>pattern</parameter> a &eacute;t&eacute; trouv&eacute;. Cela peut aller de
     0 (pas de solutioon) &agrave; un 1 car <function>preg_match</function> s'arr&ecirc;te
     d&egrave;s qu'il a trouv&eacute; une premi&egrave;re solution. <function>preg_match_all</function>,
     au contraire, va continue jusqu'&agrave; la fin de la cha&icirc;ne <parameter>subject</parameter>.
     <function>preg_match</function> retourne &false; si une erreur survient.
    </para>
    <para>
     <example>
      <title>Extraction d'un num&eacute;ro de page d'une cha&icirc;ne.</title>
      <programlisting role="php">
<![CDATA[
<?php
if (preg_match("/page&#92;s+#(&#92;d+)/i", "Aller &agrave; la page num&eacute;ro 9.", $parts))
    print "La page suivante est $parts[1]";
else
    print "Page introuvable.";
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Trouve le mot "web"</title>
      <programlisting role="php">
<![CDATA[
<?php
// &#92;b, dans le masque, indique une limite de mot, de fa&ccedil;on &agrave; ce que le mot
// "web" uniquement soit rep&eacute;r&eacute;, et pas seulement des parties de mots comme
// dans "webbing" ou "cobweb"
if (preg_match ("/&#92;bweb&#92;b/i", "PHP est le meilleur langage de script du web.")) {
    print "Un mot a &eacute;t&eacute; trouv&eacute;.";
} else {
    print "Un mot n'a pas &eacute;t&eacute; trouv&eacute;.";
}
if (preg_match ("/&#92;bweb&#92;b/i", "PHP est le meilleur langage de script pour les webagency.")) {
     print "Un mot a &eacute;t&eacute; trouv&eacute;.";
} else {
    print "Un mot n'a pas &eacute;t&eacute; trouv&eacute;.";
}
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Lire un nom de domaine dans une URL</title>
      <programlisting role="php">
<![CDATA[
<?php
// rep&eacute;rer le nom de l'h&ocirc;te dans l'URL
  preg_match("/^(http:&#92;/&#92;/)?([^&#92;/]+)/i", 
             "http://www.php.net/index.html", $matches);
  $host = $matches[2];
// rep&eacute;rer les deux derniers segments du nom de l'h&ocirc;te
  preg_match("/[^&#92;.&#92;/]+&#92;.[^&#92;.&#92;/]+$/",$host,$matches);
  echo "Le nom de domaine est : ".$matches[0]."&#92;n";
?>
]]>
      </programlisting>
     </example>
     Cet exemple va afficher :
     <computeroutput>
<![CDATA[
Le nom de domaine est : php.net
]]>
     </computeroutput>
     Voir aussi
     <function>preg_match_all</function>,
     <function>preg_replace</function> et
     <function>preg_split</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
