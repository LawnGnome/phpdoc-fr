<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.22 $ -->
<!-- EN-Revision: 1.18 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->
  <refentry id="function.preg-match">
   <refnamediv>
    <refname>preg_match</refname>
    <refpurpose>Expression rationnelle standard</refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>mixed</type><methodname>preg_match</methodname>
      <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
      <methodparam><type>string</type><parameter>subject</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter role="reference">matches</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>offset</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>preg_match</function> analyse <parameter>subject</parameter>
     pour trouver l'expression qui correspond à <parameter>pattern</parameter>.
    </para>
    <para>
     Si <parameter>matches</parameter> est fourni, il sera rempli par
     les résultats de la recherche. <varname>$matches[0]</varname> contiendra le
     texte qui satisfait le masque complet, <varname>$matches[1]</varname> contiendra
     le texte qui satisfait la première parenthèse capturante,
     etc.
    </para>
    <para>
     Le paramètre <parameter>flags</parameter> peut prendre l'une des valeurs
     suivantes : 
     <variablelist>
      <varlistentry>
       <term><constant>PREG_OFFSET_CAPTURE</constant></term>
       <listitem>
        <simpara>
         Si cette option est activée, toutes les sous-chaînes qui satisfont
         le masque seront aussi identifiées par leur offset. Notez que cela
         modifie le format de la valeur retournée , puisque chaque élément
         de réponse devient un tableau contenant la sous-chaîne résultat,
         à l'index &zero; dans la chaîne <parameter>subject</parameter> 
         constant &one;. Cette option a été ajoutée en &php; 4.3.0 .
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
     Le paramètre <parameter>flags</parameter> a été ajouté en 
     &php; 4.3.0 .
    </para>
    <para>
     Normalement, la recherche commence au début de la chaîne 
     <parameter>subject</parameter>. Le paramètre optionnel
     <parameter>offset</parameter> peut être utilisé pour spécifier
     une position pour le début de la recherche. 
     Le paramètre <parameter>offset</parameter> a été introduit
     depuis la version 4.3.3 de &php;.
    </para>
    <note>
     <para>
      Utiliser le paramètre <parameter>offset</parameter> ne revient pas
      à passer <literal>substr($subject, $offset)</literal> à 
      <function>preg_match_all</function> à la place de la chaîne 
      <parameter>subject</parameter>, car 
      <parameter>pattern</parameter> peut contenir des assertions comme
      <emphasis>^</emphasis>, <emphasis>$</emphasis> ou
      <emphasis>(?&lt;=x)</emphasis>. Lisez la documentation 
      sur la fonction <function>preg_match</function> pour des exemples. 
      Comparez :
     </para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
print_r($matches);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
)
]]>
      </screen>
      <para>
       avec cet exemple :
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$subject = "abcdef";
$pattern = '/^def/';
preg_match($pattern, substr($subject,3), $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
?>
]]>
      </programlisting>
      <para>
       produira :
      </para>
      <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => def
            [1] => 0
        )

)
]]>
      </screen>
     </informalexample>
    </note>
    
    <para>
     <function>preg_match</function> retourne le nombre de fois où le
     masque <parameter>pattern</parameter> a été trouvé. Cela peut aller de
     0 (pas de solution) à un 1 car <function>preg_match</function> s'arrête
     dès qu'elle a trouvé une première solution. <function>preg_match_all</function>,
     au contraire, va continuer jusqu'à la fin de la chaîne <parameter>subject</parameter>.
     <function>preg_match</function> retourne &false; si une erreur survient.
    </para>
    <tip>
     <para>
      N'utilisez pas <function>preg_match</function>  si vous voulez uniquement
      savoir si une chaîne est contenue dans une autre.
      Utilisez dans ce cas les fonctions 
      <function>strpos</function> ou <function>strstr</function>,
      qui sont beaucoup plus rapides.
     </para>
    </tip>
    <para>
     <example>
      <title>Trouve la chaîne "php"</title>
      <programlisting role="php">
<![CDATA[
<?php
// Le "i" après le délimiteur du pattern indique que la recherche ne sera pas sensible à la casse
if (preg_match("/php/i", "PHP est le meilleur langage de script du web.")) {
    echo 'Un résultat a été trouvé.';
} else {
    echo 'Aucun résultat n\'a été trouvé.';
}
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Trouve le mot "web"</title>
      <programlisting role="php">
<![CDATA[
<?php
/* \b, dans le masque, indique une limite de mot, de façon à ce que le mot
 "web" uniquement soit repéré, et pas seulement des parties de mots comme
  dans "webbing" ou "cobweb" */
if (preg_match("/\bweb\b/i", "PHP est le meilleur langage de script du web.")) {
     echo 'Un mot a été trouvé.';
} else {
     echo 'Un mot n\'a pas été trouvé.';
}

if (preg_match("/\bweb\b/i", "PHP est le meilleur langage de script pour les webagency.")) {
     echo 'Un mot a été trouvé.';
} else {
     echo 'Un mot n\'a pas été trouvé.';
}
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Lire un nom de domaine dans une URL</title>
      <programlisting role="php">
<![CDATA[
<?php
// repérer le nom de l'hôte dans l'URL
preg_match("/^(http:\/\/)?([^\/]+)/i", 
    "http://www.php.net/index.html", $matches);
$host = $matches[2];

// repérer les deux derniers segments du nom de l'hôte
preg_match("/[^\.\/]+\.[^\.\/]+$/", $host, $matches);
echo "Le nom de domaine est : ".$matches[0]."\n";
?>
]]>
      </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Le nom de domaine est : php.net
]]>
     </screen>
     </example>
    </para>
    <para>
     Voir aussi
     <function>preg_match_all</function>,
     <function>preg_replace</function> et
     <function>preg_split</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
