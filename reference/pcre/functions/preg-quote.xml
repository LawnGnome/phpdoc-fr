<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.15 $ -->
<!-- EN-Revision: 1.10 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry id="function.preg-quote">
 <refnamediv>
  <refname>preg_quote</refname>
  <refpurpose>Échappement des caractères spéciaux des expressions rationnelles</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>preg_quote</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
  <methodparam choice="opt"><type>string</type><parameter>delimiter</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>preg_quote</function> ajoute un anti-slash devant tous
   les caractères de la chaîne <parameter>str</parameter>.
   Cela est très utile si vous avez une chaîne qui va
   servir de masque, mais qui est générée durant
   l'exécution.
  </para>
  <para>
   Les caractères spéciaux qui seront échappés :
   <literal>. \ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | :</literal>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       La chaîne d'entrée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>delimiter</parameter></term>
     <listitem>
      <para>
       Si l'argument optionnel <parameter>delimiter</parameter> est fourni,
       il sera aussi échappé. Ceci est pratique pour échapper
       le délimiteur requis par les fonctions PCRE. Le slash / est le
       délimiteur le plus répandu.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la chaîne échappée.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>preg_quote</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$keywords = '$40 pour un g3/400';
$keywords = preg_quote($keywords, '/');
echo $keywords; // retourne \$40 pour un g3\/400
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Mise en italique d'un mot dans un texte</title>
    <programlisting role="php">
<![CDATA[
<?php
// Dans cet exemple, preg_quote($word) sert à éviter que les astérisques
// prennent une valeur particulière dans l'expression rationnelle.

$textbody = "Ce livre est *très* difficile à trouver.";
$word = "*très*";
$textbody = preg_replace ("/" . preg_quote($word) . "/",
                          "<i>" . $word . "</i>",
                          $textbody);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->