<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.17 $ -->
<!-- EN-Revision: 1.18 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.preg-replace-callback" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>Rechercher et remplacer par expression rationnelle standard en utilisant une fonction de callback</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace_callback</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   Le comportement de <function>preg_replace_callback</function> est presque
   identique à celui de <function>preg_replace</function>, hormis le fait
   qu'à la place du paramètre <parameter>replacement</parameter>, il faut
   spécifier une fonction de callback <parameter>callback</parameter>
   qui sera appelée, avec les éléments trouvés en arguments.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       Le masque à chercher. Il peut être une &string; ou un tableau contenant
       des chaînes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Une fonction de callback qui sera appelé et passerz un tableau d'éléments
       correspondants trouvés dans la chaîne <parameter>subject</parameter>.
       La fonction de callback doit retourner la chaîne de remplacement.
      </para>
      <para>
       Vous aurez souvent besoin de la fonction <parameter>callback</parameter>
       avec <function>preg_replace_callback</function> à un seul endroit.
       Dans ce cas, vous pouvez simplement utiliser la fonction
       <function>create_function</function> pour déclarer une fonction anonyme
       comme fonction de callback pour <function>preg_replace_callback</function>.
       En faisant cela, vous concentrez toutes les routines liées à
       votre remplacement à un seul endroit, et nous ne polluez par
       votre espace de noms de fonctions avec des fonctions à usage unique.
      </para>
      <para>
       <example>
        <title><function>preg_replace_callback</function> et
        <function>create_function</function></title>
        <programlisting role="php">
<![CDATA[
<?php
// Un filtre de ligne de commande Unix pour convertir les lettres
// en majuscule de début des paragraphe en minuscules

$fp = fopen("php://stdin", "r") or die("Impossible de lire la ligne de commande");
while (!feof($fp)) {
    $line = fgets($fp);
    $line = preg_replace_callback(
        '|<p>\s*\w|',
        create_function(
            // Les guillemets simples sont très importants ici
            // ou bien il faut protéger les caractères $ avec \$
            '$matches',
            'return strtolower($matches[0]);'
        ),
        $line
    );
    echo $line;
}
fclose($fp);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       La chaîne ou le tableau de chaînes à chercher et à remplacer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       Le nombre maximal de remplacement pour chaque masque
       dans chaque chaîne <parameter>subject</parameter>.
       Vaut par défaut <literal>-1</literal> (aucune limite).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       Si fournie, cette variable sera remplie avec le nombre de remplacements effectués.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace_callback</function> retourne un tableau si le paramètre
   <parameter>subject</parameter> est un tableau, ou, sinon, une &string;.
  </para>
  <para>
   Si des correspondances sont trouvées, le nouveau sujet sera retourné, sinon
   <parameter>subject</parameter> sera retourné, inchangé.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Le paramètre <parameter>count</parameter> a été ajouté.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>preg_replace_callback</function></title>
    <programlisting role='php'>
<![CDATA[
<?php
// Ce texte était vrai en 2002
// nous voulons le mettre a jour pour 2003
$text = "Le premier avril est le 04/01/2002\n";
$text.= "Le dernier noël était le 12/24/2001\n";

// Fonction de callback
function next_year($matches)
{
  // comme d'habitude : $matches[0] représente la valeur totale
  // $matches[1] représente la première parenthèse capturante
  return $matches[1].($matches[2]+1);
}
echo preg_replace_callback(
            "|(\d{2}/\d{2}/)(\d{4})|",
            "next_year",
            $text);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Le premier avril est le 04/01/2003
Le dernier noël était le 12/24/2002
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <function>preg_replace_callback</function> en utilisant une structure récursive
     pour gérer du BB code</title>
    <programlisting role="php">
<![CDATA[
<?php
$input = "plain [indent] deep [indent] deeper [/indent] deep [/indent] plain";

function parseTagsRecursive($input)
{

    $regex = '#\[indent]((?:[^[]|\[(?!/?indent])|(?R))+)\[/indent]#';

    if (is_array($input)) {
        $input = '<div style="margin-left: 10px">'.$input[1].'</div>';
    }

    return preg_replace_callback($regex, 'parseTagsRecursive', $input);
}

$output = parseTagsRecursive($input);

echo $output;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_replace</function></member>
    <member><function>create_function</function></member>
    <member>&seealso.callback;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->