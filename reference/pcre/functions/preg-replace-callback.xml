<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.13 $ -->
<!-- EN-Revision: 1.12 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry id="function.preg-replace-callback">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>
   Rechercher/remplacer avec une expression rationnelle et fonction de callback
  </refpurpose>
 </refnamediv>
 <refsect1>
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace_callback</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   Le comportement de <function>preg_replace_callback</function> est presque
   identique à celui de <function>preg_replace</function>, hormis le fait
   qu'à la place du paramètre <parameter>replacement</parameter>, il faut
   spécifier une fonction de callback <parameter>callback</parameter>
   qui sera appelée, avec les éléments trouvés en arguments.
   Cette fonction retourne alors la chaîne de remplacement.
   Reportez-vous à la documentation sur la fonction <function>preg_replace</function>
   pour une description des autres paramètres.
  </para>
  <para>
   <example>
    <title>Exemple avec <function>preg_replace_callback</function></title>
    <programlisting role='php'>
<![CDATA[
<?php
// Ce texte était vrai en 2002
// nous voulons le mettre a jour pour 2003
$text = "Le premier avril est le 01/04/2002\n";
$text.= "Le dernier no&Icirc;l était le 25/12/2001\n";

// Fonction de callback
function next_year($matches) 
{
  // comme d'habitude : $matches[0] représente la valeur totale
  // $matches[1] représente la première parenthèse capturante
  return $matches[1].($matches[2]+1);
}

echo preg_replace_callback(
            "|(\d{2}/\d{2}/)(\d{4})|",
            "next_year",
            $text);

// retourne ceci :
// Le premier avril est le 01/04/2003
// Le dernier no&Icirc;l était le 25/12/2002
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Vous aurez souvent besoin de la fonction <parameter>callback</parameter> 
   avec <function>preg_replace_callback</function> à un seul endroit.
   Dans ce cas, vous pouvez simplement utiliser la fonction 
   <function>create_function</function> pour déclarer une fonction anonyme
   comme fonction de callback pour <function>preg_replace_callback</function>. 
   En faisant cela, vous concentrez toutes les routines liées à
   votre remplacement à un seul endroit, et nous ne polluez par
   votre espace de noms de fonctions avec des fonctions à usage unique.
  </para>
  <para>
   <example>
    <title>
     Exemples avec <function>preg_replace_callback</function> et 
     <function>create_function</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
// Un filtre de ligne de commande Unix pour convertir les lettres
// en majuscule de début des paragraphe en minuscules

$fp = fopen("php://stdin", "r") or die("Impossible de lire la ligne de commande");
while (!feof($fp)) {
    $line = fgets($fp);
    $line = preg_replace_callback(
        '|<p>\s*\w|', 
         create_function(
            // Les guillemets simples sont très importants ici
            // ou bien il faut protéger les caractères $ avec \$
            '$matches',
            'return strtolower($matches[0]);'
         ),
         $line
     );
     echo $line;
 }
 fclose($fp);
 ?>
 ]]>
    </programlisting>
   </example>
  </para>
  <para>
   Voir aussi
   <function>preg_replace</function>,
   <function>create_function</function>,
   &listendand; &seealso.callback;.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->