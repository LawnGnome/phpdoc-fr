<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.19 $ -->
<!-- EN-Revision: 1.16 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<refentry id="function.preg-replace">
 <refnamediv>
  <refname>preg_replace</refname>
  <refpurpose>Rechercher et remplacer par expression rationnelle standard</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>replacement</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>preg_replace</function> analyse <parameter>subject</parameter>
   pour trouver l'expression rationnelle <parameter>pattern</parameter> et remplace les
   résultats par <parameter>replacement</parameter>.
  </para>
  <para>
   <parameter>replacement</parameter> peut contenir des références
   de la forme <literal>\\<replaceable>n</replaceable></literal> ou,
   (depuis &php; 4.0.4) <literal><replaceable>$n</replaceable></literal>.
   Cette dernière forme est recommandée. Ces références seront remplacées 
   par le texte capturé par la <replaceable>n</replaceable>-ième parenthèse 
   capturante du masque. <replaceable>n</replaceable> peut prendre des 
   valeurs de 0 à 99, et <literal>\\0</literal> ou <literal>$0</literal>, 
   correspondent au texte de qui satisfait le masque complet. Les parenthèses
   ouvrantes sont comptées de gauche à droite (en commençant à 1) pour 
   déterminer le numéro de parenthèse capturante.
  </para>
  <para>
   Lorsque vous travaillez avec un masque de remplacement où une référence arrière 
   est directement suivie par un nombre (i.e.: placer un nombre littéral immédiatement
   après une référence arrière), vous ne pouvez pas utiliser la syntaxe classique
   <literal>\\1</literal> pour la référence arrière. <literal>\\11</literal>, par exemple,
   sera confus pour la fonction <function>preg_replace</function> dans le sens où
   elle ne saura pas si vous désirez la référence arrière <literal>\\1</literal> suivi du nombre
   &one; ou si vous désirez la référence arrière <literal>\\11</literal>
   suivi de "rien". Dans ce cas, la solution est d'utiliser la syntaxe <literal>\${1}1</literal>.
   Cela créera une référence arrière isolée <literal>$1</literal>, suivi du nombre
   litéral &one;.
  </para>
  <para>
   Si <parameter>subject</parameter> est un tableau, alors l'opération
   sera appliquée à chacun des éléments du tableau, et le tableau sera retourné.
  </para>
  <para>
   <literal>e</literal> force <function>preg_replace</function>
   à traiter <parameter>replacement</parameter> comme du
   code &php; une fois que les substitutions adéquates ont
   été faites. Conseil : assurez-vous que
   <parameter>replacement</parameter> est un code &php; valide, car sinon, &php;
   trouvera une erreur d'analyse dans la ligne contenant la fonction 
   <function>preg_replace</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       Le masque à chercher. ll peut être soit une chaîne, soit un tableau de chaîne
       de caractères.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>replacement</parameter></term>
     <listitem>
      <para>
       La chaîne ou un tableau de chaînes pour le remplacement.
       Si ce paramètre est une chaîne et le paramètre <parameter>pattern</parameter>
       est un tableau, tous les masques seront remplacés par cette chaîne.
       Si les paramètres <parameter>pattern</parameter> et 
       <parameter>replacement</parameter> sont des tableaux, chaque
       <parameter>pattern</parameter> sera remplacé son
       <parameter>replacement</parameter> associé.
       Si <parameter>replacement</parameter> à moins d'éléments
       que <parameter>pattern</parameter>, alors une chaîne vide est
       utilisée pour le reste des valeurs.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       La chaîne ou le tableau de chaînes à chercher et à remplacer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       Le nombre maxmal de remplacement pour chaque masque
       dans chaque chaîne <parameter>subject</parameter>.
       Par défaut, vaut <literal>-1</literal> (aucune limite).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       Si spécifié, cete variable contiendra le nombre de remplacements
       effectués.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace</function> retourne un tableau si le paramètre
   <parameter>subject</parameter> est un tableau, ou une chaîne sinon.
  </para>
  <para>
   Si des correspondances sont trouvées, le nouveau 
   <parameter>subject</parameter> sera retourné, sinon
   <parameter>subject</parameter> sera retourné à l'identique.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.1pl2</entry>
       <entry>
        Ajout du paramètre <parameter>limit</parameter>
       </entry>
      </row>
      <row>
       <entry>4.0.4</entry>
       <entry>
        Ajout de la forme '$n' pour le paramètre <parameter>replacement</parameter>
       </entry>
      </row>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Ajout du paramètre <parameter>count</parameter>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Convertit du HTML en texte</title>
    <programlisting role="php">
<![CDATA[
<?php
// $document contient un document HTML
// Ce script va effacer les balises HTML, les javascript
// et les espaces. Il remplace aussi quelques entités HTML
// courante en leur équivalent texte.

$search = array ('@<script[^>]*?>.*?</script>@si', // Supprime le javascript
                 '@<[\/\!]*?[^<>]*?>@si',          // Supprime les balises HTML
                 '@([\r\n])[\s]+@',                // Supprime les espaces
                 '@&(quot|#34);@i',                // Remplace les entités HTML
                 '@&(amp|#38);@i',
                 '@&(lt|#60);@i',
                 '@&(gt|#62);@i',
                 '@&(nbsp|#160);@i',
                 '@&(iexcl|#161);@i',
                 '@&(cent|#162);@i',
                 '@&(pound|#163);@i',
                 '@&(copy|#169);@i',
                 '@&#(\d+);@e');                    // Evaluation comme PHP

$replace = array ('',
                 '',
                 '\1',
                 '"',
                 '&',
                 '<',
                  '>',
               ' ',
               chr(161),
               chr(162),
               chr(163),
               chr(169),
               'chr(\1)');

$text = preg_replace($search, $replace, $document);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Utilisation des références arrières avec des littéraux numériques</title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'April 15, 2003';
$pattern = '/(\w+) (\d+), (\d+)/i';
$replacement = '${1}1,$3';
echo preg_replace($pattern, $replacement, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
April1,2003
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Utilisation de tableaux indexé avec <function>preg_replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$string = 'Le renard marron agile saute par dessus le chien paresseux.';
$patterns[0] = '/agile/';
$patterns[1] = '/marron/';
$patterns[2] = '/renard/';
$replacements[2] = 'grizzly';
$replacements[1] = 'brun';
$replacements[0] = 'lent';
echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Le grizzly brun lent saute par dessus le chien paresseux.
]]>
    </screen>
    <para>
     En triant les masques et les remplacements, vous devriez obtenir le résultat escompté.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
ksort($patterns);
ksort($replacements);
echo preg_replace($patterns, $replacements, $string);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Le lent grizzly brun saute par dessus le chien paresseux.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Remplacement de plusieurs valeurs simultanément</title>
    <programlisting role="php">
<![CDATA[
<?php
$patterns = array ('/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/',
                   '/^\s*{(\w+)}\s*=/');
$replace = array ('\3/\4/\1\2', '$\1 =');
echo preg_replace($patterns, $replace, '{startDate} = 1999-5-27');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$startDate = 5/27/1999
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Utilisation de l'option 'e' </title>
    <programlisting role="php">
<![CDATA[
<?php
preg_replace("/(<\/?)(\w+)([^>]*>)/e", 
              "'\\1'.strtoupper('\\2').'\\3'",
              $html_body);
 ?>
 ]]>
    </programlisting>
    <para>
     Cela va mettre en majuscule toutes les balises HTML du texte.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>Suppression des espaces</title>
    <para>
     Cet exemple supprime les espaces en trop dans une chaîne.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'foo   o';
$str = preg_replace('/\s\s+/', ' ', $str);

// Affichera 'foo o'
echo $str;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Utilisation du paramètre <parameter>count</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
$count = 0;

echo preg_replace(array('/\d/', '/\s/'), '*', 'xp 4 to', -1 , $count);
echo $count; //3
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
xp***to
3
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Lorsque vous utilisez des tableaux avec les paramètres
    <parameter>pattern</parameter> et
    <parameter>replacement</parameter>, les clés sont traitées
    dans l'ordre dans lequel elles apparaissent dans le tableau.
    Ce <emphasis>n'est pas forcément</emphasis> la même chose que
    l'ordre des index numériques. Si vous utilisez des index pour
    identifier quel <parameter>pattern</parameter> doit être
    replacé par quel <parameter>replacement</parameter>, il est
    recommandé de faire un tri <function>ksort</function> sur chaque
    tableau avant de faire appel à
    <function>preg_replace</function>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_match</function></member>
    <member><function>preg_replace_callback</function></member>
    <member><function>preg_split</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
