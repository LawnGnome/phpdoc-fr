<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/pcre.xml, last change in rev 1.3 -->
<!-- last change to 'preg-replace' in en/ tree in rev 1.2 -->
  <refentry id="function.preg-replace">
   <refnamediv>
    <refname>preg_replace</refname>
    <refpurpose>
      Rechercher et remplacer par expression r&eacute;guli&egrave;re standard
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>mixed</type><methodname>preg_replace</methodname>
      <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>replacement</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
     </methodsynopsis>
    <para>
      <function>preg_replace</function> analyse <parameter>subject</parameter>
      pour trouver l'expression <parameter>pattern</parameter> et remplace les
      r&eacute;sultats par <parameter>replacement</parameter>.
    </para>
    <para>
     <parameter>replacement</parameter> peut contenir des r&eacute;f&eacute;rences
     de la forme <literal>&#92;&#92;<replaceable>n</replaceable></literal> ou,
     depuis PHP 4.0.4) <literal><replaceable>$n</replaceable></literal>.
     Cette derni&egrave;re forme est recommand&eacute;e. Ces
     r&eacute;f&eacute;rences seront remplac&eacute;es par le texte captur&eacute;
     par la <replaceable>n</replaceable>'-i&egrave;me parenth&egrave;se capturante
     du masque. <replaceable>n</replaceable> peut prendre des valeurs de 0 &agrave;
     99, et <literal>&#92;&#92;0</literal> ou <literal>$0</literal>, correspondent
     au texte de qui satisfait le masque complet. Les parenth&egrave;ses
     ouvrantes sont compt&eacute;es de gauche &agrave; droite (en commen&ccedil;ant
     &agrave; 1) pour d&eacute;terminer le num&eacute;ro de parenth&egrave;se
     capturante.
    </para>
     <example>
      <title>Utilisation des r&eacute;f&eacute;rences arri&egrave;res avec des litt&eacute;raux num&eacute;riques</title>
      <programlisting role="php">
<![CDATA[
<?php
$string = "Avril 05, 2003";
$pattern = "/(\w+) (\d+), (\d+)/i";
$replacement = "\${1}1,\$3";
print preg_replace($pattern, $replacement, $string);

/* Output
   ======

Avril1,2003

 */
?>
]]>
      </programlisting>
     </example>
    <para>
      Si la recherche n'aboutit &agrave; aucun r&eacute;sultat,
      <parameter>subject</parameter> sera inchang&eacute;.
    </para>
    <para>
      Tous les param&egrave;tres de <function>preg_replace</function>
      peuvent &ecirc;tre des tableaux.
    </para>
    <para>
     <note>
      <para>
       Lorsque vous utilisez des tableaux avec les param&egrave;tres
       <parameter>pattern</parameter> et
       <parameter>replacement</parameter>, les cl&eacute;s sont trait&eacute;es
       dans l'ordre dans lequel elles apparaissent dans le tableau.
       Ce <emphasis>n'est pas forc&eacute;ment</emphasis> la m&ecirc;me chose que
       l'ordre des index num&eacute;rique. Si vous utilisez des index pour
       identifier quel <parameter>pattern</parameter> doit &ecirc;tre
       replac&eacute;e par quel <parameter>replacement</parameter>, il est
       recommand&eacute; de faire un tri <function>ksort</function> sur chaque
       tableau avant de faire appel &agrave; 
       <function>preg_replace</function>.
      </para>
     </note>
     <example>
      <title>Utilisation de tableaux index&eacute; avec <function>preg_replace</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$string = "The quick brown fox jumped over the lazy dog.";

$patterns[0] = "/quick/";
$patterns[1] = "/brown/";
$patterns[2] = "/fox/";

$replacements[2] = "bear";
$replacements[1] = "black";
$replacements[0] = "slow";

print preg_replace($patterns, $replacements, $string);

/* Output
   ======

The bear black slow jumped over the lazy dog.

*/

/* By ksorting patterns and replacements,
   we should get what we wanted. */

ksort($patterns);
ksort($replacements);

print preg_replace($patterns, $replacements, $string);

/* Output
   ======

The slow black bear jumped over the lazy dog.

*/

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
      Si <parameter>subject</parameter> est un tableau, alors l'op&eacute;ration
      sera appliqu&eacute;e &agrave; chacun des &eacute;l&eacute;ments du
      tableau, et le tableau sera retourn&eacute;.
    </para>
    <para>
      Si <parameter>pattern</parameter> et <parameter>replacement</parameter>
      sont des tableaux, alors <function>preg_replace</function> prend une valeur
      de chaque tableau, et l'utilise pour faire la recherche et le remplacement.
      Si <parameter>replacement</parameter> &agrave; moins d'&eacute;l&eacute;ments
      que <parameter>pattern</parameter>, alors la cha&icirc;ne vide est
      utilis&eacute; pour le reste des valeurs. Si <parameter>pattern</parameter>
      est un tableau, et que <parameter>replacement</parameter> est une
      cha&icirc;ne, alors cette cha&icirc;ne sera utilis&eacute;e pour
      chaque valeur de <parameter>pattern</parameter>.
      Le contraire n'aurait pas de sens.
   </para>
    <para>
      <literal>/e</literal> force <function>preg_replace</function>
      &agrave; traiter <parameter>replacement</parameter> comme du
      code PHP une fois que les substitutions ad&eacute;quates ont
      &eacute;t&eacute; faites. Conseil :assurez-vous que
      <parameter>replacement</parameter> est un code PHP valide, car sinon, PHP
      trouvera une erreur d'analyse (parse error) dans cette ligne.
    </para>
    <para>
     <literal>/F</literal> indique que le param&egrave;tre
     <parameter>replacement</parameter> doit &ecirc;tre consid&eacute;r&eacute;
     comme un nom de fonction. Cette fonction sera appel&eacute;e, avec un
     tableau contenant les &eacute;l&eacute;ments trouv&eacute;s comme
     arguments. La fonction doit retourner la cha&icirc;ne de remplacement. Cette option
     a &eacute;t&eacute; ajout&eacute;e en PHP 4.0.4.
    </para>
    <para>
     <example>
      <title>Remplacement de plusieurs valeurs simultan&eacute;ment</title>
      <programlisting role="php">
<![CDATA[
<?php
$patterns = array ("/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/",
                   "/^\s*{(\w+)}\s*=/");
$replace = array ("\\3/\\4/\\1\\2", "$\\1 =");
print preg_replace ($patterns, $replace, "{startDate} = 1999-5-27");
?>
]]>
      </programlisting>
     </example>
    Cet exemple va afficher :
     <programlisting>
<![CDATA[
$startDate = 5/27/1999
]]>
     </programlisting>
     <example>
      <title>Utilisation de l'option /e </title>
      <programlisting role="php">
<![CDATA[
<?php
  preg_replace("/(<\/?)(\w+)([^>]*>/e", "'\\1'.strtoupper('\\2').'\\3'", $html_body);
?>
]]>
      </programlisting>
      <para>
       Cela va mettre en majuscule toutes les balises HTML du texte.
      </para>
     </example>
     <example>
      <title>Conversion HTML en texte</title>
      <programlisting role="php">
<![CDATA[
<?php
// $document contient un document HTML
// Ce script va effacer les balises HTML, les javascript
// et les espaces. Il remplace aussi quelques entit&eacute;s HTML
// courante en leur &eacute;quivalent texte.
$search = array ("'<script[?>]*?>.*?</script>'si",  // Supprime le javascript
                 "'<[\/\!]*?[^<?>]*?>'si",  // Supprime les balises HTML
                 "'([\r\n])[\s]+'",  // Supprime les espaces
                 "'&(quot|#34);'i",  // Supprime les entites HTML
                 "'&(amp|#38);'i",
                 "'&(lt|#60);'i",
                 "'&(gt|#62);'i",
                 "'&(nbsp|#160);'i",
                 "'&(iexcl|#161);'i",
                 "'&(cent|#162);'i",
                 "'&(pound|#163);'i",
                 "'&(copy|#169);'i",
                 "'&#(\d+);'e");  // Evaluation comme PHP
$replace = array ("",
                  "",
                  "\\1",
                  "\"",
                  "&",
                  "<",
                  ?>",
                  " ",
                  chr(161),
                  chr(162),
                  chr(163),
                  chr(169),
                  "chr(\\1)");
$text = preg_replace ($search, $replace, $document);
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Le param&egrave;tre <parameter>limit</parameter> a &eacute;t&eacute; ajout&eacute;
      &agrave; partir de PHP 4.0.1pl2.
     </para>
    </note>
    <para>
     Voir aussi
     <function>preg_match</function>,
     <function>preg_match_all</function> et
     <function>preg_split</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
