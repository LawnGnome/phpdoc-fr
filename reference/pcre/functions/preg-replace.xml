<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.15 $ -->
<!-- EN-Revision: 1.13 Maintainer: yannick Status: ready -->
  <refentry id="function.preg-replace">
   <refnamediv>
    <refname>preg_replace</refname>
    <refpurpose>
      Rechercher et remplacer par expression rationnelle standard
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
     <methodsynopsis>
      <type>mixed</type><methodname>preg_replace</methodname>
      <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>replacement</parameter></methodparam>
      <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>preg_replace</function> analyse <parameter>subject</parameter>
     pour trouver l'expression rationnelle <parameter>pattern</parameter> et remplace les
     résultats par <parameter>replacement</parameter>. Si
     <parameter>limit</parameter> est spécifié, alors uniquement 
     <parameter>limit</parameter> résultats seront remplacés; si
     <parameter>limit</parameter> est omis ou vaut -1, alors tous les résultats seront remplacés.
    </para>
    <para>
     <parameter>replacement</parameter> peut contenir des références
     de la forme <literal>\\<replaceable>n</replaceable></literal> ou,
     (depuis &php; 4.0.4) <literal><replaceable>$n</replaceable></literal>.
     Cette dernière forme est recommandée. Ces
     références seront remplacées par le texte capturé
     par la <replaceable>n</replaceable>-ième parenthèse capturante
     du masque. <replaceable>n</replaceable> peut prendre des valeurs de 0 à
     99, et <literal>\\0</literal> ou <literal>$0</literal>, correspondent
     au texte de qui satisfait le masque complet. Les parenthèses
     ouvrantes sont comptées de gauche à droite (en commençant
     à 1) pour déterminer le numéro de parenthèse
     capturante.
    </para>
    <para>
     Lorsque vous travaillez avec un pattern de remplacement où une référence arrière 
     est directement suivi par un nombre (i.e.: placer un nombre littéral immédiatement
     après une référence arrière), vous ne pouvez pas utiliser la syntaxe classique
     <literal>\\1</literal> pour la référence arrière. <literal>\\11</literal>, par exemple,
     sera confus pour la fonction <function>preg_replace</function> dans le sens où
     elle ne saura pas si vous désirez la référence arrière <literal>\\1</literal> suivi du nombre
     &one; ou si vous désirez la référence arrière <literal>\\11</literal>
     suivi de "rien". Dans ce cas, la solution est d'utiliser la syntaxe <literal>\${1}1</literal>.
     Cela créera une référence arrière isolée <literal>$1</literal>, suivi du nombre
     litéral &one;.
    </para>
    <para>
     <example>
      <title>Utilisation des références arrières avec des littéraux numériques</title>
      <programlisting role="php">
<![CDATA[
<?php
$string = "April 15, 2003";
$pattern = "/(\w+) (\d+), (\d+)/i";
$replacement = "\${1}1,\$3";
echo preg_replace($pattern, $replacement, $string);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
April1,2003
]]>
      </screen>
     </example>
    </para>
    <para>
     Si la recherche n'aboutit à aucun résultat,
     <parameter>subject</parameter> sera inchangé.
    </para>
    <para>
     Tous les paramètres de <function>preg_replace</function>, excepté
     la paramètre <parameter>limit</parameter>,
     peuvent être des tableaux.
     Lorsque vous utilisez des tableaux avec les paramètres
     <parameter>pattern</parameter> et
     <parameter>replacement</parameter>, les clés sont traitées
     dans l'ordre dans lesquelles elles apparaissent dans le tableau.
     Ce <emphasis>n'est pas forcément</emphasis> la même chose que
     l'ordre des index numérique. Si vous utilisez des index pour
     identifier quel <parameter>pattern</parameter> doit être
     replacée par quel <parameter>replacement</parameter>, il est
     recommandé de faire un tri <function>ksort</function> sur chaque
     tableau avant de faire appel à 
     <function>preg_replace</function>.
    </para>
    <para>
     <example>
      <title>Utilisation de tableaux indexé avec <function>preg_replace</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$string = "The quick brown fox jumped over the lazy dog.";

$patterns[0] = "/quick/";
$patterns[1] = "/brown/";
$patterns[2] = "/fox/";

$replacements[2] = "bear";
$replacements[1] = "black";
$replacements[0] = "slow";

echo preg_replace($patterns, $replacements, $string);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
The bear black slow jumped over the lazy dog.
]]>
      </screen>
      <para>
       En triant les pattern et les remplacements, vous devriez obtenir le résultat escompté.
      </para>
      <programlisting role="php">
<![CDATA[
<?php

ksort($patterns);
ksort($replacements);

echo preg_replace($patterns, $replacements, $string);

?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
The slow black bear jumped over the lazy dog.
]]>
      </screen>
     </example>
    </para>
    <para>
      Si <parameter>subject</parameter> est un tableau, alors l'opération
      sera appliquée à chacun des éléments du
      tableau, et le tableau sera retourné.
    </para>
    <para>
     Si <parameter>pattern</parameter> et <parameter>replacement</parameter>
     sont des tableaux, alors <function>preg_replace</function> prend une valeur
     de chaque tableau, et l'utilise pour faire la recherche et le remplacement.
     Si <parameter>replacement</parameter> à moins d'éléments
     que <parameter>pattern</parameter>, alors la chaîne vide est
     utilisé pour le reste des valeurs. Si <parameter>pattern</parameter>
     est un tableau, et que <parameter>replacement</parameter> est une
     chaîne, alors cette chaîne sera utilisée pour
     chaque valeur de <parameter>pattern</parameter>.
     Le contraire n'aurait pas de sens.
    </para>
    <para>
     <literal>/e</literal> force <function>preg_replace</function>
     à traiter <parameter>replacement</parameter> comme du
     code &php; une fois que les substitutions adéquates ont
     été faîtes. Conseil : assurez-vous que
     <parameter>replacement</parameter> est un code &php; valide, car sinon, &php;
     trouvera une erreur d'analyse dans cette ligne.
    </para>
    <para>
     <literal>/F</literal> indique que le paramètre
     <parameter>replacement</parameter> doit être considéré
     comme un nom de fonction. Cette fonction sera appelée, avec un
     tableau contenant les éléments trouvés comme
     arguments. La fonction doit retourner la chaîne de remplacement. Cette option
     a été ajoutée en &php; 4.0.4.
    </para>
    <para>
     <example>
      <title>Remplacement de plusieurs valeurs simultanément</title>
      <programlisting role="php">
<![CDATA[
<?php
$patterns = array ("/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/",
                   "/^\s*{(\w+)}\s*=/");
$replace = array ("\\3/\\4/\\1\\2", "$\\1 =");
echo preg_replace($patterns, $replace, "{startDate} = 1999-5-27");
?>
]]>
      </programlisting>
    &example.outputs;
      <screen>
<![CDATA[
$startDate = 5/27/1999
]]>
      </screen>
     </example>
     </para>
     <para>
     <example>
      <title>Utilisation de l'option /e </title>
      <programlisting role="php">
<![CDATA[
<?php
preg_replace("/(<\/?)(\w+)([^>]*>)/e", 
              "'\\1'.strtoupper('\\2').'\\3'", 
              $html_body);
?>
]]>
      </programlisting>
      <para>
       Cela va mettre en majuscule toutes les balises HTML du texte.
      </para>
     </example>
     </para>
     <para>
     <example>
      <title>Conversion HTML en texte</title>
      <programlisting role="php">
<![CDATA[
<?php
// $document contient un document HTML
// Ce script va effacer les balises HTML, les javascript
// et les espaces. Il remplace aussi quelques entités HTML
// courante en leur équivalent texte.

$search = array ("'<script[^>]*?>.*?</script>'si",  // Supprime le javascript
                 "'<[\/\!]*?[^<>]*?>'si",                           // Supprime les balises HTML
                 "'([\r\n])[\s]+'",                                      // Supprime les espaces
                 "'&(quot|#34);'i",                                    // Supprime les entites HTML
                 "'&(amp|#38);'i",
                 "'&(lt|#60);'i",
                 "'&(gt|#62);'i",
                 "'&(nbsp|#160);'i",
                 "'&(iexcl|#161);'i",
                 "'&(cent|#162);'i",
                 "'&(pound|#163);'i",
                 "'&(copy|#169);'i",
                 "'&#(\d+);'e");                                        // Evaluation comme PHP

$replace = array ("",
                  "",
                  "\\1",
                  "\"",
                  "&",
                  "<",
                  ">",
                  " ",
                  chr(161),
                  chr(162),
                  chr(163),
                  chr(169),
                  "chr(\\1)");

$text = preg_replace($search, $replace, $document);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Suppression des espaces</title>
      <para>
       Cet exemple supprime les espaces en trop dans une chaîne.
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$str = 'foo   o';
$str = preg_replace('/\s\s+/', ' ', $str);

// Affichera 'foo o'
echo $str;
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <para>
      Le paramètre <parameter>limit</parameter> a été ajouté
      à partir de &php; 4.0.1pl2.
     </para>
    </note>
    <para>
     Voir aussi
     <function>preg_match</function>,
     <function>preg_match_all</function> et
     <function>preg_split</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
