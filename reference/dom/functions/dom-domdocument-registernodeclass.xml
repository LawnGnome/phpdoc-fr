<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.2 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: yes -->

<refentry id="function.dom-domdocument-registernodeclass">
 <refnamediv>
  <refname>DOMDocument->registerNodeClass()</refname>
  <refpurpose>Enregistre la classe étendue utilisée pour créer un type de base de noeud</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>DOMDocument</classname></ooclass>
   <methodsynopsis>
    <type>bool</type><methodname>registerNodeClass</methodname>
    <methodparam><type>string</type><parameter>baseclass</parameter></methodparam>
    <methodparam><type>string</type><parameter>extendedclass</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>

  <para>
   Cette méthode vous permet d'enregistrer votre propre classe étendue DOM à utiliser
   ensuite dans l'extension DOM de &php;.
  </para>
  <para>
   Cette méthode ne fait pas partie du standard DOM.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>baseclass</parameter></term>
     <listitem>
      <para>
       La classe DOM qui vous voulez étendre. Vous pouvez trouver une liste
       de ces classes dans l'introduction du chapitre.
      </para>
      <para>
       Bien sûr, vous ne pouvez pas enregistrer une classe étendant DOMDocument
       mais vous pouvez toujours commencer votre document en instanciant
       votre propre classe étendue.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extendedclass</parameter></term>
     <listitem>
      <para>
       Le nom de votre classe étendue. Si la valeur &null; est fournie, toutes
       les classes enregistrées précédemment étendant
       <parameter>baseclass</parameter> seront supprimées.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ajout d'un nouvelle méthode à DOMElement</title>
    <programlisting role="php">
<![CDATA[
<?php

class myElement extends DOMElement {
   function appendElement($name) { 
      return $this->appendChild(new myElement($name));
   }
}

class myDocument extends DOMDocument {
   function setRoot($name) {
      return $this->appendChild(new myElement($name));
   }
}

$doc = new myDocument();
$doc->registerNodeClass('DOMElement', 'myElement');

// À partir d'ici, l'ajout d'un élément à un autre se fait en un seul appel !
$root = $doc->setRoot('root');
$child = $root->appendElement('child');
$child->setAttribute('foo', 'bar');

echo $doc->saveXML();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
<?xml version="1.0"?>
<root><child foo="bar"/></root>
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
