<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.7 Maintainer: didou Status: ready -->
  <refentry id="function.dom-domxpath-query">
   <refnamediv>
    <refname>DOMXPath->query</refname>
    <refpurpose>
     Evalue l'expression XPath donnée
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
    <classsynopsis>
     <ooclass><classname>DOMXPath</classname></ooclass>
     <methodsynopsis>
      <type>DOMNodeList</type>
      <methodname>query</methodname>
      <methodparam><type>string</type><parameter>expression</parameter></methodparam>
      <methodparam choice="opt"><type>DOMNode</type><parameter>contextnode</parameter></methodparam>      
     </methodsynopsis>
    </classsynopsis>
    <para>
     Retourne un objet <classname>DOMNodeList</classname> contenant tous les 
     noeuds qui correspondent à l'expression XPath <parameter>expression</parameter>. 
     Toute expression ne retournant pas de noeud retournera un 
     <classname>DOMNodeList</classname> vide.
    </para>
    <para>
     <example>
      <title>Récupération de toutes les livres anglais</title>
      <programlisting role="php">
<![CDATA[
<?php

$doc = new DOMDocument;

// Nous ne voulons pas nous tracasser avec les espaces blancs
$doc->preserveWhiteSpace = false;

$doc->Load('book.xml');

$xpath = new DOMXPath($doc);

// Nous commençons depuis l'élément racine
$query = '//book/chapter/para/informaltable/tgroup/tbody/row/entry[. = "en"]';

$entries = $xpath->query($query);

foreach ($entries as $entry) {
    echo "Nous avons trouvé {$entry->previousSibling->previousSibling->nodeValue}," .
         " par {$entry->previousSibling->nodeValue}\n";
}
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Nous avons trouvé The Grapes of Wrath, par John Steinbeck
Nous avons trouvé The Pearl, par John Steinbeck
]]>
      </screen>
     </example>
    </para>
    <para>
     Le paramètre optionnel <parameter>contextnode</parameter> peut être
     spécifié pour exécuter des requêtes relatives XPath. Par défaut, les requêtes sont
     relatives à l'élément racine. En sachant celà, nous pouvons réécrire notre
     exemple précédent comme celà :
    </para>
    <para>
     <example>
      <title>Utilisation du contexte du noeud</title>
      <programlisting role="php">
<![CDATA[
<?php

$doc = new DOMDocument;
$doc->preserveWhiteSpace = false;

$doc->Load('book.xml');

$xpath = new DOMXPath($doc);

$tbody = $doc->getElementsByTagName('tbody')->item(0);

// notre requête est relative au noeud tbody
$query = 'row/entry[. = "en"]';

$entries = $xpath->query($query, $tbody);

foreach ($entries as $entry) {
    echo "Nous avons trouvé {$entry->previousSibling->previousSibling->nodeValue}," .
         " par {$entry->previousSibling->nodeValue}\n";
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </refsect1>
 </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
