<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283806 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="domdocument.registernodeclass" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>DOMDocument::registerNodeClass</refname>
  <refpurpose>Enregistre la classe étendue utilisée pour créer un type de base de noeud</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>DOMDocument::registerNodeClass</methodname>
   <methodparam><type>string</type><parameter>baseclass</parameter></methodparam>
   <methodparam><type>string</type><parameter>extendedclass</parameter></methodparam>
  </methodsynopsis>

  <para>
   Cette méthode vous permet d'enregistrer votre propre classe étendue DOM à utiliser
   ensuite dans l'extension DOM de PHP.
  </para>
  <para>
   Cette méthode ne fait pas partie du standard DOM.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>baseclass</parameter></term>
     <listitem>
      <para>
       La classe DOM qui vous voulez étendre. Vous pouvez trouver une liste
       de ces classes dans l'<link linkend="book.dom">introduction du chapitre</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extendedclass</parameter></term>
     <listitem>
      <para>
       Le nom de votre classe étendue. Si la valeur &null; est fournie, toutes
       les classes enregistrées précédemment étendant
       <parameter>baseclass</parameter> seront supprimées.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PHP 5.2.2</entry>
       <entry>
        Avant la version 5.2.2, une classe <parameter>extendedclass</parameter>
        précédemment enregistrée devait être supprimées avant de pouvoir en enregistrer
        une nouvelle étendant la même classe <parameter>baseclass</parameter>.
       </entry>
      </row>
<!--
      <row>
       <entry>...</entry>
       <entry>
        ...
       </entry>
      </row>
-->
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ajout d'un nouvelle méthode à DOMElement</title>
    <programlisting role="php">
<![CDATA[
<?php

class myElement extends DOMElement {
   function appendElement($name) { 
      return $this->appendChild(new myElement($name));
   }
}

class myDocument extends DOMDocument {
   function setRoot($name) { 
      return $this->appendChild(new myElement($name));
   }
}

$doc = new myDocument();
$doc->registerNodeClass('DOMElement', 'myElement');

// À partir d'ici, l'ajout d'un élément à un autre se fait en un seul appel !
$root = $doc->setRoot('root');
$child = $root->appendElement('child');
$child->setAttribute('foo', 'bar');

echo $doc->saveXML();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
<?xml version="1.0"?>
<root><child foo="bar"/></root>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Récupération d'éléments sous la forme d'une classe personnalisée</title>
    <programlisting role="php">
<![CDATA[
<?php
class myElement extends DOMElement {
    public function __toString() {
        return $this->nodeValue;
    }
}

$doc = new DOMDocument;
$doc->loadXML("<root><element><child>Text dans un fils</child></element></root>");
$doc->registerNodeClass("DOMElement", "myElement");

$element = $doc->getElementsByTagName("child")->item(0);
var_dump(get_class($element));

// Et utilisons les avantages de la méthode __toString..
echo $element;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(9) "myElement"
Text dans un fils
]]>
    </screen>
   </example>

  </para>
  <para>
   <example>
    <title>Récupération du propriétaire du document</title>
    <para>
     Lors de l'instanciation d'un <classname>DOMDocument</classname>
     personnalisé, la propriété <varname>ownerDocument</varname> se réfère
     à la classe instanciée, signifiant qu'il n'est pas nécessaire (et en fait,
     par possible) d'utiliser
     <function>DOMDocument::registerNodeClass</function> avec
     <classname>DOMDocument</classname>
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class myDOMDocument extends DOMDocument {
}

class myOtherDOMDocument extends DOMDocument {
}

// Création d'un document myDOMDocument avec quelques fragments XML
$doc = new myDOMDocument;
$doc->loadXML("<root><element><child>texte dans un fils</child></element></root>");

$child = $doc->getElementsByTagName("child")->item(0);

// Le propriétaire courant du noeud est myDOMDocument
var_dump(get_class($child->ownerDocument));

// Importation d'un noeud depuis myDOMDocument
$newdoc = new myOtherDOMDocument;
$child = $newdoc->importNode($child);

// Le nouveau propriétaire du noeud a changé en myOtherDOMDocument
var_dump(get_class($child->ownerDocument));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(13) "myDOMDocument"
string(18) "myOtherDOMDocument"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
