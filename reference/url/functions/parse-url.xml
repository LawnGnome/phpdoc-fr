<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.13 Maintainer: yannick Status: ready -->

<refentry id="function.parse-url">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>Analyse une URL et retourne ses composants</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cette fonction analyse une URL et retourne un tableau associatif contenant
   tous les éléments présents dans l'URL.
  </para>
  <para>
   Cette fonction n'est <emphasis role="strong">pas</emphasis>
   faite pour valider l'URL fournie, elle ne fait que la découper en parties listées
   ci-dessous. Les URLs partielles sont également acceptées, la fonction
   <function>parse_url</function> fera de son mieux pour les analyser correctement.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       L'URL à analyser
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Pour les URLs vraiment mal formées, <function>parse_url</function> peut retourner
   &false; et émettre un <constant>E_WARNING</constant>. Sinon, un tableau associatif
   est retourné, dont les éléments peuvent être (au moins un) :
   <itemizedlist>
    <listitem>
     <simpara>
      <structfield>scheme</structfield> - e.g. http
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>host</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>port</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>user</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>pass</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>path</structfield>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>query</structfield> - après le marqueur de question <literal>?</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <structfield>fragment</structfield> - après la hachure <literal>#</literal>
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>parse_url</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$url = 'http://username:password@hostname/path?arg=value#anchor';

print_r(parse_url($url));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
     [scheme] => http
     [host] => hostname
     [user] => username
     [pass] => password
     [path] => /path
     [query] => arg=value
     [fragment] => anchor
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Cette fonction ne fonctionne pas avec les URLs relatives.
   </para>
  </note>
  <note>
   <para>
    <function>parse_url</function> a été créée tout spécialement pour analyser les URLs et non les URIs.
    Cependant, pour des raisons de compatibilité adjacentes, &php; fait une exception pour le schéma
    <literal>file://</literal> où les triples slashes (<literal>file:///</literal>...) sont autorisés.
    Tous les autres schémas sont invalides.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pathinfo</function></member>
    <member><function>parse_str</function></member>
    <member><function>dirname</function></member>
    <member><function>basename</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->