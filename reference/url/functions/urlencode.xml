<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.7 Maintainer: yannick Status: ready -->
  <refentry id="function.urlencode">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose>Encode une chaîne en URL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>string</type><methodname>urlencode</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>urlencode</function> retourne une chaîne dont les
     caractères non alpha-numériques (hormis <literal>-_.</literal>)
     sont remplacés par des séquences commençant
     par un caractère pourcentage (<literal>%</literal>),
     suivi de deux chiffres hexadécimaux. Les espaces sont
     remplacés par des signes plus (<literal>+</literal>).
     Ce codage est celui qui est utilisé pour poster des
     informations dans les formulaires HTML. Le type MIME est
     <literal>application/x-www-form-urlencoded</literal>.
     Ce codage est différent de celui spécifié
     dans la RFC 1738 (voir <function>rawurlencode</function>) : pour
     des raisons historiques, les espaces sont remplacés par
     des signes plus (<literal>+</literal>). <function>urlencode</function>
     est pratique pour transmettre des informations via une URL.
     C'est aussi un moyen de passer des informations d'une
     page à l'autre.
     <example>
      <title>Exemple avec <function>urlencode</function></title>
      <programlisting role="php">
<![CDATA[
<?php
  echo '<a href="moncgi?foo=', urlencode ($userinput), '">';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Note: Faites bien attention aux variables qui ressemblent à
     des entités HTML, comme &amp;amp, &amp;copy et &amp;pound,
     qui sont analysées par le client web et remplacée par leur
     valeur. C'est un vrai problème qui a été montré par le W3C
     depuis longtemps. La référence est ici :
     <ulink url="&url.argsep;">&url.argsep;</ulink>.
     &php; supporte le remplacement de séparateur d'arguments par un
     point-virgule, comme recommandé par le W3C, grâce à
     la directive <option>arg_separator</option> du fichier &php.ini;. Malheureusement, la plupart des clients web
     n'envoient pas leurs données de formulaire avec des points-virgules. Une
     solution plus portable est d'utiliser <literal>&amp;amp;</literal>
     à la place de <literal>&amp;</literal> comme
     séparateur. Vous n'avez alors pas à changer la directive
     <option>arg_separator</option>. Laissez-la à &amp;, mais encodez vos URL avec
     <function>htmlentities</function>.
    </para>
    <para>
     <example>
      <title>
        Exemple avec <function>urlencode</function> et
        <function>htmlentities</function>
      </title>
      <programlisting role="php">
<![CDATA[
<?php
  echo '<a href="moncgi?foo=', htmlentities (urlencode ($userinput) ), '">';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Voir aussi
     <function>urldecode</function>,
     <function>htmlentities</function>,
     <function>rawurldecode</function> et
     <function>rawurlencode</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
