<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/xml.xml, last change in rev 1.2 -->
<!-- last change to 'xml-parse-into-struct' in en/ tree in rev 1.11 -->
 <refentry id="function.xml-parse-into-struct">
   <refnamediv>
    <refname>xml_parse_into_struct</refname>
    <refpurpose>Analyse une structure XML</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <methodsynopsis>
     <type>int</type><methodname>xml_parse_into_struct</methodname>
     <methodparam><type>resource</type><parameter>parser</parameter></methodparam>
     <methodparam><type>string</type><parameter>data</parameter></methodparam>
     <methodparam><type>array</type><parameter>&amp;values</parameter></methodparam>
     <methodparam choice="opt"><type>array</type><parameter>&amp;index</parameter></methodparam>
    </methodsynopsis>
    <para>
     <function>xml_parse_into_struct</function> analyse le fichier
     XML <parameter>data</parameter>, et le place dans deux tableaux :
	 le premier <parameter>index</parameter> contient des pointeurs
	 sur la position des valeurs correspondantes dans le tableau
	 <parameter>values</parameter> array. Ces deux param&egrave;tres sont
	 pass&eacute;s par r&eacute;f&eacute;rences.
    </para>
    <para>
     Ci-dessous, vous trouverez un exemple qui illustre la structure
     des deux tableaux g&eacute;n&eacute;r&eacute;s par la fonction. On utilise une balise
     simple <literal>note</literal>, plac&eacute;e dans une autre balise
     <literal>para</literal>. On analyse le tout, et on
      affiche la structure g&eacute;n&eacute;r&eacute;e :
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
  $simple = "<para><note>Simple Note</note></para>";
  $p = xml_parser_create();
  xml_parse_into_struct($p,$simple,$vals,$index);
  xml_parser_free($p);
  echo "Tableau d'index \n";
  print_r($index);
  echo "\nTableau de valeurs \n";
  print_r($vals);
?>
]]>
      </programlisting>
     </informalexample>
     Lors de l'&eacute;x&eacute;cution du code, l'affichage sera :
     <informalexample>
      <literallayout>
       <computeroutput>
<![CDATA[
Tableau d'index 
Array
(
    [PARA] => Array
        (
            [0] => 0
            [1] => 2
        )

    [NOTE] => Array
        (
            [0] => 1
        )

)

Tableau de valeurs 
Array
(
    [0] => Array
        (
            [tag] => PARA
            [type] => open
            [level] => 1
        )

    [1] => Array
        (
            [tag] => NOTE
            [type] => complete
            [level] => 2
            [value] => Simple Note
        )

    [2] => Array
        (
            [tag] => PARA
            [type] => close
            [level] => 1
        )

)
]]>       </computeroutput>
      </literallayout>
     </informalexample>
    </para>
    <para>
     L'analyse &eacute;v&eacute;nementielle (comme celle de expat), peut se
     r&eacute;v&eacute;ler complexe lorsque le document XML est complexe.
     <function>xml_parse_into_struct</function> ne g&eacute;n&egrave;re pas
     d'objet de type DOM, mais il g&eacute;n&egrave;re plut&ocirc;t des
     structures qui peuvent &ecirc;tre parcourues &agrave; la fa&ccedil;on d'un arbre.
     Consid&eacute;rons le fichier suivant, qui repr&eacute;sente une petite base
     de donn&eacute;es XML :
     <example>
      <title>moldb.xml - Petite base de donn&eacute;es mol&eacute;culaire</title>
      <programlisting role="xml">
<![CDATA[
<?xml version="1.0"?>
<moldb>

    <molecule>
        <name>Alanine</name>
        <symbol>ala</symbol>
        <code>A</code>
        <type>hydrophobic</type>
    </molecule>

    <molecule>
        <name>Lysine</name>
        <symbol>lys</symbol>
        <code>K</code>
        <type>charged</type>
    </molecule>

</moldb>
]]>
      </programlisting>
     </example>
      Et maitenant, un code qui analyse le document, et g&eacute;n&egrave;re les
      objet ad hoc :
      <example>
      <title>
       parsemoldb.php - analyse moldb.xml et cr&eacute;e un tableau
       d'objet mol&eacute;culaires
      </title>
      <programlisting role="php">
<![CDATA[
<?php

class AminoAcid {
    var $name;  // aa name
    var $symbol;    // three letter symbol
    var $code;  // one letter code
    var $type;  // hydrophobic, charged or neutral
    
    function AminoAcid ($aa) {
        foreach ($aa as $k=>$v)
            $this->$k = $aa[$k];
    }
}

function readDatabase($filename) {
    // read the xml database of aminoacids
    $data = implode("",file($filename));
    $parser = xml_parser_create();
    xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);
    xml_parser_set_option($parser,XML_OPTION_SKIP_WHITE,1);
    xml_parse_into_struct($parser,$data,$values,$tags);
    xml_parser_free($parser);

    // loop through the structures
    foreach ($tags as $key=>$val) {
        if ($key == "molecule") {
            $molranges = $val;
            // each contiguous pair of array entries are the 
            // lower and upper range for each molecule definition
            for ($i=0; $i < count($molranges); $i+=2) {
                    $offset = $molranges[$i] + 1;
                $len = $molranges[$i + 1] - $offset;
                $tdb[] = parseMol(array_slice($values, $offset, $len));
            }
        } else {
            continue;
        }
    }
    return $tdb;
}

function parseMol($mvalues) {
    for ($i=0; $i < count($mvalues); $i++)
        $mol[$mvalues[$i]["tag"]] = $mvalues[$i]["value"];
    return new AminoAcid($mol);
}

$db = readDatabase("moldb.xml");
echo "** Database of AminoAcid objects:\n";
print_r($db);

?>
]]>
      </programlisting>
      </example>
      Apr&egrave;s ex&eacute;cution de <filename>parsemoldb.php</filename>, la variable
      <varname>$db</varname> contient un tableau d'objets
      <classname>AminoAcid</classname>, et l'affichage le confirme :
    <informalexample>
      <screen>
<![CDATA[
** Database of AminoAcid objects:
Array
(
    [0] => aminoacid Object
        (
            [name] => Alanine
            [symbol] => ala
            [code] => A
            [type] => hydrophobic
        )

    [1] => aminoacid Object
        (
            [name] => Lysine
            [symbol] => lys
            [code] => K
            [type] => charged
        )

)
]]>
      </screen>
     </informalexample>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
