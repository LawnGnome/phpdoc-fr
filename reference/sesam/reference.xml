<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.19 $ -->
<!-- EN-Revision: 1.9 Maintainer: yannick Status: ready -->
 <reference id="ref.sesam">
  <title>SESAM</title>
  <titleabbrev>SESAM</titleabbrev>

  <partintro>
   <section id="sesam.intro">
    &reftitle.intro;
   <para>
    SESAM/SQL-Server est une base de données mainframe, développée
    par Fujitsu Siemens Computers, Allemagne. Elle fonctionne sur les
    serveur mainframe, sous BS2000/OSD.
   </para>
   <para>
    Sur de nombreuses installation BS2000 en production, SESAM/SQL-Server
    a prouvé ...
    <itemizedlist>
     <listitem>
      <simpara>
       La facilité de connectivité Java, Web et client/serveur
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       La disponibilité de plus de 99.99%,
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       La capacité de gérer des dizaines et mêmes des centaines de milliers
       d'utilisateurs.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Désormais, il existe une interface &php; pour SESAM, qui donne
    l'accès à cette base aux scripts &php;.
   </para>
    <note>
     <simpara>
       L'accès aux bases SESAM n'est disponible que pour la dernière version CVS de
       &php; 3. &php; 4 ne supporte pas les bases SESAM.
     </simpara>
    </note>
   </section>

   &reference.sesam.ini;

 <section id="sesam.config-notes">
    <title>Notes sur la configuration</title>
    <para>
     Il n'y a pas de version exécutable indépendante pour l'interface &php; SESAM,
     et elle doit fonctionner en module Apache intégré. Dans le module &php;,
     l'interface <link linkend="sesam.configuration">SESAM</link> est
     configurée avec des directives Apache.
     <table>
      <title>Directives de configuration SESAM</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>Directive</entry>
         <entry>Signification</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>php3_sesam_oml</literal></entry>
         <entry>
          Nom de la bibliothèque BS2000 PLAM qui contient les modules pilots
          chargeable SESAM. Il est nécessaire pour pouvoir utiliser
          les fonctions SESAM.
          <para>
           <example>
            <title>Localisation du fichier BS2000 pour SESAM</title>
            <programlisting role="apache">
<![CDATA[
php3_sesam_oml $.SYSLNK.SESAM-SQL.030
]]>
            </programlisting>
           </example>
          </para>
         </entry>
        </row>
        <row>
         <entry><literal>php3_sesam_configfile</literal></entry>
         <entry>
          Nom du fichier de configuration de l'application SESAM. Elle
          est nécessaire pour utiliser les fonctions SESAM.
          <para>
           <example>
            <title>Configuration de <literal>php3_sesam_configfile</literal></title>
            <programlisting role="apache">
<![CDATA[
php3_sesam_configfile $SESAM.SESAM.CONF.AW
]]>
            </programlisting>
           </example>
          </para>
          Ce fichier va  généralement contenir une configuration comme
          celle-ci. (reportez-vous au manuel de référence SESAM).
          <para>
           <example>
            <title>Configuration SESAM</title>
            <programlisting role="bs2000">
<![CDATA[
CNF=B
NAM=K
NOTYPE
]]>
           </programlisting>
           </example>
          </para>
         </entry>
        </row>
        <row>
         <entry><literal>php3_sesam_messagecatalog</literal></entry>
         <entry>
          Nom du catalogue de messages SESAM. Dans la plupart des cas,
          cette directive n'est pas nécessaire. Uniquement dans les
          cas où le fichier de message n'est pas installé dans la
          table de message du système BS2000, vous pouvez utiliser
          cette directive :
          <para>
           <example>
            <title>Nom du catalogue de messages SESAM</title>
            <programlisting role="apache">
<![CDATA[
php3_sesam_messagecatalog $.SYSMES.SESAM-SQL.030
]]>
            </programlisting>
           </example>
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     En plus de la configuration de l'interface &php;/SESAM, vous
     devez configurer le serveur SESAM-Database lui-même, sur votre
     mainframe habituel. Cela signifie :
     <itemizedlist>
      <listitem>
       <simpara>
        démarrer le gestionnaire de base SESAM (DBH)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        connecter les bases avec le gestionnaire de bases SESAM
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
    <para>
     Pour connecter un script &php; au serveur de bases SESAM, les paramètres
     <literal>CNF</literal> et <literal>NAM</literal> de la configuration
     SESAM selectionnée doivent correspondre à l'id du gestionnaire de
     base démarré.
    </para>
    <para>
     Dans le cas des bases de données distribuées, vous devez démarrer
     un agent SESAM/SQL-DCN, avec la table de distribution incluant
     le nom de l'hôte et de la base de données.
    </para>
    <para>
     La communication entre &php; (fonctionnant sur le sous-système POSIX)
     et le gestionnaire de base (fonctionnant hors du sous-système POSIX)
     est réalisée par un pilote spécial appelé SQLSCI et le module de
     connexion SESAM, qui utilise la mémoire partagée. A cause de la mémoire
     partagée, et parce que &php; est une partie statique du serveur web, les
     accès à la base de données sont extrêmement rapide, car il ne requièrent
     pas de connexion distante via ODBC, JDBC ou UTM.
    </para>
    <para>
     Seul un chargeur de stub (stub loader, SESMOD) est compilé dans &php;.
     Les modules de connexion SESAM proviennent de la bibliothèque OML PLAM.
     Dans la <link
     linkend="sesam.configuration">configuration</link>, vous devez indiquer à &php; le nom de la
     bibliothèque PALM, et le fichier de lien à
     utiliser pour la configuration de SESAM (En SESAM V3.0, SQLSCI est
     disponible dans la bibliothèque d'outils SESAM (SESAM Tool Library), qui
     fait partie de la distribution standard).
    </para>
    <para>
     Les commandes SQL imposent que les guillemets simples soient doublés
     pour être interprété litéralement (contrairement à d'autres bases
     de données qui utilisent un guillemet simple, précédé d'un antislash),
     il est recommandé d'activer les directives &php;
     <link linkend="ini.magic-quotes-gpc"><literal>php3_magic_quotes_gpc</literal></link>
     et
     <link linkend="ini.magic-quotes-sybase"><literal>php3_magic_quotes_sybase</literal></link>.
    </para>
   </section>

   <section id="sesam.runtime">
    <title>Considérations à l'exécution</title>
     <para>
     A cause des limitations du modèle de processus BS2000, le pilote
     peut être chargé uniquement après que le serveur Apache ait généré
     le processus fils. Cela ralentit légèrement le traitement de la première
     requête, mais toutes les requêtes suivantes seront effecutée
     à pleine vitesse.
    </para>
    <para>
     Lorsque vous définissez explicitement le catalogue de messages
     SESAM, ce catalogue ser chargé à chaque fois que le pilote est
     chargé (i.e., au moment de la requête initiale). Le système
     d'exploitation BS2000 affiche un message après avoir correctement
     chargé le catalogue de messages, qui sera envoyé au fichier
     d'erreurs Apache. BS2000 ne permet pas la suppression de ce
     message, qui va remplir progressivement ce fichier.
    </para>
    <para>
     Assurez-vous que la bibliothèque SESAM OML PLAM et le fichier de
     configuration SESAM sont accessibles par l'utilisateur qui
     fait tourner le serveur web. Sinon, le serveur ne sera pas
     capable de charger le pilote, ou d'appeler les fonctions
     SESAM. L'accès à la base doit être donné à cet utilisateur.
     Sinon, les connexions SESAM échoueront.
    </para>
   </section>

   <section id="sesam.cursor-types">
    <title>Types de curseurs</title>
    <para>
     Les curseurs de résultats sont alloués pour les requêtes
     SQL de selection, peuvent être soit "séquentiels", soit
     "à défilement" ("scrollable"). Les curseurs à défilement
     sont beaucoup plus gourmands en mémoire, et le mode
     par défaut est séquentiel.
    </para>
    <para>
     Lorsque vous utilisez les curseurs à défilement, le curseur
     peut être positionné librement dans le résultat. Pour chaque
     requête à défilement, il existe des valeurs globales de
     types de défilement (initialisée à : <constant>SESAM_SEEK_NEXT</constant>)
     et la position peut être fixée une seule fois par
     <function>sesam_seek_row</function> ou bien à chaque appel,
     avec la fonction <function>sesam_fetch_row</function>. Lorsque
     vous lisez une ligne avec un curseur à défilement, le traitement
     suivant est effectué à partir des valeurs globales de type
     de défilement et de position :
     <table>
      <title>Scrolled Cursor Post-Processing</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>Type de défilement</entry>
         <entry>Action</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><literal>SESAM_SEEK_NEXT</literal></entry>
         <entry>aucun</entry>
        </row>
        <row>
         <entry><literal>SESAM_SEEK_PRIOR</literal></entry>
         <entry>aucun</entry>
        </row>
        <row>
         <entry><literal>SESAM_SEEK_FIRST</literal></entry>
         <entry>
          le type de défilement devient <literal>SESAM_SEEK_NEXT</literal>
         </entry>
        </row>
        <row>
         <entry><literal>SESAM_SEEK_LAST</literal></entry>
         <entry>
          le type de défilement devient <literal>SESAM_SEEK_PRIOR</literal>
         </entry>
        </row>
        <row>
         <entry><literal>SESAM_SEEK_ABSOLUTE</literal></entry>
         <entry>
          incrémente automatiquement la valeur interne de position
         </entry>
        </row>
        <row>
         <entry><literal>SESAM_SEEK_RELATIVE</literal></entry>
         <entry>
          aucune. Conserve les valeurs globales par défaut de
          position, ce qui permet, par exemple de lire toutes
          les 10 lignes, en arrière.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
  </section>

   <section id="sesam.porting-note">
    <title>Portage</title>

    <para>
     En &php;, il est naturel de commencer les index à zéro (plutôt
     que 1), et quelques adaptations ont été faite pour l'interface
     SESAM : à chaque fois qu'un tableau indexé commence à l'index 1
     en SESAM natif, l'interface &php; utilisera l'index 0 comme point de
     départ. Par exemple, lorsque vous lisez des données avec
     <function>sesam_fetch_row</function>, la première colonne
     sera à l'index 0, et les suivantes suivront juqu'au nombre
     de colonne (exclus) du résultat ($array["count"]).
     Lors du portage d'applications depuis d'autres langage évolués vers
     &php;, soyez attentifs à ce changement. A chaque fois que
     c'est nécessaire, la description d'une fonction &php; SESAM indique
     que l'index du tableau commence à 0.
    </para>
   </section>

   <section id="sesam.security">
    <title>Sécurité</title>
    <para>
     Lorsque vous autorisez l'accès à une base de données SESAM, le
     serveur web doit avoir le minimum de privilèges possible. Pour la
     plupart des bases de données, seul le droit de lecture doit être
     fourni. Suivant votre utilisation, ajoutez d'autres droits d'accès
     au fur et à mesure de vos besoins. Ne donnez jamais le contrôle
     total de vos bases à un utilisateur du web! Limitez l'accès aux
     scripts &php; qui doivent administrer la base en utilisant un
     mot de passe et/ou une sécurisation SSL.
    </para>
   </section>

   <section id="sesam.migration">
    <title>Migration d'une autre base SQL</title>
    <para>
     Deux langage SQL ne sont jamais 100% compatibles. Lorsque vous portez
     une application SQL depuis une autre interface vers SESAM,
     certaines adaptations doivent être faîtes. Les différences suivantes
     sont les plus courantes :
     <itemizedlist>
      <listitem>
       <simpara>
        Types de données spécifiques
       </simpara>
       <simpara>
        Certains types de données spécifiques à une base doivent être
        remplacés par les types de données standard SQL.
        (i.e., <literal>TEXT</literal> doit être remplacé par
        <literal>VARCHAR(taille max)</literal>).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Mots reservés comme identifiants SQL.
       </simpara>
       <simpara>
        En SESAM (comme dans le standard SQL), les mots
        reservés utilisés comme identifiants doivent être entourés
        de guillemets doubles (ou renommés).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Taille d'affichage des données.
       </simpara>
       <simpara>
        Les types de données SESAM ont une taille de stockage, mais
        par de taille d'affichage. A la place de <literal>int(4)</literal>
        (c'est à dire : les entiers jusqu'à '9999'), SESAM requiert simplement
        <literal>int</literal>, pour une taille implicite de 31 bits. De même,
        les seuls types de date disponible dans SESAM sont :
        <literal>DATE</literal>, <literal>TIME(3)</literal> et
        <literal>TIMESTAMP(3)</literal>.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Les types de données <literal>unsigned</literal> (non signé),
        <literal>zerofill</literal> (complété avec des zéros), ou
        <literal>auto_increment</literal>
       </simpara>
       <simpara>
        <literal>Unsigned</literal> et <literal>zerofill</literal> ne sont pas
        supportés. <literal>Auto_increment</literal> est automatique
        (utilisez <literal>"INSERT ... VALUES(*, ...)"</literal> au lieu de
        <literal>"... VALUES(0,...)"</literal> pour profiter des auto-increment
        implicites de SESAM.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <command>int ... DEFAULT '0000'</command>
       </simpara>
       <simpara>
        Les variables numériques ne doivent pas être initialisées
        avec des constantes de type chaîne de caractères. Utilisez
        <command>DEFAULT 0</command> à la place. Pour initialiser une
        date, la chaîne doit être préfixée avec le type de date
        adapté, tel que :
        <literal> CREATE TABLE exmpl (xtime timestamp(3) DEFAULT TIMESTAMP '1970-01-01 00:00:00.000' NOT &null;); </literal>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <command>$count = xxxx_num_rows();</command>
       </simpara>
       <simpara>
        Certaines bases de données essaient d'estimer le nombre
        de lignes d'un résultat, même grossièrement approximativement.
        SESAM ne connait pas le nombre de lignes avant de les
        avoir lues lui-même. Si vous avez vraiment besoin de
        les compter, utilisez la commande
        <command>SELECT COUNT(...) WHERE ...</command>, qui vous dira
        combien de lignes sont disponibles. Une deuxième requête
        devrait vous retourner tous ces résultats.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <command>DROP TABLE lenom;</command>
       </simpara>
       <simpara>
        Avec SESAM, dans la commande <command>DROP TABLE</command>,
        le nom de la table doit être suivi du mot clé
        <literal>RESTRICT</literal> ou <literal>CASCADE</literal>. Avec
        <literal>RESTRICT</literal>, une erreur est retounrée s'il y a des
        objets dépendant (par exemple, des vues), tandis qu'avec
        <literal>CASCADE</literal>, les objets dépendants seront
        supprimés en même temps que la table.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>

   <section id="sesam.sql-types">
    <title>Notes sur l'utilisation de types SQL divers</title>
    <para>
     SESAM ne supporte pas le type BLOB. Une future version de
     SESAM devra le faire.
    </para>
    <para>
     L'interface &php; effectue automatiquement les conversions suivantes lors
     de la lecture de lignes de résultats SQL :
     <table>
      <title>Conversion de type SQL vers &php;</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>Type SQL</entry>
         <entry>Type &php;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>SMALLINT, INTEGER</entry>
         <entry>"integer" (entier)</entry>
        </row>
        <row>
         <entry>NUMERIC, DECIMAL, FLOAT, REAL, DOUBLE</entry>
         <entry>"double" (nombre à virgule flottante)</entry>
        </row>
        <row>
         <entry>DATE, TIME, TIMESTAMP</entry>
         <entry>"string"(chaîne de caractères)</entry>
        </row>
        <row>
         <entry>VARCHAR, CHARACTER</entry>
         <entry>"string"(chaîne de caractères)</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     Lorsque vous lisez une ligne entière, le résultat est retourné
     sous la forme d'un tableau. Les champs vides ne sont pas remplis,
     et vous aurez à vérifier vous même l'existence des champs (
     (utilisez <function>isset</function> ou <function>empty</function>
     pour tester les champs vides). Cela donne plus de contrôle à
     l'utilisateur sur l'apparence des champs que si les champs
     vides étaient représenté par des chaînes vides).
    </para>
   </section>

   <section id="sesam.multiple-fields">
    <title>Support des "champs multiples" de SESAM</title>
    <para>
     La fonctionnalité spéciale des "champs multiples" de SESAM permet
     à une colonne de contenir un tableau de champs. Un tel "champs multiple"
     peut être créé comme ceci :
     <example>
      <title>Création d'une colonne de champs multiples</title>
      <programlisting role="sesam">
<![CDATA[
CREATE TABLE multi_field_test (
    pkey CHAR(20) PRIMARY KEY,
    multi(3) CHAR(12)
)
]]>
      </programlisting>
     </example>
     et peut être remplie avec :
     <example>
      <title>Affectation d'une colonne de type "champs multiple"</title>
      <programlisting role="sesam">
<![CDATA[
INSERT INTO multi_field_test (pkey, multi(2..3) )
    VALUES ('Second', <'first_val', 'second_val'>)
]]>
      </programlisting>
     </example>
     Notez que (comme c'est le cas ci-dessus), les sous-champs vides
     initiaux sont ignorés, et que le tableau est alors compacté, ce qui
     fait que l'exemple ci-dessus conduit à un tableau multi(1..2) au
     lieu de multi(2..3).
    </para>
    <para>
     Lors de la lecture d'une ligne, les "champs multiples" sont mis en colonne.
     Dans l'exemple ci-dessu, "pkey" prend l'index 0, et les trois colonnes
     "multi(1..3)" sont accessibles depuis les index 1 à 3.
    </para>
   </section>

   <section id="sesam.seealso">
   &reftitle.seealso;
    <para>
    Pour de plus amples détails sur SESAM, reportez-vous à la
    documentation <ulink url="&url.sesam.en;">SESAM/SQL-Server</ulink> en anglais
    ou <ulink url="&url.sesam.de;">SESAM/SQL-Server</ulink> en allemand,
    disponibles toutes deux en ligne, ou en manuels.
    </para>
   </section>
  </partintro>

&reference.sesam.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

