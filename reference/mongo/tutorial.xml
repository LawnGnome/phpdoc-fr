<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 307180 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<section xml:id="mongo.tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Tutorial</title>
 <section>
  <title>Introduction</title>
  <para>
   This is the 10gen-supported PHP driver for MongoDB.  
  </para>
  <para>Here's a quick code sample that connects, inserts documents, queries for
   documents, iterates through query results, and disconnects from MongoDB.  
   There are more details on each step in the tutorial below.
  </para>
  <programlisting role="php">
<![CDATA[
<?php

// connect
$m = new Mongo();

// select a database
$db = $m->comedy;

// select a collection (analogous to a relational database's table)
$collection = $db->cartoons;

// add a record
$obj = array( "title" => "Calvin and Hobbes", "author" => "Bill Watterson" );
$collection->insert($obj);

// add another record, with a different "shape"
$obj = array( "title" => "XKCD", "online" => true );
$collection->insert($obj);

// find everything in the collection
$cursor = $collection->find();

// iterate through the results
foreach ($cursor as $obj) {
    echo $obj["title"] . "\n";
}

?>
]]>
  </programlisting>
  <para>
   This would output:
  </para>
  <screen>
<![CDATA[
Calvin and Hobbes
XKCD
]]>
  </screen>
 </section>
 <section>
  <title>Création d'une connexion</title>
  <para>
   Pour se connecter à un serveur de base de données, utilisez une
   des façons suivantes :
   <programlisting role="php">
<![CDATA[
<?php

$connection = new Mongo(); // Connexion à localhost:27017
$connection = new Mongo( "example.com" ); // Connexion à un hôte distant (en utilisant le port par défaut)
$connection = new Mongo( "example.com:65432" ); // connect to a remote host at a given port

?>
]]>
   </programlisting>
   
   You do not have to explicitly disconnect from the database.  When 
   <literal>$connection</literal> goes out of scope, the connection will be 
   closed automatically and any database resources it was using will be freed.
  </para>
  <section>
   <title>Voir aussi</title>
   <para>
    La chapitre du manuel sur les
    <link linkend="mongo.connecting">connexion</link>
    couvre les différents types de connexions.
   </para>
   <para>
    La documentation de l'API de la classe
    <classname>Mongo</classname> et de la classe
    <function>Mongo::__construct</function> permet d'avoir une
    bonne compréhension des options possibles avec bons nombres
    d'exemples.
   </para>
  </section>
  
  <section>
   <title>Sélection d'une base de données</title>
   <para>
    Pour sélectionner une base de données, utilisez :
    <programlisting role="php">
<![CDATA[
<?php

$db = $connection->dbname;

?>
]]>
    </programlisting>
    La base de données n'a pas besoin d'avoir été créée auparavant ;
    vous pouvez simplement créer une nouvelle base de données en tentant
    de la sélectionner. Attention aux fautes de frappe ! Vous pouvez
    par inadvertance créer une nouvelle base de données, ce qui peut
    rendre plus compliqué de trouver la cause d'une erreur :
    <programlisting role="php">
<![CDATA[
<?php

$db = $connection->mybiglongdbname;
// Plus de codes ici...
$db = $connection->mybiglongdbnme;
// Maintenant, vous êtes connecté à une base de données différente !

?>
]]>
    </programlisting>
   </para>
   <section>
    <title>Voir aussi</title>
    <para>
     La documentation de l'API de la classe
     <classname>MongoDB</classname> contient plus d'informations
     sur les objets de bases de données.
    </para>
   </section>
  </section>
  
  <section>
   <title>Sélection d'une collection</title>
   <para>
    Récupérer une connexion utilise la même syntaxe que de récupérer
    une base de données :
    <programlisting role="php">
<![CDATA[
<?php

$db = $connection->baz;
$collection = $db->foobar;

// ou, plus succinctement
$collection = $connection->baz->foobar;

?>
]]>
    </programlisting>
   </para>
   <section>
    <title>Voir aussi</title>
    <para>
     La documentation de l'API de la classe
     <classname>MongoCollection</classname> contient
     plus d'informations sur les objets de collection.
    </para>
   </section>
  </section>
  
  <section>
   <title>Insertion d'un document</title>
   <para>
    Les tableaux associatifs sont les objets basiques qui peuvent être insérés
    dans une collection d'une base de données. Un document "document" peut
    être :
    <programlisting role="php">
<![CDATA[
<?php

$doc = array( "name" => "MongoDB",
   "type" => "database",
   "count" => 1,
   "info" => (object)array( "x" => 203, "y" => 102),
   "versions" => array("0.9.7", "0.9.8", "0.9.9")
);

?>
]]>
    </programlisting>
    Notez que vous pouvez avoir des tableaux et des objets imbriqués.
   </para>
   <para>
    Pour insérer ce document, utilisez la méthode
    <function>MongoCollection::insert</function>:
    <programlisting role="php">
<![CDATA[
<?php

$collection->insert( $doc );

?>
]]>
    </programlisting>
   </para>
    <title>Voir aussi</title>
    <para>
     La documentation de l'API sur la méthode
     <function>MongoCollection::insert</function>
     contient plus d'informations sur l'insertion
     des données.
    </para>
   </section>
  </section>
  
  <section>
   <title>
    Trouver un document en utilisant la méthode
    <function>MongoCollection::findOne</function>
   </title>
   <para>
    Pour montrer que le document inséré dans l'étape précédante est bien présent,
    nous pouvons simplement utiliser la méthode
    <function>MongoCollection::findOne</function> pour récupérer
    une seule document de la collection. Cette méthode est utile dans les cas où
    il n'y a qu'un seul document correspondant aux critères ou bien si vous ne
    souhaitez qu'un seul résultat.
    <programlisting role="php">
<![CDATA[
<?php

$obj = $collection->findOne();
var_dump( $obj );

?>
]]>
    </programlisting>
    et vous devriez voir :
    <programlisting>
<![CDATA[
array(5) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["name"]
  string(7) "MongoDB"
  ["type"]=>
  string(8) "database"
  ["count"]=>
  int(1)
  ["info"]=>
  array (2) {
    ["x"]=>
    int(203)
    ["y"]=>
    int(102)
  }
  ["versions"]
  array(3) {
    [0]=>
    string(5) "0.9.7"
    [1]=>
    string(5) "0.9.8"
    [2]=>
    string(5) "0.9.9"
  }
}
]]>
    </programlisting>
   </para>
   <para>
    Notez que le champ <literal>_id</literal> a été ajouté automatiquement
    à votre document. <literal>_id</literal> est le champ "primary key"
    qui est automatiquement peuplé pour tous les documents
    dans MongoDB.
   </para>
   <section>
    <title>Voir aussi</title>
    <para>
     La documentation de l'API sur la méthode
     <function>MongoCollection::findOne</function> contient
     plus d'informations sur la recherche de données.
    </para>
   </section>
  </section>
  
  <section>
   <title>Ajout de plusieurs documents</title>
   <para>
    Afin de faire des requêtes plus intéressantes, commençons par ajouter
    plusieurs documents simples dans notre collection. Ces documents
    seront de la forme :
    <programlisting role="php">
<![CDATA[
<?php

array( "i" => value );

?>
]]>
    </programlisting>
    et nous pouvez le faire avec une simple boucle :
    <programlisting role="php">
<![CDATA[
<?php

for($i=0; $i<100; $i++) {
    $collection->insert( array( "i" => $i ) );
}

?>
]]>
    </programlisting>
   </para>
   
   <para>
    Notez que vous pouvez insérer des tableaux avec des clés différentes
    dans la même collection. Cet aspect correspond à ce que nous avançons
    lorsque nous disons que MongoDB a "un schéma libre".
   </para>
  </section>
  
  <section>
   <title>Comptage des documents dans une collection</title>
   <para>
    Maintenant que nous avons inséré 101 documents (le 100 noté dans la boucle, +1),
    nous pouvons vérifier le nombre de documents dans la collection en utilisant
    la méthode <function>MongoCollection::count</function>.
    <programlisting role="php">
<![CDATA[
<?php

echo $collection->count();

?>
]]>
    </programlisting>
    et vous devriez voir afficher : 101.
   </para>
  </section>
  
  <section>
   <title>Utilisation d'un curseur pour récupérer tous les documents</title>
   <para>
    Afin de récupérer tous les documents d'une collection, vous devez utiliser
    la méthode <function>MongoCollection::find</function>. Cette méthode retourne
    un objet <classname>MongoCursor</classname> qui vous permet de parcourir
    tous les documents correspondant à votre requête. Aussi, pour récupérer tous
    les documents et les afficher, vous pouvez faire ceci :
    <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();
foreach ($cursor as $id => $value) {
    echo "$id: ";
    var_dump( $value );
}

?>
]]>
    </programlisting>
    ceci affichera les 101 documents de la collection. <literal>$id</literal>
    est le champ <literal>_id</literal>
    du document, et <literal>$value</literal> est le document lui-même.
   </para>
   <section>
    <title>Voir aussi</title>
    <para>
     La documentation de l'API sur la méthode
     <function>MongoCollection::find</function>
     contient plus d'informations sur la recherche de données.
    </para>
   </section>
  </section>
  
  <section>
   <title>Ajout d'un critère à une requête</title>
   <para>
    Nous pouvons créer une requête à passer à la méthode
    <function>MongoCollection::find</function> pour récupérer
    un sous-jeu de documents de notre collection. Par exemple, si vous voulez
    trouver les documents dont le champ "i" vaut "71", vous pouvez le faire
    comme ceci :
    <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => 71 );
$cursor = $collection->find( $query );

while( $cursor->hasNext() ) {
    var_dump( $cursor->getNext() );
}

?>
]]>
    </programlisting>
    un seul document s'affichera :
    <programlisting>
<![CDATA[
array(2) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["i"]=>
  int(71)
  ["_ns"]=>
  "testCollection"
}
]]>
    </programlisting>
   </para>
  </section>
  
  <section>
   <title>Récupération de plusieurs documents avec une requête</title>
   <para>
    Vous pouvez utiliser une requête pour récupérer plusieurs documents
    depuis la collection. Par exemple, si vous voulez récupérer tous les
    documents dont le champ "i" est plus grand que 50, vous pouvez le faire
    comme ceci :
    <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => array( '$gt' => 50 ) ); //notez les simples guillemets autour de '$gt'
$cursor = $coll->find( $query );

while( $cursor->hasNext() ) {
    var_dump( $cursor->getNext() );
}

?>
]]>
    </programlisting>
    Ceci devrait afficher les documents dont le champ "i" est supérieur à 50. Nous pouvons
    également spécifier un intervalle comme 20 &lt; i &lt;= 30 :
    
    <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => array( "\$gt" => 20, "\$lte" => 30 ) );
$cursor = $coll->find( $query );

while( $cursor->hasNext() ) {
    var_dump( $cursor->getNext() );
}

?>
]]>
    </programlisting>
    Vu qu'il est facile d'oublier d'échapper le "$", vous pouvez aussi choisir
    votre propre caractère spécial à utiliser à la place de '$'. Choisissez
    un caractère qui n'apparait pas dans les noms des clés, i.e. ":" et ajoutez
    la ligne suivante à votre fichier &php.ini; :
    
    <programlisting>
<![CDATA[
mongo.cmd = ":"
]]>
    </programlisting>
    Ainsi, l'exemple ci-dessus deviendra :
    
    <programlisting role="php">
<![CDATA[
<?php

$query = array( "i" => array( ":gt" => 20, ":lte" => 30 ) );

?>
]]>
    </programlisting>
    Vous pouvez également le changer dans votre code en utilisant la
    commande ini_set("mongo.cmd", ":"). Bien sûr, vous pouvez également
    utiliser des simples guillements autour de $.
   </para>
  </section>
  
  <section>
   <title>Création d'un index</title>
   <para>
    MongoDB supporte les indexes, et il est très simple de les ajouter à une
    collection. Pour créer un index, vous devez spécifier le nom du champ
    ainsi que sa direction : ascendant (1) ou descendant
    (-1). L'exemple suivant va créer un index ascendant sur le champ "i" :
    <programlisting role="php">
<![CDATA[
<?php

$coll->ensureIndex( array( "i" => 1 ) );  // Création d'un index sur le champ "i"
$coll->ensureIndex( array( "i" => -1, "j" => 1 ) );  // Index descendant sur le champ "i", et ascendant sur le champ "j"

?>
]]>
    </programlisting>
   </para>
  </section>
 </section>
