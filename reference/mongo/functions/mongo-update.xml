<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.3 Maintainer: dams Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.mongo-update" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>mongo_update</refname>
  <refpurpose>Modifie des objets dans une collection Mongo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>mongo_update</methodname>
   <methodparam><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>ns</parameter></methodparam>
   <methodparam><type>array</type><parameter>query</parameter></methodparam>
   <methodparam><type>array</type><parameter>newobj</parameter></methodparam>
   <methodparam><type>bool</type><parameter>upsert</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>mongo_update</function> supprime les objets trouvés, 
   les modifie pour qu'ils correspondent à une nouvelle forme d'objet,
   puis les sauve à nouveau dans la base. S'il n'y a pas d'objets trouvés, 
   et que le paramètre <parameter>upsert</parameter> est actif, 
   le nouvelle objet sera inséré dans la base.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       La connexion à la base de données.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ns</parameter></term>
     <listitem>
      <para>
       Le nom de la collection et de la base.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
        L'objet pour lequel faire la requêtes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>newobj</parameter></term>
     <listitem>
      <para>
        L'objet qui remplace les objets trouvés.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>upsert</parameter></term>
     <listitem>
      <para>
        S'il faut insérer <parameter>newobj</parameter> dans la
        connexion, si aucun objet n'est trouvé par la requête.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
    &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>

  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>mongo_update</function></title>
    <para>
      Cet exemple montre comment mettre à jour un objet existant.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$query = array("x" => "y");
$newobj = array("x" => "z");

$conn = mongo_connect("localhost", true);
if (!$conn) {
   die("Impossible de se connecter.");
}
$ok = mongo_update($conn, "foo.bar", $query, $newobj, false);
if( $ok ) {
  echo "updated";
}


?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
updated
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mongo_insert</function></member>
    <member><function>mongo_remove</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
