<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 290867 Maintainer: dams Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongo.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Mongo::__construct</refname>
  <refpurpose>Crée un nouvel objet de connexion à une base de données Mongo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <methodname>Mongo::__construct</methodname>
   <methodparam choice="opt"><type>string</type><parameter>server</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>boolean</type><parameter>connect</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>boolean</type><parameter>persistent</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>boolean</type><parameter>paired</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Si aucun paramètre n'est passé, la connexion se fera sur "localhost:27017".
  </para>
  <para>
   Si vous ne voulez pas vous connecter immédiatement (<parameter>$connect</parameter> vaut
   &false;), vous devez appeler la fonction <function>connect</function>,
   <function>persistConnect</function>, <function>pairConnect</function>, ou
   <function>pairPersistConnect</function> avant de faire une opération sur la base
   de données.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$mongo = new Mongo("localhost", false);

// Émet une exception MongoException, vu que $mongo n'a pas été totalement initialisé
$mongo->selectDB("foo")->command(array("distinct" => "bar", "key" => "age"));

// ok
$mongo->connect();
$mongo->selectDB("foo")->command(array("distinct" => "bar", "key" => "age"));

?>
]]>
   </programlisting>
  </informalexample>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>server</parameter>
     </term>
     <listitem>
      <para>
       Le nom du serveur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>connect</parameter>
     </term>
     <listitem>
      <para>
       Si le constructeur doit se connecter immédiatement à la base de données.
       Si ce paramètre vaut &false;, le constructeur se terminera sans effectuer
       de connexion à la base de données.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>persistent</parameter>
     </term>
     <listitem>
      <para>
       Si la connexion doit être persistante.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>paired</parameter>
     </term>
     <listitem>
      <para>
       Si la connexion doit être en paire.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un nouvel objet de connexion à la base de données Mongo.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Emet une exception <classname>MongoConnectionException</classname> si la connexion
   échoue.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>Mongo::__construct</function> et une connexion pairée</title>
   <para>
    Cet exemple montre comment se connecter avec le driver à une paire de
    serveurs répliqués Mongo.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// Passer une liste séparée par une virgule de noms de serveurs au constructeur
$m = new Mongo("www.example1.com,www.example2.com", false);
$m->pairConnect();

// Si les serveurs de base de données ne sont pas en fonctionnement sur le port
// par défaut (27017), vous devez spécifier le port
$m2 = new Mongo("www.example1.com:12345,www.example.com:54321", false);
$m2->pairConnect();

// Vous pouvez également effectuer une connexion pairée sur une seule ligne de code
$m3 = new Mongo("www.example1.com,www.example.com", true, false, true);

?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Exemple avec <function>Mongo::__construct</function> et une connexion persistante</title>
   <para>
    Une connexion persistante est utilisée lorsque vous devez faire plus d'une requête.
    Elle permet de réduire significativement le temps dû aux reconnexions.
   </para>
   <para>
    Une connexion persistante est identifiée par une chaîne serveur et,
    optionnellement, par un "username" et un "password". Ces chaînes sont
    arbitraires et ne doivent pas être sensibles (i.e., un vrai mot de passe).
    Elles seront utilisées comme identifiant unique pour une connexion.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// Crée une connexion persistante
$m1 = new Mongo("localhost", true, true);

// Utilise la même connexion que $m1
$m2 = new Mongo("localhost", false);
$m2->persistConnect();

// Crée une nouvelle connexion
$m3 = new Mongo("127.0.0.1", false);
$m3->persistConnect();

// Crée une nouvelle connexion
$m4 = new Mongo("127.0.0.1:27017", false);
$m4->persistConnect();

// Crée une nouvelle connexion
$m5 = new Mongo("localhost", false);
$m5->persistConnect("foo");

// Utilise la connexion $m5
$m6 = new Mongo("localhost", false);
$m6->persistConnect("foo");

// Crée une nouvelle connexion
$m7 = new Mongo("localhost", false);
$m7->persistConnect("foo", "bar");

?>
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
