<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 308607 Maintainer: jpauli Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongo.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Mongo::__construct</refname>
  <refpurpose>Crée un nouvel objet de connection à une base de données Mongo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <methodname>Mongo::__construct</methodname>
   <methodparam choice="opt"><type>string</type><parameter>server</parameter><initializer>"mongodb://localhost:27017"</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array("connect" => &true;)</initializer></methodparam>
  </methodsynopsis>
  <para>
   Si aucun paramètre n'est passé, la connection se fera sur "localhost:27017" (ou ce qui
   a été spécifié dans php.ini pour
   <link linkend="ini.mongo.default-host">mongo.default_host</link> et
   <link linkend="ini.mongo.default-port">mongo.default_port</link>).
  </para>
  <para>
   <parameter>server</parameter> doit être de la forme: 
   <programlisting>
<![CDATA[
mongodb://[username:password@]host1[:port1][,host2[:port2:],...]/db
]]>
   </programlisting>
  </para>
  <para>
   La chaine de connexion débute toujours par <literal>mongodb://</literal>.
  </para>
  <para>Si <literal>username</literal> et <literal>password</literal> sont précisés,
   le constructeur tentera d'authentifier la connection à la base. Username et password
   sont optionnels et doivent être suivis d'une <literal>@</literal>, si renseignés.
  </para>
  <para>
   Au moins un hôte doit être précisé (port optionnel, par défaut 27017) et plusieurs
   hôtes vers lesquels se connecter peuvent être passés. Les noms d'hôtes sont séparés
   par des virgules et le constructeur exécutera sans erreur si au moins un des hôtes
   peut être connecté. Si il ne peut se connecter à aucun hôte, il enverra une
   <classname>MongoConnectionException</classname>.
  </para>
  <para>
   Enfin, si vous avez précisé un username et un password, vous devez préciser une base
   de données envers laquelle s'authentifier. Si <literal>db</literal> n'est pas
   renseigné, "admin" sera utilisé.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>server</parameter>
     </term>
     <listitem>
      <para>
       Le nom du serveur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Un tableau d'options pour la connection. Les options disponibles sont:
       <itemizedlist>
        <listitem>
         <para>
          <literal>"connect"</literal>
         </para>
         <para>
          Si le constructeur doit se connecter avant de retourner l'objet. Par défaut
          &true;.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"persist"</literal>
         </para>
         <para>
          Si la connection doit être persistante. La chaine représentant la valeur est
          utilisée comme identifiant de connection, ainsi deux instances de
          <classname>Mongo</classname> qui sont initialisées avec
          <literal>array("persist" => "foobar")</literal> vont partager la même
          connection à la base, alors que une instance initialisée avec
          <literal>array("persist" => "barbaz")</literal> utilisera une connection
          différente.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"timeout"</literal>
         </para>
         <para>
          Période avant timeout (tentative de connection à la base). En millisecondes.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"replicaSet"</literal>
         </para>
         <para>
          Si les hôtes listés sont compris dans un pool réplicat. Si c'est le cas, le maitre
          sera déterminé en utilisant la commande <literal>ismaster</literal> sur les
          serveurs, ainsi le pilote peut se connecter à un serveur qui n'était même pas
          listé. Voyez l'exemple après pour plus de détails.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"username"</literal>
         </para>
         <para>
          Le nom d'utilisateur peut être spécifié ici, au lieu de l'inclure
          dans la liste des hôtes. Ceci est utile tout spécialement si
          le nom d'utilisateur contient un caractère ":"..
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"password"</literal>
         </para>
         <para>
          Le mot de passe peut être spécifié ici, au lieu de l'inclure dans la
          liste des hôtes. Ceci est utile tout spécialement si le mot de
          passe contient le caractère "@".
         </para>
        </listitem>
        </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un nouvel objet de connection à la base de données Mongo.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Emet une exception <classname>MongoConnectionException</classname> si la connection
   échoue avec les identifiants pour la base de données considérée ou si les identifiants
   sont invalides. Voyez la documentation de <classname>MongoConnectionException</classname>
   pour en savoir plus sur les exceptions courantes et leurs causes.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.2</entry>
       <entry>
        Le constructeur a changé pour accepter une tableau. Avant 1.0.2, le constructeur
        acceptait les paramètres suivants:
        <variablelist>
         <varlistentry>
          <term>
           <parameter>server</parameter>
          </term>
          <listitem>
           <para>
            Nom du serveur
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>connect</parameter>
          </term>
          <listitem>
           <para>
            Paramètre optionnel indiquant si le constructeur doit se connecter à la base
            avant de retourner l'objet. Par défaut &true;.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>persistent</parameter>
          </term>
          <listitem>
           <para>
            Si la connection doit être persistante.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>paired</parameter>
          </term>
          <listitem>
           <para>
            Si la connection doit être pairée.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        Ajout de l'option <literal>replicaSet</literal>.
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        Ajout des options <literal>username</literal> et <literal>password</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>Mongo::__construct</function> et un pool de réplicats</title>
   <para>
    Cet exemple montre comment se connecter avec le driver à un pool de réplicats. Il
    suppose un jeu de trois serveurs: sf1.example.com, sf2.example.com et ny1.example.com.
    Le maitre peut être l'un de ces serveurs.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// Passer une liste séparée par une virgule de noms de serveurs au constructeur
$m1 = new Mongo("mongodb://sf2.example.com,ny1.example.com", array("replicaSet" => true));

// Vous ne passez qu'un seul serveur, le pilote récupèrera la liste complète et trouvera
// le maitre depuis ce serveur
$m2 = new Mongo("mongodb://ny1.example.com", array("replicaSet" => true));

?>
]]>
   </programlisting>
   <para>
    Si le maitre courant échoue, le pilote calculera quel serveur secondaire deviendra le
    nouveau maitre et utilisera sa connection. Le failover ne fonctionnera pas correctement
    si <literal>replicaSet</literal> n'est pas spécifié.
   </para>
   <para>
    Au moins un serveur dans la liste doit fonctionner pour que le pilote se connecte au
    pool de replica.
   </para>
   <para>
    Si vous incluez des serveurs depuis deux pools de réplicats distincts, le comportement est
    alors indéfini.
   </para>
    <para>Voyez la
    <link xlink:href="&url.mongodb.dochub.rs;">documentation du coeur</link> sur la réplication.
   </para>
  </example>
  <example>
   <title>Connection via socket UNIX</title>
   <para>
    Dans les versions 1.0.9+, vous pouvez utiliser une socket du domaine UNIX pour vous connecter à
    une instance de MongoDB locale. Ceci devrait être plus rapide qu'une connection réseau.
   </para>
   <para>
    Dans la version 1.5.0, Le serveur MongoDB ouvre automatiquement une socket à
    /tmp/mongodb-&lt;port&gt;.sock. Vous pouvez vous y connecter en précisant le chemin dans la chaine
    de connection:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// Serveur MongoDB local sur le port 20000
$m = new Mongo("mongodb:///tmp/mongodb-20000.sock");

?>
]]>
   </programlisting>
   <para>
    Vous pouvez combiner cela avec d'autres connections:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// Essaye la connection socket UNIX, utilise localhost sinon
$m = new MongoDB("mongodb:///tmp/mongodb-27017.sock,localhost:27017");

?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Exemple avec <function>Mongo::__construct</function> et une connection persistante</title>
   <para>
    Une connection persistante est utilisée lorsque vous devez faire plus d'une requête.
    Elle permet de réduire significativement le temps dû aux reconnections.
   </para>
   <para>
    Une connection persistante est identifiée par la chaîne du serveur et une chaine
    représentant un identifiant.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// Crée une connection persistante
$m1 = new Mongo("mongodb://localhost", array("persist" => ""));

// Utilise la même connection que $m1
$m2 = new Mongo("mongodb://localhost", array("persist" => ""));

// Crée une nouvelle connection
$m3 = new Mongo("mongodb://127.0.0.1", array("persist" => ""));

// Crée une nouvelle connection
$m4 = new Mongo("mongodb://127.0.0.1:27017", array("persist" => ""));

// Crée une nouvelle connection
$m5 = new Mongo("mongodb://localhost", array("persist" => "foo"));

// Utilise la connection $m5
$m6 = new Mongo("mongodb://localhost", array("persist" => "foo"));

?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Exemple d'authentification <function>Mongo::__construct</function></title>
   <para>
    Un utilisateur doit exister dans la base de données admin avant de lancer
    l'authentification. Vous pouvez créer un utilisateur avec la commande shell
    Mongo suivante:
   </para>
   <programlisting>
<![CDATA[
> use admin
switched to db admin
> db.addUser("testUser", "testPass");
{
        "_id" : ObjectId("4b21272fd9ab21611d19095c"),
        "user" : "testUser",
        "pwd" : "03b9b27e0abf1865e2f6fcbd9845dd59"
}
>
]]>
   </programlisting>
   <para>
    Après avoir crée un utilisateur, dans notre cas de nom "testUser" et password
    "testPass", vous pouvez créer une connection authentifiée:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://testUser:testPass@localhost");

?>
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
