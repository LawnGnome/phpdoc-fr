<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334275 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongowritebatch.add" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoWriteBatch::add</refname>
  <refpurpose>Ajoute une opération CRUD au lot</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>MongoWriteBatch::add</methodname>
   <methodparam><type>array</type><parameter>item</parameter></methodparam>
  </methodsynopsis>
  <para>
   L'opération à ajouter au lot.
  </para>
  <para>
   Si <parameter>$item</parameter> fait que le lot atteint les limites de
   <link xlink:href="url.mongodb.dochub.maxWriteBatchSize">maxWriteBatchSize</link> ou
   <link xlink:href="url.mongodb.dochub.maxBsonObjectSize">maxBsonObjectSize</link>,
   un nouveau lot sera créé en interne et les lots seront envoyés un par un
   lors de l'appel à <methodname>MongoWriteBatch::execute</methodname>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>item</parameter></term>
    <listitem>
     <para>
      <informaltable>
       <thead>
        <row>
         <entry>Valeur</entry>
         <entry>Signification</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>MongoWriteBatch::COMMAND_INSERT</entry>
         <entry>Le document à ajouter</entry>
        </row>
        <row>
         <entry>MongoWriteBatch::COMMAND_UPDATE</entry>
         <entry>
          <para>
           Opération brute de mise à jour. Les clés requises
           sont : array("q" => <link linkend="mongocollection.update.criteria">array("critère")</link>,
           "u" => array("nouvelle donnée"))
          </para>
          <para>
           Optionnellement, les clés "multi" et "upsert" avec comme
           valeurs des booléens
          </para>
          <para>
           "upsert" : Si vaut &true;, crée un nouveau document lorsqu'aucun document ne
           correspond aux critères de la requête. La valeur par défaut est
           &false; ; aucun nouveau document ne sera créé lorsqu'aucune correspondance
           n'est trouvée.
          </para>
         </entry>
        </row>
        <row>
         <entry>MongoWriteBatch::COMMAND_DELETE</entry>
         <entry>
          <simpara>Opération brute d'effacement. Les clés requises sont : array("q" => <link linkend="mongocollection.delete.criteria">array("critère")</link>, "limit" => 1)</simpara>
         </entry>
        </row>
       </tbody>
      </informaltable>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne &true; en cas de succès, et lance une exception si une erreur survient.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   <member>Une exception <classname>Exception</classname> sur un échec d'analyse du paramètre</member>
   <member>Une exception <classname>Exception</classname> sur une erreur de validation de l'argument (i.e. clés manquantes)</member>
  </simplelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="mongowritebatch.add.example.insert">
   <title>Exemple avec <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Mise en lot de plusieurs opérations d'insertion
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$collection = $mc->selectCollection("test", "test");


$docs = array();
$docs[] = array("my" => "demo");
$docs[] = array("is" => "working");
$docs[] = array("pretty" => "well");

$batch = new MongoInsertBatch($collection);
foreach($docs as $document) {
    $batch->add($document);
}
$batch->execute(array("w" => 1));
?>
]]>
   </programlisting>
  </example>

  <example xml:id="mongowritebatch.add.example.update">
   <title>Exemple avec <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Mise en lot de plusieurs opérations de mise à jour
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$collection = $mc->selectCollection("test", "test");


$item1 = array(
    "q" => array("my" => "demo"),
    "u" => array('$set' => array("try" => 1)),
    "multi"  => false, /* Valeur par défaut */
    "upsert" => false, /* Valeur par défaut */
);
$item2 = array(
    "q" => array("is" => "working"),
    "u" => array('$set' => array("try" => 2)),
    "multi" => true,
);
$item3 = array(
    "q" => array("created" => "new-document"),
    "u" => array('$set' => array("try" => 3)),
    "upsert" => true,
);

$batch = new MongoUpdateBatch($collection);
$batch->add($item1);
$batch->add($item2);
$batch->add($item3);
$batch->execute(array("w" => 1));

?>
]]>
   </programlisting>
  </example>

  <example xml:id="mongowritebatch.add.example.delete">
   <title>Exemple avec <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Mise en lot de plusieurs opérations de suppression
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$collection = $mc->selectCollection("test", "test");


$item1 = array(
    "q" => array("my" => "demo"),
    "limit" => 1,
);
$item2 = array(
    "q" => array("try" => 3),
    "limit" => 1,
);


$batch = new MongoDeleteBatch($collection);
$batch->add($item1);
$batch->add($item2);
$batch->execute(array("w" => 1));
?>
]]>
   </programlisting>
  </example>
 </refsect1>



</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
