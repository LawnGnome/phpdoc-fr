<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 293290 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocursor.timeout" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::timeout</refname>
  <refpurpose>Définit un délai maximum d'attente côté client pour cette requête</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCursor::timeout</methodname>
   <methodparam><type>int</type><parameter>ms</parameter></methodparam>
  </methodsynopsis>
  <para>
   Un délai maximum d'attente peut être défini a n'importe quel moment,
   et affectera les requêtes suivantes du curseur, incluant la récupération
   de plus de résultats depuis la base de données. Par exemple, pour attendre
   sans limite de temps pour une réponse initiale mais placer un délai
   maximum d'attente de 100 ms pour un autre résultat, vous pouvez faire ceci :
   <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();

// $cursor->hasNext() exécute la requête. Aucun délai d'attente n'a été défini, aussi 
// le programme attendra la réponse aussi longtemps que nécessaire.

while ($cursor->hasNext()) {
    $cursor->timeout(100);

    // maintenant qu'un délai a été défini, et si le curseur doit récupérer d'autres résultats
    // depuis la base de données, le programme attendra seulement 100 ms la réponse de la base de données

    try {
        print_r($cursor->getNext());
    }
    catch(MongoCursorTimeoutException $e) {
        echo "La requête a pris trop de temps !";
    }
}

?>
]]>
   </programlisting>
  </para>
  <para>
   Un délai de 0 (ou un nombre négatif) permet d'annuler tout délai précédemment défini.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>ms</parameter>
    </term>
    <listitem>
     <para>
      Le nombre de millisecondes que le curseur doit attente une réponse.
      Par défaut, le curseur attendra indéfiniment.
     </para>
    </listitem>
   </varlistentry>   
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Ce curseur.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCursor::timeout</function></title>
   <para>
    Une requête dont le curseur attente une seconde la réponse.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find()->timeout(1000);

try {
  foreach ($cursor as $value) {
    print_r($value);
  }
}
catch(MongoCursorTimeoutException $e) {
  echo "La requête a pris trop de temps !";
}

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Cette méthode fait que les méthodes récupérant des résultats émettent une exception
   <classname>MongoCursorTimeoutException</classname> si leurs requêtes dépassent le délai
   défini lors de leurs exécutions.
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
