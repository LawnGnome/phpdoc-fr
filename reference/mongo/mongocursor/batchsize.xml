<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 317663 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocursor.batchsize" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::batchSize</refname>
  <refpurpose>Définit le nombre de résultats à retourner par jeu de résultats</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCursor::batchSize</methodname>
   <methodparam><type>int</type><parameter>num</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cette méthode n'écrasera pas la limite MongoDB sur la taille des données
   à retourner au client (i.e. si vous définissez la limite à 1.000.000.000, MongoDB
   continuera à retourner 4-16MB de résultats). 
  </para>
  <para>
   Pour assurer un comportement consistant, les règles de batchSize et le
   comportement de la limite sont complexes, mais fonctionnent "comme prévus".
   Les règles sont les suivantes : Les limites dures écraseront les limites
   légères avec les préférences fournies par la méthode
   <function>MongoCursor::limit</function>, par rapport à la méthode
   <function>MongoCursor::batchSize</function>. Après cela, quelques soient
   la définition de l'un ou de l'autre, l'ordre restera identique.
   Voici quelques exemples :
  </para>
  <programlisting role="php">
<![CDATA[
<?php

// un lot, avec au plus 20 éléments
$cursor->limit(-20)->batchSize(10);

// un lot, avec au plus 10 éléments
$cursor->limit(20)->batchSize(-10);

// premier lot : au plus, 10 éléments
$cursor->limit(10);

// premier lot : au plus, 10 éléments
$cursor->limit(10)->batchSize(20);

// premier lot : au plus, 10 éléments
$cursor->limit(20)->batchSize(10);


$cursor->limit(30)->batchSize(7)
// Si nous parcourons les 28 éléments, le prochain appel à la méthode getNext()
// contactera la base de données et lui demandera un lot de 2 documents

?>
]]>
  </programlisting>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;  
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>num</parameter>
     </term>
     <listitem>
      <para>
       Le nombre de résultats à retourner dans le prochain lot.
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Retourne ce curseur.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoCursorException</classname> si le curseur
   a commencé à parcourir le lot. Ceci changera en version 1.0.12, et pourra
   être appelé à n'importe quel moment.
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
