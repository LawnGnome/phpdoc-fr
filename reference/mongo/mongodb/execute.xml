<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 290998 Maintainer: dams Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongodb.execute" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB::execute</refname>
  <refpurpose>Exécute le code JavaScript sur la base de données</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoDB::execute</methodname>
   <methodparam><type>mixed</type><parameter>code</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>args</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   Le serveur de base de données Mongo exécute un moteur Javascript.
   Cette méthode vous permet d'exécuter du Javascript arbitraire sur la base
   de données. Ceci peut être utile si vous voulez toucher un petit
   nombre de collections, ou pour traiter quelques résultats issus de la
   base de données afin de réduire la quantitié de données à envoyer au client.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>code</parameter>
     </term>
     <listitem>
      <para>
       un objet <classname>MongoCode</classname> ou une chaîne
       a exécuter.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>args</parameter>
     </term>
     <listitem>
      <para>
       Les arguments à passer à la requête <literal>code</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le résultat de l'évaluation.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoDB::execute</function></title>
   <programlisting role="php">
<![CDATA[
<?php

$response = $db->execute("function() { return 'Bonjour le monde !'; }");
echo $response['retval'];

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Bonjour le monde !
   </screen>
  </example>
  <example>
   <title>Exemple avec <function>MongoDB::execute</function></title>
   <para>
    Le tableau optionnel de paramètres sera passé à la fonction Javascript.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$response = $db->execute("function(greeting, name) { return greeting+', '+name+'!'; }", array("Au revoir", "Joe"));
echo $response['retval'];

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Au revoir, Joe!
   </screen>
  </example>
  <example>
   <title>Exemple de porté</title>
   <para>
    Si un objet <classname>MongoCode</classname> est utilisé à la place d'une chaîne
    comme premier paramètre, un scope peut être passé dans lequel le Javascript
    sera exécuté.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$func =
    "function(greeting, name) { ".
        "return greeting+', '+name+', dit '+greeter;".
    "}";
$scope = array("greeter" => "Fred");

$code = new MongoCode($func, $scope);

$response = $db->execute($code, array("Au revoir", "Joe"));
echo $response['retval'];

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Au revoir, Joe, dit Fred
   </screen>
  </example>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
