<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 319495 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.update" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::update</refname>
  <refpurpose>Modifie les enregistrements</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool|array</type><methodname>MongoCollection::update</methodname>
   <methodparam><type>array</type><parameter>criteria</parameter></methodparam>
   <methodparam><type>array</type><parameter>newobj</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;  
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>criteria</parameter>
     </term>
     <listitem>
      <para>
       La description des objets à modifier.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>newobj</parameter>
     </term>
     <listitem>
      <para>
       L'objet avec lequel modifier les objets trouvés.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Ce paramètre est un tableau associatif sous la forme
       <literal>array("optionname" => &lt;boolean&gt;, ...)</literal>.
       Les options actuellement supportées sont :
       <itemizedlist>
        <listitem>
         <para>
          <literal>"upsert"</literal>
         </para>
         <para>
          Si aucun document ne correspond au critère $criteria,
          un nouveau document sera créé depuis les variables
          $criteria et $newobj (voir l'exemple avec upsert ci-dessous).
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"multiple"</literal>
         </para>
         <para>
          Tous les documents correspondants au $criteria
          seront mis à jour.
          <function>MongoCollection::update</function> a le comportement opposé
          de <function>MongoCollection::remove</function>: elle met à jour un
          document par défaut, pas tous les documents correspondants.
          <emphasis>Il est recommandé de toujours précisez si vous voulez mettre à
           jour un document ou plusieurs</emphasis>, la base de données pouvant
          changer son comportement par défaut dans le futur.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"safe"</literal>
         </para>
         <para>
          Peut être un booléen ou un entier, et vaut par défaut &false;.
          Si vaut &false;, le programme continue l'exécution sans attendre
          la réponse de la base de données. Si vaut &true;, le programme
          attendra la réponse de la base de données et lancera une exception
          <classname>MongoCursorException</classname> si l'insertion a échouée.
         </para>
         <para>
          Si vous utilisez la réplication et que le maitre a changé, utiliser "safe"
          fera que le pilote se déconnectera du maitre, enverra une exception, et tentera
          de trouver un nouveau maitre à l'opération suivante (votre application doit
          décider si oui ou non l'opération devra être rééssayée sur le nouveau maitre).
         </para>
         <para>
          Si vous n'utilisez <emphasis>pas</emphasis> "safe" avec une paire de réplication
          et que le maitre change, il n'y aura aucun moyen pour le pilote d'avoir connaissance
          de ce changement et il continuera des écritures en échec.
         </para>
         <para>
          Si <literal>safe</literal> est un entier, l'insertion sera répliquée
          sur l'ensemble des machines avant de retourner le succès de l'opération
          (ou lancera une exception si la réplication échoue). Cette valeur écrase
          la variable w définie sur la collection.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"fsync"</literal>
         </para>
         <para>
          Booléen et vaut par défaut &false;. Force l'insertion à être synchronisée
          sur le disque avant de retourner le succès de l'opération. Si vaut &true;,
          une insertion sécurisée sera effectuée et le paramétrage de
          <literal>safe</literal> sera automatiquement valorisé à &false;.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"timeout"</literal>
         </para>
         <para>
          Entier, par défaut, vaut <literal>MongoCursor::$timeout</literal>.
          Si "safe" est défini, il définira (en millisecondes) le temps d'attente
          du client d'une réponse de la base de données. Si la base de données ne
          répond pas dans la période de timeout, une exception
          <classname>MongoCursorTimeoutException</classname> sera émise.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Si le paramètre <parameter>safe</parameter>
   a été défini, retourne un tableau contenant le statut
   de la mise à jour. Sinon, retourne un booléen représentant
   le fait que le tableau n'était pas vide (un tableau vide
   ne sera pas inséré). Ce champ de ce tableau est décrit dans la
   documentation de la méthode
   <function>MongoCollection::insert</function>.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoCursorException</classname>
   si l'option "safe" est définie et que la mise à jour échoue.
  </para>
  <para>
   Lance une exception <classname>MongoCursorTimeoutException</classname>
   si l'option "safe" est définie et que l'opération prend plus
   de temps que <varname>MongoCollection::$wtimeout</varname> millisecondes.
   Ceci ne tue pas le processus serveur, mais uniquement le délai
   d'attente côté client.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.1</entry>
       <entry>
        Le paramètre "options" passe de booléen à un tableau.
        En version Pre-1.0.1, le second paramètre était une valeur
        booléenne optionnelle, spécifiant un upsert.
       </entry>
      </row>
      <row>
       <entry>1.0.5</entry>
       <entry>
        Ajout de l'option "safe".
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        Ajout de la possibilité de passer des entiers à l'option
        "safe" (auparavant, seuls les booléens étaient acceptés)
        et ajout de l'option "fsync".
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        Le type retourné a été modifié en un tableau contenant
        les informations de l'erreur si l'option "safe" est
        utilisé, sinon, ce sera un booléen comme auparavant.
       </entry>
      </row>
      <row>
       <entry>1.0.11</entry>
       <entry>
        Se déconnecte lors d'erreurs "not master" si "safe" est utilisé.
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        Ajout de l'option timeout.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCollection::update</function></title>
   <para>
    Ajout d'un champ adresse à un document.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->insert(array("firstname" => "Bob", "lastname" => "Jones" ));
$newdata = array('$set' => array("address" => "1 Smith Lane"));
$c->update(array("firstname" => "Bob"), $newdata);

var_dump($c->findOne(array("firstname" => "Bob")));

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(4) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["firstname"]=>
  string(3) "Bob"
  ["lastname"]=>
  string(5) "Jones"
  ["address"]=>
  string(12) "1 Smith Lane"
}
]]>
   </screen>
  </example>
  <example>
   <title>Exemple avec <function>MongoCollection::update</function> et upsert</title>
   <para>
    Les Upserts permettent de simplifier le code, vu qu'une simple ligne
    permet de créer l'objet s'il n'existe pas encore, et de le mettre à jour s'il existe.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->drop();
$c->update(array("uri" => "/summer_pics"), array('$inc' => array("page hits" => 1)), array("upsert" => true));
var_dump($c->findOne());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#9 (0) {
  }
  ["uri"]=>
  string(12) "/summer_pics"
  ["page hits"]=>
  int(1)
}
]]>
   </screen>
   <para>
    Si <literal>newobj</literal> ne se compose pas d'opérateurs à $, un upsert créera un nouveau
    document isolé.  Ceci adopte le comportement d'une mise à jour normale, dans laquelle ne
    pas utiliser d'opérateurs $ implique que tout le document soit écrasé.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->update(array("name" => "joe"), array("username" => "joe312", "createdAt" => new MongoDate()),
    array("upsert" => true));

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#10 (0) {
  }
  ["username"]=>
  string(6) "joe312"
  ["createdAt"]=>
  object(MongoDate)#4 (0) {
  }
}
]]>
   </screen>
  </example>
  <example>
   <title>Exemple avec plusieurs <function>MongoCollection::update</function></title>
   <para>
    Par défaut, <function>MongoCollection::update</function> met uniquement à jour
    le premier document correspondant aux critères $criteria qu'il trouve.
    En utilisant l'option "multiple", ce comportement est redéfini.
   </para>
   <para>
    Cet exemple ajoute un champ "gift" à chaque personne possédant un anniversaire
    dans le prochain jour.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$today = array('$gt' => new MongoDate(), '$lt' => new MongoDate(strtotime("+1 day")));
$people->update(array("birthday" => $today), array('$set' => array('gift' => $surprise)), array("multiple" => true));

?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   La <link linkend="mongo.updates">documentation PHP sur les mises à jour</link> et la
   <link xlink:href="&url.mongodb.dochub.update;">documentation core de MongoDB</link>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
