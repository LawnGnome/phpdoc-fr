<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 323965 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.batchinsert" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::batchInsert</refname>
  <refpurpose>Insère plusieurs documents dans la collection</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>MongoCollection::batchInsert</methodname>
   <methodparam><type>array</type><parameter>a</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;    
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>a</parameter>
     </term>
     <listitem>
      <para>
       Un tableau de tableaux.
      </para>
     </listitem>
    </varlistentry>     
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Options d'insertion.
       <itemizedlist>
        <listitem>
         <para>
          <literal>"safe"</literal>
         </para>
         <para>
          Peut être un booléen ou un entier, et vaut par défaut &false;.
          Si vaut &false;, le programme continue l'exécution sans attendre
          la réponse de la base de données. Si vaut &true;, le programme
          attendra la réponse de la base de données et lancera une exception
          <classname>MongoCursorException</classname> si l'insertion a échouée.
         </para>
         <para>
          Si <literal>safe</literal> est un entier, l'insertion sera répliquée
          sur l'ensemble des machines avant de retourner le succès de l'opération
          (ou lancera une exception si la réplication échoue). Cette valeur écrase
          la variable w définie sur la collection.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"fsync"</literal>
         </para>
         <para>
          Booléen et vaut par défaut &false;. Force l'insertion à être synchronisée
          sur le disque avant de retourner le succès de l'opération. Si vaut &true;,
          une insertion sécurisée sera effectuée et le paramétrage de
          <literal>safe</literal> sera automatiquement valorisé à &false;.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"continueOnError"</literal>
         </para>
         <para>
          Booléen, par défaut, &false;. Si défini, la base de données n'arrêtera
          pas une insertion bulk si une d'entre elles échoue (i.e. en raison d'un
          ID dupliqué). Ceci rend les insertions bulk comme une succession d'insertion
          simple, sauf que lors d'un appel à la méthode
          <function>MongoDB::lastError</function>, un jeu d'erreurs sera retourné
          lors de l'échec d'une insertion, et pas seulement la dernière.
          Si plusieurs erreurs surviennent, seule la plus récente sera rapportée
          par la méthode <function>MongoDB::lastError</function>.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Si l'option "safe" est définie, retourne un tableau associatif
   contenant le statut de l'insertion ("ok") ainsi que toutes les erreurs survenues ("err").
   Sinon, retourne &true; si l'insertion a été envoyée avec succès, &false; sinon.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoCursorException</classname> si l'option "safe"
   est définie et que l'insertion échoue.
  </para>
  <para>
   Lance une exception <classname>MongoCursorTimeoutException</classname>
   si l'option "safe" est définie à une valeur supérieure à 1 et la base de données
   ne peut répliquer l'opération dans un délai de
   <literal>MongoCollection::$wtimeout</literal> millisecondes.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.5</entry>
       <entry>
        Ajout du paramètre "options".
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        Ajout de la possibilité de passer des entiers à l'option
        "safe" (auparavant, seuls les booléens étaient acceptés)
        et ajout de l'option "fsync".
       </entry>
      </row>
      <row>
       <entry>1.2.7</entry>
       <entry>
        Le drapeau <literal>continueOnError</literal> a été ajouté.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCollection::batchInsert</function></title>
   <para>
    L'insertion en masse est un moyen rapide d'insérer rapidement de nombreux
    éléments à la fois dans une base
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$users = array();
for ($i = 0; $i<100; $i++) {
  $users[] = array('username' => 'user'.$i, 'i' => $i);
}

$mongo = new Mongo();
$collection = $mongo->my_db->users;
$collection->drop();

$collection->batchInsert($users);

foreach ($users as $user) {
  echo $user['_id']."\n"; // peuplé via l'instance de MongoId
}

$users = $collection->find()->sort(array('i' => 1));
foreach ($users as $user) {
    var_dump($user['username']);
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
4bf43ac68ead0e1971000000
4bf43ac68ead0e1971010000
4bf43ac68ead0e1971020000
...
string(5) "user1"
string(5) "user2"
string(5) "user3"
...
]]>
   </screen>
  </example>

  <example>
   <title>Exemple avec <function>MongoCollection::batchInsert</function> où l'on ignore
    les erreurs</title>
   <programlisting role="php">
<![CDATA[
<?php

$con = new Mongo;
$db = $con->demo;

$doc1 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010001'),
        'id' => 1,
        'desc' => "ONE",
);
$doc2 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010002'),
        'id' => 2,
        'desc' => "TWO",
);
$doc3 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010002'), // _id identique au précédent
        'id' => 3,
        'desc' => "THREE",
);
$doc4 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010004'),
        'id' => 4,
        'desc' => "FOUR",
);

$c = $db->selectCollection('c');
$c->batchInsert(
    array($doc1, $doc2, $doc3, $doc4),
    array('continueOnError' => true)
);

$docs = $c->find();
foreach ($docs as $doc) {
    var_dump($doc['desc']);
}
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
string(3) "ONE"
string(3) "TWO"
string(4) "FOUR"
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::insert</function></member>
   <member><function>MongoCollection::update</function></member>
   <member><function>MongoCollection::find</function></member>
   <member><function>MongoCollection::remove</function></member>
   <member>Documentation interne MongoDB sur <link xlink:href="&url.mongodb.dochub.insert;">insert</link>.</member>
  </simplelist>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
