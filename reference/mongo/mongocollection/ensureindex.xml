<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 329342 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.ensureindex" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::ensureIndex</refname>
  <refpurpose>
   Crée un index sur un champ donné
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>MongoCollection::ensureIndex</methodname>
   <methodparam><type>string|array</type><parameter>key|keys</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   Cette méthode crée un index sur la collection et les champs
   spécifiés. La spécification de la clé peut soit être un simple
   nom de champ sous la forme d'une &string;, soit un tableau contenant
   un ou plusieurs noms de champs avec les directions de tri
  </para>
 </refsect1>
 
 <refsect1 role="parameters"> 
  &reftitle.parameters; 
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>keys</parameter>
     </term>
     <listitem>
      <para>
       Un tableau de champs utilisés pour trier l'index. Chaque élément
       du tableau contient un nom de champ comme clé, et la valeur
       devra être soit <literal>1</literal> pour un tri croissant, soit
       <literal>-1</literal> pour un tri décroissant.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Ce paramètre est un tableau associatif sous la forme
       <literal>array("optionname" => &lt;boolean&gt;, ...)</literal>.
       Actuellement, les options supportées sont :
       <itemizedlist>
        &mongo.writes.parameters.writeconcern;
        <listitem>
         <para>
          <literal>"unique"</literal>
         </para>
         <para>
          Crée un index unique.
         </para>
         <warning>
          <para>
           Un index unique ne peut être créé sur un champ si plusieurs
           documents existants ne contiennent pas ce champ. Le champ sera &null;
           pour ces documents et donc, non-unique. L'indexation clairsemé peut
           être utilisée pour résoudre ce problème, sachant qu'elle évite d'indexer
           les documents ne contenant pas ce champ.
          </para>
         </warning>
        </listitem>
        <listitem>
         <para>
          <literal>"dropDups"</literal>
         </para>
         <para>
          Si un index unique est sur le point d'être créé et que les
          valeurs dupliquées existent, les valeurs existantes seront supprimées.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"sparse"</literal>
         </para>
         <para>
          Crée un index clairsemé, qui ne contient que les documents contenant
          le champ. Cette option n'est compatible qu'avec des indexes sur des
          champs seuls.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"expireAfterSeconds"</literal>
         </para>
         <para>
          La valeur de cette option doit spécifier le nombre de secondes après
          lequel un document doit être considéré comme expiré, et doit être
          supprimé automatiquement de la collection. Cette option n'est compatible
          qu'avec des indexes sur des champs seuls où le champ contient des valeurs
          <classname>MongoDate</classname>.
         </para>
         <para>
          Cette fonctionalité est disponible depuis MongoDB 2.2+. Pour plus
          d'informations, reportez-vous à la documentation sur l'
          <link xlink:href="&url.mongodb.docs.expire_data;">expiration de données
           depuis des collections en définissant un TTL</link>.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"background"</literal>
         </para>
         <para>
          Par défaut, la création de l'index est une opération bloquante
          et stoppera les autres opérations sur la base de données tant
          que la création ne sera pas terminée. Si vous positionnez cette
          option à &true;, l'index sera créé en arrière-plan et les autres
          opérations pourront continuer normalement.
         </para>
         <warning>
          <para>
           Avant la version 2.1.0 de MongoDB, l'opération de création d'index
           n'est pas une opération d'arrière-plan lorsqu'elle réplique vers
           les secondaires, quelque soit la valeur de cette option.
           Voir le chapitre sur
           <link xlink:href="&url.mongodb.dochub.indexes.rs;">la construction
            des indexes avec des jeux de réplication</link> pour plus d'informations.
          </para>
         </warning>
        </listitem>
        <listitem>
         <para>
          <literal>"name"</literal>
         </para>
         <para>
          Depuis la version 1.0.5 du driver, vous pouvez spécifier un nom d'index.
          Il peut être utile si vous indexez plusieurs clés et que Mongo
          signale que le nom de l'index est trop long.
         </para>
        </listitem>
        &mongo.writes.parameters.timeout;
        &mongo.writes.parameters.safe;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un tableau contenant le statut de création
   de l'index si l'option <literal>"w"</literal> est défini.
   Sinon, retourne &true;.
  </para>
  <para>
   Les champs dans le tableau de statut sont décrits dans la documentation
   de la méthode <function>MongoCollection::insert</function>.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.3.0</entry>
       <entry>
        Le paramètre <parameter>options</parameter> n'accepte plus que les booléens
        pour identifier un index unique. A la place, il peut contenir un tableau
        dont la syntaxe est la suivante : <literal>array('unique' => true)</literal>.
       </entry>
      </row>
      <row>
       <entry>1.2.11</entry>
       <entry>
        Lance une alerte de niveau <constant>E_DEPRECATED</constant> lorsque le
        paramètre <parameter>options</parameter> est de type <type>scalar</type>.
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        Ajout de l'option <literal>"timeout"</literal>.
       </entry>
      </row>
      <row>
       <entry>1.0.11</entry>
       <entry>
        <para>
         L'option <literal>"safe"</literal> déclenchera le failover du primaire,
         si nécessaire.
        </para>
        <para>
         <classname>MongoException</classname> sera envoyée si le nom de l'index
         (généré ou défini) est plus long que 128 octets.
        </para>
       </entry>
      </row>
      <row>
       <entry>1.0.2</entry>
       <entry>
        Le paramètre <parameter>options</parameter> passe de booléen à un tableau.
        En version Pre-1.0.2, le second paramètre était une valeur booléenne
        optionnelle spécifiant un index unique.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Envoi <classname>MongoException</classname> si le nom de l'index est plus grand que
   128 octets. (Version 1.0.11+)
  </para>
  &mongo.errors.exceptions.writeconcern;
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCollection::ensureIndex</function></title>
   <programlisting role="php">
<![CDATA[
<?php

$c = new MongoCollection($db, 'foo');

// Crée un index montant sur 'x'
$c->ensureIndex('x');

// Crée un index sur 'y' décroissant
$c->ensureIndex(array('y' => 1));

// Crée un index montant sur 'z' et descendant sur 'zz'
$c->ensureIndex(array('z' => 1, 'zz' => -1));

// Crée un index unique sur 'x'
$c->ensureIndex(array('x' => 1), array("unique" => true));
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Exemple de suppression de données dupliquées</title>
   <programlisting role="php">
<![CDATA[
<?php

$collection->insert(array("username" => "joeschmoe"));
$collection->insert(array("username" => "joeschmoe"));

/*
 * La création d'index a échoué, vous ne pouvez pas créer d'index unique
 * sur une clé ne possédant pas de valeurs non-uniques
 */
$collection->ensureIndex(array("username" => 1), array("unique" => 1));

/*
 * La création d'index a réussi : un des documents est supprimé de la collection
 */
$collection->ensureIndex(array("username" => 1), array("unique" => 1, "dropDups" => 1));

/*
 * Maintenant que nous avons un index unique, les prochaines insertions
 * avec le même nom d'utilisateur (comme ci-dessous) échoueront
 */
$collection->insert(array("username" => "joeschmoe"));

?>
]]>
   </programlisting>
  </example>
  
  <example>
   <title>Indexation géospatiales</title>
   <para>
    Mongo supporte l'indexation géospatiales, vous permettant de chercher des documents
    se trouvant près d'un endroit donné, ou dans une forme. Par exemple, pour créer
    un index géospatial sur le champ "loc" :
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$collection->ensureIndex(array("loc" => "2d"));

?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   Documentation de MongoDB concernant les<link xlink:href="&url.mongodb.dochub.indexes;">index</link>
   et les <link xlink:href="&url.mongodb.dochub.geo;">indexes géospatiales</link>.
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
