<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 312738 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<section xml:id="mongo.connecting" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Connection</title>

 <para>
  La connexion à MongoDB est aussi simple que cela : <literal>new Mongo</literal>,
  mais il existe aussi plusieurs options et plusieurs configurations.
  La page sur la méthode <function>Mongo::__construct</function> couvre
  toutes les options offertes par l'API, mais aussi, propose
  plusieurs cas pratiques.
 </para>

 <section>
  <title>Identification sur une connexion</title>
  <para>
   Si MongoDB est en fonctionnement avec l'option <literal>--auth</literal>
   ou avec l'option <literal>--keyFile</literal>, vous devez vous connecter
   avant de faire une quelconque opération avec le driver. Vous pouvez vous
   identifier sur la connexion en fournissant le nom d'utilisateur et son
   mot de passe directement dans l'URI de connexion :
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://${username}:${password}@localhost");

?>
]]>
  </programlisting>
  <para>
   Si la connexion à la base de données est interrompue, le driver tentera
   automatiquement de se re-connecter et de vous ré-identifier.
  </para>
  <para>
   Vous pouvez aussi vous identifier au niveau de chaque base de données
   avec la fonction <function>MongoDB::authenticate</function> :
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo();
$db = $m->admin;

$db->authenticate($username, $password);

?>
]]>
  </programlisting>
  <para>
   Il y a un inconvénient majeur à cette méthode : si la connexion à la base
   de données est interrompue puis, rétablie, la connexion ne sera plus
   authentifiée.
  </para>
  <para>
   Si vous utilisez le format URI, le driver identifiera l'utilisateur sur la
   base de données admin. Pour s'authentifier en utilisant une autre base de données,
   spécifiez le nom de la base de données après l'hôte. Cet exemple authentifiera
   l'utilisateur sur la base de données "blog" :
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://${username}:${password}@localhost/blog");

?>
]]>
  </programlisting>
 </section>

 <section>
  <title>Paires de réplication</title>
  <para>
   Pour se connecter à une paire de réplication, vous devez spécifier
   au moins un membre de la paire et utiliser l'option <literal>replicaSet</literal>.
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://localhost:27017", array("replicaSet" => "myReplSetName"));

?>
]]>
  </programlisting>
  <para>
   Les versions 1.0.9+ du pilote sont requises pour connecter une paire
   (les versions d'avant ne detectent pas correctement le maitre et ne se reconnectent
   pas correctement.
  </para>
  <para>
   Le pilote PHP requêtera le(s) serveur(s) de base de données listé(s) pour vérifier qui
   est le maître. Dès qu'il peut se connecter à au moins un hôte listé, et trouver un maitre,
   la connexion sera réussie. Dans le cas contraire, une
   <classname>MongoConnectionException</classname> est envoyée.
  </para>
  <para>
   Si le maître devient indisponible, les esclaves ne deviendront pas maîtres pendant ces
   quelques secondes. Pendant ce temps là, la connexion ne sera pas capable d'effectuer
   les opérations sur la base de données (les connexions aux esclaves pourront toujours
   effectuer des lectures) et une exception sera levée.
  </para>
  <para>
   Une fois le maître trouvé, essayer des lectures ou écritures permettra au pilote de
   détecter le nouveau maître. Le pilote en fera alors sa connexion principale et continuera
   les opérations normalement.
  </para>
  <para>
   Pour plus d'informations sur les paires de réplication, reportez-vous à la
   <link xlink:href="&url.mongodb.replica;">documentation interne</link>.
  </para>
 </section>

 <section>
  <title>Support des Domain Socket</title>

  <para>
   Si vous utilisez MongoDB localement et que vous avez une version 1.0.9 ou supérieure du
   pilote, vous pouvez vous connecter au travers d'un fichier. MongoDB ouvre automatiquement
   un fichier de socket au démarrage: /tmp/mongodb-&lt;port&gt;.sock.
  </para>

  <para>
   Pour vous connecter au fichier de socket, specifiez le chemin dans la chaine de connexion
   MongoDB:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb:///tmp/mongo-27017.sock");

?>
]]>
  </programlisting>

  <para>
   Si vous voulez utiliser une authentification sur la connexion avec un fichier de socket,
   vous devez alors préciser un port égal à 0 comme cela l'analyseur sait où trouver la fin
   de la chaine de connexion.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://username:password@/tmp/mongo-27017.sock:0/foo");

?>
]]>
  </programlisting>

 </section>

 <section>
  <title>File d'attente de connexion</title>
  <para>
   En version 1.2.0+, le driver gérera automatiquement la file d'attente
   de connexion pour l'utilisateur.
  </para>
  <para>
   Lorsqu'un utilisateur crée une nouvelle instance de la clase
   <classname>Mongo</classname>, toutes les connexions nécessaires seront
   prises depuis leurs files d'attente (les connexions pour le jeu de réplication
   peuvent nécessiter plusieurs connexions). Lorsque l'instance de la classe
   <classname>Mongo</classname> sort du scope, les connexions seront remises
   dans la file d'attente.
  </para>
 </section>
 
 <section>
  <title>Les connexions persistantes</title>
  <note>
   <para>
    Cette section n'est pas pertinente pour les versions 1.2.0+. En 1.2.0+,
    les connexions sont toujours persistantes et gérées automatiquement
    par le driver.
   </para>
  </note>

  <para>
   La création de nouvelles connexions à la base de données est une opération lente.
   Pour minimiser le nombre de connexions que vous devez effectuer, vous pouvez utiliser
   les connexions dites "persistantes". Une connexion persistante est sauvegardée par PHP,
   et ainsi, vous pourrez utiliser la même connexion pour toutes vos requêtes.
  </para>

  <para>
   Par exemple, ce programme simple se connecte à la base de données 1000 fois :
  </para>

  <programlisting role="php">
<![CDATA[
<?php

for ($i=0; $i<1000; $i++) {
  $m = new Mongo();
}

?>
]]>
  </programlisting>

  <para>
   Son exécution prend approximativement 18 secondes. Si vous changez ce code pour
   utiliser les connexions persistantes :
  </para>

  <programlisting role="php">
<![CDATA[
<?php

for ($i=0; $i<1000; $i++) {
  $m = new Mongo("localhost:27017", array("persist" => "x"));
}

?>
]]>
  </programlisting>

  <para>
   ... il ne prend plus que .02 secondes, vu qu'il ne réalise réellement qu'une seule
   connexion à la base de données.
  </para>

  <para>
   Les connexions persistantes ont besoin d'une chaîne d'identification (qui est "x" dans
   notre précédent exemple) afin de les identifier de façon unique. Afin d'utiliser une
   connexion persistante, le nom de l'hôte, le port, la chaîne d'identification, le nom
   d'utilisateur ainsi que le mot de passe (si fourni) doivent correspondre avec une
   connexion persistante existante. Sinon, une nouvelle connexion sera créée avec ces
   informations d'identification.
  </para>
  <para>
   Les connexions persistantes sont <emphasis>hautement recommandées</emphasis> et
   devraient être systématiquement utilisées en production sauf si une très bonne raison
   indique le contraire. La plupart des raisons qui font qu'elles ne sont pas recommandées
   dans le cas des bases de données relationnelles ne sont pas applicables pour MongoDB.
  </para>
  <para>
   Les connexions persistantes sont utilisées par défaut depuis 1.0.12. Pour créer une
   connexion non-persistante, vous devez passer <literal>"persist" =&gt; false</literal> à
   <function>Mongo::__construct</function>.
  </para>
 </section>

</section>
