<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331219 Maintainer: Jean Desravines Status: ready -->
<!-- Reviewed: yes -->

<phpdoc:classref xml:id="class.mongocommandcursor" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La Classe MongoCommandCursor</title>
 <titleabbrev>MongoCommandCursor</titleabbrev>

 <partintro>

  <!-- {{{ MongocommandCursor intro -->
  <section xml:id="mongocommandcursor.intro">
   &reftitle.intro;
   <para>
    Un curseur de commande est utilisé pour parcourir les résultats d'une 
    commande exécutée sur une base de données. Un curseur de commande est 
    semblable à un <classname>MongoCursor</classname> standard à l'exception du 
    fait que vous l'utilisez pour parcourir les résultats d'une commande 
    exécutée sur un serveur au lieu du résultat d'une requête.
   </para>
   <para>
    Généralement, vous ne créez pas de curseur en utilisant le constructeur de  
    <classname>MongoCommandCursor</classname>. Vous récupérez plutôt un nouveau 
    curseur par l'appel de la fonction 
    <function>MongoCollection::commandCursor</function>.
   </para>
   <para>
    Utiliser un curseur de commande au lieu d'un 
    <methodname>MongoDB::command</methodname> vous permettra de parcourir des 
    résultats bien plus grands que ceux que retournerait 
    <methodname>MongoDB::command</methodname> qui sont limités à une certaine 
    taille de document (Actuellement 16Mo).
   </para>
   <para>
    A notER que le curseur ne "contient" pas de résultat de commande de base de 
    données,  il ne fait que les gérer. Ainsi, si vous imprimez un curseur 
    (avec, par exemple, <function>var_dump</function> ou 
    <function>print_r</function>), vous allez juste récupérer un objet curseur 
    et non vos documents.
   </para>
  </section>

  <section>
   <title>Les états d'un Curseur</title>
   <para>
    Un <classname>MongoCommandCursor</classname> possède 2 "périodes de vie" : 
    pré- et post- requête. Lorsqu'un curseur est créé, il n'a pas encore 
    interrogé la base de données, alors il est dans son état pré-requête. Dans 
    cet état, le client peut spécifier de manière plus précise ce que la requête
    doit faire, ce qui inclut la configuration de la taille du résultat.
   </para>
   <para>
    Lorsque le client essaye pour récupérer un résultat (en appelant
     <function>MongoCommandCursor::next</function>, directement ou non),
    le curseur change d'état pour passer dans celui de post-requête.
    A ce stade, la commande a été exécutée par la base de donnée et seulement 
    la taille du résultat peut être modifier.
   </para>
   <para>
    <example xml:id="mongocommandcursor.stages.adding-options">
     <title>Ajout d'options à <classname>MongoCommandCursor</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = new MongoCommandCursor(...);

// La base de données n'a pas été interrogée, les options peuvent être ajoutées
$cursor = $cursor->batchSize( 4 );

var_dump($cursor->getNext());
// à présent, la base de données a été interrogée et plus aucune option ne peut
// être ajouté.
?>
]]>
     </programlisting>
    </example>
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="mongocommandcursor.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoCommandCursor</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoCommandCursor</classname>
     </ooclass>
     <oointerface>
      <interfacename>Iterator</interfacename>
     </oointerface>
     <oointerface>
      <interfacename>MongoCursorInterface</interfacename>
     </oointerface>
    </classsynopsisinfo>
    <!-- }}} -->
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongocommandcursor')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>

  <section role="seealso">
   &reftitle.seealso;
   <simplelist>
    <member><methodname>MongoDb::command</methodname></member>
    <member><methodname>MongoCollection::commandCursor</methodname></member>
   </simplelist>
  </section>

 </partintro>

 &reference.mongo.entities.mongocommandcursor;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
