<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./fr/functions/sybase.xml, last change in rev 1.2 -->
<!-- last change to 'sybase-fetch-object' in en/ tree in rev 1.2 -->
  <refentry id="function.sybase-fetch-object">
   <refnamediv>
    <refname>sybase_fetch_object</refname>
    <refpurpose>Retourne une ligne Sybase sous la forme d'un objet</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
     <methodsynopsis>
      <type>object</type><methodname>sybase_fetch_object</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>object</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>sybase_fetch_object</function> retourne un objet qui
     contient la ligne demand&eacute;e, en cas de succ&egrave;s, et
     &false; en cas d'erreur.
    </para>
    <para>
     <function>sybase_fetch_object</function> est similaire &agrave;
     <function>sybase_fetch_array</function>, avec une diff&eacute;rence :
     c'est un objet qui est retourn&eacute; &agrave; la place d'un tableau.
     Indirectement, cela signifie que vous ne pourrez acc&eacute;der aux
     valeurs que par les propri&eacute;t&eacute;s, et non plus avec des offsets
     (les nombres sont interdits comme nom de propri&eacute;t&eacute;).
    </para>
    <para>
     Utilisez le second param&egrave;tre <parameter>object</parameter> pour sp&eacute;cifier le
     type d'objet que vous voulez retourner. Si ce param&egrave;tre est omis, l'objet
     r&eacute;sultant sera de classe <literal>stdClass</literal>.
    </para>
    <note>
     <para>
      Depuis &php; 4.3.0, cette fonction ne retourne plus les membres num&eacute;riques.
     </para>
     <para>
      Ancienne m&eacute;thode : 
      <screen>
<![CDATA[
object(stdclass)(3) {
  [0]=>
  string(3) "foo"
  ["foo"]=>
  string(3) "foo"
  [1]=>
  string(3) "bar"
  ["bar"]=>
  string(3) "bar"
}
]]>
      </screen>
      Nouvelle m&eacute;thode : 
      <screen>
<![CDATA[
object(stdclass)(3) {
  ["foo"]=>
  string(3) "foo"
  ["bar"]=>
  string(3) "bar"
}
]]>
      </screen>
     </para>
    </note>
    <example>
     <title><function>sybase_fetch_object</function> retourne l'objet <literal>Foo</literal></title>
     <programlisting role="php">
<![CDATA[
<?php
    class Foo {
        var $foo, $bar, $baz;
    }
    
    // {...]
    $qrh= sybase_query('SELECT foo, bar, baz FROM example');
    $foo= sybase_fetch_object($qrh, 'Foo');
    $bar= sybase_fetch_object($qrh, new Foo());
    // {...]
?>
]]>
     </programlisting>
    </example>
    <para>
     Au niveau de la vitesse, cette fonction est identique &agrave;
     <function>sybase_fetch_array</function>, et presque aussi rapide que
     <function>sybase_fetch_row</function> (la diff&eacute;rence est insignifiante).
    </para>
    <para>
     Voir aussi
     <function>sybase_fetch_array</function> et
     <function>sybase_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
