<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->
 <reference id="ref.memcache">
  <title>Fonctions Memcache</title>
  <titleabbrev>Memcache</titleabbrev>

  <partintro>
   <section id="memcache.intro">
    &reftitle.intro;
    <para>
     Le module <literal>Memcache</literal> fournit une interface procédurale maniable
     ainsi qu'orientée objet à <literal>Memcache</literal>, un démon fortement efficace dans
     la gestion du cache, qui est principalement destiné à faire baisser la charge des bases
     de données dans les applications web dynamiques.
    </para>
    <para> 
     Plus d'informations concernant <literal>Memcache</literal> peuvent être
     consultées sur <ulink url="&url.memcache;">&url.memcache;</ulink>.
    </para>
   </section>

   <section id="memcache.requirements">
    &reftitle.required;
    <para>
     Ce module utilise les fonctions de la bibliothèque <ulink url="&url.zlib;">zlib</ulink>
     pour supporter la compression des données à la volée. Zlib est donc requis pour installer
     ce module.
    </para>
    <para>
     &php; 4.3.3 ou supérieur est requis pour utiliser l'extension <literal>Memcache</literal>.
    </para>
   </section>

   &reference.memcache.configure;
   &reference.memcache.constants;
   
   <section id="memcache.ini">
    &reftitle.runtime;
    &no.config;
   </section>
   
   <section id="memcache.resources">
    &reftitle.resources;
    <para>
     Il n'y a qu'une seule ressource utilisée par le module <literal>Memcache</literal> :
     c'est le lien identifiant représentant la connexion du serveur de cache.
    </para>
   </section>

   <section id="memcache.examples">
   &reftitle.examples;
    <para>
     <example>
      <title>Exemple avec l'extension <literal>Memcache</literal></title>
      <programlisting role="php">
<![CDATA[
<?php

$memcache = new Memcache;
$memcache->connect('localhost', 11211) or die ("Connexion impossible");

$version = $memcache->getVersion();
echo "Version du serveur : ".$version."<br />\n";

$tmp_object = new stdClass;
$tmp_object->str_attr = 'test';
$tmp_object->int_attr = 123;

$memcache->set('key', $tmp_object, false, 10) or die ("Echec de la sauvegarde des données sur le serveur");
echo "Les données ont été stockées dans le cache (les données expireront dans 10 secondes)<br />\n";

$get_result = $memcache->get('key');
echo "Données depuis le cache :<br />\n";

var_dump($get_result);

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Dans l'exemple ci-dessus, un objet est sauvegardé dans le cache et ensuite, affiché.
     Les objets ainsi que les autres types non-scalaires sont linéarisés avant d'être 
     sauvegardé ; il est donc impossible d'y stocker des ressources
     (i.e. identifiant de connexion et autres) dans le cache.
    </para>
   </section>

  </partintro>

  &reference.memcache.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

