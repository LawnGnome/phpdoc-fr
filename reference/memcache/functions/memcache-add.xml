<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.memcache-add" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::add</refname>
  <refpurpose>Ajout d'un élément au serveur</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::add</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flag</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::add</function> enregistre la variable <parameter>var</parameter> 
   avec la clé <parameter>key</parameter> seulement si cette clé n'existe pas
   encore sur le serveur. Vous pouvez également utiliser la fonction
   <function>Memcache_add</function>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       La clé qui sera associée avec l'élément.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable à enregistrer. Les chaînes de caractères et les entiers
       sont enregistrés comme tels, les autres types sont enregistrés de
       manière sérialisée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flag</parameter></term>
     <listitem>
      <para>
       Utilisez <constant>MEMCACHE_COMPRESSED</constant> pour enregistrer
       l'élément compressé (utilise zlib).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expire</parameter></term>
     <listitem>
      <para>
       Temps d'expiration pour l'élément. S'il égal &zero;, l'élément n'expirera
       jamais. Vous pouvez aussi utiliser un timestamp Unix ou un nombre de
       seconde en commençant par la date d'aujourd'hui, mais dans le dernier
       cas, le nombre de secondes ne doit pas excéder 2592000 (30 jours).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
   Retourne &false; si cette clé existe déjà.
   Pour le reste, la fonction <function>Memcache::add</function> se comporte de façon
   similaire à la fonction <function>Memcache::set</function>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>Memcache::add</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$memcache_obj = memcache_connect("localhost", 11211);

/* API procédurale */
memcache_add($memcache_obj, 'var_key', 'test variable', false, 30);

/* API orientée objet */
$memcache_obj->add('var_key', 'test variable', false, 30);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::set</function></member>
    <member><function>Memcache::replace</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->