<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.5 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.memcache-setserverparams" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::setServerParams</refname>
  <refpurpose>Modifit les paramètres et les statuts du serveur pendant l'exécution</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::setServerParams</methodname>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>port</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>retry_interval</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>status</parameter></methodparam>
   <methodparam choice="opt"><type>callback</type><parameter>failure_callback</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::setServerParams</function> modifit les paramètres du
   serveur durant l'exécution. Vous pouvez également utiliser la fonction
   <function>memcache_set_server_params</function>.
  </para>
  <note>
   <para>
    Cette fonction a été ajoutée en Memcache version 2.1.0.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Pointe à l'hôte où memcache écoute pour des connexions.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Pointe au port où memcache écoute pour des connexions.
       Ce paramètre est optionnel et sa valeur par défaut est 11211.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Valeur en seconde qui sera utilisée pour se connecter au daemon.
       Pensez-y deux fois avant de changer la valeur par défaut d'une seconde
       - vous pourriez perdre tous les avantages de l'utilisation de la cache
       si votre connexion est trop lente.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>retry_interval</parameter></term>
     <listitem>
      <para>
       Contrôle combien de fois un serveur qui échoue sera retenté, la valeur
       par défaut est de 15 secondes. Si ce paramètre vaut -1, aucune nouvelle
       tentative ne sera effectuée. Ni ce paramètre, ni le paramètre
       <parameter>persistent</parameter> n'ont d'effet lorsque cette extension
       est chargée dynamiquement via la fonction <function>dl</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       Contrôle si le serveur doit être flaggué comme étant en ligne.
       Si ce paramètre vaut &false; et le paramètre <parameter>retry_interval</parameter>
       -1, cela permet de conserver un serveur qui a échoué dans la liste
       et n'affectera pas l'algorythme de distribution des clés. Les demandes
       pour ce serveur échoueront immédiatement suivant la configuration du
       paramètre <parameter>memcache.allow_failover</parameter>.
       Par défaut, ce paramètre vaut &true;, signifiant que le serveur doit être
       considéré comme étant en ligne.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>failure_callback</parameter></term>
     <listitem>
      <para>
       Permet à l'utilisateur de spécifier une fonction de callback permettant de
       contourner une erreur. Le callback est exécuté avant d'atteindre la limite
       de tentative. La fonction prend deux paramètres ; le nom de l'hôte et le port
       du serveur qui a échoué.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>Memcache::setServerParams</function></title>
    <programlisting role="php">
<![CDATA[
<?php

function _callback_memcache_failure($host, $port) {
    print "memcache '$host:$port' failed";
}

/* API orientée objet */

$memcache = new Memcache;

// Ajoute le serveur en mode hors ligne
$memcache->addServer('memcache_host', 11211, false, 1, 1, -1, false);

// Replace le serveur en ligne
$memcache->setServerParams('memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');

/* API procédurale */

$memcache_obj = memcache_connect('memcache_host', 11211);
memcache_set_server_params($memcache_obj, 'memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::addServer</function></member>
    <member><function>Memcache::getServerStatus</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->