<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 283822 Maintainer: dams Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.memcache-addserver" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::addServer</refname>
  <refpurpose>Ajoute un serveur <literal>memcache</literal> à la liste de connexion</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::addServer</methodname>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>port</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>persistent</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>weight</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>retry_interval</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>status</parameter></methodparam>
   <methodparam choice="opt"><type>callback</type><parameter>failure_callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeoutms</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::addServer</function> ajoute un serveur à la liste de
   connexion. La connexion, qui a été ouverte avec la fonction
   <function>Memcache::addServer</function>, sera automatiquement fermée
   à la fin de l'exécution du script ; vous pouvez également la fermer manuellement
   avec la fonction <function>Memcache::close</function>.
   Vous pouvez également utiliser la fonction <function>memcache_add_server</function>.
  </para>

  <para>
   Lors de l'utilisation de cette méthode (contrairement aux méthodes
   <function>Memcache::connect</function> et <function>Memcache::pconnect</function>),
   la connexion au réseau n'est pas établie sans qu'elle ne soit nécessaire. De plus,
   il n'y a aucun inconvénient à ajouter beaucoup de serveurs à la liste, même s'ils ne
   seront pas tous utilisés.
  </para>

  <para>
   Le basculement peut se produire à n'importe quel moment avec n'importe
   quelle méthode tant que les autres serveurs sont disponibles, la requête
   n'émettra pas d'erreur. N'importe quel interface de connexion ou niveau
   d'erreurs de serveur Memcache (à l'exception du manque de mémoire) peut
   lancer le basculement. Des erreurs normales de client comme l'ajout d'une
   clé existante ne lancera pas un basculement.
  </para>

  <note>
   <para>
    Cette fonction a été ajoutée à la version de Memcache 2.0.0.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Pointe à l'hôte où memcache écoute pour des connexions. Ce paramètre peut également
       spécifier d'autres transporteurs comme <literal>unix:///path/to/memcached.sock</literal>
       pour utiliser les sockets Unix, et dans ce cas, <parameter>port</parameter> doit également
       être défini à <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Pointe au port où memcache écoute pour des connexions.
       Ce paramètre est optionnel et sa valeur par défaut est 11211. Définissez ce
       paramètre à <literal>0</literal> lors de l'utilisation des sockets Unix.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>persistent</parameter></term>
     <listitem>
      <para>
       Contrôle l'utilisation d'une connexion persistante. La valeur par
       défaut est &true;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>weight</parameter></term>
     <listitem>
      <para>
       Nombre d'entrées à créer pour ce serveur qui en retour contrôle sa
       probabilité d'être choisi. La probabilité est relative au poids total
       de tous les serveurs.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Valeur en seconde qui sera utilisée pour se connecter au démon.
       Pensez-y deux fois avant de changer la valeur par défaut d'une seconde
       - vous pourriez perdre tous les avantages de l'utilisation de la cache
       si votre connexion est trop lente.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>retry_interval</parameter></term>
     <listitem>
      <para>
       Contrôle combien de fois un serveur qui échoue sera tenté à nouveau, la valeur
       par défaut est de 15 secondes. Si ce paramètre vaut -1, aucune nouvelle
       tentative ne sera effectuée. Ni ce paramètre, ni le paramètre
       <parameter>persistent</parameter> n'ont d'effet lorsque cette extension
       est chargée dynamiquement via la fonction <function>dl</function>.
      </para>
      <para>
       Chaque structure de connexion échouée a son propre dépassement de temps
       et avant que celui-ci expire, il sera sauté lors de la sélection du
       processus pour servir une requête. Une fois expiré, la connexion sera
       correctement reconnectée ou marquée comme échouée pour un autre
       intervalle de <parameter>retry_interval</parameter> secondes. L'effet
       typique est que chaque enfant de serveur Web essaiera la connexion
       chaque <parameter>retry_interval</parameter> secondes lorsqu'il sert
       une page.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       Contrôle si le serveur doit être indiqué comme étant en ligne.
       Quand ce paramètre vaut &false; et le paramètre <parameter>retry_interval</parameter>
       vaut -1, cela permet de conserver un serveur qui a échoué dans la liste
       et n'affectera pas l'algorithme de distribution des clés. Les demandes
       pour ce serveur échoueront immédiatement suivant la configuration du
       paramètre <parameter>memcache.allow_failover</parameter>.
       Par défaut, ce paramètre vaut &true;, signifiant que le serveur doit être
       considéré comme étant en ligne.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>failure_callback</parameter></term>
     <listitem>
      <para>
       Permet à l'utilisateur de spécifier une fonction de rappel permettant de
       contourner une erreur. La fonction de rappel est exécutée avant d'atteindre la limite
       de tentative. La fonction prend deux paramètres ; le nom de l'hôte et le port
       du serveur qui a échoué.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeoutms</parameter></term>
     <listitem>
      <para>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>Memcache::addServer</function></title>
    <programlisting role="php">
<![CDATA[
<?php

/* API orientée objet */

$memcache = new Memcache;
$memcache->addServer('memcache_host', 11211);
$memcache->addServer('memcache_host2', 11211);

/* API procédurale */

$memcache_obj = memcache_connect('memcache_host', 11211);
memcache_add_server($memcache_obj, 'memcache_host2', 11211);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::connect</function></member>
    <member><function>Memcache::pconnect</function></member>
    <member><function>Memcache::close</function></member>
    <member><function>Memcache::setServerParams</function></member>
    <member><function>Memcache::getServerStatus</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->