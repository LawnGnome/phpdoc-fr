<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.5 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: no -->
<refentry id="function.Memcache-addServer">
 <refnamediv>
  <refname>Memcache::addServer</refname>
  <refpurpose>Ajoute un serveur <literal>memcache</literal> à la liste de connexion</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::addServer</methodname>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>port</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>persistent</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>weight</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>retry_interval</parameter></methodparam>
  </methodsynopsis>
  
  <para>
   <function>Memcache::addServer</function> ajoute un serveur à la liste de
   connexion. La connexion actuelle est établie à la première utilisation. La
   connexion, qui a été ouverte en utilisant
   <function>Memcache::addServer</function> sera automatiquement fermée à la
   fin de l'exécution du script. De plus, vous pouvez la fermer avec la
   fonction <function>Memcache::close</function>.
   Vous pouvez également utiliser la fonction <function>memcache_add_server</function>.
  </para>
  
  <para>
   Le basculement peut se produire à n'importe quel moment avec n'importe
   quelle méthode tant que les autres serveurs sont disponibles, la requête
   n'émettra pas d'erreur. N'importe quel interface de connexion ou niveau
   d'erreurs de serveur Memcache (à l'exception du manque de mémoire) peut
   lancer le basculement. Des erreurs normales de client comme l'ajout d'une
   clé existante ne lancera pas un basculement.
  </para>

  <note>
   <para>
    Cette fonction a été ajoutée à la version de Memcache 2.0.0.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Pointe à l'hôte où memcache écoute pour des connexions.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Pointe au port où memcache écoute pour des connexions.
       Ce paramètre est optionnel et sa valeur par défaut est 11211.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>persistent</parameter></term>
     <listitem>
      <para>
       Contrôle l'utilisation d'une connexion persistante. La valeur par
       défaut est &true;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>weight</parameter></term>
     <listitem>
      <para>
       Nombre d'entrées à créer pour ce serveur qui en retour contrôle sa
       probabilité d'être choisi. La probabilité est relative au poids total
       de tous les serveurs.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Valeur en seconde qui sera utilisée pour se connecter au daemon.
       Pensez-y deux fois avant de changer la valeur par défaut d'une seconde
       - vous pourriez perdre tous les avantages de l'utilisation de la cache
       si votre connexion est trop lente.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>retry_interval</parameter></term>
     <listitem>
      <para>
       Contrôle combien de fois un serveur qui échoue sera retenté, la valeur
       par défaut est de 15 secondes. Ni le paramètre
       <parameter>persistent</parameter> ni celui-ci n'a d'effet lorsque
       l'extension est chargée dynamiquement via <function>dl</function>.
      </para>
      <para>
       Chaque structure de connexion échouée a son propre dépassement de temps
       et avant que celui-ci expire, il sera sauté lors de la sélection du
       processus pour servir une requête. Une fois expiré, la connexion sera
       correctement reconnectée ou marquée comme échouée pour un autre
       interval de <parameter>retry_interval</parameter> secondes. L'effet
       typique est que chaque enfant de serveur Web essaiera la connexion
       chaque <parameter>retry_interval</parameter> secondes lorsqu'il sert
       une page.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>Memcache::addServer</function></title>
    <programlisting role="php">
<![CDATA[
<?php

/* API orientée objet */

$memcache = new Memcache;
$memcache->addServer('memcache_host', 11211);
$memcache->addServer('memcache_host2', 11211);

/* API procédurale */

$memcache_obj = memcache_connect('memcache_host', 11211);
memcache_add_server($memcache_obj, 'memcache_host2', 11211);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::connect</function></member>
    <member><function>Memcache::pconnect</function></member>
    <member><function>Memcache::close</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
