<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.4 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.Memcache-replace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::replace</refname>
  <refpurpose>Remplace une valeur d'un élément existant</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::replace</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flag</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::replace</function> est utilisé pour remplacer la valeur
   d'un élément identifié par la clé <parameter>key</parameter>. Dans le cas où
   l'élément identifié par la clé <parameter>key</parameter> n'existe pas, 
   la fonction <function>Memcache::replace</function> retournera &false;.
   Pour le reste, la fonction <function>Memcache::replace</function> fonctionne
   de la même façon que la fonction <function>Memcache::set</function>.
   Vous pouvez également utiliser la fonction <function>memcache_replace</function>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       La clé qui sera associée avec l'élément.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable à enregistrer. Les chaînes de caractères et les entiers
       sont enregistrer comme tels, les autres types sont enregistrés de
       manière sérialisée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flag</parameter></term>
     <listitem>
      <para>
       Utilisez <constant>MEMCACHE_COMPRESSED</constant> pour enregistrer
       l'élément compressé (utilise zlib).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expire</parameter></term>
     <listitem>
      <para>
       Temps d'expiration pour l'élément. S'il égal &zero;, l'élément n'expirera
       jamais. Vous pouvez aussi utiliser un timestamp Unix ou un nombre de
       seconde en commençant par la date d'aujourd'hui, mais dans le dernier
       cas, le nombre de secondes ne doit pas excéder 2592000 (30 jours).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>Memcache::replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$memcache_obj = memcache_connect('memcache_host', 11211);

/* API procédurale */
memcache_replace($memcache_obj, "test_key", "some variable", false, 30);

/* API orientée objet */
$memcache_obj->replace("test_key", "some variable", false, 30);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::set</function></member>
    <member><function>Memcache::add</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->