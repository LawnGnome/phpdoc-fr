<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.2 Maintainer: yannick Status: ready -->
<refentry id="function.Memcache-set">
 <refnamediv>
  <refname>Memcache::set</refname>
  <refpurpose>Stocke des données dans le serveur de cache</refpurpose>
 </refnamediv>
 <refsect1>
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::set</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flag</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>Memcache::set</function> stocke l'élément <parameter>var</parameter>
   avec la clé <parameter>key</parameter> sur le serveur de cache.
   Le paramètre <parameter>expire</parameter> représente le délai en secondes
   d'expiration de l'élément. S'il vaut 0, l'élément n'expirera jamais (mais le serveur
   de cache ne garantie pas que cet élément sera toujours stocké, il peut être
   effacé du cache pour faire de la place à d'autres éléments).
  </para>
  <para>
   Vous pouvez utiliser la constante <constant>MEMCACHE_COMPRESSED</constant> 
   comme valeur du paramètre <parameter>flag</parameter> 
   si vous voulez utiliser la compression à la volée (utilisation de la bibliothèque zlib).
  </para>
  <para>
   Vous pouvez également utiliser la fonction 
   <function>memcache_set</function>.
   Regardez l'exemple ci-dessous.
  </para>
  <note>
   <para>
    Souvenez-vous que les ressources (i.e. identifiant de fichiers ou de connexion)
    ne peuvent pas être stockées dans le cache, car elles ne peuvent pas être
    représentées linéairement.
   </para> 
  </note>
  <example>
   <title>Exemple avec <function>Memcache::set</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/* API procédurale */

/* connexion au serveur de cache */
$memcache_obj = memcache_connect('memcache_host', 11211);

/*
définie la valeur de l'élément identifié par la clé 'var_key' ;
utilisation de la valeur 0 pour le flag ;
la compression n'est pas utilisée ;
le délai d'expiration vaut 30 secondes
*/
memcache_set($memcache_obj, 'var_key', 'quelques variables', 0, 30);

echo memcache_get($memcache_obj, 'var_key');

?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Exemple avec <function>Memcache::set</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/* API orientée objet */

$memcache_obj = new Memcache;

/* connexion au serveur de cache */
$memcache_obj->connect('memcache_host', 11211);

/*
définie la valeur de l'élément identifié par la clé 'var_key' ;
utilisation de la compression à la volée ;
le délai d'expiration vaut 50 secondes
*/
$memcache_obj->set('var_key', 'quelques grosses variables', MEMCACHE_COMPRESSED, 50);

echo $memcache_obj->get('var_key');

?>
]]>
   </programlisting>
  </example>
  <para>
   &return.success;
  </para>
  <para>
   Voir aussi
   <function>Memcache::add</function> et
   <function>Memcache::replace</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->