<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
 <appendix id="migration4">
    <title>Migration de PHP 3.0 &agrave; PHP 4.0</title>
    <sect1 id="migration4.changes">
     <title>Ce qui a chang&eacute; en PHP 4.0</title>
     <para>
      PHP 4.0 et le moteur Zend ont significativement am&eacute;lior&eacute; les
      performances et les possibilit&eacute;s de PHP, tout en assurant une
      compatibilit&eacute; ascendante maximale. Le maximum de codes existants
      sous PHP 3.0 fonctionneront sous PHP 4.0. La migration de votre
      code de PHP 3.0 vers PHP 4.0 sera beaucoup plus facile que
      celle de PHP/FI 2.0 vers 3.0. Un grand nombre de scripts seront
      pr&ecirc;ts sans modifications, mais il est bon que vous connaissiez
      les quelques diff&eacute;rences, et que vous testiez vos applications
      avant d'effecteur le changement de cadre de production. Les
      indications suivantes vous mettront sur la voie.
     </para>
    </sect1>
  <sect1 id="migration4.php4.with.php3">
   <title>Utiliser PHP 3 et PHP 4 simultan&eacute;ment</title>
   <simpara>
    Les syst&egrave;mes d'exploitation r&eacute;cents disposent de capacit&eacute;s
    de versioning et de scoping. Ces fonctionnalit&eacute;s rendent possible l'installation
    de PHP 3 et PHP 4 comme modules Apache, simultan&eacute;ment.
   </simpara>
   <simpara>
    Ceci a &eacute;t&eacute; fait sur les plate-formes suivantes :
   </simpara>
   <itemizedlist>
     <listitem>
      <simpara>
       Linux avec les binutils r&eacute;cents (test&eacute; avec binutils 2.9.1.0.25)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Solaris 2.5 ou plus r&eacute;cent
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       FreeBSD (test&eacute; avec 3.2, 4.0)
      </simpara>
     </listitem>
   </itemizedlist>
   <para>
    Pour l'activer, configurez PHP 3 et PHP 4 pour qu'ils utilisent APXS
    (<link linkend="install.configure.with-apxs"><option role="configure">--with-apxs</option></link>)
     et les extensions n&eacute;cessaires
    (<link linkend="install.configure.enable-versioning"><option role="configure">--enable-versioning</option></link>).
    En dehors de cela, toutes les instructions d'installation habituelles
    s'appliquent. Par exemple :
    <informalexample>
     <programlisting>
$ ./configure \
  --with-apxs=/apache/bin/apxs \
  --enable-versioning \
  --with-mysql \
  --enable-track-vars
     </programlisting>
    </informalexample>
   </para>
  </sect1>
  <sect1 id="migration4.configuration">
   <title>Migration des fichiers de configuration</title>
   <para>
    Le fichier de configuration global, <filename>php3.ini</filename>,
    a &eacute;t&eacute; renomm&eacute; en <filename>php.ini</filename>.
   </para>
   <para>
    Pour les fichiers de configuration Apache, il y a eu des modifications
    plus importantes. Les types MIME reconnus par le module PHP ont &eacute;t&eacute; modifi&eacute;s.
    <informalexample>
     <programlisting>
application/x-httpd-php3        --&gt;    application/x-httpd-php
application/x-httpd-php3-source --&gt;    application/x-httpd-php-source
     </programlisting>
    </informalexample>
   </para>
   <para>
    Vous pouvez faire fonctionner vos deux versions de PHP avec le
    m&ecirc;me fichier de configuration Apache (suivant la version qui est
    d&eacute;j&agrave; compil&eacute;e sur le serveur), en utilisant la syntaxe suivante :
    <informalexample>
     <programlisting>
AddType  application/x-httpd-php3        .php3
AddType  application/x-httpd-php3-source .php3s
AddType  application/x-httpd-php         .php
AddType  application/x-httpd-php-source  .phps
      </programlisting>
    </informalexample>
   </para>
   <simpara>
    De plus, les directives de nom de PHP pour Apache ont aussi &eacute;t&eacute; modifi&eacute;es.
   </simpara>
   <para>
    Depuis PHP 4.0, il n'y a que 4 directives Apache qui se rapportent
    &agrave; PHP :
    <informalexample>
     <programlisting>
php_value [PHP directive name] [value]
php_flag [PHP directive name] [On|Off]
php_admin_value [PHP directive name] [value]
php_admin_flag [PHP directive name] [On|Off]
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Il y a deux diff&eacute;rences entre les options Admin et les autres valeurs :
   </simpara>
   <itemizedlist>
    <listitem>
     <simpara>
      Les options Admin ne peuvent &ecirc;tre plac&eacute;es que des le fichier de configuration
      g&eacute;n&eacute;ral (i.e., httpd.conf).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Les valeurs Standard ne peuvent pas contr&ocirc;ler certaines directives PHP. Par
      exemple, le safe mode (si vous pouviez modifier les configurations dans le fichier
      <filename>.htaccess</filename>, cela annulerait toute la s&eacute;curit&eacute; du safe mode.
      A l'inverse, les valeurs Admin peuvent modifier n'importe quelle directive
      PHP.
     </simpara>
    </listitem>
   </itemizedlist>
   <simpara>
    Pour rendre le processus de transition plus agr&eacute;able, PHP 4.0 est
    distribu&eacute; avec des scripts qui convertissent automatiquement vos
    configuration Apache et vos fichiers <filename>.htaccess</filename>
    pour qu'ils puissent fonctionner aussi bien avec PHP 3 que PHP 4. Ces scripts
    ne convertissent PAS les lignes concernant les types MIME. Vous devez le faire
    vous-m&ecirc;me.
   </simpara>
   <para>
    Pour convertir votre fichier de configuration Apache, ex&eacute;cutez le script
    <filename>apconf-conv.sh</filename> (disponible dans le dossier
    <filename>scripts/apache/</filename>). Par exemple :
    <informalexample>
     <programlisting>
~/php4/scripts/apache:#  ./apconf-conv.sh /usr/local/apache/conf/httpd.conf
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Votre configuration originale sera sauv&eacute;e dans le fichier
    <filename>httpd.conf.orig</filename>.
   </simpara>
   <para>
    Pour convertir vos fichiers <filename>.htaccess</filename>, ex&eacute;cutez
    le script <filename>aphtaccess-conv.sh</filename> (disponible dans le dossier
    <filename>scripts/apache/</filename>). Par exemple :
    <informalexample>
     <programlisting>
~/php4/scripts/apache:#  find / -name .htaccess -exec ./aphtaccess-conv.sh {} \;
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    De la m&ecirc;me fa&ccedil;on, votre vieux fichier <filename>.htaccess</filename>
    sera sauv&eacute; sous le nom <filename>.htaccess.orig</filename>.
   </simpara>
   <simpara>
    Les scripts de conversion requi&egrave;rent l'installation pr&eacute;alable de awk.
   </simpara>
  </sect1>
    <sect1 id="migration4.parser">
     <title>Comportement de l'analyseur</title>
     <para>
      L'analyse et l'&eacute;xecution sont d&eacute;sormais deux &eacute;tapes
      compl&egrave;tement dissoci&eacute;es, et l'&eacute;x&eacute;cution
      intervient lorsque le code, ainsi que tous ses inclusions et
      pr&eacute;-requis, ont &eacute;t&eacute; compl&egrave;tement
      analys&eacute;s et valid&eacute;s.
     </para>
     <para>
      Une des nouvelles conditions introduites est que les fichiers
      inclus et requis (<function>include</function> et
      <function>require</function>) doivent &ecirc;tre syntaxiquement
      complets. Vous ne pouvez plus r&eacute;partir diff&eacute;rents cas de votre
      code dans plusieurs fichiers. Vous ne pouvez plus commencer une
      boucle <literal>for</literal> ou <literal>while</literal>,
      une condition <literal>if</literal> ou un cas <literal>switch</literal>
      dans un fichier, et finir la boucle ou placer les cas
      <literal>else</literal>, <literal>endif</literal>,
      <literal>case</literal> ou <literal>break</literal>
      dans un autre fichier.
     </para>
     <para>
      Il est toujours valable d'inclure du code suppl&eacute;mentaire depuis
      une boucle ou dans une condition, mais les accolades de
      bloc <literal>{...}</literal>, et les &eacute;l&eacute;ments de la boucle
      doivent &ecirc;tre dans le m&ecirc;me fichier ou cha&icirc;ne &eacute;valu&eacute;e avec
      <function>eval</function>.
     </para>
     <para>
      Cela ne devrait pas perturber trop de monde, car &eacute;taler son
      code de cette fa&ccedil;on est plut&ocirc;t un style &agrave; &eacute;viter.
     </para>
     <para>
      Une autre nouveaut&eacute; est qu'il est plus possible de faire
      retourner une valeur avec un fichier requis (<function>require</function>)
      (mais c'est plut&ocirc;t rare en PHP 3.0). Retourner une valeur
      avec un fichier inclus (<function>include</function>) est toujours
      possible.
     </para>
    </sect1>
    <sect1 id="migration4.error-reporting">
     <title>Rapport d'erreur</title>
     <sect2 id="migration4.error-reporting.config">
      <title>Changement de configuration</title>
      <para>
       Avec PHP 3.0, le niveau de rapport d'erreur &eacute;tait obtenu en
       ajoutant les constantes num&eacute;riques de chaque niveau de
       rapport. G&eacute;n&eacute;ralement, on utilisait 15 pour afficher toutes
       les erreurs, et 7 pour afficher toutes les erreurs hormis
       les alertes simples.
      </para>
      <para>
       PHP 4.0 dispose d'un nombre significativement plus grand de niveaux
       de rapport d'erreur, et l'analyseur comprend d&eacute;sormais les
       constantes, lors des modifications.
      </para>
      <para>
       Le niveau de rapport d'erreur doit d&eacute;sormais &ecirc;tre explicitement
       configur&eacute; en supprimant les niveaux dont vous ne voulez pas
       du niveau maximal, gr&acirc;ce &agrave; la fonction de OU exclusif. &Ccedil;a a
       l'air compliqu&eacute;? Supposons que vous souhaitiez afficher toutes les
       erreurs, hormis les alertes de style, qui sont rep&eacute;r&eacute;es par
       la constante : E_NOTICE. Il suffit d'ajouter la valeur
       suivante dans le fichier <filename>php.ini</filename>:
       <literal>error_reporting = E_ALL &amp; ~ ( E_NOTICE )</literal>.
       Si vous voulez supprimer en plus les alertes, vous pouvez
       ajouter la constante appropri&eacute;e, en la combinant avec l'op&eacute;rateur
       OU logique '|':
       <literal>error_reporting= E_ALL &amp; ~ ( E_NOTICE | E_WARNING )</literal>.
      </para>
      <warning>
       <para>
          L'utilisation des vieilles valeurs de 7 et 15 est une tr&egrave;s
          mauvaise id&eacute;e, car elles ne prennent pas en compte les
          nouvelles classes d'erreurs, y compris certaines erreurs
          d'analyse. Cela peut conduire &agrave; de tr&egrave;s &eacute;tranges r&eacute;sultats,
          o&ugrave; le script n'affiche plus rien, malgr&eacute; une erreur d'analyse.
       </para>
       <para>
          Cela a conduit &agrave; un grand nombre de rapport d'erreur dans
          le pass&eacute;, alors que les programmeurs n'&eacute;taient tout simplement
          pas capables de rep&eacute;rer l'accolade manquante, car l'analyseur
          avait la consigne de cacher ces erreurs.
       </para>
       <para>
          V&eacute;rifier votre niveau d'erreur doit &ecirc;tre le premier r&eacute;flexe
          lorsque vos scripts meurent silencieusement. Le moteur
          Zend est consid&eacute;r&eacute; actuellement comme suffisamment mature pour
          ne plus causer ce genre de probl&egrave;me aujourd'hui.
       </para>
      </warning>
     </sect2>
     <sect2 id="migration4.error-reporting.additions">
      <title>Nouveaux messages d'erreurs</title>
      <para>
       Un grand nombre de scripts PHP PHP 3.0 utilisent des structures qui
       doivent &ecirc;tre consid&eacute;r&eacute;es comme un tr&egrave;s mauvais style,
       m&ecirc;me s'il effectue bien la t&acirc;che qui lui est affect&eacute;e, car
       ils ne sont pas robustes. PHP 4.0 affichera de nombreux messages d'erreurs dans
       des situations o&ugrave; PHP 3.0 restera coi. La solution de facilit&eacute;
       consiste &agrave; supprimer les messages de niveau E_NOTICE, mais c'est une
       meilleure id&eacute;e de corriger le code &agrave; la place.
      </para>
      <para>
       Le cas le plus courant qui g&eacute;n&egrave;rera des messages d'alertes
       est l'utilisation de constantes sans guillemets comme
       index de tableaux. PHP 3.0, comme PHP 4.0, finiront par les
       interpr&eacute;ter litt&eacute;ralement comme des cha&icirc;nes, si aucune constante
       n'est d&eacute;finie &agrave; la place. Mais si jamais une telle constante
       est d&eacute;finie dans une autre partie du code, cela risque de
       produire des r&eacute;sultats &eacute;tonnants. Cela peut devenir un trou
       de s&eacute;curit&eacute; si un pirate arrive &agrave; red&eacute;finir les constantes
       de telle mani&egrave;re que le script lui donne acc&egrave;s &agrave; un niveau
       de droits sup&eacute;rieur. PHP 4.0 vous signalera tout oubli de
       guillemets comme par exemple dans :
       <literal>$HTTP_SERVER_VARS[REQUEST_METHOD]</literal>. Modifier
       ce code en <literal>$HTTP_SERVER_VARS['REQUEST_METHOD']</literal>
       rendra l'analyseur heureux, et am&eacute;liorera grandement votre
       style et la s&eacute;curit&eacute; du code.
      </para>
      <para>
       PHP 4.0 vous signalera les variables ou les
       &eacute;l&eacute;ments de tableaux non initialis&eacute;s.
      </para>
     </sect2>
    </sect1>
    <sect1 id="migration4.initializers">
     <title>Initialiseur</title>
     <para>
      Les variables statiques et les membres de classes n'acceptent
      plus que des initialiseurs scalaires, tandis que PHP 3.0 acceptait
      aussi les expressions. Cela est d&ucirc;, encore une fois, &agrave; la
      s&eacute;paration de l'analyse et de l'ex&eacute;cution : aucun code
      ne peut &ecirc;tre ex&eacute;cut&eacute; tant que l'analyse
      n'est pas termin&eacute;e.
     </para>
     <para>
      Pour les classes, il vaut mieux initialiser les membres dans
      le constructeur. Pour les variables statiques, une valeur fixe
      et simple est la seule chose qui viennent &agrave; l'esprit.
     </para>
    </sect1>
    <sect1 id="migration4.empty">
     <title><literal>empty("0")</literal></title>
     <para>
      L'&eacute;volution la plus pol&eacute;mique est celle de <function>empty</function>.
      Une cha&icirc;ne contenant seulement le caract&egrave;re
      <literal>'0'</literal> (z&eacute;ro) est maintenant consid&eacute;r&eacute;e comme
      vide, alors qu'elle ne l'&eacute;tait pas en PHP 3.0.
     </para>
   <para>
    Ce nouveau comportement prend tout son sens dans les applications
    web, puisque tous les r&eacute;sultats de champs de type input sont de type
    cha&icirc;ne de caract&egrave;res, m&ecirc;me si un nombre est demand&eacute;,
    et ce, gr&acirc;ce aux capacit&eacute;s de conversion automatique de PHP.
    D'un autre c&ocirc;t&eacute;, cela peut
    casser votre code d'une mani&egrave;re tr&egrave;s subtile, menant droit au
    comportement erratique, difficilement rep&eacute;rable si vous ne
    savez pas ce qui vous attend.
   </para>
  </sect1>
  <sect1 id="migration4.missing">
   <title>Fonctions manquantes</title>
   <para>
    Bien que PHP 4.0 dispose de nombreuses nouvelles fonctionnalit&eacute;s
    fonctions et extensions, vous vous rencontrer des fonctions PHP
    3.0 qui manquent. Un petit nombre de fonctions de base n'ont pu
    &ecirc;tre port&eacute;es en PHP 4.0, maintenant que l'analyse et l'&eacute;x&eacute;cution
    ont &eacute;t&eacute; s&eacute;par&eacute;es. D'autres fonctions, et m&ecirc;mes des extensions
    enti&egrave;res sont maintenant obsol&egrave;tes, remplac&eacute;es par de nouvelles
    fonctions plus puissantes ou plus efficaces. Certaines fonctions
    n'ont tout simplement pas &eacute;t&eacute; port&eacute;es pour le moment ou pour
    des raisons de licences.
  </para>
  <sect2 id="migration4.missing.concept">
   <title>Fonctions manquantes pour des raisons de structure</title>
    <para>
     Comme PHP 4.0 s&eacute;pare l'analyse et l'&eacute;x&eacute;cution, il n'est plus
       possible de modifier le comportement de l'analyseur (int&eacute;gr&eacute;
       dans le moteur Zend) durant l'&eacute;x&eacute;cution, puisque toute
       l'analyse a eu lieu, et est termin&eacute;e. La fonction
       short_tags() a cess&eacute; d'exister. Vous pouvez
       toujours modifier le comportement de l'analyseur avec
       le fichier <filename>php.ini</filename>.
      </para>
      <para>
       Une autre fonctionnalit&eacute; qui a disparu est le d&eacute;buggeur
       de PHP 3.0, comme d&eacute;crit dans un autre appendice. Un nouveau
       d&eacute;buggeur est promis par Zend, mais il n'a pas encore montr&eacute;
       le bout de son nez.
      </para>
     </sect2>
     <sect2 id="migration4.deprecate">
      <title>Fonctions et extensions obsol&egrave;tes</title>
      <para>
       Les extensions Adabas et Solid n'existent plus. Elles sont int&eacute;gr&eacute;es
       dans les fonctions <link linkend="ref.odbc">ODBC Unifi&eacute;</link>.
      </para>
     </sect2>
     <sect2 id="migration4.unset">
      <title>Nouveau statut pour <function>unset</function></title>
      <para>
       <function>unset</function>, bient que toujours disponible, a
       &eacute;t&eacute; impl&eacute;ment&eacute; l&eacute;g&egrave;rement
       diff&eacute;remment en PHP 4.0, et elle n'est plus vraiment une 'fonction'.
      </para>
      <para>
       Cela n'a pas de cons&eacute;quence directe sur le comportement de
       <function>unset</function>, mais utiliser cette fonction
       pour faire un test avec <function>function_exists</function>
       retournera &false;comme il se doit avec
       les fonction bas niveau comme <function>echo</function>.
      </para>
      <para>
       Une autre application pratique disparue est qu'il n'est plus possible
       d'appeler <function>unset</function> indirectement, c'est-&agrave;-dire que
       <literal>$func="unset"; $func($somevar)</literal> ne fonctionne plus.
      </para>
     </sect2>
    </sect1>
    <sect1 id="migration4.extensions">
     <title>Extensions PHP 3.0</title>
     <para>
      Les extensions &eacute;crites pour PHP 3.0 ne fonctionnent plus avec PHP 4.0,
      ni les ex&eacute;cutables, ni les codes sources. Il n'est pas difficile de
      porter les extensions de PHP 3.0 &agrave; 4.0 si vous avez acc&egrave;s aux
      sources originales. Une description d&eacute;taill&eacute;e du processus
      de portage ne fait pas partie de cet appendice (pour le moment).
     </para>
    </sect1>
    <sect1 id="migration4.string">
     <title>Substitution de variables dans les cha&icirc;nes</title>
     <para>
      PHP 4.0 dispose d'un nouveau m&eacute;canisme de substitution des
      variables dans les cha&icirc;nes. Vous pouvez d&eacute;sormais acc&eacute;der aux
      membres d'objets et aux tableaux multidimensionnels dans une
      cha&icirc;ne.
     </para>
     <para>
      Pour cela, il suffit de placer la variable entre accolades, le signe
      $ suivant imm&eacute;diatement la premi&egrave;re accolade :
      <literal>{$variable['a']}</literal>
     </para>
     <para>
      Pour utiliser la valeur d'un membre d'objet dans une cha&icirc;ne,
      il suffit d'&eacute;crire : <literal>"text {$obj->member} text"</literal>;
      alors qu'en PHP 3.0, il fallait faire comme ceci :
      <literal>"texte".$objet->membre." texte"</literal>.
     </para>
     <para>
      Cette technique rend le code beaucoup plus lisible, mais risque de
      poser des probl&egrave;mes dans certains scripts PHP 3.0. Vous pouvez
      facilement traquer ce probl&egrave;me en recherche les s&eacute;quences
      <literal>{$</literal> dans votre code, et en les rempla&ccedil;ant par
      <literal>\{$</literal> avec votre outil de remplacement habituel.
     </para>
    </sect1>
    <sect1 id="migration4.cookies">
     <title>Cookies</title>
     <para>
      PHP 3.0 avait la mauvaise habitude d'envoyer les cookies dans l'ordre
      inverse de celui du code (l'ordre des appels &agrave;
      <function>setcookie</function>). PHP 4.0 r&eacute;tablit l'ordre naturel
      en les envoyant dans le m&ecirc;me ordre que vous m&ecirc;me.
     </para>
     <para>
      Cela peut aussi prendre &agrave; contre-pied certains programmes, mais
      ce comportement &eacute;tait tellement &eacute;trange qu'il m&eacute;ritait un tel
      traitement un jour ou l'autre, pour &eacute;viter d'autres
      probl&egrave;mes ult&eacute;rieurs.
     </para>
    </sect1>
 </appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
