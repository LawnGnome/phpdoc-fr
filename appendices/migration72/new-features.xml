<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343247 Maintainer: Jean-Baptiste Nahan Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration72.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nouvelles fonctionnalités</title>

 <sect2 xml:id="migration72.new-features.object-type">
  <title>Nouveau type object</title>

  <para>
   Un nouveau type, <type>object</type>, a été introduit. Il peut être utilisé 
   typer un paramètre (contravariant) ou pour typer le retour (covariant).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function test(object $obj) : object
{
    return new SplQueue();
}

test(new StdClass());
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.ext-loading-by-name">
  <title>Chargement des extensions par leur nom</title>

  <para>
   Les extensions partagées ne demanderons plus de saisir leur nom 
   complet (<literal>.so</literal> pour Unix ou <literal>.dll</literal> 
   pour Windows). C'est actif pour le fichier php.ini et pour la 
   fonction <function>dl</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.abstract-method-overriding">
  <title>Permettre la substitution de méthode abstraite</title>

  <para>
   Les méthodes abstraites peuvent maintenant être surchargé quand une 
   classe abstraite étend une autre classe abstraite.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class A
{
    abstract function test(string $s);
}
abstract class B extends A
{
    // overridden - still maintaining contravariance for parameters and covariance for return
    abstract function test($s) : int;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.pws-hashing-with-argon2">
  <title>Hachage de mot de passe avec Argon2</title>

  <para>
   Argon2 a été ajouté à l'API pour le hachage de mot de passe (fonction 
   <literal>password_</literal>), et les constantes suivantes ont été 
   exposées :
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2I</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2_DEFAULT_TIME_COST</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2_DEFAULT_THREADS</constant>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.pdo-extended-str-types">
  <title>Types de chaîne étendue pour ext/PDO</title>

  <para>
   Type de chaîne de PDO a été étendu pour prendre en charge le type de 
   caractère national lors de l’utilisation des requêtes préparées. Cela a été 
   fait avec l’une des constantes suivantes :
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <constant>PDO::PARAM_STR_NATL</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PDO::PARAM_STR_CHAR</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PDO::ATTR_DEFAULT_STR_PARAM</constant>
    </simpara>
   </listitem>
  </itemizedlist>

  <para>
   Ces constantes sont utilisées avec l’opérateur de bits <literal>OR</literal> 
   et <constant>PDO::PARAM_STR</constant> :
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$db->quote('über', PDO::PARAM_STR | PDO::PARAM_STR_NATL);
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.additional-emulated-prepares-debugging-info">
  <title>Ajout d'information de déboggage pour l'émulation des requêtes préparées pour ext/PDO</title>

  <para>
   La méthode <function>PDOStatement::debugDumpParams</function> a été mis à 
   jour pour inclure le SQL envoyé à la DB, où la requête complète, requête 
   brute (y compris les espaces réservés remplacées par leurs valeurs 
   protégées) sera montrée. Ceci a été ajouté afin de faciliter le débogage 
   de l'émulation des requêtes préparées (et donc il sera disponible lorsque 
   l'émulation des requêtes préparées est activée).
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.extended-ops-in-ldap">
  <title>Prise en charge pour les opérations étendues dans ext/LDAP</title>

  <para>
   La prise en charge des EXOP a été ajoutée dans l'extension LDAP. Cela a été 
   fait en exposant les constantes et les fonctions suivantes :
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>ldap_parse_exop</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>ldap_exop</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>ldap_exop_passwd</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>ldap_exop_whoami</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_START_TLS</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_MODIFY_PASSWD</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_REFRESH</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_WHO_AM_I</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_TURN</constant>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.addr-info-in-sockets">
  <title>Informations additionnelles des adresses dans ext/sockets</title>

  <para>
   L'extension sockets a maintenant la capacité de rechercher les informations 
   sur l'adresse, mais aussi de s'y connecter, de se lier dessus et de 
   l'expliquer. Les quatre fonctions suivantes ont été ajoutées pour cela :
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>socket_addrinfo_lookup</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>socket_addrinfo_connect</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>socket_addrinfo_bind</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>socket_addrinfo_explain</function>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.param-type-widening">
  <title>Elargissement du type des arguments</title>

  <para>
   Les types de paramètres de méthodes substituées et des implémentations de 
   l’interface peuvent maintenant être omises. C’est toujours dans le respect 
   de LSP, puisque les types de paramètres sont contravariants.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface A
{
    public function Test(array $input);
}

class B implements A
{
    public function Test($input){} // type omis pour $input
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.trailing-comma-in-grouped-namespaces">
  <title>Permettre une virgule de fin pour les espaces de noms groupés</title>

  <para>
   Une virgule de fin peut maintenant être ajoutée à la syntaxe 
   d’utilisation groupé introduite en PHP 7.0.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

use Foo\Bar\{
    Foo,
    Bar,
    Baz,
};
]]>
   </programlisting>
  </informalexample>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
