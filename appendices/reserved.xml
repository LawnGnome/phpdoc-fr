<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.33 $ -->
<!-- EN-Revision: 1.45 Maintainer: dams Status: ready -->
<appendix id="reserved">
 <title>Mots réservés en &php;</title>
  <para>
   Cette annexes est une liste d'identifiant prédéfinis en &php;. Aucun
   des identifiants utilisés ici ne doit être repris comme nom de
   variable ou de fonction dans vos scripts. Ces identifiants incluent
   des mots clés, des constantes, des classes, et es variables
   prédéfinies. Ces listes ne sont pas complètes ou exhaustives.
  </para>

  <sect1 id="reserved.keywords">
  <title>Liste de mots-clé</title>

   <para>
    Ces mots ont un sens spécial en &php;. Certains représentent des objets
    qui ressemblent à des fonctions, d'autres à des constantes, et ainsi de
    suite, mais ils n'en sont pas vraiment : ce sont des structures de langage.
    Vous ne pourrez pas les utiliser comme constantes, nom de classe, nom de fonctions ou
    nom de méthodes.
    Vous pouvez les utiliser comme noms de variables, mais cela risque de vous
    mener des confusions.
   </para>
   <para>
   <table>
    <title>Mots réservés en &php;</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">exception</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__LINE__</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="migration.old-function">cfunction</link>
       </entry>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        const
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <link linkend="function.eval">eval</link>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
       <entry>
        <link linkend="migration.old-function">old_function</link>
       </entry>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
      </row>
      <row>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
 </para>
 </sect1>
  <sect1 id="reserved.variables">
   <title>Variables prédéfinies</title>

   <para>
    Depuis &php; 4.1.0, la méthode recommandée pour accéder à des 
    <link linkend="language.variables.external">variables externes</link> est
    d'utiliser les super-globales mentionnées ci-dessous. Avant cela,
    il fallait utiliser soit l'option de configuration 
    <link linkend="ini.register-globals">register_globals</link>,
    soit les tableaux prédéfinis <varname>$HTTP_*_VARS</varname>.
    
    &avail.register-long-arrays;
   </para>

   <sect2 id="reserved.variables.server">
    <title>Variables de serveur : <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_SERVER_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     <varname>$_SERVER</varname> est un tableau contenant des informations
     comme les en-têtes, dossiers et chemins du script. Les entrées de ce
     tableau sont créées par le serveur web. Il n'y a aucune garantie que tous
     les serveurs les rempliront tous; certains en oublieront quelques unes
     et en rajouteront de nouvelles non mentionnées ici. Cependant, un grand
     nombre de ces variables fait partie des <ulink
     url="&url.cgispec;">spécifications CGI 1.1</ulink>, et vous pouvez donc
     vous attendre à les retrouver.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
     besoin de faire 
     <command>global $_SERVER;</command> pour y accéder, comme
     vous le faisiez avec <varname>$HTTP_SERVER_VARS</varname>.
   </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> contient les mêmes
     informations, mais n'est pas autoglobale.
    </simpara>

    <simpara>
     Si la directive <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'exécution global. C'est à dire séparément
     des tableaux <varname>$_SERVER</varname> et <varname>$HTTP_SERVER_VARS</varname>.
     Pour plus d'informations sur la sécurité de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>

    <simpara>
     Vous pouvez éventuellement trouver les éléments suivants
     dans la variable <varname>$_SERVER</varname>. Notez que certains, 
     n'auront pas de sens si vous utilisez &php; en ligne
     de commande.
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
         Le nom du fichier du script en cours d'exécution, par
         rapport à la racine web.
         Par exemple, <varname>$_SERVER['PHP_SELF']</varname> dans le script
         situé à l'adresse <filename>http://www.monsite.com/test.php/foo.bar</filename>
         sera <filename>/test.php/foo.bar</filename>.
         La constante <link linkend="language.constants.predefined">__FILE__</link>
         contient le chemin complet ainsi que le nom du fichier (i.e. inclut) courant.
        </simpara>
        <simpara>
         Si &php; fonctionne en ligne de commande,
         cette variable n'est pas disponible.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         Tableau des arguments passées au script. Lorsque le script
         est appelé en ligne de commande, cela donne accès
         aux arguments, comme en langage C. Lorsque le script est
         appelé avec la méthode GET, ce tableau contiendra
         la chaîne de requête.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         Contient le nombre de paramètres de la ligne de commande
         passés au script (si le script fonctionne en ligne de commande).
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         Numéro de révision de l'interface CGI du serveur :
     i.e. '<literal>CGI/1.1</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         Le nom du serveur hôte qui exécute le script suivant.
         Si le script est exécuté sur un hôte virtuel, ce sera
         la valeur définie pour cet hôte virtuel.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         Chaîne d'identification du serveur, qui est donnée dans
         les en-têtes lors de la réponse aux requêtes.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         Nom et révision du protocole de communication : i.e. '<literal>HTTP/1.0</literal>';
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         Méthode de requête utilisée pour accéder
         à la page; i.e. '<literal>GET</literal>', 
         '<literal>HEAD</literal>', '<literal>POST</literal>', '<literal>PUT</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         La chaîne de requête, si elle existe, qui est
         utilisée pour accéder à la page.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         La racine sous laquelle le script courant est exécuté,
         comme défini dans la configuration du serveur.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-tête <literal>Accept:</literal> de la
         requête courante, s'il y en a une.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-tête <literal>Accept-Charset:</literal>
         de la requête courante, s'elle existe. Par exemple :
         '<literal>iso-8859-1,*,utf-8</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-tête <literal>Accept-Encoding:</literal>
         de la requête courante, si elle existe. Par exemple : '<literal>gzip</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-tête <literal>Accept-Language:</literal> de
         la requête courante, si elle existe. Par exemple : '<literal>fr</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-tête <literal>Connection:</literal> de la
         requête courante, si elle existe. Par exemple : '<literal>Keep-Alive</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-tête <literal>Host:</literal> de la
          requête courante, si elle existe.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         L'adresse de la page (si elle existe) qui a conduit le
         client à la page courante. Cette valeur est
         affectée par le client, et tous les clients ne le font pas.
         Certains navigateur permettent même de modifier la valeur de
         <varname>HTTP_REFERER</varname>, sous forme de fonctionnalité.
         En bref, ce n'est pas une valeur de confiance.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
          Contenu de l'en-tête <literal>User_Agent:</literal> de
         la requête courante, si elle existe. C'est une chaîne
         qui décrit le client HTML utilisé pour voir
         la page courante. Par exemple :
         <computeroutput>Mozilla/4.5 [en] (X11; U; Linux     2.2.9 i586)</computeroutput>.
         Entre autres choses, vous pouvez utiliser cette valeur avec
         <function>get_browser</function> pour optimiser votre page
         en fonction des capacités du client.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         L'adresse IP du client qui demande la page courante.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_HOST</varname>'</term>
       <listitem>
        <simpara>
         Le nom de l'hôte qui lit le script courant. La résolution
         DNS inverse est basée sur la valeur de <varname>REMOTE_ADDR</varname>.
        </simpara>
        <note>
         <simpara>
          Votre serveur web doit être configuré pour créer cette variable.
          Par exemple, pour Apache, vous devez ajouter la directive 
          <literal>HostnameLookups On</literal> dans le fichier 
          &httpd.conf;, pour que cette variable existe.
          Voyez aussi <function>gethostbyaddr</function>.
         </simpara>
        </note>
        </listitem>
       </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         Le port utilisé par la machine cliente pour communiquer
         avec le serveur web.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <simpara>
         Le chemin absolu jusqu'au script courant.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         La valeur donnée à la directive SERVER_ADMIN
         (pour Apache), dans le fichier de configuration. Si le script
         est exécuté par un hôte virtuel, ce sera la
         valeur définie par l'hôte virtuel.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
          Le port de la machine serveur utilisé pour les
         communications. Par défaut, c'est '80'. En utilisant
         SSL, par exemple, il sera remplacé par le numéro
         de port HTTP sécurisé.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
          Chaîne contenant le numéro de version du serveur
         et le nom d'hôte virtuel, qui sont ajoutés aux
         pages générées par le serveur, si cette
         option est activée.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         Chemin dans le système de fichier (pas le document-root)
         jusqu'au script courant, une fois que le serveur a fait
         une traduction chemin virtuel -> réel.
        </simpara>
        <note>
         <simpara>
          Depuis &php; 4.3.2, la variable <envar>PATH_TRANSLATED</envar> n'est plus seulement
          définie implicitement sous Apache 2 <acronym>SAPI</acronym>
          contrairement à la situation sous Apache 1 où elle est définie avec la même
          valeur que la variable serveur <envar>SCRIPT_FILENAME</envar> lorsqu'elle
          n'est pas fournie par Apache. Ce changement a été effectué pour être conforme
          aux spécifications <acronym>CGI</acronym> qui fait que 
          la variable <envar>PATH_TRANSLATED</envar> ne doit exister seulement
          si la variable <envar>PATH_INFO</envar> est définie.
         </simpara>
         <simpara>
          Les utilisateurs d'Apache 2 devrait utiliser <literal>AcceptPathInfo = On</literal> 
          au lieu de <filename>httpd.conf</filename> pour définir <envar>PATH_INFO</envar>.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         Contient le nom du script courant. Cela sert lorsque
         les pages doivent s'appeler elles-mêmes.
         La constante <link linkend="language.constants.predefined">__FILE__</link>
         contient le chemin complet ainsi que le nom du fichier (i.e. inclut) courant.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         L'URI qui a été fourni pour accéder
         à cette page. Par exemple : '<literal>/index.html</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>Variables d'environnement : <varname>$_ENV</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_ENV_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Cette variable est importée dans l'espace de nom global de &php;,
     depuis l'environnement dans lequel l'exécutable &php; fonctionne. 
     De nombreuses valeur sont fournies par le shell qui exécute &php;,
     et différents systèmes pouvant disposer de différents shell, même
     un début de liste serait ici impossible. Reportez vous à la documentation
     de votre shell pour connaître une liste de variables prédéfinies.
    </simpara>

    <simpara>
     Les autres variables d'environnement incluent les variables CGI,
     placées ici, indépendemment du fait que &php; fonctionne en tant
     que CGI ou bien que module du serveur.
    </simpara>
    
    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
     besoin de faire 
     <command>global $_ENV;</command> pour y accéder, comme
     vous le faisiez avec <varname>$HTTP_ENV_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> contient les mêmes
     informations, mais n'est pas autoglobale. (Notez que 
     <varname>$HTTP_ENV_VARS</varname> et <varname>$_ENV</varname>
     sont des variables différentes et que &php; les traite comme tel)
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'exécution global. C'est à dire séparément
     des tableaux <varname>$_ENV</varname> et <varname>$HTTP_ENV_VARS</varname>.
     Pour plus d'informations sur la sécurité de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>HTTP Cookies : <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_COOKIE_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs passées au script courant via
     les cookies HTTP. Elle est automatiquement global dans tous les 
     contextes d'exécution.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
     besoin de faire 
     <command>global $_COOKIE;</command> pour y accéder, comme
     vous le faisiez avec <varname>$HTTP_COOKIE_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> contient les mêmes
     informations, mais n'est pas autoglobale. (Notez que 
     <varname>$HTTP_COOKIE_VARS</varname> et <varname>$_COOKIE</varname>
     sont des variables différentes et que &php; les traite comme tel)
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'exécution global. C'est à dire séparément
     des tableaux <varname>$_COOKIE</varname> et <varname>$HTTP_COOKIE_VARS</varname>.
     Pour plus d'informations sur la sécurité de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>HTTP GET variables : <varname>$_GET</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_GET_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs passées au script courant via
     le protocole HTTP et la méthode GET. Elle est automatiquement 
     globale dans tous les contextes d'exécution.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
     besoin de faire 
     <command>global $_GET;</command> pour y accéder, comme
     vous le faisiez avec <varname>$HTTP_GET_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> contient les mêmes
     informations, mais n'est pas autoglobale. (Notez que 
     <varname>$HTTP_GET_VARS</varname> et <varname>$_GET</varname>
     sont des variables différentes et que &php; les traite comme tel)
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'exécution global. C'est à dire séparément
     des tableaux <varname>$_GET</varname> et <varname>$HTTP_GET_VARS</varname>.
     Pour plus d'informations sur la sécurité de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>HTTP POST variables : <varname>$_POST</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_POST_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs passées au script courant via
     le protocole HTTP et la méthode POST. Elle est automatiquement 
     globale dans tous les contextes d'exécution.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
     besoin de faire 
     <command>global $_POST;</command> pour y accéder, comme
     vous le faisiez avec <varname>$HTTP_POST_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> contient les mêmes
     informations, mais n'est pas autoglobale. (Notez que 
     <varname>$HTTP_POST_VARS</varname> et <varname>$_POST</varname>
     sont des variables différentes et que &php; les traite comme tel)
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'exécution global. C'est à dire séparément
     des tableaux <varname>$_POST</varname> et <varname>$HTTP_POST_VARS</varname>.
     Pour plus d'informations sur la sécurité de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>Variable de téléchargement de fichier via HTTP : <varname>$_FILES</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_POST_FILES</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs téléchargées au script courant via
     le protocole HTTP et la méthode POST. Elle est automatiquement 
     globale dans tous les contextes d'exécution.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
     besoin de faire 
     <command>global $_FILES;</command> pour y accéder, comme
     vous le faisiez avec <varname>$HTTP_POST_FILES</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> contient les mêmes
     informations, mais n'est pas autoglobale. (Notez que 
     <varname>$HTTP_POST_FILES</varname> et <varname>$_FILES</varname>
     sont des variables différentes et que &php; les traite comme tel)
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'exécution global. C'est à dire séparément
     des tableaux <varname>$_FILES</varname> et <varname>$HTTP_POST_FILES</varname>.
     Pour plus d'informations sur la sécurité de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>Variables de requête : <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle n'avait
      pas d'équivalent.
     </simpara>
    </note>
    <note>
     <simpara>
      Dans les versions antérieures à &php; 4.3.0, les informations de 
      <varname>$_FILES</varname> étaient incluses également dans 
      <varname>$_REQUEST</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif constitué du contenu des
     variables <varname>$_GET</varname>, <varname>$_POST</varname>,
     <varname>$_COOKIE</varname>.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
     besoin de faire 
     <command>global $_REQUEST;</command> pour y accéder.
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'exécution global. C'est à dire séparément
     des tableaux <varname>$_REQUEST</varname>.
     Pour plus d'informations sur la sécurité de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>Session variables : <varname>$_SESSION</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_SESSION_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs stockées dans les sessions,
     et accessible au script courant. Elle est automatiquement 
     globale dans tous les contextes d'exécution. Voyez l'extension
     <link linkend="ref.session">Sessions</link> pour plus de détails sur comment
     est utilisée cette variable.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
     besoin de faire 
     <command>global $_SESSION;</command> pour y accéder, comme vous le
     faisiez avec <varname>$HTTP_SESSION_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> contient les mêmes
     informations, mais n'est pas autoglobale. (Notez que 
     <varname>$HTTP_SESSION_VARS</varname> et <varname>$_SESSION</varname>
     sont des variables différentes et que &php; les traite comme tel)
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'exécution global. C'est à dire séparément
     des tableaux <varname>$_SESSION</varname> et <varname>$HTTP_SESSION_VARS</varname>.
     Pour plus d'informations sur la sécurité de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>Variables globales : <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> est disponible depuis &php; 3.0.0.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif contenant les références sur toutes les variables
     globales actuellement définies dans le contexte d'exécution global du
     script. Les noms des variables sont les index du tableau.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
     besoin de faire 
     <command>global $GLOBALS;</command> pour y accéder.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>Le dernier message d'erreur : <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> est une variable qui contient le texte
     de la dernière erreur générée par &php;. Cette variable sera uniquement
     accessible dans le même contexte d'exécution que celui de la ligne
     qui a généré l'erreur, et uniquement si la directive de configuration <link
     linkend="ini.track-errors">track_errors</link> est activée (elle est
     désactivée par défaut).
    </simpara>
   </sect2>
  </sect1>


  <sect1 id="reserved.classes">
   <title>Classes prédéfinies</title>

   <sect2 id="reserved.classes.standard">
    <title>Classes standards</title>

    <simpara>
     Ces classes sont définies dans le jeu de classe standard
     de &php;, inclus dans toutes les versions de &php;.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        La classe qui permet d'instancier <function>dir</function>.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.php5">
    <title>Classes prédéfinies en &php; 5</title>
    
    <simpara>
     Ces classe supplémentaires ont été ajoutées en &php; 5.0.0.
    </simpara>
    
    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>


   <sect2 id="reserved.classes.ming">
    <title>Classes définies par <link linkend="ref.ming">Ming</link></title>

    <simpara>
     Ces classes sont définies dans l'extension 
     <link linkend="ref.ming">Ming</link> et ne seront pas disponibles
     si &php; a été compilé pour être exécuté dynamiquement, ou bien si
     elles n'ont pas été compilées dans &php;.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>swfshape</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffill</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfgradient</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbitmap</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftext</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftextfield</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffont</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfdisplayitem</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmovie</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbutton</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfaction</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmorph</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfsprite</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.oci8">
    <title>Classes définies par <link linkend="ref.oci8">Oracle 8</link></title>

    <simpara>
     Ces classes sont définies dans l'extension 
     <link linkend="ref.oci8">Oracle 8</link> et ne seront pas disponibles
     si &php; a été compilé pour être exécuté dynamiquement, ou bien si
     elles n'ont pas été compilées dans &php;.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>OCI-Lob</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>OCI-Collection</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.qtdom">
    <title>Classes définies par <link linkend="ref.qtdom">qtdom</link></title>

    <simpara>
     Ces classes sont définies dans l'extension 
     <link linkend="ref.qtdom">qtdom</link> et ne seront pas disponibles
     si &php; a été compilé pour être exécuté dynamiquement, ou bien si
     elles n'ont pas été compilées dans &php;.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>QDomDocument</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>QDomNode</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
  </sect1>

  &appendices.reserved.constants;

</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
