<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.58 $ -->
<!-- EN-Revision: 1.68 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<appendix xml:id="reserved" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Mots réservés en &php;</title>
 <para>
  Cette annexe est une liste d'identifiants prédéfinis en &php;. Aucun
  des identifiants utilisés ici ne doit être repris comme nom de
  variable ou de fonction dans vos scripts. Ces identifiants incluent
  des mots-clés, des constantes, des classes, et des variables
  prédéfinies. Ces listes ne sont pas complètes ou exhaustives.
 </para>

 <sect1 xml:id="reserved.keywords">
  <title>Liste de mots-clés</title>

  <simpara>
   Ces mots ont un sens spécial en &php;. Certains représentent des objets
   qui ressemblent à des fonctions, d'autres à des constantes, et ainsi de
   suite, mais ils n'en sont pas vraiment : ce sont des structures de langage.
   Vous ne pourrez pas les utiliser comme constante, nom de classe, nom de fonctions ou
   nom de méthodes.
   Vous pouvez les utiliser comme nom de variables, mais cela risque d'entrainer
   des confusions.
  </simpara>

  <table>
   <title>Mots réservés en &php;</title>
   <tgroup cols="5">
    <tbody>
     <row>
      <entry>
       <link linkend="language.operators.logical">and</link>
      </entry>
      <entry>
       <link linkend="language.operators.logical">or</link>
      </entry>
      <entry>
       <link linkend="language.operators.logical">xor</link>
      </entry>
      <entry>
       <link linkend="language.constants.predefined">__FILE__</link>
      </entry>
      <entry>
       <link linkend="reserved.classes.php5">exception</link> (&php; 5)
      </entry>
     </row>
     <row>
      <entry>
       <link linkend="language.constants.predefined">__LINE__</link>
      </entry>
      <entry>
       <function>array</function>
      </entry>
      <entry>
       <link linkend="control-structures.foreach">as</link>
      </entry>
      <entry>
       <link linkend="control-structures.break">break</link>
      </entry>
      <entry>
       <link linkend="control-structures.switch">case</link>
      </entry>
     </row>
     <row>
      <entry>
       <link linkend="keyword.class">class</link>
      </entry>
      <entry>
       const
      </entry>
      <entry>
       <link linkend="control-structures.continue">continue</link>
      </entry>
      <entry>
       <link linkend="control-structures.declare">declare</link>
      </entry>
      <entry>
       <link linkend="control-structures.switch">default</link>
      </entry>
     </row>
     <row>
      <entry>
       <function>die</function>
      </entry>
      <entry>
       <link linkend="control-structures.do.while">do</link>
      </entry>
      <entry>
       <function>echo</function>
      </entry>
      <entry>
       <link linkend="control-structures.else">else</link>
      </entry>
      <entry>
       <link linkend="control-structures.elseif">elseif</link>
      </entry>
     </row>
     <row>
      <entry>
       <function>empty</function>
      </entry>
      <entry>
       <link linkend="control-structures.declare">enddeclare</link>
      </entry>
      <entry>
       <link linkend="control-structures.alternative-syntax">endfor</link>
      </entry>
      <entry>
       <link linkend="control-structures.alternative-syntax">endforeach</link>
      </entry>
      <entry>
       <link linkend="control-structures.alternative-syntax">endif</link>
      </entry>
     </row>
     <row>
      <entry>
       <link linkend="control-structures.alternative-syntax">endswitch</link>
      </entry>
      <entry>
       <link linkend="control-structures.alternative-syntax">endwhile</link>
      </entry>
      <entry>
       <link linkend="function.eval">eval</link>
      </entry>
      <entry>
       <function>exit</function>
      </entry>
      <entry>
       <link linkend="keyword.class">extends</link>
      </entry>
     </row>
     <row>
      <entry>
       <link linkend="control-structures.for">for</link>
      </entry>
      <entry>
       <link linkend="control-structures.foreach">foreach</link>
      </entry>
      <entry>
       <link linkend="functions.user-defined">function</link>
      </entry>
      <entry>
       <link linkend="language.variables.scope">global</link>
      </entry>
      <entry>
       <link linkend="control-structures.if">if</link>
      </entry>
     </row>
     <row>
      <entry>
       <function>include</function>
      </entry>
      <entry>
       <function>include_once</function>
      </entry>
      <entry>
       <function>isset</function>
      </entry>
      <entry>
       <function>list</function>
      </entry>
      <entry>
       <link linkend="keyword.class">new</link>
      </entry>
     </row>
     <row>
      <entry>
       <function>print</function>
      </entry>
      <entry>
       <function>require</function>
      </entry>
      <entry>
       <function>require_once</function>
      </entry>
      <entry>
       <function>return</function>
      </entry>
      <entry>
       <link linkend="language.variables.scope">static</link>
      </entry>
     </row>
     <row>
      <entry>
       <link linkend="control-structures.switch">switch</link>
      </entry>
      <entry>
       <function>unset</function>
      </entry>
      <entry>
       use
      </entry>
      <entry>
       <link linkend="keyword.class">var</link>
      </entry>
      <entry>
       <link linkend="control-structures.while">while</link>
      </entry>
     </row>
     <row>
      <entry>
       <link linkend="language.constants.predefined">__FUNCTION__</link>
      </entry>
      <entry>
       <link linkend="language.constants.predefined">__CLASS__</link>
      </entry>
      <entry>
       <link linkend="language.constants.predefined">__METHOD__</link>
      </entry>
      <entry>
       <link linkend="language.oop5.final">final</link> (depuis &php; 5)
      </entry>
      <entry>
       <link linkend="reserved.classes.php5">php_user_filter</link> (depuis &php; 5)
      </entry>
     </row>
     <row>
      <entry>
       <link linkend="language.oop5.interfaces">interface</link> (depuis &php; 5)
      </entry>
      <entry>
       <link linkend="language.oop5.interfaces">implements</link> (depuis &php; 5)
      </entry>
      <entry>
       <link linkend="language.oop5.basic">extends</link>
      </entry>
      <entry>
       <link linkend="language.oop5.visibility">public</link> (depuis &php; 5)
      </entry>
      <entry>
       <link linkend="language.oop5.visibility">private</link> (depuis &php; 5)
      </entry>
     </row>
     <row>
      <entry>
       <link linkend="language.oop5.visibility">protected</link> (depuis &php; 5)
      </entry>
      <entry>
       <link linkend="language.oop5.abstract">abstract</link> (depuis &php; 5)
      </entry>
      <entry>
       <link linkend="language.oop5.cloning">clone</link> (depuis &php; 5)
      </entry>
      <entry>
       <link linkend="language.exceptions">try</link> (depuis &php; 5)
      </entry>
      <entry>
       <link linkend="language.exceptions">catch</link> (depuis &php; 5)
      </entry>
     </row>
     <row>
      <entry>
       <link linkend="language.exceptions">throw</link> (depuis &php; 5)
      </entry>
      <entry>
       <link linkend="migration.old-function">cfunction</link> (&php; 4 uniquement)
      </entry>
      <entry>
       <link linkend="migration.old-function">old_function</link> (&php; 4 uniquement)
      </entry>
      <entry>
       <link linkend="keyword.class">this</link> (depuis &php; 5)
      </entry>
      <entry>
       namespace (uniquement en &php; 6)
      </entry>
     </row>
     <row>
      <entry>
       import (uniquement en &php; 6)
      </entry>
      <entry>
       goto (uniquement en &php; 6)
      </entry>
      <entry>
      </entry>
      <entry>
      </entry>
      <entry>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>

 <sect1 xml:id="reserved.variables">
  <title>Variables prédéfinies</title>

  <para>
   Depuis &php; 4.1.0, la méthode recommandée pour accéder à des
   <link linkend="language.variables.external">variables externes</link> est
   d'utiliser les super-globales mentionnées ci-dessous. Avant cela,
   il fallait utiliser soit l'option de configuration
   <link linkend="ini.register-globals">register_globals</link>,
   soit les tableaux prédéfinis <varname>$HTTP_*_VARS</varname>.

   &avail.register-long-arrays;
  </para>

  <sect2 xml:id="reserved.variables.server">
   <title>Variables de serveur : <varname>$_SERVER</varname></title>
   <note>
    <simpara>
     Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
     <varname>$HTTP_SERVER_VARS</varname>.
    </simpara>
   </note>

   <simpara>
    <varname>$_SERVER</varname> est un tableau contenant des informations
    comme les en-têtes, dossiers et chemins du script. Les entrées de ce
    tableau sont créées par le serveur web. Il n'y a aucune garantie que tous
    les serveurs les rempliront tous ; certains en oublieront quelques-unes
    et en rajouteront de nouvelles non mentionnées ici. Cependant, un grand
    nombre de ces variables fait partie des
    <link xlink:href="&url.cgispec;">spécifications CGI 1.1</link>, et vous pouvez donc
    vous attendre à les retrouver.
   </simpara>

   <simpara>
    Cette variable est une 'superglobal', ou globale automatique.
    Cela signifie qu'elle est simplement disponible dans tous les
    contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
    besoin de faire
    <command>global $_SERVER;</command> pour y accéder, comme
    vous le faisiez avec <varname>$HTTP_SERVER_VARS</varname>.
   </simpara>

   <simpara>
    <varname>$HTTP_SERVER_VARS</varname> contient les mêmes
    informations, mais n'est pas superglobale. (Notez que
    <varname>$HTTP_SERVER_VARS</varname> et <varname>$_SERVER</varname>
    sont des variables différentes et que &php; les traite en tant que telles.)
   </simpara>

   <simpara>
    Si la directive <link linkend="ini.register-globals">register_globals</link>
    est active, alors ces variables seront aussi rendues directement
    accessibles dans le contexte d'exécution global. C'est-à-dire séparément
    des tableaux <varname>$_SERVER</varname> et
    <varname>$HTTP_SERVER_VARS</varname>.
    Pour plus d'informations sur la sécurité de cette configuration, voyez le
    chapitre <link linkend="security.registerglobals">Utiliser la directive Register
     Globals</link>. Ces variables globales individuelles ne sont pas des superglobales.
   </simpara>

   <simpara>
    Vous pouvez éventuellement trouver les éléments suivants
    dans la variable <varname>$_SERVER</varname>. Notez que certains,
    n'auront pas de sens si vous utilisez &php; en ligne
    de commande.
   </simpara>

   <para>
    <variablelist>
     <varlistentry>
      <term>'<varname>PHP_SELF</varname>'</term>
      <listitem>
       <simpara>
        Le nom du fichier du script en cours d'exécution, par
        rapport à la racine web.
        Par exemple, <varname>$_SERVER['PHP_SELF']</varname> dans le script
        situé à l'adresse <filename>http://www.monsite.com/test.php/foo.bar</filename>
        sera <filename>/test.php/foo.bar</filename>.
        La constante <link linkend="language.constants.predefined">__FILE__</link>
        contient le chemin complet ainsi que le nom du fichier (i.e. inclut) courant.
       </simpara>
       <simpara>
        Si &php; fonctionne en ligne de commande,
        cette variable contient le nom du script depuis &php; 4.3.0. Dans les
        versions antérieures, cette variable n'était pas disponible.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>argv</varname>'</term>
      <listitem>
       <simpara>
        Tableau des arguments passés au script. Lorsque le script
        est appelé en ligne de commande, cela donne accès
        aux arguments, comme en langage C. Lorsque le script est
        appelé avec la méthode GET, ce tableau contiendra
        la chaîne de requête.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>argc</varname>'</term>
      <listitem>
       <simpara>
        Contient le nombre de paramètres de la ligne de commande
        passés au script (si le script fonctionne en ligne de commande).
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
      <listitem>
       <simpara>
        Numéro de révision de l'interface CGI du serveur :
        i.e. '<literal>CGI/1.1</literal>'.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>SERVER_ADDR</varname>'</term>
      <listitem>
       <simpara>
        L'adresse IP du serveur sous lequel le script courant est en train
        d'être exécuté.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>SERVER_NAME</varname>'</term>
      <listitem>
       <simpara>
        Le nom du serveur hôte qui exécute le script suivant.
        Si le script est exécuté sur un hôte virtuel, ce sera
        la valeur définie pour cet hôte virtuel.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>SERVER_SOFTWARE</varname>'</term>
      <listitem>
       <simpara>
        Chaîne d'identification du serveur, qui est donnée dans
        les en-têtes lors de la réponse aux requêtes.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>SERVER_PROTOCOL</varname>'</term>
      <listitem>
       <simpara>
        Nom et révision du protocole de communication : i.e. '<literal>HTTP/1.0</literal>';
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>REQUEST_METHOD</varname>'</term>
      <listitem>
       <simpara>
        Méthode de requête utilisée pour accéder
        à la page; i.e. '<literal>GET</literal>',
        '<literal>HEAD</literal>', '<literal>POST</literal>', '<literal>PUT</literal>'.
       </simpara>
       <note>
        <para>
         Le script &php; se termine après avoir envoyé les en-têtes (après
         avoir produit n'importe quelle sortie sans avoir affiché le buffer) si 
         la méthode de la requête était <literal>HEAD</literal>.
        </para>
        </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>REQUEST_TIME</varname>'</term>
      <listitem>
       <simpara>
        Le temps Unix depuis le début de la requête. Disponible depuis &php; 5.1.0.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>QUERY_STRING</varname>'</term>
      <listitem>
       <simpara>
        La chaîne de requête, si elle existe, qui est
        utilisée pour accéder à la page.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>DOCUMENT_ROOT</varname>'</term>
      <listitem>
       <simpara>
        La racine sous laquelle le script courant est exécuté,
        comme défini dans la configuration du serveur.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>HTTP_ACCEPT</varname>'</term>
      <listitem>
       <simpara>
        Contenu de l'en-tête <literal>Accept:</literal> de la
        requête courante, s'il y en a une.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
      <listitem>
       <simpara>
        Contenu de l'en-tête <literal>Accept-Charset:</literal>
        de la requête courante, si elle existe. Par exemple :
        '<literal>iso-8859-1,*,utf-8</literal>'.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
      <listitem>
       <simpara>
        Contenu de l'en-tête <literal>Accept-Encoding:</literal>
        de la requête courante, si elle existe. Par exemple : '<literal>gzip</literal>'.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
      <listitem>
       <simpara>
        Contenu de l'en-tête <literal>Accept-Language:</literal> de
        la requête courante, si elle existe. Par exemple : '<literal>fr</literal>'.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>HTTP_CONNECTION</varname>'</term>
      <listitem>
       <simpara>
        Contenu de l'en-tête <literal>Connection:</literal> de la
        requête courante, si elle existe. Par exemple : '<literal>Keep-Alive</literal>'.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>HTTP_HOST</varname>'</term>
      <listitem>
       <simpara>
        Contenu de l'en-tête <literal>Host:</literal> de la
        requête courante, si elle existe.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>HTTP_REFERER</varname>'</term>
      <listitem>
       <simpara>
        L'adresse de la page (si elle existe) qui a conduit le
        client à la page courante. Cette valeur est
        affectée par le client, et tous les clients ne le font pas.
        Certains navigateurs permettent même de modifier la valeur de
        <varname>HTTP_REFERER</varname>, sous forme de fonctionnalité.
        En bref, ce n'est pas une valeur de confiance.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>HTTP_USER_AGENT</varname>'</term>
      <listitem>
       <simpara>
        Contenu de l'en-tête <literal>User_Agent:</literal> de
        la requête courante, si elle existe. C'est une chaîne
        qui décrit le client HTML utilisé pour voir
        la page courante. Par exemple :
        <computeroutput>Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)</computeroutput>.
        Entre autres choses, vous pouvez utiliser cette valeur avec
        <function>get_browser</function> pour optimiser votre page
        en fonction des capacités du client.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>HTTPS</varname>'</term>
      <listitem>
       <simpara>
        Définissez à une valeur non-vide si le script nécessite d'utiliser le protocole HTTPS.
       </simpara>
       <simpara>
        Noter que lors de l'utilisation de ISAPI avec IIS, la valeur sera
        <literal>off</literal> si la demande n'a pas été faite via le protocole HTTPS.
       </simpara>
      </listitem>
      </varlistentry>

     <varlistentry>
      <term>'<varname>REMOTE_ADDR</varname>'</term>
      <listitem>
       <simpara>
        L'adresse IP du client qui demande la page courante.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>REMOTE_HOST</varname>'</term>
      <listitem>
       <simpara>
        Le nom de l'hôte qui lit le script courant. La résolution
        DNS inverse est basée sur la valeur de <varname>REMOTE_ADDR</varname>.
       </simpara>
       <note>
        <simpara>
         Votre serveur web doit être configuré pour créer cette variable.
         Par exemple, pour Apache, vous devez ajouter la directive
         <literal>HostnameLookups On</literal> dans le fichier
         &httpd.conf;, pour que cette variable existe.
         Voyez aussi <function>gethostbyaddr</function>.
        </simpara>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>REMOTE_PORT</varname>'</term>
      <listitem>
       <simpara>
        Le port utilisé par la machine cliente pour communiquer
        avec le serveur web.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>SCRIPT_FILENAME</varname>'</term>
      <listitem>
       <para>
        Le chemin absolu vers le fichier contenant le script en cours d'exécution.
        <note>
         <para>
          Si un script est exécuté avec le CLI, avec un chemin relatif,
          comme <filename>file.php</filename> ou
          <filename>../file.php</filename>,
          <varname>$_SERVER['SCRIPT_FILENAME']</varname>
          contiendra le chemin relatif spécifié par l'utilisateur.
         </para>
        </note>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>SERVER_ADMIN</varname>'</term>
      <listitem>
       <simpara>
        La valeur donnée à la directive SERVER_ADMIN
        (pour Apache), dans le fichier de configuration. Si le script
        est exécuté par un hôte virtuel, ce sera la
        valeur définie par l'hôte virtuel.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>SERVER_PORT</varname>'</term>
      <listitem>
       <simpara>
        Le port de la machine serveur utilisé pour les
        communications. Par défaut, c'est '80'. En utilisant
        SSL, par exemple, il sera remplacé par le numéro
        de port HTTP sécurisé.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>SERVER_SIGNATURE</varname>'</term>
      <listitem>
       <simpara>
        Chaîne contenant le numéro de version du serveur
        et le nom d'hôte virtuel, qui sont ajoutés aux
        pages générées par le serveur, si cette
        option est activée.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>PATH_TRANSLATED</varname>'</term>
      <listitem>
       <simpara>
        Chemin dans le système de fichiers (pas le document-root)
        jusqu'au script courant, une fois que le serveur a fait
        une traduction chemin virtuel -> réel.
       </simpara>
       <note>
        <simpara>
         Depuis &php; 4.3.2, la variable <envar>PATH_TRANSLATED</envar> n'est plus seulement
         définie implicitement sous Apache 2 <acronym>SAPI</acronym>
         contrairement à la situation sous Apache 1 où elle est définie avec la même
         valeur que la variable serveur <envar>SCRIPT_FILENAME</envar> lorsqu'elle
         n'est pas fournie par Apache. Ce changement a été effectué pour être conforme
         aux spécifications <acronym>CGI</acronym> qui fait que
         la variable <envar>PATH_TRANSLATED</envar> doit exister seulement
         si la variable <envar>PATH_INFO</envar> est définie.
        </simpara>
        <simpara>
         Les utilisateurs d'Apache 2 devraient utiliser <literal>AcceptPathInfo = On</literal>
         au lieu de <filename>httpd.conf</filename> pour définir <envar>PATH_INFO</envar>.
        </simpara>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>SCRIPT_NAME</varname>'</term>
      <listitem>
       <simpara>
        Contient le nom du script courant. Cela sert lorsque
        les pages doivent s'appeler elles-mêmes.
        La constante <link linkend="language.constants.predefined">__FILE__</link>
        contient le chemin complet ainsi que le nom du fichier (i.e. inclut) courant.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>REQUEST_URI</varname>'</term>
      <listitem>
       <simpara>
        L'URI qui a été fourni pour accéder
        à cette page. Par exemple : '<literal>/index.html</literal>'.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>PHP_AUTH_DIGEST</varname>'</term>
      <listitem>
       <simpara>
        Lorsque vous utilisez &php; avec Apache en tant que module
        faisant une identification HTTP <literal>Digest</literal>,
        cette variable est définie dans l'en-tête 'Authorization' 
        envoyé par le client (que vous devez donc utiliser pour
        réaliser la validation appropriée).
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>PHP_AUTH_USER</varname>'</term>
      <listitem>
       <simpara>
        Lorsque vous utilisez &php; avec Apache ou IIS (ISAPI en &php; 5) en tant que 
        module faisant une identification HTTP,
        cette variable est définie à l'utilisateur fourni par l'utilisateur.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>PHP_AUTH_PW</varname>'</term>
      <listitem>
       <simpara>
        Lorsque vous utilisez &php; avec Apache ou IIS (ISAPI en &php; 5) en tant que 
        module faisant une identification HTTP,
        cette variable est définie au mot de passe fourni par l'utilisateur.
       </simpara>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>'<varname>AUTH_TYPE</varname>'</term>
      <listitem>
       <simpara>
        Lorsque vous utilisez &php; avec Apache en tant que module faisant une identification HTTP,
        cette variable est définie au type d'identification.
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

  </sect2>

  <sect2 xml:id="reserved.variables.environment">
   <title>Variables d'environnement : <varname>$_ENV</varname></title>

   <note>
    <simpara>
     Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
     <varname>$HTTP_ENV_VARS</varname>.
    </simpara>
   </note>

   <simpara>
    Cette variable est importée dans l'espace de nom global de &php;,
    depuis l'environnement dans lequel l'exécutable &php; fonctionne.
    De nombreuses valeurs sont fournies par le shell qui exécute &php;,
    et différents systèmes pouvant disposer de différents shell, même
    un début de liste serait ici impossible. Reportez-vous à la documentation
    de votre shell pour connaître une liste de variables pré-définies.
   </simpara>

   <simpara>
    Les autres variables d'environnement incluent les variables CGI,
    placées ici, indépendemment du fait que &php; fonctionne en tant
    que CGI ou bien que module du serveur.
   </simpara>

   <simpara>
    Cette variable est une 'superglobal', ou globale automatique.
    Cela signifie qu'elle est simplement disponible dans tous les
    contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
    besoin de faire
    <command>global $_ENV;</command> pour y accéder, comme
    vous le faisiez avec <varname>$HTTP_ENV_VARS</varname>.
   </simpara>

   <simpara>
    <varname>$HTTP_ENV_VARS</varname> contient les mêmes
    informations, mais n'est pas superglobale. (Notez que
    <varname>$HTTP_ENV_VARS</varname> et <varname>$_ENV</varname>
    sont des variables différentes et que &php; les traite comme telles.)
   </simpara>

   <simpara>
    Si la directive  <link linkend="ini.register-globals">register_globals</link>
    est active, alors ces variables seront aussi rendues directement
    accessibles dans le contexte d'exécution global. C'est à dire séparément
    des tableaux <varname>$_ENV</varname> et <varname>$HTTP_ENV_VARS</varname>.
    Pour plus d'informations sur la sécurité de cette configuration, voyez le
    chapitre <link linkend="security.registerglobals">Utiliser la directive Register
     Globals</link>. Ces variables globales individuelles ne sont pas des superglobales.
   </simpara>
  </sect2>

  <sect2 xml:id="reserved.variables.cookies">
   <title>HTTP Cookies : <varname>$_COOKIE</varname></title>

   <note>
    <simpara>
     Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
     <varname>$HTTP_COOKIE_VARS</varname>.
    </simpara>
   </note>

   <simpara>
    Un tableau associatif des valeurs passées au script courant via
    les cookies HTTP. Elle est automatiquement globale dans tous les
    contextes d'exécution.
   </simpara>

   <simpara>
    Cette variable est une 'superglobal', ou globale automatique.
    Cela signifie qu'elle est simplement disponible dans tous les
    contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
    besoin de faire
    <command>global $_COOKIE;</command> pour y accéder, comme
    vous le faisiez avec <varname>$HTTP_COOKIE_VARS</varname>.
   </simpara>

   <simpara>
    <varname>$HTTP_COOKIE_VARS</varname> contient les mêmes
    informations, mais n'est pas superglobale. (Notez que
    <varname>$HTTP_COOKIE_VARS</varname> et <varname>$_COOKIE</varname>
    sont des variables différentes et que &php; les traite comme telles.)
   </simpara>

   <simpara>
    Si la directive  <link linkend="ini.register-globals">register_globals</link>
    est active, alors ces variables seront aussi rendues directement
    accessibles dans le contexte d'exécution global. C'est à dire séparément
    des tableaux <varname>$_COOKIE</varname> et <varname>$HTTP_COOKIE_VARS</varname>.
    Pour plus d'informations sur la sécurité de cette configuration, voyez le
    chapitre <link linkend="security.registerglobals">Utiliser la directive Register
     Globals</link>. Ces variables globales individuelles ne sont pas des superglobales.
   </simpara>
  </sect2>

  <sect2 xml:id="reserved.variables.get">
   <title>HTTP GET variables : <varname>$_GET</varname></title>

   <note>
    <simpara>
     Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
     <varname>$HTTP_GET_VARS</varname>.
    </simpara>
   </note>

   <simpara>
    Un tableau associatif des valeurs passées au script courant via
    le protocole HTTP et la méthode GET. Elle est automatiquement
    globale dans tous les contextes d'exécution.
   </simpara>

   <simpara>
    Cette variable est une 'superglobal', ou globale automatique.
    Cela signifie qu'elle est simplement disponible dans tous les
    contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
    besoin de faire
    <command>global $_GET;</command> pour y accéder, comme
    vous le faisiez avec <varname>$HTTP_GET_VARS</varname>.
   </simpara>

   <simpara>
    <varname>$HTTP_GET_VARS</varname> contient les mêmes
    informations, mais n'est pas superglobale. (Notez que
    <varname>$HTTP_GET_VARS</varname> et <varname>$_GET</varname>
    sont des variables différentes et que &php; les traite comme telles.)
   </simpara>

   <simpara>
    Si la directive  <link linkend="ini.register-globals">register_globals</link>
    est active, alors ces variables seront aussi rendues directement
    accessibles dans le contexte d'exécution global. C'est à dire séparément
    des tableaux <varname>$_GET</varname> et <varname>$HTTP_GET_VARS</varname>.
    Pour plus d'informations sur la sécurité de cette configuration, voyez le
    chapitre <link linkend="security.registerglobals">Utiliser la directive Register
     Globals</link>. Ces variables globales individuelles ne sont pas des superglobales.
   </simpara>
  </sect2>

  <sect2 xml:id="reserved.variables.post">
   <title>HTTP POST variables : <varname>$_POST</varname></title>

   <note>
    <simpara>
     Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
     <varname>$HTTP_POST_VARS</varname>.
    </simpara>
   </note>

   <simpara>
    Un tableau associatif des valeurs passées au script courant via
    le protocole HTTP et la méthode POST. Elle est automatiquement
    globale dans tous les contextes d'exécution.
   </simpara>

   <simpara>
    Cette variable est une 'superglobal', ou globale automatique.
    Cela signifie qu'elle est simplement disponible dans tous les
    contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
    besoin de faire
    <command>global $_POST;</command> pour y accéder, comme
    vous le faisiez avec <varname>$HTTP_POST_VARS</varname>.
   </simpara>

   <simpara>
    <varname>$HTTP_POST_VARS</varname> contient les mêmes
    informations, mais n'est pas superglobale. (Notez que
    <varname>$HTTP_POST_VARS</varname> et <varname>$_POST</varname>
    sont des variables différentes et que &php; les traite comme telles.)
   </simpara>

   <simpara>
    Si la directive  <link linkend="ini.register-globals">register_globals</link>
    est active, alors ces variables seront aussi rendues directement
    accessibles dans le contexte d'exécution global. C'est à dire séparément
    des tableaux <varname>$_POST</varname> et <varname>$HTTP_POST_VARS</varname>.
    Pour plus d'informations sur la sécurité de cette configuration, voyez le
    chapitre <link linkend="security.registerglobals">Utiliser la directive Register
     Globals</link>. Ces variables globales individuelles ne sont pas des superglobales.
   </simpara>
  </sect2>

  <sect2 xml:id="reserved.variables.files">
   <title>Variable de téléchargement de fichier via HTTP : <varname>$_FILES</varname></title>

   <note>
    <simpara>
     Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
     <varname>$HTTP_POST_FILES</varname>.
    </simpara>
   </note>

   <simpara>
    Un tableau associatif des valeurs téléchargées au script courant via
    le protocole HTTP et la méthode POST. Elle est automatiquement
    globale dans tous les contextes d'exécution.
   </simpara>

   <simpara>
    Cette variable est une 'superglobal', ou globale automatique.
    Cela signifie qu'elle est simplement disponible dans tous les
    contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
    besoin de faire
    <command>global $_FILES;</command> pour y accéder, comme
    vous le faisiez avec <varname>$HTTP_POST_FILES</varname>.
   </simpara>

   <simpara>
    <varname>$HTTP_POST_FILES</varname> contient les mêmes
    informations, mais n'est pas superglobale. (Notez que
    <varname>$HTTP_POST_FILES</varname> et <varname>$_FILES</varname>
    sont des variables différentes et que &php; les traite comme telles)
   </simpara>

   <simpara>
    Si la directive  <link linkend="ini.register-globals">register_globals</link>
    est active, alors ces variables seront aussi rendues directement
    accessibles dans le contexte d'exécution global. C'est à dire séparément
    des tableaux <varname>$_FILES</varname> et <varname>$HTTP_POST_FILES</varname>.
    Pour plus d'informations sur la sécurité de cette configuration, voyez le
    chapitre <link linkend="security.registerglobals">Utiliser la directive Register
     Globals</link>. Ces variables globales individuelles ne sont pas des superglobales.
   </simpara>
  </sect2>

  <sect2 xml:id="reserved.variables.request">
   <title>Variables de requête : <varname>$_REQUEST</varname></title>

   <note>
    <simpara>
     Introduite en 4.1.0. Dans les versions plus anciennes, elle n'avait
     pas d'équivalent.
    </simpara>
   </note>
   <note>
    <simpara>
     Dans les versions antérieures à &php; 4.3.0, les informations de
     <varname>$_FILES</varname> étaient inclues également dans
     <varname>$_REQUEST</varname>.
    </simpara>
   </note>

   <simpara>
    Un tableau associatif constitué du contenu des
    variables <varname>$_GET</varname>, <varname>$_POST</varname>,
    <varname>$_COOKIE</varname>.
   </simpara>

   <simpara>
    Cette variable est une 'superglobal', ou globale automatique.
    Cela signifie qu'elle est simplement disponible dans tous les
    contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
    besoin de faire
    <command>global $_REQUEST;</command> pour y accéder.
   </simpara>

   <simpara>
    Si la directive  <link linkend="ini.register-globals">register_globals</link>
    est active, alors ces variables seront aussi rendues directement
    accessibles dans le contexte d'exécution global. C'est à dire séparément
    des tableaux <varname>$_REQUEST</varname>.
    Pour plus d'informations sur la sécurité de cette configuration, voyez le
    chapitre <link linkend="security.registerglobals">Utiliser la directive Register
     Globals</link>. Ces variables globales individuelles ne sont pas des superglobales.
   </simpara>
  </sect2>

  <sect2 xml:id="reserved.variables.session">
   <title>Session variables : <varname>$_SESSION</varname></title>

   <note>
    <simpara>
     Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
     <varname>$HTTP_SESSION_VARS</varname>.
    </simpara>
   </note>

   <simpara>
    Un tableau associatif des valeurs stockées dans les sessions,
    et accessible au script courant. Elle est automatiquement
    globale dans tous les contextes d'exécution. Voyez l'extension
    <link linkend="ref.session">Sessions</link> pour plus de détails sur comment
    est utilisée cette variable.
   </simpara>

   <simpara>
    Cette variable est une 'superglobal', ou globale automatique.
    Cela signifie qu'elle est simplement disponible dans tous les
    contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
    besoin de faire
    <command>global $_SESSION;</command> pour y accéder, comme vous le
    faisiez avec <varname>$HTTP_SESSION_VARS</varname>.
   </simpara>

   <simpara>
    <varname>$HTTP_SESSION_VARS</varname> contient les mêmes
    informations, mais n'est pas supperglobale. (Notez que
    <varname>$HTTP_SESSION_VARS</varname> et <varname>$_SESSION</varname>
    sont des variables différentes et que &php; les traite comme telles)
   </simpara>

   <simpara>
    Si la directive  <link linkend="ini.register-globals">register_globals</link>
    est active, alors ces variables seront aussi rendues directement
    accessibles dans le contexte d'exécution global. C'est à dire séparément
    des tableaux <varname>$_SESSION</varname> et <varname>$HTTP_SESSION_VARS</varname>.
    Pour plus d'informations sur la sécurité de cette configuration, voyez le
    chapitre <link linkend="security.registerglobals">Utiliser la directive Register
     Globals</link>. Ces variables globales individuelles ne sont pas des superglobales.
   </simpara>
  </sect2>

  <sect2 xml:id="reserved.variables.globals">
   <title>Variables globales : <varname>$GLOBALS</varname></title>

   <note>
    <simpara>
     <varname>$GLOBALS</varname> est disponible depuis &php; 3.0.0.
    </simpara>
   </note>

   <simpara>
    Un tableau associatif contenant les références sur toutes les variables
    globales actuellement définies dans le contexte d'exécution global du
    script. Les noms des variables sont les index du tableau.
   </simpara>

   <simpara>
    Cette variable est une 'superglobal', ou globale automatique.
    Cela signifie qu'elle est simplement disponible dans tous les
    contextes d'exécution (fonctions ou méthodes). Vous n'avez pas
    besoin de faire
    <command>global $GLOBALS;</command> pour y accéder.
   </simpara>

  </sect2>

  <sect2 xml:id="reserved.variables.phperrormsg">
   <title>Le dernier message d'erreur : <varname>$php_errormsg</varname></title>
   <simpara>
    <varname>$php_errormsg</varname> est une variable qui contient le texte
    de la dernière erreur générée par &php;. Cette variable sera uniquement
    accessible dans le même contexte d'exécution que celui de la ligne
    qui a généré l'erreur, et uniquement si la directive de configuration <link
    linkend="ini.track-errors">track_errors</link> est activée (elle est
    désactivée par défaut).
   </simpara>
  </sect2>

  <sect2 xml:id="reserved.variables.httprawpostdata">
   <title>Données POST brutes : <varname>$HTTP_RAW_POST_DATA</varname></title>
   <para>
    <varname>$HTTP_RAW_POST_DATA</varname> contient les données POST brutes.
    Voir <link linkend="ini.always-populate-raw-post-data">always_populate_raw_post_data</link>
   </para>
  </sect2>

  <sect2 xml:id="reserved.variables.httpresponseheader">
   <title>En-têtes de réponse HTTP : <varname>$http_response_header</varname></title>
    <para>
     Le tableau <varname>$http_response_header</varname> est similaire à la fonction
     <function>get_headers</function>. Lors de l'utilisation du
     <link linkend="wrappers.http">gestionnaire HTTP</link>,
     <varname>$http_response_header</varname> sera peuplé des en-têtes de réponse HTTP.
    </para>
   </sect2>
  </sect1>

 <sect1 xml:id="reserved.classes">
  <title>Classes prédéfinies</title>
  <para>
   Cette section liste les classes standards prédéfinies. Les autres extensions
   qui définissent d'autres classes sont décrites dans leur référence.
  </para>

  <sect2 xml:id="reserved.classes.standard">
   <title>Classes standards</title>

   <simpara>
    Ces classes sont définies dans le jeu de classe standard
    de &php;, inclus dans toutes les versions de &php;.
   </simpara>

   <variablelist>
    <varlistentry>
     <term><classname>Directory</classname></term>
     <listitem>
      <simpara>
       La classe qui permet d'instancier <function>dir</function>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><classname>stdClass</classname></term>
     <listitem>
      <simpara>
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><classname>__PHP_Incomplete_Class</classname></term>
     <listitem>
      <simpara>
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="reserved.classes.php5">
   <title>Classes prédéfinies en &php; 5</title>

   <simpara>
    Ces classes supplémentaires ont été ajoutées en &php; 5.0.0.
   </simpara>

   <variablelist>
    <varlistentry>
     <term><classname>exception</classname></term>
     <listitem>
      <simpara>
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><classname>php_user_filter</classname></term>
     <listitem>
      <simpara>
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

 </sect1>

 &appendices.reserved.constants;

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
