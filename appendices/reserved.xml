<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.17 $ -->
<appendix id="reserved">
 <title>Mots r&eacute;serv&eacute;s en PHP</title>
  <para>
   Cette annexes est une liste d'identifiant pr&eacute;d&eacute;finis en PHP. Aucun
   des identifiants utilis&eacute;s ici ne doit &ecirc;tre repris comme nom de
   variable ou de fonction dans vos scripts. Ces identifiants incluent
   des mots cl&eacute;s, des constantes, des classes, et es variables
   pr&eacute;d&eacute;finies. Ces listes ne sont pas compl&egrave;tes ou exhaustives.
  </para>

  <sect1 id="reserved.keywords">
  <title>Liste de mots-cl&eacute;</title>

   <para>
    Ces mots ont un sens sp&eacute;cial en PHP. Certains repr&eacute;sentent des objets
    qui ressemblent &agrave; des fonctions, d'autres &agrave; des contantes, et ainsi de
    suite, mais ils n'en sont pas vraiment : ce sont des structures de langage.
    Vous ne pourrez pas les utiliser comme constantes, nom de classe ou fonctions.
    Vous pouvez les utiliser comme noms de variables, mais cela risque de vous
    mener des confusions.
   </para>
   <para>
   <table>
    <title>PHP Keywords</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">exception</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__LINE__</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="migration.old-function">cfunction</link>
       </entry>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        const
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <link linkend="function.eval">eval</link>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
       <entry>
        <link linkend="migration.old-function">old_function</link>
       </entry>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
      </row>
      <row>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
 </para>
 </sect1>
  <sect1 id="reserved.variables">
   <title>Variables pr&eacute;d&eacute;finies</title>

   <sect2 id="reserved.variables.server">
    <title>Variables de serveur : <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_SERVER_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     <varname>$_SERVER</varname> is an array containing information
     such as headers, paths, and script locations. The entries in this
     array are created by the webserver. There is no guarantee that
     every webserver will provide any of these; servers may omit some,
     or provide others not listed here. That said, a large number of
     these variables are accounted for in the <ulink
     url="&url.cgispec;">CGI 1.1 specification</ulink>, so you should
     be able to expect those.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'ex&eacute;cution (fonctions ou m&eacute;thodes). Vous n'avez pas
     besoin de faire 
     <command>global $_SERVER;</command> pour y acc&eacute;der, comme
     vous le faisiez avec <varname>$HTTP_SERVER_VARS</varname>.
   </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> contient les m&ecirc;mes
     informations, mais n'est pas autoglobale.
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'ex&eacute;cution global. C'est &agrave; dire s&eacute;par&eacute;ment
     des tableaux <varname>$_SERVER</varname> et <varname>$HTTP_SERVER_VARS</varname>.
     Pour plus d'informations sur la s&eacute;curit&eacute; de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>

    <simpara>
     You may or may not find any of the following elements in
     $_SERVER. Note that few, if any, of these will be available (or
     indeed have any meaning) if running PHP on the command line.
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
	     Le nom du fichier du script en cours d'ex&eacute;cution, par
	     rapport au document root. 
	     Par exemple, <varname>$_SERVER['PHP_SELF']</varname> dans le script
	     situ&eacute; &agrave; l'adresse <filename>http://www.monsite.com/test.php/foo.bar</filename>
         sera <filename>/test.php/foo.bar</filename>.
        </simpara>
        <simpara>
         Si PHP fonctionne en ligne de commande,
	     cette variable n'est pas disponible.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         Tableau des arguments pass&eacute;es au script. Lorsque le script
    	 est appel&eacute; en ligne de commande, cela donne acc&egrave;s
	     aux arguments, comme en langage C. Lorsque le script est
    	 appel&eacute; avec la m&eacute;thode GET, ce tableau contiendra
	     la cha&icirc;ne de requ&ecirc;te.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         Contient le nombre de param&egrave;tres de la ligne de commande
	     pass&eacute;s au script (si le script fonctionne en ligne de commande).
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         Num&eacute;ro de r&eacute;vision de l'interface CGI du serveur :
	 i.e. '<literal>CGI/1.1</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         Le nom du serveur h&ocirc;te qui ex&eacute;cute le script suivant.
    	 Si le script est ex&eacute;cut&eacute; sur un h&ocirc;te virtuel, ce sera
    	 la valeur d&eacute;finie pour cet h&ocirc;te virtuel.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         Cha&icirc;ne d'identification du serveur, qui est donn&eacute;e dans
    	 les en-t&ecirc;tes lors de la r&eacute;ponse aux requ&ecirc;tes.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         Nom et r&eacute;vision du protocole de communication : i.e. '<literal>HTTP/1.0</literal>';
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         M&eacute;thode de requ&ecirc;te utilis&eacute;e pour acc&eacute;der
    	 &agrave; la page; i.e. '<literal>GET</literal>', 
    	 '<literal>HEAD</literal>', '<literal>POST</literal>', '<literal>PUT</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
	  
      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         La cha&icirc;ne de requ&ecirc;te, si elle existe, qui est
    	 utilis&eacute;e pour acc&eacute;der &agrave; la page.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         La racine sous laquelle le script courant est ex&eacute;cut&eacute;,
	     comme d&eacute;fini dans la configuration du serveur.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-t&ecirc;te <literal>Accept:</literal> de la
    	 requ&ecirc;te courante, s'il y en a une.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-t&ecirc;te <literal>Accept-Charset:</literal>
	     de la requ&ecirc;te courante, s'elle existe. Par exemple :
	     '<literal>iso-8859-1,*,utf-8</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-t&ecirc;te <literal>Accept-Encoding:</literal>
	     de la requ&ecirc;te courante, si elle existe. Par exemple : '<literal>gzip</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-t&ecirc;te <literal>Accept-Language:</literal> de
	     la requ&ecirc;te courante, si elle existe. Par exemple : '<literal>fr</literal>'.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-t&ecirc;te <literal>Connection:</literal> de la
	     requ&ecirc;te courante, si elle existe. Par exemple : '<literal>Keep-Alive</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         Contenu de l'en-t&ecirc;te <literal>Host:</literal> de la
	      requ&ecirc;te courante, si elle existe.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         L'adresse de la page (si elle existe) qui a conduit le
	     client &agrave; la page courante. Cette valeur est
	     affect&eacute;e par le client, et tous les clients ne le font pas.
	     Certains navigateur permettent m&ecirc;me de modifier la valeur de
	     <varname>HTTP_REFERER</varname>, sous forme de fonctionnalit&eacute;.
	     En bref, ce n'est pas une valeur de confiance.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
 	     Contenu de l'en-t&ecirc;te <literal>User_Agent:</literal> de
	     la requ&ecirc;te courante, si elle existe. C'est une cha&icirc;ne
	     qui d&eacute;crit le client HTML utilis&eacute; pour voir
	     la page courante. Par exemple :
	     <computeroutput>Mozilla/4.5 [en] (X11; U; Linux	 2.2.9 i586)</computeroutput>.
	     Entre autres choses, vous pouvez utiliser cette valeur avec
	     <function>get_browser</function> pour optimiser votre page
	     en fonction des capacit&eacute;s du client.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         L'adresse IP du client qui demande la page courante.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_HOST</varname>'</term>
       <listitem>
        <simpara>
         Le nom de l'h&ocirc;te qui lit le script courant. La r&eacute;solution
         DNS inverse est bas&eacute;e sur la valeur de <varname>REMOTE_ADDR</varname>.
        </simpara>
        <note>
         <simpara>
          Votre serveur web doit &ecirc;tre configur&eacute; pour cr&eacute;er cette variable.
          Par exemple, pour Apache, vous devez ajouter la directive 
          <literal>HostnameLookups On</literal> dans le fichier 
          &httpd.conf;, pour que cette variable existe.
          Voyez aussi <function>gethostbyaddr</function>.
         </simpara>
        </note>
        </listitem>
       </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         Le port utilis&eacute; par la machine cliente pour communiquer
	     avec le serveur web.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <simpara>
         Le chemin absolu jusqu'au script courant.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         La valeur donn&eacute;e &agrave; la directive SERVER_ADMIN
	     (pour Apache), dans le fichier de configuration. Si le script
	     est ex&eacute;cut&eacute; par un h&ocirc;te virtuel, ce sera la
	     valeur d&eacute;finie par l'h&ocirc;te virtuel.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
          Le port de la machine serveur utilis&eacute; pour les
	     communications. Par d&eacute;faut, c'est '80'. En utilisant
	     SSL, par exemple, il sera remplac&eacute; par le num&eacute;ro
	     de port HTTP s&eacute;curis&eacute;.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
          Cha&icirc;ne contenant le num&eacute;ro de version du serveur
	     et le nom d'h&ocirc;te virtuel, qui sont ajout&eacute;s aux
	     pages g&eacute;n&eacute;r&eacute;es par le serveur, si cette
	     option est activ&eacute;e.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         Chemin dans le syst&egrave;me de fichier (pas le document root-)
	     jusqu'au script courant, une fois que le serveur a fait
	     une chemin traduction virtuel->r&eacute;el.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         Contient le nom du script courant. Cela sert lorsque
	     les pages doivent s'appeler elles-m&ecirc;mes.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         L'URI qui a &eacute;t&eacute; fourni pour acc&eacute;der
	     &agrave; cette page. Par exemple : '<literal>/index.html</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>Variables d'environnement : <varname>$_ENV</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_ENV_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Cette variable est import&eacute;e dans l'espace de nom global de PHP,
     depuis l'environnement dans lequel l'ex&eacute;cutable PHP fonctionne. 
     De nombreuses valeur sont fournies par le shell qui ex&eacute;cute PHP,
     et diff&eacute;rents syst&egrave;mes pouvant disposer de diff&eacute;rents shell, m&ecirc;me
     un d&eacute;but de liste serait ici impossible. Reportez vous &agrave; la documentation
     de votre shell pour conna&icirc;tre une liste de variables pr&eacute;d&eacute;finies.
    </simpara>

    <simpara>
     Les autres variables d'environnement incluent les variables CGI,
     plac&eacute;es ici, ind&eacute;pendemment du fait que PHP fonctionne en tant
     que CGI ou bien que module du serveur.
    </simpara>
	
    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'ex&eacute;cution (fonctions ou m&eacute;thodes). Vous n'avez pas
     besoin de faire 
     <command>global $_ENV;</command> pour y acc&eacute;der, comme
     vous le faisiez avec <varname>$HTTP_ENV_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> contient les m&ecirc;mes
     informations, mais n'est pas autoglobale.
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'ex&eacute;cution global. C'est &agrave; dire s&eacute;par&eacute;ment
     des tableaux <varname>$_ENV</varname> et <varname>$HTTP_ENV_VARS</varname>.
     Pour plus d'informations sur la s&eacute;curit&eacute; de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>HTTP Cookies: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_COOKIE_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs pass&eacute;es au script courant via
     les cookies HTTP. Elle est automatiquement global dans tous les 
     contextes d'ex&eacute;cution.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'ex&eacute;cution (fonctions ou m&eacute;thodes). Vous n'avez pas
     besoin de faire 
     <command>global $_COOKIE;</command> pour y acc&eacute;der, comme
     vous le faisiez avec <varname>$HTTP_COOKIE_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> contient les m&ecirc;mes
     informations, mais n'est pas autoglobale.
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'ex&eacute;cution global. C'est &agrave; dire s&eacute;par&eacute;ment
     des tableaux <varname>$_COOKIE</varname> et <varname>$HTTP_COOKIE_VARS</varname>.
     Pour plus d'informations sur la s&eacute;curit&eacute; de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>HTTP GET variables: <varname>$_GET</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_GET_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs pass&eacute;es au script courant via
     le protocole HTTP et la m&eacute;thode GET. Elle est automatiquement 
     globale dans tous les contextes d'ex&eacute;cution.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'ex&eacute;cution (fonctions ou m&eacute;thodes). Vous n'avez pas
     besoin de faire 
     <command>global $_GET;</command> pour y acc&eacute;der, comme
     vous le faisiez avec <varname>$HTTP_GET_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> contient les m&ecirc;mes
     informations, mais n'est pas autoglobale.
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'ex&eacute;cution global. C'est &agrave; dire s&eacute;par&eacute;ment
     des tableaux <varname>$_GET</varname> et <varname>$HTTP_GET_VARS</varname>.
     Pour plus d'informations sur la s&eacute;curit&eacute; de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>HTTP POST variables: <varname>$_POST</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_POST_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs pass&eacute;es au script courant via
     le protocole HTTP et la m&eacute;thode POST. Elle est automatiquement 
     globale dans tous les contextes d'ex&eacute;cution.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'ex&eacute;cution (fonctions ou m&eacute;thodes). Vous n'avez pas
     besoin de faire 
     <command>global $_POST;</command> pour y acc&eacute;der, comme
     vous le faisiez avec <varname>$HTTP_POST_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> contient les m&ecirc;mes
     informations, mais n'est pas autoglobale.
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'ex&eacute;cution global. C'est &agrave; dire s&eacute;par&eacute;ment
     des tableaux <varname>$_POST</varname> et <varname>$HTTP_POST_VARS</varname>.
     Pour plus d'informations sur la s&eacute;curit&eacute; de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>Variable de t&eacute;l&eacute;chargement de fichier via HTTP : <varname>$_FILES</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_POST_FILES</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs t&eacute;l&eacute;charg&eacute;es au script courant via
     le protocole HTTP et la m&eacute;thode POST. Elle est automatiquement 
     globale dans tous les contextes d'ex&eacute;cution.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'ex&eacute;cution (fonctions ou m&eacute;thodes). Vous n'avez pas
     besoin de faire 
     <command>global $_FILES;</command> pour y acc&eacute;der, comme
     vous le faisiez avec <varname>$HTTP_POST_FILES</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> contient les m&ecirc;mes
     informations, mais n'est pas autoglobale.
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'ex&eacute;cution global. C'est &agrave; dire s&eacute;par&eacute;ment
     des tableaux <varname>$_FILES</varname> et <varname>$HTTP_POST_FILES</varname>.
     Pour plus d'informations sur la s&eacute;curit&eacute; de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>Variables de requ&ecirc;te : <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle n'avait
      pas d'&eacute;quivalent.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif constitu&eacute; du contenu des
     variables <varname>$_GET</varname>, <varname>$_POST</varname>,
     <varname>$_COOKIE</varname>, et <varname>$_FILES</varname>.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'ex&eacute;cution (fonctions ou m&eacute;thodes). Vous n'avez pas
     besoin de faire 
     <command>global $_REQUEST;</command> pour y acc&eacute;der.
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'ex&eacute;cution global. C'est &agrave; dire s&eacute;par&eacute;ment
     des tableaux <varname>$_REQUEST</varname>.
     Pour plus d'informations sur la s&eacute;curit&eacute; de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>Session variables: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
      Introduite en 4.1.0. Dans les versions plus anciennes, elle s'appelait
      <varname>$HTTP_SESSION_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif des valeurs stock&eacute;es dans les sessions,
     et accessible au script courant. Elle est automatiquement 
     globale dans tous les contextes d'ex&eacute;cution. Voyez l'extension
     <link linkend="ref.session">Sessions</link> pour plus de d&eacute;tails sur comment
     est utilis&eacute;e cette variable.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'ex&eacute;cution (fonctions ou m&eacute;thodes). Vous n'avez pas
     besoin de faire 
     <command>global $_SESSION;</command> pour y acc&eacute;der, comme vous le
     faisiez avec <varname>$HTTP_SESSION_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> contient les m&ecirc;mes
     informations, mais n'est pas autoglobale.
    </simpara>

    <simpara>
     Si la directive  <link linkend="ini.register-globals">register_globals</link> 
     est active, alors ces variables seront aussi rendues directement
     accessible dans le contexte d'ex&eacute;cution global. C'est &agrave; dire s&eacute;par&eacute;ment
     des tableaux <varname>$_SESSION</varname> et <varname>$HTTP_SESSION_VARS</varname>.
     Pour plus d'informations sur la s&eacute;curit&eacute; de cette configuration, voyez le
     chapitre <link linkend="security.registerglobals">Utiliser la directive Register
      Globals</link>. Ces variables globales individuelles ne sont pas des globales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>Variables globales: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> est disponible depuis PHP 3.0.0.
     </simpara>
    </note>
    
    <simpara>
     Un tableau associatif contenant les r&eacute;f&eacute;rences sur toutes les variables
     globales actuellement d&eacute;finies dans le contexte d'ex&eacute;cution global du
     script. Les noms des variables sont les index du tableau.
    </simpara>

    <simpara>
     Cette variable est une 'superglobal', ou globale automatique. 
     Cela signifie qu'elle est simplement disponible dans tous les
     contextes d'ex&eacute;cution (fonctions ou m&eacute;thodes). Vous n'avez pas
     besoin de faire 
     <command>global $GLOBALS;</command> pour y acc&eacute;der.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>Le dernier message d'erreur : <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> est une variable qui contient le texte
     de la derni&egrave;re erreur g&eacute;n&eacute;r&eacute;e par PHP. Cette variable sera uniquement
     accessible dans le m&ecirc;me contexte d'ex&eacute;cution que celui de la ligne
     qui a g&eacute;n&eacute;r&eacute; l'erreur, et uniquement si la directive de configuration <link
     linkend="ini.track-errors">track_errors</link> est activ&eacute;e (elle est
     d&eacute;sactiv&eacute;e par d&eacute;faut).
    </simpara>
   </sect2>
  </sect1>


  <sect1 id="reserved.classes">
   <title>Classes pr&eacute;d&eacute;finies</title>

   <sect2 id="reserved.classes.standard">
    <title>Classes standards</title>

    <simpara>
     Ces classes sont d&eacute;finies dans le jeu de classe standard
     de PHP, inclus dans toute version de PHP.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        La classe qui permet d'instancier <function>dir</function>.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.php5">
    <title>Classes pr&eacute;d&eacute;finies en &php; 5</title>
    
    <simpara>
     Ces classe suppl&eacute;mentaires ont &eacute;t&eacute; ajout&eacute;es en &php; 5.0.0.
    </simpara>
    
    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>


   <sect2 id="reserved.classes.ming">
    <title>Classes d&eacute;finies par <link linkend="ref.ming">Ming</link></title>

    <simpara>
     Ces classes sont d&eacute;finies dans l'extension 
     <link linkend="ref.ming">Ming</link> et ne seront pas disponibles
     si PHP a &eacute;t&eacute; compil&eacute; pour &ecirc;tre ex&eacute;cut&eacute; dynamiquement, ou bien si
     elles n'ont pas &eacute;t&eacute; compil&eacute;es dans PHP.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>swfshape</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffill</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfgradient</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbitmap</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftext</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftextfield</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffont</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfdisplayitem</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmovie</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbutton</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfaction</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmorph</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfsprite</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.oci8">
    <title>Classes d&eacute;finies par <link linkend="ref.oci8">Oracle 8</link></title>

    <simpara>
     Ces classes sont d&eacute;finies dans l'extension 
     <link linkend="ref.oci8">Oracle 8</link> et ne seront pas disponibles
     si PHP a &eacute;t&eacute; compil&eacute; pour &ecirc;tre ex&eacute;cut&eacute; dynamiquement, ou bien si
     elles n'ont pas &eacute;t&eacute; compil&eacute;es dans PHP.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>OCI-Lob</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>OCI-Collection</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.qtdom">
    <title>Classes d&eacute;finies par <link linkend="ref.qtdom">qtdom</link></title>

    <simpara>
     Ces classes sont d&eacute;finies dans l'extension 
     <link linkend="ref.qtdom">qtdom</link> et ne seront pas disponibles
     si PHP a &eacute;t&eacute; compil&eacute; pour &ecirc;tre ex&eacute;cut&eacute; dynamiquement, ou bien si
     elles n'ont pas &eacute;t&eacute; compil&eacute;es dans PHP.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>QDomDocument</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>QDomNode</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
  </sect1>

  &appendices.reserved.constants;

</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
