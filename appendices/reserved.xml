<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

 <appendix xml:id="reserved" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Mots réservés en PHP</title>
  <para>
   Cette annexe est une liste d'identifiants prédéfinis en PHP. Aucun
   des identifiants utilisés ici ne doit être repris comme nom de
   variable ou de fonction dans vos scripts. Ces identifiants incluent
   des mots-clés, des constantes, des classes, et des variables
   prédéfinies. Ces listes ne sont pas complètes ou exhaustives.
  </para>

  <sect1 xml:id="reserved.keywords">
   <title>Liste de mots-clés</title>
   <simpara>
    Ces mots ont un sens spécial en PHP. Certains représentent des objets
    qui ressemblent à des fonctions, d'autres à des constantes, et ainsi de
    suite, mais ils n'en sont pas vraiment : ce sont des structures de langage.
    Vous ne pourrez pas les utiliser comme constante, nom de classes, 
    nom de fonctions ou nom de méthodes.
    Vous pouvez les utiliser comme nom de variables, mais cela risque 
    d'entraîner des confusions.
   </simpara>

   <table>
    <title>Mots réservés en PHP</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.oop5.abstract">abstract</link> (depuis PHP 5)
       </entry>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
       <entry>
        <link linkend="language.exceptions">catch</link> (depuis PHP 5)
       </entry>
       <entry>
        cfunction (PHP 4 uniquement)
       </entry>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        <link linkend="language.oop5.cloning">clone</link> (depuis PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.constants">const</link>
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
       <entry>
        <link linkend="language.oop5.final">final</link> (depuis PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        &foreach;
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
       <entry>
        <link linkend="control-structures.goto">goto</link> (depuis PHP 5.3)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
       <entry>
        <link linkend="language.oop5.interfaces">implements</link> (depuis PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.interfaces">interface</link> (depuis PHP 5)
       </entry>
       <entry>
        <link linkend="language.operators.type">instanceof</link> (depuis PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.namespaces">namespace</link> (depuis PHP 5.3)
       </entry>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
       <entry>
        old_function (PHP 4 uniquement)
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">private</link> (depuis PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.visibility">protected</link> (depuis PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">public</link> (depuis PHP 5)
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <link linkend="language.exceptions">throw</link> (depuis PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.exceptions">try</link> (depuis PHP 5)
       </entry>
       <entry>
        <link linkend="language.namespaces">use</link>
       </entry>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <table>
    <title>Constantes utilisées lors de la compilation</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry> 
        <link linkend="language.constants.predefined">__DIR__</link> (depuis PHP 5.3)
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.namespaces">__NAMESPACE__</link> (depuis PHP 5.3)
       </entry>
       <entry>
       </entry>
       <entry>
       </entry>
       <entry>
       </entry>
       <entry>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <table>
    <title>Constructeurs de langage</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
       <entry>
        <function>eval</function>
       </entry>
      </row>
      <row>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
      </row>
      <row>
       <entry>
        <function>require_once</function>
       </entry>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 xml:id="reserved.classes">
   <title>Classes prédéfinies</title>
   <para>
    Cette section liste les classes standards prédéfinies. Les autres extensions
    qui définissent d'autres classes sont décrites dans leur référence.
   </para>

   <sect2 xml:id="reserved.classes.standard">
    <title>Classes standards</title>

    <simpara>
     Ces classes sont définies dans le jeu de classe standard
     de PHP, inclus dans toutes les versions de PHP.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        La classe qui permet d'instancier <link linkend="class.dir">dir</link>.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
   
   <sect2 xml:id="reserved.classes.php5">
    <title>Classes prédéfinies en PHP 5</title>
    
    <simpara>
     Ces classes ont été ajoutées en PHP 5.0.0.
    </simpara>
    
    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 xml:id="reserved.classes.special">
    <title>Classes spéciales</title>
    
    <simpara>
     Les identifiants suivants ne devraient pas être utilisés en tant que nom de classe
     à cause de leur rôle particulier.
    </simpara>
    
    <variablelist>
     <varlistentry>
      <term><classname>self</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>parent</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>


   <sect2 xml:id="reserved.classes.closure">
    <title>Closure</title>
    
    <simpara>
     La classe prédéfinie finale <classname>Closure</classname> a été introduite
     en PHP 5.3.0. Elle est utilisée pour l'implémentation interne des 
     <link linkend="functions.anonymous">fonctions anonymes</link>.
    </simpara>
    <simpara>
     La classe dispose d'un constructeur qui interdit la création manuelle
     de l'objet (il émet une erreur <constant>E_RECOVERABLE_ERROR</constant>) 
     et appelle la méthode <literal>__invoke</literal> sur 
     <link linkend="language.oop5.magic.invoke">appel magique</link>.
    </simpara>
    
   </sect2>

 
  </sect1>

  &appendices.reserved.constants;

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
