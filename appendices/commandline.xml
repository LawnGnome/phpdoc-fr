<?xml encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- 
   TODO:
   
     The command line options not in the
     list, but in the -h output below:
   
       -f, -e, -z, -l
    
     It would be best to document these, and
     collect more info about -c and -d!
-->
<appendix id="commandline">
 <title>Utiliser PHP en ligne de commande</title>
 <para>
  Les options de ligne de commande de PHP sont pratiques si vous
  souhaitez d&eacute;bugger ou tester votre installation PHP, mais
  elles sont aussi utiles si vous voulez utilisr PHP pour
  d'autres t&acirc;ches que les scripts web.
 </para>
 <para>
  Notez, que vous pouvez toujours rediriger le r&eacute;sultat
  d'un script PHP avec le caract&egrave;re sup&eacute;rieur ( &gt; ) :
  par exemple, <literal>php -q test.php > test.html</literal> 
  &eacute;crira le r&eacute;sultat du script <filename>test.php</filename>
  sans les ent&ecirc;tes HTTP dans le fichier <filename>test.html</filename>,
  dans le m&ecirc;me dossier.
 </para>
 <para>
  Vous ne pouvez utiliser les options de ligne de commande
  que si vous avez install&eacute; PHP comme ex&eacute;cutable. Si vous
  avez cr&eacute;&eacute; un module Serveur, et que vous n'avez aucune
  version CGI disponible sur votre serveur, vous n'avez aucune
  chance de pouvoir utiliser ces options.
  Pour les utilisateurs Windows, les deux versions de PHP
  sont disponibles dans la distribution binaire, et l'ex&eacute;cutable
  s'appelle <filename>php.exe</filename>.
 </para>
 <para>
  Cette liste d'options est valable pour PHP 4.0.6.
  Vous pouvez conna&icirc;tre la liste r&eacute;&eacute;elle et avoir un peu
  d'aide avec l'option <literal>-h</literal>. Le r&eacute;sultat de 
  la commande <literal>php -h</literal> ressemblera &agrave; peut pr&egrave;s 
  &agrave; &ccedil;a :
  <programlisting>
<![CDATA[
Usage: php [-q] [-h] [-s [-v] [-i] [-f <file>] |  {<file> [args...]}
  -q             Quiet-mode.  Suppress HTTP Header output.
  -s             Display colour syntax highlighted source.
  -f <file>      Parse <file>.  Implies `-q'
  -v             Version number
  -C             Do not chdir to the script's directory
  -c <path>      Look for php.ini file in this directory
  -d foo[=bar]   Define INI entry foo with value 'bar'
  -e             Generate extended information for debugger/profiler
  -z <file>      Load Zend extension <file>.
  -l             Syntax check only (lint)
  -m             Show compiled in modules
  -i             PHP information
  -h             This help
]]>
  </programlisting>  
 </para>
 <para>
  Voici une liste des options les plus importantes, avec
  leur explication.
 </para>
 <para>
  <table>
   <title>Option de ligne de commande</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Option</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>-q</entry>
      <entry>
       Supprime les ent&ecirc;tes HTTP. Normalement, PHP affiche les
       ent&ecirc;tes HTTP pour le serveur web qui l'utilise pour les
       transmettre au client web. Lorsque vous creez des scripts en ligne
       de commande, ces ent&ecirc;tes sont inutiles.
      </entry>
     </row>
     <row>
      <entry>-s</entry>
      <entry>
       Affiche le source en couleur du fichier dont 
       le nom est fourni apr&egrave;s. Cela revient &agrave; utiliser
       la fonction <function>highlight_file</function> 
       dans un script PHP.
      </entry>
     </row>
     <row>
      <entry>-v</entry>
      <entry>
       Affiche la version du PHP courant. Par exemple,
       4.0.6. 
      </entry>
     </row>
     <row>
      <entry>-C</entry>
      <entry>
       Normalement, PHP change le dossier de travail par
       celui d'ex&eacute;cution des scripts. Cela permet d'ouvrir
       des fichiers dans ce dernier dossier, sans avoir
       &agrave; faire le d&eacute;placement. Si vous voulez inactiver
       cette fonctionnalit&eacute;, utilisez cette option.
      </entry>
     </row>
     <row>
      <entry>-c</entry>
      <entry>
       Utilisez cette option pour sp&eacute;cifier un chemin diff&eacute;rent
       pour le fichier <filename>php.ini</filename>. PHP ira
       chercher sa configuration dans ce dossier, au lieu de
       ses dossiers par d&eacute;faut.
      </entry>
     </row>
     <row>
      <entry>-d</entry>
      <entry>
       Avec cette option, vous pouvez modifier ces
       param&eacute;trage particulier du <filename>php.ini</filename>,
       durant l'ex&eacute;cution du script.
      </entry>
     </row>
     <row>
      <entry>-m</entry>
      <entry>
       En utilisant cette option, PHP affiche les modules
       de PHP et de Zend, leurs versions et le copyright
       de Zend.
      </entry>
     </row>
     <row>
      <entry>-i</entry>
      <entry>
       Cette option appelle la fonction <function>phpinfo</function>, 
       et affiche le r&eacute;sultat. Si PHP ne fonctionne pas correctement,m
       il est conseill&eacute; d'utiliser la commande <literal>php -i</literal>
       et de voir si un message d'erreur est disponible, affich&eacute; &agrave; la
       place des tables d'options habituelles.
      </entry>
     </row>
     <row>
      <entry>-h</entry>
      <entry>
       Avec cette option, vous obtenez de l'aide sur les
       options de ligne de commande.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  L'ex&eacute;cutable PHP peut &ecirc;tre utilis&eacute; pour ex&eacute;cuter des scripts
  PHP ind&eacute;pendamment du serveur web. Si vous &ecirc;tes sous Unix,
  il vous faut ajouter une premi&egrave;re ligne &agrave; vos scripts, et
  le rendre ex&eacute;cutable. Sous Windows, vous pouvez associer 
  <literal>php.exe -q</literal> avec un double clic sur les fichiers
  en <literal>.php</literal>, ou bien vous pouvez faire un fichier
  batch pour ex&eacute;cuter ces scripts via PHP. La premi&egrave;re ligne
  ajout&eacute;e au script sous Unix ne posera pas de probl&egrave;me sous Windows,
  et vos scripts resteront parfaitement portable d'un syst&egrave;me
  &agrave; l'autre. Un exemple simple de script en ligne de commande est
  disponible ci-dessous.
 </para>
 <example>
  <title>Script &agrave; ex&eacute;cuter en ligne de commande (script.php)</title>
  <programlisting role="php">
#!/usr/bin/php -q
&lt;?php

if ($argc != 2 || in_array($argv[1], array('--help', '-help', '-h', '-?'))) {
?&gt;

This is a command line PHP script with one option.

  Usage:
  &lt;?php echo $argv[0]; ?&gt; &lt;option&gt;

  &lt;option&gt; can be some word you would like
  to print out. With the --help, -help, -h,
  or -? options, you can get this help.

&lt;?php
} else {
    echo $argv[1];
}
?&gt;
  </programlisting>
 </example>
 <para>
  Dans ce script, nous avons utilis&eacute; la premi&egrave;re ligne pour indiquer
  aue ce fichier doit &ecirc;tre ex&eacute;cut&eacute; par PHP, et ne doit pas afficher
  les ent&ecirc;tes HTTP. Il y a deux variables que vous pouvez utiliser 
  pour &eacute;crire des scripts de ligne de commande : 
  <varname>$argc</varname> et <varname>$argv</varname>. Le premier
  est le nombre d'argument plus un (qui est le nom du fichier
  ex&eacute;cut&eacute;). Le second est un tableau contenant les arguments pass&eacute;
  en ligne de commande, en commencant par le nom du script lui-m&ecirc;me
  comme num&eacute;ro z&eacute;ro (<varname>$argv[0]</varname>).
 </para>
 <para>
  Dans ce programme ci-dessus, nous v&eacute;rifions qu'il y a plus ou 
  moins d'un argument. Si cet argument vaut <literal>--help</literal>,
  <literal>-help</literal>, <literal>-h</literal> ou <literal>-?</literal>,
  alors on affiche le message d'aide, en affichant le nom du programme
  dynamiquement. Si on re&ccedil;oit d'autres arguments, on les
  affiche simplement.
 </para>
 <para>
  Si vous voulez ex&eacute;cuter le script ci-dessus sous Unix, vous
  devez le rendre ex&eacute;cutable, puis l'appeler sous cette forme :
  <literal>script.php echothis</literal> ou
  <literal>script.php -h</literal>. Sous Windows, vous pouvez faire un
  fichier batch comme ceci : 
 </para>
 <example>
  <title>Fichier batch a pour ex&eacute;cuter en ligne de commande un script PHP (script.bat)</title>
  <programlisting>
@c:\php\php.exe -q script.php %1 %2 %3 %4
  </programlisting>
 </example>
 <para>
  En supposant que vous avez nomm&eacute; le programme ci-dessus
  <filename>script.php</filename>, et que votre ex&eacute;cutable PHP est 
  <filename>php.exe</filename> dans le dossier
  <filename>c:\php\php.exe</filename>, ce fichier batch
  ex&eacute;cutera votre script, avec vos options.
  <literal>script.bat echothis</literal> ou
  <literal>script.bat -h</literal>.
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
