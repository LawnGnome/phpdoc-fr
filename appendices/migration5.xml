<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.25 Maintainer: gui Status: ready -->
<!-- Reviewed: no -->
 <appendix id="migration5">
  <title>Migration de &php; 4 vers &php; 5</title>

  <section id="migration5.changes">
   <title>Nouveautés de &php; 5</title>
   <para>
    Les modifications apportées à &php; 5 et au Zend Engine 2  
    augmentent considérablement les capacités et les performances de &php;. 
    Une attention toute particulière a été apportée pour que cette nouvelle version soit 
    la plus compatible possible avec les scripts antérieurs.
    Ainsi la migration de votre code de &php; 4 vers &php; 5 devrait être
    aisée. La plupart des scripts &php; 4 devraient être prêts à
    fonctionner sans nécessiter la moindre modification. Il existe 
    toutefois <link linkend="migration5.incompatible">quelques différences</link> 
    et vous devriez tester vos codes avant de changer de version en production.
   </para>
  </section>

  <section id="migration5.incompatible">
   <title>Incompatibilités avec les version antérieures</title>
   <para>
    Bien que la plupart des scripts &php; 4 existants devraient fonctionner,
    il convient de noter quelques incompatibilités avec les versions 
    antérieures de &php; :
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>strrpos</function> et <function>strripos</function> utilisent 
      maintenant la chaîne de caractères complète (un seul caractère auparavant)
      en tant qu'élément de recherche.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      L'utilisation d'index illégaux sur une chaîne de caractère entraîne
      maintenant un message <constant>E_ERROR</constant> au lieu d'un
      message <constant>E_WARNING</constant> auparavant.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      La fonction <function>array_merge</function> a été modifiée pour n'accepter que des 
      tableaux. Pour chaque variable passée en paramètre autre qu'un tableau, 
      un message <constant>E_WARNING</constant> sera envoyé. Soyez attentifs
      car votre script pourrait émettre des <constant>E_WARNING</constant> de
      façon inopinée.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      La variable de serveur PATH_TRANSLATED n'est plus définie implicitement 
      avec Apache2 SAPI contrairement à auparavant (&php; 4) où elle était fixée
      avec la même valeur que SCRIPT_FILENAME lorsqu'Apache ne 
      la renseignait pas. Cette modification a été apportée afin d'être
      en conformité avec les <ulink
      url="&url.cgispecs;">spécifications CGI</ulink>. Merci de consulter
      le <ulink
      url="&url.php.bugs;23610">bug #23610</ulink> pour plus d'informations.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      La constante <constant>T_ML_CONSTANT</constant> n'est plus
      définie par l'extension <link linkend="ref.tokenizer">Tokenizer</link>. 
      Si error_reporting est réglé à <constant>E_ALL</constant>, &php; va générer
      un avertissement. Bien que <constant>T_ML_CONSTANT</constant> n'ait
      jamais été utilisée, elle était définie dans &php; 4. Avec &php; 4 et
      &php; 5, // et /* */ sont assimilés à la constante <constant>T_COMMENT</constant>.
      Toutefois les commentaires de style &php;Doc <literal>/** */</literal>, 
      qui sont analysés depuis &php; 5, sont reconnus en tant que 
      <constant>T_DOC_COMMENT</constant>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname>$_SERVER</varname> est maintenant renseignée avec 
      <varname>argc</varname> et <varname>argv</varname> si votre 
      <link linkend="ini.variables-order">variables_order</link> inclus "S". Si
      vous avez configuré votre système pour qu'il ne 
      créé pas <varname>$_SERVER</varname>, il ne seront bien sûr pas renseignés.
      Cette modification a été effectuée afin que <varname>argc</varname> et 
      <varname>argv</varname> soient 
      toujours accessibles dans la version CLI quelque soit la valeur de
      <link linkend="ini.variables-order">variables_order</link>. Ainsi, la
      version CLI renseignera dorénavant toujours les variables <varname>$argc</varname> et 
      <varname>$argv</varname>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Un objet sans propriété n'est plus considéré comme vide, <function>empty</function>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Les classes doivent être déclarées avant d'être utilisées. Cela survient uniquement si
      les nouvelles fonctionnalités de &php; 5 sont utilisées. Sinon, le comportement
      sera le même qu'avant.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      La fonction <function>get_class</function> demande à &php; 5 de retourner 
      le nom de la classe utilisée tel que déclarée, ce qui peut résoudre des problèmes
      dans les vieux scripts intervenants dans le comportement précédent (le nom de la classe
      était en minuscule). Une solution possible consiste à rechercher la fonction 
      <function>get_class</function> dans tous vos scripts et d'utiliser la fonction
      <function>strtolower</function>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      La fonction <function>ip2long</function> retourne maintenant &false; lorsqu'une adresse
      IP invalide est entrée comme argument de la fonction, et non plus <literal>-1</literal>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>include_once</function> et <function>require_once</function>
      normalise d'abord le chemin du fichier à inclure sous Windows, donc
      inclure le fichier A.php et le fichier a.php revient à n'inclure qu'une seule fois le fichier.
     </simpara>
    </listitem>
   </itemizedlist>

   <para>
    <example>
     <title><function>strrpos</function> et <function>strripos</function> recherchent
     maintenant une chaîne de caractères dans une autre</title>
     <programlisting role="php">
<![CDATA[
<?php
var_dump(strrpos('ABCDEF','DEF')); //int(3)

var_dump(strrpos('ABCDEF','DAF')); //bool(false)
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Un objet sans propriété n'est plus considéré comme vide, <function>empty</function></title>
     <programlisting role="php">
<![CDATA[
<?php
class test { }
$t = new test();

var_dump(empty($t)); // echo bool(false)

if (!$t) {
    // Cette portion de code sera exécutée
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Suivant les cas, les classes doivent être déclarées avant d'être utilisées</title>
     <programlisting role="php">
<![CDATA[
<?php

// fonctionne sans erreur :
$a = new a();
class a {
}


// ici, une erreur :
$a = new b();

interface c{
}
class b implements c {
} 

?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section id="migration5.cli-cgi">
   <title>CLI et CGI</title>
   <para>
    &php; 5 introduit des modifications dans les noms des fichiers CLI et CGI.
    Avec &php; 5, la version CGI s'appelle maintenant 
    <literal>php-cgi.exe</literal> (auparavant
    <literal>php.exe</literal>) et la version CLI se trouve maintenant dans 
    le répertoire principal de &php; (auparavant <literal>cli/php.exe</literal>).
   </para>
   <para>
    Un nouveau mode a également été introduit avec &php; 5 :
    <literal>php-win.exe</literal>. Cette version est équivalente à la version
    CLI sauf qu'elle n'ouvre pas de fenêtre de console dos au lancement.
    Ce comportement est similaire à celui de php-gtk.
   </para>
   <para>
    Avec &php; 5, la version CLI renseignera toujours les variables
    globales <varname>$argc</varname> et <varname>$argv</varname>.
   </para>
  </section>

  <section id="migration5.configuration">
   <title>Migration des fichiers de configuration</title>
   <para>
    Les modules ISAPI ayant changé de nom (php4xxx vers php5xxx), il
    est nécessaire de faire quelques modifications dans vos fichiers de 
    configuration. Des modifications des noms des version CLI et CGI ont 
    également été faites. Consultez la <link
     linkend="migration5.cli-cgi">section correspondante</link> pour plus d'informations.
   </para>
   <para>
    La migration du fichier de configuration Apache est très facile. 
    Consultez l'exemple ci-dessous afin de connaître les modifications 
    que vous devez faire :
    <example>
     <title>Migration des fichiers de configuration Apache</title>
     <programlisting role="apache-conf">
<![CDATA[
# changez cette ligne :    
LoadModule php4_module /php/sapi/php4apache2.dll

# en :
LoadModule php5_module /php/php5apache2.dll
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Si votre serveur web utilise &php; en mode CGI, il vous faut noter que la version 
    CGI a changé de nom (<filename>php.exe</filename> devient <filename>php-cgi.exe</filename>). 
    Voici la modification à faire pour Apache :
    <example>
    <title>Migration des fichiers de configuration Apache, en mode CGI</title>
     <programlisting role="apache-conf">
<![CDATA[
# changez cette ligne :    
Action application/x-httpd-php "/php/php.exe" 

# en :
Action application/x-httpd-php "/php/php-cgi.exe" 
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Si vous utilisez un serveur web autre que Apache, vous devez également changer 
    le nom de fichier du module ISAPI ou du CGI.
   </para>
  </section>

  <section id="migration5.functions">
   <title>Nouvelles fonctions</title>
   <para>
    &php; 5 introduit de nouvelles fonctions. En voici la liste :
   </para>
   <para>Tableaux :</para>
    <itemizedlist>
    <listitem>
     <simpara>
      <function>array_combine</function> - Créé un tableau en combinant un tableau
      pour les clefs et un autre tableau pour les valeurs correspondantes
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_diff_uassoc</function> - Renvoie la différence entre deux
      tableaux avec la possibilité de vérifier les index par l'appel d'une 
      fonction utilisateur de callback
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_udiff</function> - Renvoie la différence entre deux
      tableaux en utilisant une fonction de callback pour la comparaison des valeurs
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_udiff_assoc</function> - Renvoie la différence entre deux
      tableaux avec la possibilité de vérifier les index. Les valeurs sont elles
      comparées grâce à une fonction utilisateur de callback
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_udiff_uassoc</function> - Renvoie la différence entre deux
      tableaux avec la possibilité de vérifier les index. Les valeurs sont 
      comparées grâce à une fonction utilisateur de callback, les index sont 
      également comparés grâce à une fonction utilisateur de callback
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_walk_recursive</function> - Applique une fonction
      utilisateur de façon récursive à chaque élément d'un tableau
     </simpara>
    </listitem>
   </itemizedlist>

   <para>InterBase :</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>ibase_affected_rows</function> - Renvoie le nombre de lignes
      modifiées par la requête précédente
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_backup</function> - Lance une tâche de sauvegarde dans le
      gestionnaire de services et rend la main immédiatement
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_commit_ret</function> - Permet de valider une transaction
      sans avoir à la fermer
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_db_info</function> - Renvoie des statistiques sur une
      base de données
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_drop_db</function> - Supprime une base de données
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_errcode</function> - Renvoie un code d'erreur
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_free_event_handler</function> - Annule un gestionnaire
      d'événement enregistré
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_gen_id</function> - Incrémente le générateur donné et
      renvoie sa nouvelle valeur
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_maintain_db</function> - Exécute une commande de 
      maintenance sur le serveur de base de données
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_name_result</function> - Assigne un nom à un jeu de 
      résultats
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_num_params</function> - Renvoie le nombre de paramètres
      d'une requête préparée
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_param_info</function> - Renvoie des informations sur un
      paramètre spécifique d'une requête préparée
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_restore</function> - Lance une restauration dans le
      gestionnaire de services et rend la main immédiatement
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_rollback_ret</function> - Annule la 
      transaction et conserve son contexte
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_server_info</function> - Renvoie des statistiques sur une
      base de données
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_service_attach</function> - Initie une connexion au 
      gestionnaire de services
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_service_detach</function> - Arrête une connexion au
      gestionnaire de services
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_set_event_handler</function> - Permet d'enregistrer
      une fonction de callback appelée lorsque des évènements sont postés
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ibase_wait_event</function> - Attend qu'un évènement
      soit posté par la base de données
     </simpara>
    </listitem>
   </itemizedlist>

   <para>iconv :</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>iconv_mime_decode</function> - Décode un champ d'en-tête MIME
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_mime_decode_headers</function> - Décode plusieurs champs
       d'en-tête MIME en une seule fois
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_mime_encode</function> - Créé un champ d'en-tête MIME
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_strlen</function> - Renvoie le nombre de caractères de 
      la chaîne
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_strpos</function> - Trouve la position de la première
      occurrence d'une chaîne donnée dans une autre chaîne
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_strrpos</function> - Trouve la position de la dernière
      occurrence d'une chaîne donnée dans une autre chaîne
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>iconv_substr</function> - Supprime un morceau de chaîne
     </simpara>
    </listitem>
   </itemizedlist>

   <para>Flux :</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>stream_copy_to_stream</function> - Copie les données d'un flux vers
      un autre
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_get_line</function> - Récupère un ligne d'un flux donné 
      jusqu'au délimiteur fourni
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_accept</function> - Accepte une connexion sur un 
      socket créé avec<function>stream_socket_server</function>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_client</function> - Ouvre une connexion socket sur un
      domaine Unix ou Internet
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_get_name</function> - Récupère le nom des sockets
      locaux ou distants
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_recvfrom</function> - Reçoit des données d'un socket, 
      qu'il soit connecté ou non
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_sendto</function> - Envoie un message vers un socket,
      qu'il soit connecté ou non
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>stream_socket_server</function> - Créé un socket de domaine Unix ou
      Internet
     </simpara>
    </listitem>
   </itemizedlist>

   <para>Autres :</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>convert_uudecode</function> - décode une chaîne au format <literal>uuencode</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>convert_uuencode</function> - encode une chaîne au format <literal>uuencode</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>curl_copy_handle</function> - Copie un descripteur Curl avec
      toutes ses préférences
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>dba_key_split</function> - Sépare une clef sous 
      forme de chaîne en représentation sous forme de tableau
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>dbase_get_header_info</function> - Récupère les informations
      d'en-tête d'une base de données dBase
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>dbx_fetch_row</function> - Récupère une ligne à partir d'un
      résultat de requête ayant le marqueur DBX_RESULT_UNBUFFERED
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>fbsql_set_password</function> - Change le mot de passe d' 
      un utilisateur donné
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>file_put_contents</function> - Ecrit une chaîne dans un fichier
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ftp_alloc</function> - Alloue de l'espace pour un fichier
      à uploader
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>get_declared_interfaces</function> - Renvoie un tableau contenant
      toutes les interfaces déclarées
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>get_headers</function> - Renvoie tous les en-têtes envoyés 
      par le serveur en réponse à une requête HTTP
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>headers_list</function> - Renvoie la liste des en-têtes de réponse
      envoyés (ou prêts à être envoyés)
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>http_build_query</function> - Renvoie une requête encodée
      pour les URL
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>idate</function> - Formate une heure/date sous forme d'entier
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>image_type_to_extension</function> - Renvoie l'extension 
      de fichier pour le type d'image "image-type" retournée par <function>getimagesize</function>,
      <function>exif_read_data</function>,
      <function>exif_thumbnail</function>,
      <function>exif_imagetype</function>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>imagefilter</function> - Applique un filtre sur une image en 
      utilisant un angle donné 
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>imap_getacl</function> - Récupère la valeur de l'ACL pour un boite 
      aux lettres donnée
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ldap_sasl_bind</function> - Bind d'un répertoire LDAP en 
      utilisant SASL
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>mb_list_encodings</function> - Retourne un tableau de tous les
      encodages supportés
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pcntl_getpriority</function> - Renvoie la priorité d'un 
      processus
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pcntl_wait</function> - Attend ou renvoie le statut d'un 
      processus enfant comme défini par l'appel système <literal>waitpid()</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pg_version</function> - Renvoie un tableau contenant les 
      versions du client, du protocole et du serveur (si disponible)
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>php_check_syntax</function> - Vérifie la syntaxe d'un 
      fichier donné
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>php_strip_whitespace</function> - Renvoie la source en supprimant les
      commentaires et les espaces
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>proc_nice</function> - Change la priorité du processus courant
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pspell_config_data_dir</function> - Change l'emplacement des fichiers
      de langues
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pspell_config_dict_dir</function> - Change l'emplacement de la liste
      principale de mots
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>setrawcookie</function> - Envoie un cookie sans encodage url de 
      la valeur
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>snmp_read_mib</function> - Lit et analyse un fichier MIB dans 
      l'arbre actif MIB
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>sqlite_fetch_column_types</function> - Renvoie un tableau
      contenant les types des colonnes pour une table spécifiée
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>str_split</function> - Transforme une chaîne en tableau
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>strpbrk</function> - Recherche un des caractères précisés 
      dans une chaîne
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>substr_compare</function> - Comparaison binaire, 
      optionnellement insensible à la casse, de deux chaînes de caractères à
      partir d'une position donnée et pour un nombre de caractères donné.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>time_nanosleep</function> - Attend un nombre de secondes 
      et de nano-secondes
     </simpara>
    </listitem>
   </itemizedlist>
   <note>
    <para>
     L'API de l'extension <link linkend="ref.tidy">Tidy</link> a changé du
     tout au tout.
    </para>
   </note>
  </section>


  <section id="migration5.newconf">
   <title>Nouvelles Directives</title>
   <para>
    De nouvelles directives pour le fichier &php.ini; ont été ajoutées avec &php; 5.
    En voici une liste :
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      mail.force_extra_paramaters - Permet de forcer l'ajout du paramètre spécifié
      en tant que paramètre supplémentaire pour sendmail. Ces paramètres prendront
      la place du cinquième paramètre de la fonction
      <function>mail</function> quoi qu'il arrive, même en safe mode
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="ini.register-long-arrays">register_long_arrays</link> -
      permet/interdit à &php; d'utiliser les tableaux <varname>$HTTP_*_VARS</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="ini.session.hash-function">session.hash_function</link> -
      permet de choisir une fonction de hashage (MD5 ou SHA-1)
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link
      linkend="ini.session.hash-bits-per-character">session.hash_bits_per_character</link>
      - permet de définir le nombre de bits utilisés pour chaque caractère lors de 
      conversions des données binaires en éléments lisibles (de 4 à 6)
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="ini.zend.ze1-compatibility-mode">zend.ze1_compatibility_mode</link> 
      - Active le mode de compatibilité avec le Zend Engine 1 (&php; 4)
     </simpara>
    </listitem>
   </itemizedlist>
  </section>

  <section id="migration5.databases">
   <title>Bases de données</title>
   <para>
    Certaines modifications ont été apportées au support des bases de données
    (MySQL et SQLite).
   </para>
   <para>
    &php; 5 n'intègre pas les bibliothèques clientes MySQL par défaut pour des raisons de 
    licence et autres. Pour plus d'informations, lisez la 
    <link linkend="faq.databases.mysql.php5">FAQ</link>.
   </para>
   <para>
    Il existe également une nouvelle extension, <link linkend="ref.mysqli">MySQLi 
    (Improved MySQL)</link>, créée pour fonctionner avec MySQL 4.1 et
    supérieur.
   </para>
   <para>
    A partir de &php; 5, l'extension <link linkend="ref.sqlite">SQLite</link> est 
    intégrée à &php;. SQLite est un moteur de bases de données embarqué, il ne s'agit pas
    simplement d'une bibliothèque cliente permettant de se connecter à un serveur de bases 
    de données (comme MySQL ou PostgreSQL). La bibliothèque SQLite lit et écrit ses 
    bases de données directement dans des fichiers sur le disque.
   </para>
  </section>

  <section id="migration5.oop">
   <title>Nouveau Modèle Objet</title>
   <para>
    &php; 5 inclut un nouveau modèle Objet. Le traitement des objets en &php; a complètement
    été réécrit, vous autorisant ainsi de meilleurs performances et plus de fonctionnalités.
    Dans les versions précédentes de &php;, les objets sont traités comme des types primitifs
    (pour les instances d'entier ou de chaîne de caractères). L'inconvénient de cette méthode
    est que sémantiquement, l'objet en entier était copié lorsqu'une variable était assignée, ou passée
    comme paramètre à une méthode. Dans la nouvelle approche, les objets sont référencés par un pointeur
    et non pas leur valeur (on peut penser à un pointeur en tant qu'identifiant d'un objet).
   </para>
   <para>
    Beaucoup de développeurs &php; ne se rendent pas compte des caprices lors 
    de la copie du vieux modèles objet et, en conséquent, la majorité des 
    applications &php; devrait fonctionner directement ou avec
    très peu de modifications.
   </para>
   <para>
    Voir aussi la directive <link linkend="ini.zend.ze1-compatibility-mode">
    zend.ze1_compatibility_mode</link> pour un compatibilité avec &php; 4. 
   </para>
        
   <section id="migration.oop.members">
    <title>Membres privés et protégés</title>
    <para>
     &php; 5 introduit les membres variables privés et protégés ; ils vous permettent de définir
     la visibilité des propriétés de vos classes.
    </para>
    <example>
     <title>Accès aux membres privés et protégés</title>
     <simpara>
      Il est possible d'accéder aux variables membres protégées dans les classes étendues d'une 
      classe les ayant déclarées, tandis qu'il est uniquement possible d'accéder aux variables
      membres privées dans la classe à laquelle elles appartiennent.
     </simpara>
     <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    private $Hello = "Bonjour le monde !\n";
    protected $Bar = "Bonjour, Foo!\n";
    protected $Foo = "Bonjour, Bar!\n";

    function printHello() {
        print "MyClass::printHello() " . $this->Hello;
        print "MyClass::printHello() " . $this->Bar;
        print "MyClass::printHello() " . $this->Foo;
    }
}

class MyClass2 extends MyClass {
    protected $Foo;
              
    function printHello() {
        MyClass::printHello();                          /* Devrait l'afficher */
        print "MyClass2::printHello() " . $this->Hello; /* N'affichera rien  */
        print "MyClass2::printHello() " . $this->Bar;   /* Ne l'affichera pas (non déclaré)*/
        print "MyClass2::printHello() " . $this->Foo;   /* Devrait l'afficher */
    }
}

$obj = new MyClass();
print $obj->Hello;  /* N'affichera rien */
print $obj->Bar;    /* N'affichera rien */
print $obj->Foo;    /* N'affichera rien */
$obj->printHello(); /* Devrait l'afficher */

$obj = new MyClass2();
print $obj->Hello;  /* N'affichera rien */
print $obj->Bar;    /* N'affichera rien */
print $obj->Foo;    /* N'affichera rien */
$obj->printHello();
?>
]]>
     </programlisting>
    </example>
   </section>
   
   <section id="migration.oop.methods">
    <title>Les méthodes privées et protégées</title>
    <para>
     Avec &php; 5, les méthodes privées et protégées ont été également introduites.
    </para>
    <example>
     <title>Exemple de méthodes protégées</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    private function aPrivateMethod() {
        echo "Appel de Foo::aPrivateMethod().\n";
    }

    protected function aProtectedMethod() {
        echo "Appel de Foo::aProtectedMethod().\n";
        $this->aPrivateMethod();
    }
}

class Bar extends Foo {
    public function aPublicMethod() {
        echo "Appel de Bar::aPublicMethod().\n";
        $this->aProtectedMethod();
    }
}

$o = new Bar;
$o->aPublicMethod();
?>
]]>
     </programlisting>
    </example>
    <simpara>
     L'ancien code qui ne contient pas de classes utilisateurs définies ou de noms de fonctions
     &quot;public&quot;, <literal>protected</literal> ou <literal>private</literal> devrait fonctionner
     sans modification.
    </simpara>
   </section>

   <section id="migration.oop.abstract">
    <title>Classes et méthodes abstraites</title>
    <para>
     &php; 5 introduit également les classes et méthodes abstraites. 
     Une méthode abstraite déclare uniquement la signature de la méthode et ne fournie
     pas une implémentation. Une classe contenant des méthodes abstraites doit être
     déclarée abstraite.
    </para>
    <example>
     <title>Exemple avec une classe abstraite</title>
     <programlisting role="php">
<![CDATA[
<?php
abstract class AbstractClass {
    abstract public function test();
}

class ImplementedClass extends AbstractClass {
    public function test() {
        echo "Appel de ImplementedClass::test().\n";
    }
}

$o = new ImplementedClass;
$o->test();
?> 
]]>
     </programlisting>
    </example>
    <simpara>
     Une classe abstraite ne peut pas être instanciée. L'ancien code qui ne contient
     pas de classes utilisateurs définies ou de fonctions nommées <literal>abstract</literal>
     devrait fonctionner sans modification.
    </simpara>
   </section> 
   
   <section id="migration.oop.interfaces">
    <title>Interfaces</title>
    <para>
     &php; 5 introduit les interfaces. Une classe peut implémenter une liste arbitraire d'interfaces.
    </para>
    <example>
     <title>Exemple avec Interface</title>
     <programlisting role="php">
<![CDATA[
<?php
interface Throwable {
    public function getMessage();
}

class MyException implements Throwable {
    public function getMessage() {
        // ...
    }
}
?> 
]]>
      </programlisting>
    </example>
    <simpara>
     L'ancien code qui ne contient pas de classes utilisateurs définies ou 
     de fonctions nommées  <literal>interface</literal> ou <literal>implements</literal>
     devrait fonctionner sans modification.
    </simpara>
   </section>

   <section id="migration.oop.typehints">
    <title>Indicateurs de type de classe</title>
    <para>
     Même s'il reste très peu typé, &php; 5 introduit la possibilité d'utiliser
     des indicateurs de type de classe pour déclarer le type d'instance d'objet
     attendu en tant que paramètre pour une méthode.
    </para>
    <example>
     <title>Exemple avec des indicateurs de type de classe</title>
     <programlisting role="php">
<![CDATA[
<?php
interface Foo {
    function a(Foo $foo);
}

interface Bar {
    function b(Bar $bar);
}

class FooBar implements Foo, Bar {
    function a(Foo $foo) {
        // ...
    }

    function b(Bar $bar) {
        // ...
    }
}

$a = new FooBar;
$b = new FooBar;

$a->a($b);
$a->b($b);
?>
]]>
      </programlisting>
    </example>
    <simpara>
     Ces indicateurs de type de classe ne sont pas vérifiés avant la compilation, ce qui est le cas
     avec les langages typés, mais durant le traitement. Cela signifie que :
    </simpara>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(ClassName $object) {
    // ...
}
?>
]]>
      </programlisting>
    </informalexample>
    <simpara>
     est équivalent à :
    </simpara>
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo($object) {
    if (!($object instanceof ClassName)) {
        die("Le premier argument doit être une instance de ClassName");
    }
}
?>
]]>
      </programlisting>
    </informalexample>
   </section>

   <section id="migration5.oop.final">
    <title>final</title>
    <para>
     &php; 5 introduit le mot-clé "<literal>final</literal>" pour déclarer les membres
     et méthodes finaux. Les méthodes et les membres déclarés finaux peuvent
     être dépassés par les sous-classes.
    </para>
    <example>
     <title>Méthode finale</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    final function bar() {
        // ...
    }
}
?>
]]>
     </programlisting>
    </example>
    <para>
     En outre, il est possible de faire une classe finale. Faire cela empêche une classe d'être
     spécialisée (elle ne peut être hérité par une autre classe).
     Il n'est pas nécessaire de déclarer les méthodes des classes finales elles-mêmes 
     en tant que finales.
    </para>
    <example>
     <title>Classe final</title>
     <programlisting role="php">
<![CDATA[
<?php
final class Foo {
    // Définition de la classe
}

// la ligne suivante est impossible
// class Bork extends Foo {}
?>
]]>
     </programlisting>
    </example>
    <para>
     Les propriétés ne peuvent pas être finales.
    </para>
    <para>
     L'ancien code qui ne contient pas de classes utilisateurs définies ou de fonctions 
     nommées <literal>final</literal> devrait fonctionner sans modification.
    </para>
   </section>

   <section id="migration5.oop.cloning">
    <title>Duplication d'objets</title>
    <para>
     &php; 4 n'offre aucune possibilité à l'utilisateur de choisir le constructeur de copie
     à utiliser lorsqu'un objet est dupliqué. Pendant la duplication, &php; 4 effectue
     une copie octet par octet, fabriquant ainsi une réplique exacte de toutes les
     propriétés de l'objet.
    </para>
    <para>
     Le fait de créer une copie de l'objet possédant exactement les mêmes propriétés
     n'est pas toujours le comportement que l'on souhaite. Un bon exemple pour illustrer le besoin
     d'un constructeur de copie : Si vous avez un objet qui représente une fenêtre GTK
     et que l'objet contient la ressource représentant cette fenêtre GTK, lorsque vous créez une copie,
     vous voudriez créer une nouvelle fenêtre avec les mêmes propriétés et le nouvel objet
     doit contenir la ressource représentant la nouvelle fenêtre. Un autre exemple :
     Si votre objet contient une référence à un autre objet qui est utilisé, lorsque
     vous copiez l'objet parent, vous voulez créer une nouvelle instance de cette autre objet
     pour que cette copie possède sa propre copie.
    </para>
    <para>
     Une copie d'objet est créée en utilisant le mot-clé '<literal>clone</literal>' (qui fait appel
     à la méthode <function>__clone</function> de l'objet si possible).
     Une méthode <function>__clone</function> d'un objet ne peut pas
     être appelée directement.
    </para>
    <para>
     Lorsque le développeur demande à créer une nouvelle copie d'un objet, &php; 5
     vérifiera si une méthode <function>__clone</function> a été définie ou non.
     Si elle n'a pas été définie, il appellera une méthode <function>__clone</function>
     par défaut qui copiera toutes les propriétés de l'objet.
     Si une méthode <function>__clone</function> est définie, alors le développeur est
     responsable dans la définition des propriétés nécessaires dans la création de l'objet.
     Par convenance, le moteur appellera une fonction qui importera toutes les propriétés
     depuis l'objet source,  donc, il pourra commencer avec une réplication octet par octet
     de l'objet source et effacera uniquement les propriétés qui doivent être modifiées.
    </para>
    <example>
     <title>Exemple de duplication d'objets</title>
     <programlisting role="php">
<![CDATA[
<?php
class MyCloneable {
    static $id = 0;

    function MyCloneable() {
        $this->id = self::$id++;
    }

    function __clone() {
        $this->address = "New York";
        $this->id = self::$id++;
    }
}

$obj = new MyCloneable();

$obj->name = "Bonjour";
$obj->address = "Tel-Aviv";

print $obj->id . "\n";

$obj_cloned = clone $obj;

print $obj_cloned->id . "\n";
print $obj_cloned->name . "\n";
print $obj_cloned->address . "\n";
?>
]]>
     </programlisting>
    </example>
   </section>

   <section id="migration5.oop.constructors">
    <title>Constructeurs</title>
    <para>
     &php; 5 permet aux développeurs de déclarer des méthodes constructeurs pour
     les classes. Les classes qui possèdent une méthode constructeur appellent
     cette méthode à chaque nouvelle création d'un objet, ce qui est intéressant 
     pour toutes les initialisations dont l'objet a besoin avant d'être utilisé.
    </para>
    <para>
     Avec &php; 4, les méthodes constructeurs étaient des méthodes de la classes qui portaient
     le même nom que la classe elle-même. Sachant qu'il est vraiment courant d'appeler
     les constructeurs parents depuis des classes dérivées, la manière utilisée par &php; 4 était
     un peu encombrante pour déplacer une classe dans une grande hiérarchie de classes.
     Si une classe est déplacée pour résider sous un parent différent, le nom du constructeur de ce
     parent changera aussi et le code dérivé de cette classe qui appelle le constructeur parent
     doit également être modifié.
    </para>
    <para>
     &php; 5 introduit une manière standard dans la déclaration des méthodes constructeurs
     en les appelant par le nom <function>__construct</function>.
    </para>
    <example>
     <title>Exemple d'utilisation des nouveaux constructeurs unifiés</title>
     <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
    function __construct() {
        print "Dans le constructeur BaseClass\n";
    }
}

class SubClass extends BaseClass {
    function __construct() {
        parent::__construct();
        print "Dans le constructeur SubClass\n";
    }
}

$obj = new BaseClass();
$obj = new SubClass();
?> 
]]>
     </programlisting>
    </example>
    <para>
     Pour des raisons de compatibilités ascendantes, si &php; 5 ne peut pas trouver
     une fonction <function>__construct</function> pour une classe donnée, il cherchera
     une fonction constructeur dans l'ancien style, par le nom de la classe.
     Effectivement, cela signifie que le seul cas où il pourrait y avoir des soucis 
     de compatibilité est si la classe contient une méthode nommée 
     <function>__construct</function>, nom utilisé pour une sémantique différente.
    </para>
   </section>

   <section id="migration5.oop.destructors">
    <title>Destructeurs</title>
    <para>
     Avoir la possibilité de définir un destructeur pour les objets peut être vraiment très utile.
     Les destructeurs peuvent enregistrer des messages de débogage, fermer des connexions à 
     des bases de données et faire d'autres travaux de nettoyage. Aucun mécanisme 
     de destructeur d'objets n'existe en &php; 4 bien que &php; possède déjà le support
     pour enregistrer les fonctions appelées lors d'une requête de fermeture.
    </para>
    <para>
     &php; 5 introduit un concept de destructeur similaire aux autres langages orientés objets 
     comme Java : Lorsque la dernière référence à un objet est détruite, le destructeur de l'objet,
     qui est une méthode nommée <function>__destruct</function> de la classe, qui ne reçoit
     aucun paramètre, est appelé avant que l'objet ne soit libéré de la mémoire.
    </para>
    <example>
     <title>Destructeur</title>
     <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
    function __construct() {
        echo "Dans le constructeur\n";
        $this->name = "MyDestructableClass";
    }

    function __destruct() {
        echo "Desctruction de " . $this->name . "\n";
    }
}

$obj = new MyDestructableClass();
?> 
]]>
     </programlisting>
    </example>
    <para>
     Tout comme les constructeurs, les destructeurs parents ne peuvent pas être
     appelés implicitement par le moteur. Pour exécuter le destructeur parent, une des possibilités
     est d'appeler explicitement la fonction <function>parent::__destruct</function>
     dans le corps du destructeur.
    </para>
   </section>

   <section id="migration5.oop.constants">
    <title>Constantes</title>
    <para>
     &php; 5 introduit les constantes par-classes :
    </para>
    <example>
     <title>Exemple d'une classe constante</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    const constant = "constante";
}

echo "Foo::constant = " . Foo::constant . "\n";
?> 
]]>
     </programlisting>
    </example>
    <simpara>
     L'ancien code qui ne contient pas de classes utilisateurs définies ou de fonctions 
     nommées 'const' devrait fonctionner sans modification.
    </simpara>
   </section>
   
   <section id="migration5.oop.exceptions">
    <title>Les exceptions</title>
    <para>
     &php; 4 n'a pas de traitement d'exceptions. &php; 5 introduit
     un mécanisme d'exceptions similaire à celui des autres langages de programmation.
     Notez qu'il y a un support pour la clause "<literal>catch all</literal>" 
     mais pas pour la clause "<literal>finally</literal>".
    </para>
    <para>
     Les exceptions peuvent être rejetées dans des bocks de capture. Il est également possible
     d'avoir plusieurs blocs de capture. Dans ce cas, la capture de l'exception est comparée
     avec le type de la classe pour chaque blocs de capture depuis le haut vers le bas et le premier
     bloc qui a un <literal>instanceof</literal> qui correspond sera exécuté. Lorsque le bloc de capture se termine,
     l'exécution continue jusqu'à la fin du dernier bloc de capture. Si aucun bloc de capture n'a de 
     <literal>instanceof</literal> qui correspond, alors le prochain bloc de capture est recherché jusqu'à ce qu'il n'y en ait plus de
     disponible. Dans ce cas, l'exception est une exception non-capturante et le programme
     se termine en affichant l'exception concernée.
    </para>
    <example>
     <title>Exemple de création d'exception</title>
     <programlisting role="php">
<![CDATA[
<?php
try {
   throw new Exception('Bonjour');
}
catch (Exception $exception) {
   echo $exception;
}
?>
]]>
     </programlisting>
    </example>
    <simpara>
     L'ancien code qui ne contient pas de classes utilisateurs définies ou de fonctions 
     appelées <literal>catch</literal>, <literal>throw</literal> et <literal>try</literal>
     devrait fonctionner sans modification.
    </simpara>
   </section>
    
   <section id="migration5.oop.dereferencing">
    <title>Déréférencer les objets retournés par une fonction</title>
    <para>
     En &php; 4, il n'est pas possible de déréférencer les objets retournés par des fonctions
     et de fabriquer des méthodes appelées sur ces objets. Avec &php; 5, l'exemple suivant est possible :
    </para> 
    <example>
     <title>Exemple de déréférencement</title>
     <programlisting role="php">
<![CDATA[
<?php
class Circle {
    function draw() {
        echo "Cercle\n";
    }
}
      
class Square {
    function draw() {
        echo "Carré\n";
    }
}

function ShapeFactoryMethod($shape) {
    switch ($shape) {
        case "Cercle":
            return new Circle();
        case "Carré":
            return new Square();
    }
}

ShapeFactoryMethod("Cercle")->draw();
ShapeFactoryMethod("Carré")->draw();
?> 
]]>
     </programlisting>
    </example>
   </section>

   <section id="migration5.oop.staticinit">
    <title>Initialisation des variables de membres statiques</title>
    <para>
     Les variables de membres de classes statiques peuvent maintenant être initialisées.
    </para>
    <example>
     <title>Exemple d'initialisation de variables statiques</title>
     <programlisting role="php">
<![CDATA[
<?php
class foo {
    static $my_static = 5;
    public $my_prop = 'bla';
}

echo foo::$my_static;
$obj = new foo;
echo $obj->my_prop;
?>
]]>
     </programlisting>
    </example>
   </section>

   <section id="migration5.oop.staticmethods">
    <title>Méthodes statiques</title>
    <para>
     &php; 5 introduit le mot-clé <literal>static</literal> pour déclarer une méthode statique, pouvant être appelée depuis
     un contexte non objet.
    </para>
    <example>
     <title>Exemple d'une méthode statique</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
?>
]]>
     </programlisting>
    </example>
    <para>
     La pseudo variable <varname>$this</varname> n'est pas disponible à l'intérieur 
     d'une méthode statique.
    </para>
   </section>

   <section id="migration5.oop.instanceof">
    <title><literal>instanceof</literal></title>
    <para>
     &php; 5 introduit le mot-clé <literal>instanceof</literal> qui vous permet de vous assurer
     si oui ou non un objet est une instance d'une classe, une extension d'une classe ou une
     implémentation d'une interface.
    </para>
    <example>
     <title>Exemple avec <literal>instanceof</literal></title>
     <programlisting role="php">
<![CDATA[
<?php
class baseClass { }

$a = new baseClass;

if ($a instanceof baseClass) {
    echo "Bonjour le monde";
}
?>
]]>
     </programlisting>
    </example>
   </section>
   
   <section id="migration5.oop.staticvars">
    <title>Les fonctions variables statiques</title>
    <para>
     Les fonctions variables statiques ne sont pas traitées lors de la compilation, ce qui permet
     aux développeurs d'assigner des variables statiques par référence. Ce changement 
     améliore également considérablement les performances mais implique 
     que les références indirectes à des variables statiques ne fonctionneront 
     plus du tout.
    </para>
   </section>

   <section id="migration5.oop.refparams">
    <title>Paramètres passés par référence</title>
    <para>
     Les paramètres passés par référence à une fonction peuvent désormais 
     avoir des valeurs par défaut.
    </para>
    <example>
     <title />
     <programlisting role="php">
<![CDATA[
<?php
function my_function(&$var = null) {
    if ($var === null) {
        die("$var doit avoir une valeur");
    }
}
?>
]]>
     </programlisting>
    </example>
   </section>

   <section id="migration5.oop.autoload">
    <title><function>__autoload</function></title>
    <para>
     La fonction d'interception <function>__autoload</function> sera automatiquement appelée
     lorsqu'une classe non déclarée est sur le point d'être instanciée.
     Le nom de cette classe sera passé à la fonction d'interception <function>__autoload</function>
     en tant qu'unique argument.
    </para>
    <example>
     <title>Exemple avec <function>__autoload</function></title>
     <programlisting role="php">
<![CDATA[
<?php
function __autoload($className) {
    include_once $className . ".php";
}

$object = new ClassName;
?>
]]>
     </programlisting>
    </example>
   </section>
    
    <section id="migration5.oop.overload">
     <title>L'appel de méthodes de surcharge et l'accès à ses propriétés</title>
     <para>
      Les appels à des méthodes ainsi que l'accès à ses propriétés peuvent être surchargés
      via les méthodes <function>__call</function>, <function>__get</function> et
      <function>__set</function>. Ces méthodes ne peuvent être surchargées que si votre
      objet ne contient pas la propriété ou la méthode que vous tentez d'accéder.
     </para>
     <example>
      <title>
       <function>__get</function> et
       <function>__set</function>
      </title>
      <programlisting role="php">
<![CDATA[
<?php
class Setter {
    public $n;
    public $x = array("a" => 1, "b" => 2, "c" => 3);

    function __get($nm) {
        echo "Récupération de [$nm]\n";

        if (isset($this->x[$nm])) {
            $r = $this->x[$nm];
            echo "Retour : $r\n";
            return $r;
        } else {
            echo "Rien !\n";
        }
    }

    function __set($nm, $val) {
        echo "Définition de [$nm] à $val\n";

        if (isset($this->x[$nm])) {
            $this->x[$nm] = $val;
            echo "OK !\n";
        } else {
            echo "Pas OK !\n";
        }
    }
}

$foo = new Setter();
$foo->n = 1;
$foo->a = 100;
$foo->a++;
$foo->z++;
var_dump($foo);
?>
]]>
     </programlisting>
     <screen role="php">
<![CDATA[
Définition de [a] à 100
OK!
Récupération de [a]
Retour : 100
Définition de [a] à 101
OK!
Récupération de [z]
Rien !
Définition de [z] à 1
Pas OK!
object(Setter)#1 (2) {
  ["n"]=>
  int(1)
  ["x"]=>
  array(3) {
    ["a"]=>
    int(101)
    ["b"]=>
    int(2)
    ["c"]=>
    int(3)
  }
}
]]>
     </screen>
    </example>
    <example>
     <title>Exemple avec <function>__call</function></title>
     <programlisting role="php">
<![CDATA[
<?php
class Caller {
    private $x = array(1, 2, 3);

    function __call($m, $a) {
        print "Méthode $m appelé : \n";
        var_dump($a);
        return $this->x;
    }
}

$foo = new Caller();
$a = $foo->test(1, "2", 3.4, true);
var_dump($a);
?>
]]>
     </programlisting>
    </example>
   </section>   

   <section id="migration5.oop.iteration">
    <title>Itération</title>
    <para>
     Les objets peuvent être itérés dans un contexte de surcharge
     lorsqu'utilisés avec <literal>foreach</literal>.
     Le comportement par défaut est d'itérer toutes les propriétés.
    </para>
    <example>
     <title>Exemple d'itération d'un objet</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public $x = 1;
    public $y = 2;
}

$obj = new Foo;

foreach ($obj as $prp_name => $prop_value) {
    // en utilisant la propriété
}
?> 
]]>
     </programlisting>
    </example>
    <para>
     Chaque classe qui possède des instances peut être itérée avec <literal>foreach</literal>
     doit implémenter une interface vide <literal>Traversable</literal>. Par conséquent,
     chaque objet qui implémente une interface <literal>Traversable</literal> peut être utilisé
     avec <literal>foreach</literal>.
    </para>
    <para>
     Les interfaces <literal>IteratorAggregate</literal> et <literal>Iterator</literal>
     vous permettent de spécifier le nombre d'objets de classes qui sont itérés dans le code &php;.
     Le premier d'entre eux a simplement une méthode <function>getiterator</function> qui doit retourner
     un tableau ou un objet qui, soit implémente une interface <literal>Iterator</literal>, soit 
     est instancié depuis l'intérieure d'une classe qui peut être itérée.
    </para>
    <example>
     <title>Exemple de création d'itération</title>
     <programlisting role="php">
<![CDATA[
<?php
class ObjectIterator implements Iterator {

    private $obj;
    private $num;

    function __construct($obj) {
        $this->obj = $obj;
    }
    function rewind() {
        $this->num = 0;
    }
    function valid() {
        return $this->num < $this->obj->max;
    }
    function key() {
        return $this->num;
    }
    function current() {
        switch($this->num) {
            case 0: return "1st";
            case 1: return "2nd";
            case 2: return "3rd";
            default: return $this->num."th";
        }
    }
    function next() {
        $this->num++;
    }
}

class Object implements IteratorAggregate {

    public $max = 3;

    function getIterator() {
        return new ObjectIterator($this);
    }
}

$obj = new Object;

// this foreach ...
foreach($obj as $key => $val) {
    echo "$key = $val\n";
}

// matches the following 7 lines with the for directive.
$it = $obj->getIterator();
for($it->rewind(); $it->valid(); $it->next()) {
    $key = $it->current();
       $val = $it->key();
          echo "$key = $val\n";
}
unset($it);
?>
]]>
     </programlisting>
    </example>
   </section>
    
   <section id="migrating5.oop.methodconst">
    <title>Constante <literal>__METHOD__</literal></title>
    <para>
     La nouvelle pseudo constante <literal>__METHOD__</literal> montre la classe et la 
     méthode courante lorsqu'elle est utilisée dans une méthode et une fonction lorsqu'elle est utilisée en dehors 
     d'une classe.
    </para>
    <example>
     <title>Exemple d'utilisation de la constante <literal>__METHOD__</literal></title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    function show() {
        echo __METHOD__;
    }
}

class Bar extends Foo {
}

Foo::show(); // affiche Foo::show
Bar::show(); // affiche Foo::show either since __METHOD__ is
             // code évalué au moment de la compilation

function test() {
    echo __METHOD__;
}

test();      // affiche test
?>
]]>
     </programlisting>
    </example>
   </section>
  
   <section id="migrating5.oop.tostring">
    <title>Méthode <function>__tostring</function></title>
    <para>
     La nouvelle méthode magique <function>__tostring</function> vous permet de surcharger
     un objet en une conversion de chaîne de caractères.
    </para>
    <example>
     <title>Exemple avec <function>__tostring</function></title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    function __toString() {
        return "What ever";
    }
}

$obj = new Foo;

echo $obj; // call __toString()
?> 
]]>
     </programlisting>
    </example>
   </section>

   <section id="migrating5.oop.reflection">
    <title>Reflexion</title>
    <para>
     &php; 5 arrive une API complète de réflexion qui ajoute la possibilité
     de faire du "<literal>reverse-engineer</literal>" sur les classes, les interfaces,
     les fonctions et les méthodes tout comme les extensions.
    </para>
    <para>
     L'API de réflexion permet également d'obtenir les commentaires de la documentation
     pour les fonctions, les classes et les méthodes.
    </para>
    <para>
     Presque tous les aspects du code orienté objet peuvent être reflétés en utilisant l'API de réflexion
     qui se trouve dans une 
     <ulink url="http://sitten-polizei.de/php/reflection_api/docs/language.reflection.html">
     documentation séparée</ulink>.
    </para>
    <example>
     <title>Exemple d'utilisation de l'API de réflexion</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public $prop;
    function Func($name) {
        echo "Bonjour $name";
    }
}

reflectionClass::export('Foo');
reflectionObject::export(new Foo);
reflectionMethod::export('Foo', 'func');
reflectionProperty::export('Foo', 'prop');
reflectionExtension::export('standard');
?> 
]]>
     </programlisting>
    </example>
   </section>

  </section>

  <section id="migrating5.errorrep">
   <title>Rapport d'erreurs</title>
   <para>
    En &php; 5, une nouvelle constante de rapport d'erreurs <constant>E_STRICT</constant> 
    a été introduite avec comme valeur 2048. Cela permet des suggestions de &php; lors 
    du traitement sur l'interopérabilité et le suivi de votre code ce qui vous permet de 
    garder une méthode de codage toujours meilleure. E.g les messages stricts
    vous avertiront sur l'utilisation des fonctions obsolètes.
   </para>
   <note>
    <simpara>
     <constant>E_ALL</constant> n'inclut pas <constant>E_STRICT</constant>; 
     il n'est pas activé par défaut.
    </simpara>
   </note>
  </section>

 </appendix>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
