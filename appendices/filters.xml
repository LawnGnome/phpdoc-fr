<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.23 $ -->
<!-- EN-Revision: 1.16 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<appendix xml:id="filters" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Liste des filtres standards</title>
 <para>
  Cette section contient la liste des filtres de flux, à utiliser
  avec <function>stream_filter_append</function>.
  Votre version de PHP peut avoir des filtres supplémentaires,
  ou manquants par rapport à cette liste.
 </para>

 <para>
  Il est bon de noter une légère différence entre
  <function>stream_filter_append</function>
  et <function>stream_filter_prepend</function>.
  Tous les flux PHP disposent d'un petit <emphasis>buffer de lecture</emphasis>,
  où ils stockent des blocs de données lues dans le système
  de fichiers, ou dans d'autres sources, afin de les
  traiter plus efficacement. Aussitôt que les données sont
  lues depuis la ressource dans le buffer interne, les données
  sont immédiatement passées au filtre, même si l'application
  PHP n'est pas prête pour lire ces données.
  Si des données sont déjà en attente dans le buffer lorsqu'un
  filtre est ajouté au flux (<emphasis>appended</emphasis>), ces données
  seront immédiatement passées au filtre, pour que la modification soit
  transparente. Mais si vous ajoutez un filtre avec
  <emphasis>prepended</emphasis>, les données
  <emphasis>NE seront PAS</emphasis> filtrées. Elles
  attendront que le prochain bloc arrive de la ressource.
 </para>

 <para>
  Pour avoir la liste complète des filtres de votre version de
  PHP, utilisez la fonction <function>stream_get_filters</function>.
 </para>

 <section xml:id="filters.string">
  <title>Filtres de chaînes de caractères</title>

  <simpara>
   Chaque filtre fait ce que son nom implique, et se réfère au
   comportement de la fonction PHP correspondante. Pour plus de
   détails sur un filtre, reportez-vous au manuel de la fonction
   de référence.
  </simpara>

  <simpara>
   <literal>string.rot13</literal>
   (depuis PHP 4.3.0)
   Utilisez ce filtre pour faire traiter les données par la fonction
   <function>str_rot13</function>.
  </simpara>
  <example>
   <title>Exemple avec le filtre string.rot13</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.rot13');
fwrite($fp, "Ceci est un test.\n");
/* affiche :  Prpv rfg ha grfg.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.toupper</literal>
   (depuis PHP 5.0.0)
   Utilisez ce filtre pour faire traiter les données
   par la fonction <function>strtoupper</function>.
  </simpara>
  <example>
   <title>Exemple avec le filtre string.toupper</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.toupper');
fwrite($fp, "Ceci est un test.\n");
/* affiche :  CECI EST UN TEST.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.tolower</literal>
   (depuis PHP 5.0.0)
   Utilisez ce filtre pour faire traiter les données
   par la fonction <function>strtolower</function>.
  </simpara>
  <example>
   <title>Exemple avec le filtre string.tolower</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.tolower');
fwrite($fp, "Ceci est un test.\n");
/* affiche :  ceci est un test.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.strip_tags</literal>
   (depuis PHP 5.0.0)
   Utilisez ce filtre pour faire traiter les données
   par la fonction <function>strip_tags</function>.
   Le filtre accepte les paramètres sous deux formats :
   soit une chaîne contenant une liste de balises, de manière similaire au
   second paramètre de la fonction <function>strip_tags</function>;
   soit un tableau de noms de balises.
  </simpara>
  <example>
   <title>Exemple avec le filtre string.strip_tags</title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, "<strong><em><span>");
fwrite($fp, "<strong>Ce texte en gras</strong> finit par être aggrandi <h1>en un titre 1</h1>\n");
fclose($fp);
/* affiche :  <strong>Ce texte en gras</strong> finit par être aggrandi en un titre 1   */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('strong','em','span'));
fwrite($fp, "<strong>Ce texte en gras</strong> finit par être aggrandi <h1>en un titre 1</h1>\n");
fclose($fp);
/* affiche :  <strong>Ce texte en gras</strong> finit par être aggrandi en un titre 1   */
?>
]]>
   </programlisting>
  </example>

 </section>

 <section xml:id="filters.convert">
  <title>Filtres de conversion</title>

  <simpara>
   Comme pour les filtres de chaînes, les filtres de conversion
   font ce que leur nom indique. Ces filtres ont été ajoutés en
   PHP 5.0.0. Pour plus d'informations, voyez
   le manuel de la fonction correspondante.
  </simpara>

  <simpara>
   <literal>convert.base64-encode</literal> et
   <literal>convert.base64-decode</literal>
   Utilisez ce filtre pour faire traiter les données
   par les fonctions <function>base64_encode</function> et <function>base64_decode</function>.
   <literal>convert.base64-encode</literal> supporte les paramètres
   sous forme de tableau. Si <parameter>line-length</parameter> est donné,
   le résultat sera coupé en lignes de <parameter>line-length</parameter>
   caractères. Si <parameter>line-break-chars</parameter> est founi, chaque
   bloc de caractères sera terminé par ce paramètre. Ces paramètres donnent
   le même effet que la fonction <function>base64_encode</function> utilisée
   conjointement avec <function>chunk_split</function>.
  </simpara>
  <example>
   <title>Exemple avec les filtres
    convert.base64-encode et
    convert.base64-decode
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode');
fwrite($fp, "This is a test.\n");
fclose($fp);
/* affiche :  VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($fp, "This is a test.\n");
fclose($fp);
/* affiche :  VGhpcyBp
           :  cyBhIHRl
           :  c3QuCg==  */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-decode');
fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($fp);
/* affiche :  This is a test.  */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>convert.quoted-printable-encode</literal> et
   <literal>convert.quoted-printable-decode</literal>
   Utilisez ce filtre pour faire traiter les données
   par la fonction <function>quoted_printable_decode</function>.
   Il n'y a pas d'équivalent fonctionnel à <literal>convert.quoted-printable-encode</literal>.
   <literal>convert.quoted-printable-encode</literal> reçoit les paramètres
   sous forme de tableau. En plus des paramètres classiques de
   <literal>convert.base64-encode</literal>, <literal>convert.quoted-printable-encode</literal>
   accepte aussi les arguments booléens <parameter>binary</parameter> et
   <parameter>force-encode-first</parameter>.
   <literal>convert.base64-decode</literal> ne supporte le paramètre
   <parameter>line-break-chars</parameter> que comme indication pour
   supprimer les nouvelles lignes.
  </simpara>
  <example>
   <title>
    Exemple avec les filtres
    convert.quoted-printable-encode et
    convert.quoted-printable-decode
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.quoted-printable-encode');
fwrite($fp, "This is a test.\n");
/* affiche :  =This is a test.=0A  */
?>
]]>
   </programlisting>
  </example>
 </section>

 <section xml:id="filters.compression">
  <title>Filtres de compression</title>

  <simpara>
   Alors que les <link linkend="wrappers.compression">gestionnaires de compression</link> 
   fournissent un moyen pour générer des fichiers aux formats gzip et bz2, ils ne permettent 
   pas de gérer les protocoles réseaux compressés, ni de commencer avec un flux non
   compressé pour le transformer en flux compressé. Pour faire cela, il faut
   appliquer un filtre de compression.
  </simpara>

  <note>
   <simpara>
    Les filtres de compression <emphasis>ne génèrent pas</emphasis> les en-têtes
    et fins de fichiers, comme le fait l'utilitaire <literal>gzip</literal>.
    Ils ne font que compresser et décompresser des portions de flux de données.
   </simpara>
  </note>

  <simpara>
   <literal>zlib.deflate</literal> (compression) et
   <literal>zlib.inflate</literal> (decompression) sont les implémentations
   des méthodes de compression présentées dans la <link xlink:href="&url.rfc;1951">RFC 1951</link>.
   Le filtre <literal>deflate</literal> prend jusqu'à trois paramètres, passés sous
   la forme de tableau associatif.
   <parameter>level</parameter> spécifie le niveau de compression souhaité,
   de 1 à 9. Plus le niveau est haut, meilleure est la compression, et plus
   cher est le coût de compression. Deux niveaux de compression spéciaux existent :
   0, qui représente l'absence de compression, et -1, qui
   représente le niveau par défaut de la bibliothèque zlib : actuellement, c'est 6.
   <parameter>window</parameter> est la taille du buffer mémoire, en base 2.
   Les valeurs supérieures, jusqu'à 15, soit 32768 octets, donnent de meilleures
   compressions, et les valeurs inférieures, jusqu'à 9, soit 512 octets, occupent
   le moins d'espace en mémoire. Par défaut, <parameter>window</parameter>
   vaut actuellement <constant>15</constant>.
   <parameter>memory</parameter> est une indication du niveau de mémoire nécessaire.
   Les valeurs valides vont de 1, pour l'allocation minimale, à 9, pour une allocation
   maximale. L'allocation de mémoire affecte la vitesse d'exécution, et non pas le
   coût global.
  </simpara>

  <note>
   <simpara>
    Comme le niveau de compression est le paramètre le plus courant, il peut
    aussi être fourni en passant un entier comme paramètre, au lieu d'un tableau.
   </simpara>
  </note>

  <simpara>
   Les filtres de compression zlib.* sont disponibles avec PHP depuis la version
   <literal>5.1.0</literal> si le support <link linkend="ref.zlib">zlib</link> est activé.
   Ils sont également disponibles pour les versions <literal>5.0.x</literal>
   en installant le paquet <link xlink:href="&url.pecl.package;zlib_filter">zlib_filter</link>
   depuis <link xlink:href="&url.pecl;">PECL</link>. Ces filtres ne sont <emphasis>pas</emphasis>
   disponibles en PHP 4.
  </simpara>

  <example>
   <title>
    <literal>zlib.deflate</literal> et
    <literal>zlib.inflate</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "Le texte original est long de " . strlen($original_text) . " octets.\n";

$fp = fopen('test.deflated', 'w');
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($fp, $original_text);
fclose($fp);

echo "Le fichier compressé fait " . filesize('test.deflated') . " octets de long.\n";
echo "Le texte original était :\n";
/* Utilise readfile et zlib.inflate pour décompresser à la volée */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* Affiche :

Le texte original est long de 70 octets
Le fichier compressé fait 56 octets de long.
Le texte original était :
This is a test.
This is only a test.
This is not an important string.

 */
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>
    simple <literal>zlib.deflate</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "Le texte original est long de " . strlen($original_text) . " octets.\n";

$fp = fopen('test.deflated', 'w');
/* Ici, "6" indique le niveau de compression de 6 */
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($fp, $original_text);
fclose($fp);

echo "Le fichier compressé fait " . filesize('test.deflated') . " octets de long.\n";

/* Affiche :

Le texte original est long de 70 octets
Le fichier compressé fait 56 octets de long.

 */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>bzip2.compress</literal> et
   <literal>bzip2.decompress</literal>
   fonctionnent de la même manière que les filtres zlib.
   Le filtre <literal>bzip2.compress</literal> accepte jusqu'à 2 paramètres,
   sous la forme d'un tableau associatif :
   <parameter>blocks</parameter> est une valeur entière, de 1 à 9,
   spécifiant le nombre de blocs de 100 kb de mémoire à allouer à l'espace de travail.
   <parameter>work</parameter> est aussi un entier dont la valeur va de
   0 à 250, et qui indique le niveau d'efforts fournis avec une méthode de
   compression avant de passer à une autre méthode, plus lente. Modifier ce
   paramètre n'a qu'un effet sur la vitesse de compression. Le gain d'espace
   ou la mémoire utilisée restent les mêmes. Un niveau de 0 indique que la
   bibliothèque doit utiliser sa configuration par défaut.
   Le filtre <literal>bzip2.decompress</literal> accepte uniquement un paramètre,
   qui peut être passé sous la forme d'un booléen associé à l'index
   <parameter>small</parameter>.
   <parameter>small</parameter>, lorsqu'il vaut &true;, indique à la bibliothèque
   bzip qu'elle doit faire une décompression en utilisant le moins de mémoire
   possible, aux dépends de la vitesse.
  </simpara>

  <simpara>
   Les filtres bzip2.* ne sont pas inclus dans la distribution PHP depuis la version
   <literal>5.1.0</literal> si le support <link linkend="ref.bzip2">bz2</link> est activé.
   Ils sont également disponibles pour les versions <literal>5.0.x</literal> de PHP en installant
   le paquet <link xlink:href="&url.pecl.package;bz2_filter">bz2_filter</link> depuis
   <link xlink:href="&url.pecl;">PECL</link>. Ces filtres ne sont <emphasis>pas</emphasis>
   disponibles pour PHP 4.
  </simpara>

  <example>
   <title>
    <literal>bzip2.compress</literal> et
    <literal>bzip2.decompress</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "Le texte original est long de " . strlen(LICENSE) . " octets.\n";

$fp = fopen('LICENSE.compressed', 'w');
stream_filter_append($fp, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($fp, file_get_contents('LICENSE'));
fclose($fp);

echo "Le fichier compressé fait " . filesize('LICENSE.compressed') . " octets de long.\n";

/* Affiche :

Le texte original est long de 3288 octets.
Le fichier compressé fait 1488 octets de long.

 */
?>
]]>
   </programlisting>
  </example>
 </section>
 <section xml:id="filters.encryption">
  <title>Filtres de chiffrement</title>

  <simpara>
   <literal>mcrypt.*</literal> et <literal>mdecrypt.*</literal>
   fournissent un système de chiffrement symétrique basé sur 
   libmcrypt. Les deux filtres supportent les mêmes algorithmes
   disponibles avec la bibliothèque <link linkend="ref.mcrypt">mcrypt</link>,
   sous la forme de la directive <literal>mcrypt.ciphername</literal> 
   où <parameter>ciphername</parameter> est le nom du chiffrement qui sera
   passé à <function>mcrypt_module_open</function>. Les cinq paramètres
   suivants sont aussi disponibles : 
  </simpara>

  <para>
   <table>
    <title>Paramètres du filtre mcrypt</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>Paramètre</entry>
       <entry>Obligatoire</entry>
       <entry>Par défaut</entry>
       <entry>Valeurs possibles</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>mode</entry>
       <entry>Optionnel</entry>
       <entry>cbc</entry>
       <entry>cbc, cfb, ecb, nofb, ofb, stream</entry>
      </row>
      <row>
       <entry>algorithms_dir</entry>
       <entry>Optionnel</entry>
       <entry>ini_get('mcrypt.algorithms_dir')</entry>
       <entry>Chemin vers les algorithmes de modules</entry>
      </row>
      <row>
       <entry>modes_dir</entry>
       <entry>Optionnel</entry>
       <entry>ini_get('mcrypt.modes_dir')</entry>
       <entry>Chemin vers les modes de modules</entry>
      </row>
      <row>
       <entry>iv</entry>
       <entry>Obligatoire</entry>
       <entry>N/A</entry>
       <entry>Généralement 8, 16 ou 32 octets de données binaires. Dépend du chiffrement</entry>
      </row>
      <row>
       <entry>key</entry>
       <entry>Obligatoire</entry>
       <entry>N/A</entry>
       <entry>Généralement 8, 16 ou 32 octets de données binaires. Dépend du chiffrement</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <example>
   <title>Chiffrement d'un fichier avec 3DES</title>
   <programlisting role="php">
<![CDATA[
<?php
$passphrase = 'My secret';

/* Transforme un mot de passe humain
 * en une paire iv/clé
 */
$iv = substr(md5('iv'.$passphrase, true), 0, 8);
$key = substr(md5('pass1'.$passphrase, true) . 
               md5('pass2'.$passphrase, true), 0, 24);
$opts = array('iv'=>$iv, 'key'=>$key);

$fp = fopen('secert-file.enc', 'wb');
stream_filter_append($fp, 'mcrypt.tripledes', STREAM_FILTER_WRITE, $opts);
fwrite($fp, 'Secret secret secret data');
fclose($fp);
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Lecture d'un fichier chiffré</title>
   <programlisting role="php">
<![CDATA[
<?php
$passphrase = 'My secret';

/* Transforme un mot de passe humain
 * en une paire iv/clé
 */
$iv = substr(md5('iv'.$passphrase, true), 0, 8);
$key = substr(md5('pass1'.$passphrase, true) . 
               md5('pass2'.$passphrase, true), 0, 24);
$opts = array('iv'=>$iv, 'key'=>$key);

$fp = fopen('secert-file.enc', 'rb');
stream_filter_append($fp, 'mdecrypt.tripledes', STREAM_FILTER_WRITE, $opts);
$data = rtrim(stream_get_contents($fp));
fclose($fp);

echo $data;
?>
]]>
   </programlisting>
  </example>
 </section>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->